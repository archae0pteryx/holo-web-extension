
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	var react_development = {exports: {}};

	/**
	 * @license React
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (module, exports) {

		{
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var ReactVersion = '18.2.0';

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		/**
		 * Keeps track of the current dispatcher.
		 */
		var ReactCurrentDispatcher = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		/**
		 * Keeps track of the current batch's configuration such as how long an update
		 * should suspend for if it needs to.
		 */
		var ReactCurrentBatchConfig = {
		  transition: null
		};

		var ReactCurrentActQueue = {
		  current: null,
		  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
		  isBatchingLegacy: false,
		  didScheduleLegacyUpdate: false
		};

		/**
		 * Keeps track of the current owner.
		 *
		 * The current owner is the component who should own any components that are
		 * currently being constructed.
		 */
		var ReactCurrentOwner = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		var ReactDebugCurrentFrame = {};
		var currentExtraStackFrame = null;
		function setExtraStackFrame(stack) {
		  {
		    currentExtraStackFrame = stack;
		  }
		}

		{
		  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
		    {
		      currentExtraStackFrame = stack;
		    }
		  }; // Stack implementation injected by the current renderer.


		  ReactDebugCurrentFrame.getCurrentStack = null;

		  ReactDebugCurrentFrame.getStackAddendum = function () {
		    var stack = ''; // Add an extra top frame while an element is being validated

		    if (currentExtraStackFrame) {
		      stack += currentExtraStackFrame;
		    } // Delegate to the injected renderer-specific implementation


		    var impl = ReactDebugCurrentFrame.getCurrentStack;

		    if (impl) {
		      stack += impl() || '';
		    }

		    return stack;
		  };
		}

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var ReactSharedInternals = {
		  ReactCurrentDispatcher: ReactCurrentDispatcher,
		  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
		  ReactCurrentOwner: ReactCurrentOwner
		};

		{
		  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
		  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
		}

		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    {
		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      printWarning('warn', format, args);
		    }
		  }
		}
		function error(format) {
		  {
		    {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var didWarnStateUpdateForUnmountedComponent = {};

		function warnNoop(publicInstance, callerName) {
		  {
		    var _constructor = publicInstance.constructor;
		    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
		    var warningKey = componentName + "." + callerName;

		    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
		      return;
		    }

		    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

		    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
		  }
		}
		/**
		 * This is the abstract API for an update queue.
		 */


		var ReactNoopUpdateQueue = {
		  /**
		   * Checks whether or not this composite component is mounted.
		   * @param {ReactClass} publicInstance The instance we want to test.
		   * @return {boolean} True if mounted, false otherwise.
		   * @protected
		   * @final
		   */
		  isMounted: function (publicInstance) {
		    return false;
		  },

		  /**
		   * Forces an update. This should only be invoked when it is known with
		   * certainty that we are **not** in a DOM transaction.
		   *
		   * You may want to call this when you know that some deeper aspect of the
		   * component's state has changed but `setState` was not called.
		   *
		   * This will not invoke `shouldComponentUpdate`, but it will invoke
		   * `componentWillUpdate` and `componentDidUpdate`.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueForceUpdate: function (publicInstance, callback, callerName) {
		    warnNoop(publicInstance, 'forceUpdate');
		  },

		  /**
		   * Replaces all of the state. Always use this or `setState` to mutate state.
		   * You should treat `this.state` as immutable.
		   *
		   * There is no guarantee that `this.state` will be immediately updated, so
		   * accessing `this.state` after calling this method may return the old value.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} completeState Next state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
		    warnNoop(publicInstance, 'replaceState');
		  },

		  /**
		   * Sets a subset of the state. This only exists because _pendingState is
		   * internal. This provides a merging strategy that is not available to deep
		   * properties which is confusing. TODO: Expose pendingState or don't use it
		   * during the merge.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} partialState Next partial state to be merged with state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} Name of the calling function in the public API.
		   * @internal
		   */
		  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
		    warnNoop(publicInstance, 'setState');
		  }
		};

		var assign = Object.assign;

		var emptyObject = {};

		{
		  Object.freeze(emptyObject);
		}
		/**
		 * Base class helpers for the updating state of a component.
		 */


		function Component(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
		  // renderer.

		  this.updater = updater || ReactNoopUpdateQueue;
		}

		Component.prototype.isReactComponent = {};
		/**
		 * Sets a subset of the state. Always use this to mutate
		 * state. You should treat `this.state` as immutable.
		 *
		 * There is no guarantee that `this.state` will be immediately updated, so
		 * accessing `this.state` after calling this method may return the old value.
		 *
		 * There is no guarantee that calls to `setState` will run synchronously,
		 * as they may eventually be batched together.  You can provide an optional
		 * callback that will be executed when the call to setState is actually
		 * completed.
		 *
		 * When a function is provided to setState, it will be called at some point in
		 * the future (not synchronously). It will be called with the up to date
		 * component arguments (state, props, context). These values can be different
		 * from this.* because your function may be called after receiveProps but before
		 * shouldComponentUpdate, and this new state, props, and context will not yet be
		 * assigned to this.
		 *
		 * @param {object|function} partialState Next partial state or function to
		 *        produce next partial state to be merged with current state.
		 * @param {?function} callback Called after state is updated.
		 * @final
		 * @protected
		 */

		Component.prototype.setState = function (partialState, callback) {
		  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
		    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
		  }

		  this.updater.enqueueSetState(this, partialState, callback, 'setState');
		};
		/**
		 * Forces an update. This should only be invoked when it is known with
		 * certainty that we are **not** in a DOM transaction.
		 *
		 * You may want to call this when you know that some deeper aspect of the
		 * component's state has changed but `setState` was not called.
		 *
		 * This will not invoke `shouldComponentUpdate`, but it will invoke
		 * `componentWillUpdate` and `componentDidUpdate`.
		 *
		 * @param {?function} callback Called after update is complete.
		 * @final
		 * @protected
		 */


		Component.prototype.forceUpdate = function (callback) {
		  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
		};
		/**
		 * Deprecated APIs. These APIs used to exist on classic React classes but since
		 * we would like to deprecate them, we're not going to move them over to this
		 * modern base class. Instead, we define a getter that warns if it's accessed.
		 */


		{
		  var deprecatedAPIs = {
		    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
		    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
		  };

		  var defineDeprecationWarning = function (methodName, info) {
		    Object.defineProperty(Component.prototype, methodName, {
		      get: function () {
		        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

		        return undefined;
		      }
		    });
		  };

		  for (var fnName in deprecatedAPIs) {
		    if (deprecatedAPIs.hasOwnProperty(fnName)) {
		      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    }
		  }
		}

		function ComponentDummy() {}

		ComponentDummy.prototype = Component.prototype;
		/**
		 * Convenience component with default shallow equality check for sCU.
		 */

		function PureComponent(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}

		var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
		pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

		assign(pureComponentPrototype, Component.prototype);
		pureComponentPrototype.isPureReactComponent = true;

		// an immutable object with a single mutable value
		function createRef() {
		  var refObject = {
		    current: null
		  };

		  {
		    Object.seal(refObject);
		  }

		  return refObject;
		}

		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		/*
		 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		 *
		 * The functions in this module will throw an easier-to-understand,
		 * easier-to-debug exception with a clear errors message message explaining the
		 * problem. (Instead of a confusing exception thrown inside the implementation
		 * of the `value` object).
		 */
		// $FlowFixMe only called in DEV, so void return is not possible.
		function typeName(value) {
		  {
		    // toStringTag is needed for namespaced types like Temporal.Instant
		    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		    return type;
		  }
		} // $FlowFixMe only called in DEV, so void return is not possible.


		function willCoercionThrow(value) {
		  {
		    try {
		      testStringCoercion(value);
		      return false;
		    } catch (e) {
		      return true;
		    }
		  }
		}

		function testStringCoercion(value) {
		  // If you ended up here by following an exception call stack, here's what's
		  // happened: you supplied an object or symbol value to React (as a prop, key,
		  // DOM attribute, CSS property, string ref, etc.) and when React tried to
		  // coerce it to a string using `'' + value`, an exception was thrown.
		  //
		  // The most common types that will cause this exception are `Symbol` instances
		  // and Temporal objects like `Temporal.Instant`. But any object that has a
		  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		  // exception. (Library authors do this to prevent users from using built-in
		  // numeric operators like `+` or comparison operators like `>=` because custom
		  // methods are needed to perform accurate arithmetic or comparison.)
		  //
		  // To fix the problem, coerce this object or symbol value to a string before
		  // passing it to React. The most reliable way is usually `String(value)`.
		  //
		  // To find which value is throwing, check the browser or debugger console.
		  // Before this exception was thrown, there should be `console.error` output
		  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		  // problem and how that type was used: key, atrribute, input value prop, etc.
		  // In most cases, this console output also shows the component and its
		  // ancestor components where the exception happened.
		  //
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}
		function checkKeyStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var displayName = outerType.displayName;

		  if (displayName) {
		    return displayName;
		  }

		  var functionName = innerType.displayName || innerType.name || '';
		  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		} // Keep in sync with react-reconciler/getComponentNameFromFiber


		function getContextName(type) {
		  return type.displayName || 'Context';
		} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


		function getComponentNameFromType(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';

		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        var outerName = type.displayName || null;

		        if (outerName !== null) {
		          return outerName;
		        }

		        return getComponentNameFromType(type.type) || 'Memo';

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentNameFromType(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }

		      // eslint-disable-next-line no-fallthrough
		    }
		  }

		  return null;
		}

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		var RESERVED_PROPS = {
		  key: true,
		  ref: true,
		  __self: true,
		  __source: true
		};
		var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

		{
		  didWarnAboutStringRefs = {};
		}

		function hasValidRef(config) {
		  {
		    if (hasOwnProperty.call(config, 'ref')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.ref !== undefined;
		}

		function hasValidKey(config) {
		  {
		    if (hasOwnProperty.call(config, 'key')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.key !== undefined;
		}

		function defineKeyPropWarningGetter(props, displayName) {
		  var warnAboutAccessingKey = function () {
		    {
		      if (!specialPropKeyWarningShown) {
		        specialPropKeyWarningShown = true;

		        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingKey.isReactWarning = true;
		  Object.defineProperty(props, 'key', {
		    get: warnAboutAccessingKey,
		    configurable: true
		  });
		}

		function defineRefPropWarningGetter(props, displayName) {
		  var warnAboutAccessingRef = function () {
		    {
		      if (!specialPropRefWarningShown) {
		        specialPropRefWarningShown = true;

		        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingRef.isReactWarning = true;
		  Object.defineProperty(props, 'ref', {
		    get: warnAboutAccessingRef,
		    configurable: true
		  });
		}

		function warnIfStringRefCannotBeAutoConverted(config) {
		  {
		    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
		      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

		      if (!didWarnAboutStringRefs[componentName]) {
		        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

		        didWarnAboutStringRefs[componentName] = true;
		      }
		    }
		  }
		}
		/**
		 * Factory method to create a new React element. This no longer adheres to
		 * the class pattern, so do not use new to call it. Also, instanceof check
		 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		 * if something is a React Element.
		 *
		 * @param {*} type
		 * @param {*} props
		 * @param {*} key
		 * @param {string|object} ref
		 * @param {*} owner
		 * @param {*} self A *temporary* helper to detect places where `this` is
		 * different from the `owner` when React.createElement is called, so that we
		 * can warn. We want to get rid of owner and replace string `ref`s with arrow
		 * functions, and as long as `this` and owner are the same, there will be no
		 * change in behavior.
		 * @param {*} source An annotation object (added by a transpiler or otherwise)
		 * indicating filename, line number, and/or other information.
		 * @internal
		 */


		var ReactElement = function (type, key, ref, self, source, owner, props) {
		  var element = {
		    // This tag allows us to uniquely identify this as a React Element
		    $$typeof: REACT_ELEMENT_TYPE,
		    // Built-in properties that belong on the element
		    type: type,
		    key: key,
		    ref: ref,
		    props: props,
		    // Record the component responsible for creating this element.
		    _owner: owner
		  };

		  {
		    // The validation flag is currently mutative. We put it on
		    // an external backing store so that we can freeze the whole object.
		    // This can be replaced with a WeakMap once they are implemented in
		    // commonly used development environments.
		    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		    // the validation flag non-enumerable (where possible, which should
		    // include every environment we run tests in), so the test framework
		    // ignores it.

		    Object.defineProperty(element._store, 'validated', {
		      configurable: false,
		      enumerable: false,
		      writable: true,
		      value: false
		    }); // self and source are DEV only properties.

		    Object.defineProperty(element, '_self', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: self
		    }); // Two elements created in two different places should be considered
		    // equal for testing purposes and therefore we hide it from enumeration.

		    Object.defineProperty(element, '_source', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: source
		    });

		    if (Object.freeze) {
		      Object.freeze(element.props);
		      Object.freeze(element);
		    }
		  }

		  return element;
		};
		/**
		 * Create and return a new ReactElement of the given type.
		 * See https://reactjs.org/docs/react-api.html#createelement
		 */

		function createElement(type, config, children) {
		  var propName; // Reserved names are extracted

		  var props = {};
		  var key = null;
		  var ref = null;
		  var self = null;
		  var source = null;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      ref = config.ref;

		      {
		        warnIfStringRefCannotBeAutoConverted(config);
		      }
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    }

		    self = config.__self === undefined ? null : config.__self;
		    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        props[propName] = config[propName];
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    {
		      if (Object.freeze) {
		        Object.freeze(childArray);
		      }
		    }

		    props.children = childArray;
		  } // Resolve default props


		  if (type && type.defaultProps) {
		    var defaultProps = type.defaultProps;

		    for (propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }
		  }

		  {
		    if (key || ref) {
		      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		      if (key) {
		        defineKeyPropWarningGetter(props, displayName);
		      }

		      if (ref) {
		        defineRefPropWarningGetter(props, displayName);
		      }
		    }
		  }

		  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		}
		function cloneAndReplaceKey(oldElement, newKey) {
		  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
		  return newElement;
		}
		/**
		 * Clone and return a new ReactElement using element as the starting point.
		 * See https://reactjs.org/docs/react-api.html#cloneelement
		 */

		function cloneElement(element, config, children) {
		  if (element === null || element === undefined) {
		    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
		  }

		  var propName; // Original props are copied

		  var props = assign({}, element.props); // Reserved names are extracted

		  var key = element.key;
		  var ref = element.ref; // Self is preserved since the owner is preserved.

		  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
		  // transpiler, and the original source is probably a better indicator of the
		  // true owner.

		  var source = element._source; // Owner will be preserved, unless ref is overridden

		  var owner = element._owner;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      // Silently steal the ref from the parent.
		      ref = config.ref;
		      owner = ReactCurrentOwner.current;
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    } // Remaining properties override existing props


		    var defaultProps;

		    if (element.type && element.type.defaultProps) {
		      defaultProps = element.type.defaultProps;
		    }

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        if (config[propName] === undefined && defaultProps !== undefined) {
		          // Resolve default props
		          props[propName] = defaultProps[propName];
		        } else {
		          props[propName] = config[propName];
		        }
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    props.children = childArray;
		  }

		  return ReactElement(element.type, key, ref, self, source, owner, props);
		}
		/**
		 * Verifies the object is a ReactElement.
		 * See https://reactjs.org/docs/react-api.html#isvalidelement
		 * @param {?object} object
		 * @return {boolean} True if `object` is a ReactElement.
		 * @final
		 */

		function isValidElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}

		var SEPARATOR = '.';
		var SUBSEPARATOR = ':';
		/**
		 * Escape and wrap key so it is safe to use as a reactid
		 *
		 * @param {string} key to be escaped.
		 * @return {string} the escaped key.
		 */

		function escape(key) {
		  var escapeRegex = /[=:]/g;
		  var escaperLookup = {
		    '=': '=0',
		    ':': '=2'
		  };
		  var escapedString = key.replace(escapeRegex, function (match) {
		    return escaperLookup[match];
		  });
		  return '$' + escapedString;
		}
		/**
		 * TODO: Test that a single child and an array with one item have the same key
		 * pattern.
		 */


		var didWarnAboutMaps = false;
		var userProvidedKeyEscapeRegex = /\/+/g;

		function escapeUserProvidedKey(text) {
		  return text.replace(userProvidedKeyEscapeRegex, '$&/');
		}
		/**
		 * Generate a key string that identifies a element within a set.
		 *
		 * @param {*} element A element that could contain a manual key.
		 * @param {number} index Index that is used if a manual key is not provided.
		 * @return {string}
		 */


		function getElementKey(element, index) {
		  // Do some typechecking here since we call this blindly. We want to ensure
		  // that we don't block potential future ES APIs.
		  if (typeof element === 'object' && element !== null && element.key != null) {
		    // Explicit key
		    {
		      checkKeyStringCoercion(element.key);
		    }

		    return escape('' + element.key);
		  } // Implicit key determined by the index in the set


		  return index.toString(36);
		}

		function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		  var type = typeof children;

		  if (type === 'undefined' || type === 'boolean') {
		    // All of the above are perceived as null.
		    children = null;
		  }

		  var invokeCallback = false;

		  if (children === null) {
		    invokeCallback = true;
		  } else {
		    switch (type) {
		      case 'string':
		      case 'number':
		        invokeCallback = true;
		        break;

		      case 'object':
		        switch (children.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            invokeCallback = true;
		        }

		    }
		  }

		  if (invokeCallback) {
		    var _child = children;
		    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
		    // so that it's consistent if the number of children grows:

		    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

		    if (isArray(mappedChild)) {
		      var escapedChildKey = '';

		      if (childKey != null) {
		        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
		      }

		      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
		        return c;
		      });
		    } else if (mappedChild != null) {
		      if (isValidElement(mappedChild)) {
		        {
		          // The `if` statement here prevents auto-disabling of the safe
		          // coercion ESLint rule, so we must manually disable it below.
		          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
		            checkKeyStringCoercion(mappedChild.key);
		          }
		        }

		        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
		        // traverseAllChildren used to do for objects as children
		        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
		        // eslint-disable-next-line react-internal/safe-string-coercion
		        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
		      }

		      array.push(mappedChild);
		    }

		    return 1;
		  }

		  var child;
		  var nextName;
		  var subtreeCount = 0; // Count of children found in the current subtree.

		  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

		  if (isArray(children)) {
		    for (var i = 0; i < children.length; i++) {
		      child = children[i];
		      nextName = nextNamePrefix + getElementKey(child, i);
		      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		    }
		  } else {
		    var iteratorFn = getIteratorFn(children);

		    if (typeof iteratorFn === 'function') {
		      var iterableChildren = children;

		      {
		        // Warn about using Maps as children
		        if (iteratorFn === iterableChildren.entries) {
		          if (!didWarnAboutMaps) {
		            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		          }

		          didWarnAboutMaps = true;
		        }
		      }

		      var iterator = iteratorFn.call(iterableChildren);
		      var step;
		      var ii = 0;

		      while (!(step = iterator.next()).done) {
		        child = step.value;
		        nextName = nextNamePrefix + getElementKey(child, ii++);
		        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		      }
		    } else if (type === 'object') {
		      // eslint-disable-next-line react-internal/safe-string-coercion
		      var childrenString = String(children);
		      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
		    }
		  }

		  return subtreeCount;
		}

		/**
		 * Maps children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
		 *
		 * The provided mapFunction(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func The map function.
		 * @param {*} context Context for mapFunction.
		 * @return {object} Object containing the ordered map of results.
		 */
		function mapChildren(children, func, context) {
		  if (children == null) {
		    return children;
		  }

		  var result = [];
		  var count = 0;
		  mapIntoArray(children, result, '', '', function (child) {
		    return func.call(context, child, count++);
		  });
		  return result;
		}
		/**
		 * Count the number of children that are typically specified as
		 * `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrencount
		 *
		 * @param {?*} children Children tree container.
		 * @return {number} The number of children.
		 */


		function countChildren(children) {
		  var n = 0;
		  mapChildren(children, function () {
		    n++; // Don't return anything
		  });
		  return n;
		}

		/**
		 * Iterates through children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} forEachFunc
		 * @param {*} forEachContext Context for forEachContext.
		 */
		function forEachChildren(children, forEachFunc, forEachContext) {
		  mapChildren(children, function () {
		    forEachFunc.apply(this, arguments); // Don't return anything.
		  }, forEachContext);
		}
		/**
		 * Flatten a children object (typically specified as `props.children`) and
		 * return an array with appropriately re-keyed children.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
		 */


		function toArray(children) {
		  return mapChildren(children, function (child) {
		    return child;
		  }) || [];
		}
		/**
		 * Returns the first child in a collection of children and verifies that there
		 * is only one child in the collection.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
		 *
		 * The current implementation of this function assumes that a single child gets
		 * passed without a wrapper, but the purpose of this helper function is to
		 * abstract away the particular structure of children.
		 *
		 * @param {?object} children Child collection structure.
		 * @return {ReactElement} The first and only `ReactElement` contained in the
		 * structure.
		 */


		function onlyChild(children) {
		  if (!isValidElement(children)) {
		    throw new Error('React.Children.only expected to receive a single React element child.');
		  }

		  return children;
		}

		function createContext(defaultValue) {
		  // TODO: Second argument used to be an optional `calculateChangedBits`
		  // function. Warn to reserve for future use?
		  var context = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    // As a workaround to support multiple concurrent renderers, we categorize
		    // some renderers as primary and others as secondary. We only expect
		    // there to be two concurrent renderers at most: React Native (primary) and
		    // Fabric (secondary); React DOM (primary) and React ART (secondary).
		    // Secondary renderers store their context values on separate fields.
		    _currentValue: defaultValue,
		    _currentValue2: defaultValue,
		    // Used to track how many concurrent renderers this context currently
		    // supports within in a single renderer. Such as parallel server rendering.
		    _threadCount: 0,
		    // These are circular
		    Provider: null,
		    Consumer: null,
		    // Add these to use same hidden class in VM as ServerContext
		    _defaultValue: null,
		    _globalName: null
		  };
		  context.Provider = {
		    $$typeof: REACT_PROVIDER_TYPE,
		    _context: context
		  };
		  var hasWarnedAboutUsingNestedContextConsumers = false;
		  var hasWarnedAboutUsingConsumerProvider = false;
		  var hasWarnedAboutDisplayNameOnConsumer = false;

		  {
		    // A separate object, but proxies back to the original context object for
		    // backwards compatibility. It has a different $$typeof, so we can properly
		    // warn for the incorrect usage of Context as a Consumer.
		    var Consumer = {
		      $$typeof: REACT_CONTEXT_TYPE,
		      _context: context
		    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

		    Object.defineProperties(Consumer, {
		      Provider: {
		        get: function () {
		          if (!hasWarnedAboutUsingConsumerProvider) {
		            hasWarnedAboutUsingConsumerProvider = true;

		            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
		          }

		          return context.Provider;
		        },
		        set: function (_Provider) {
		          context.Provider = _Provider;
		        }
		      },
		      _currentValue: {
		        get: function () {
		          return context._currentValue;
		        },
		        set: function (_currentValue) {
		          context._currentValue = _currentValue;
		        }
		      },
		      _currentValue2: {
		        get: function () {
		          return context._currentValue2;
		        },
		        set: function (_currentValue2) {
		          context._currentValue2 = _currentValue2;
		        }
		      },
		      _threadCount: {
		        get: function () {
		          return context._threadCount;
		        },
		        set: function (_threadCount) {
		          context._threadCount = _threadCount;
		        }
		      },
		      Consumer: {
		        get: function () {
		          if (!hasWarnedAboutUsingNestedContextConsumers) {
		            hasWarnedAboutUsingNestedContextConsumers = true;

		            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		          }

		          return context.Consumer;
		        }
		      },
		      displayName: {
		        get: function () {
		          return context.displayName;
		        },
		        set: function (displayName) {
		          if (!hasWarnedAboutDisplayNameOnConsumer) {
		            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

		            hasWarnedAboutDisplayNameOnConsumer = true;
		          }
		        }
		      }
		    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

		    context.Consumer = Consumer;
		  }

		  {
		    context._currentRenderer = null;
		    context._currentRenderer2 = null;
		  }

		  return context;
		}

		var Uninitialized = -1;
		var Pending = 0;
		var Resolved = 1;
		var Rejected = 2;

		function lazyInitializer(payload) {
		  if (payload._status === Uninitialized) {
		    var ctor = payload._result;
		    var thenable = ctor(); // Transition to the next state.
		    // This might throw either because it's missing or throws. If so, we treat it
		    // as still uninitialized and try again next time. Which is the same as what
		    // happens if the ctor or any wrappers processing the ctor throws. This might
		    // end up fixing it if the resolution was a concurrency bug.

		    thenable.then(function (moduleObject) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var resolved = payload;
		        resolved._status = Resolved;
		        resolved._result = moduleObject;
		      }
		    }, function (error) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var rejected = payload;
		        rejected._status = Rejected;
		        rejected._result = error;
		      }
		    });

		    if (payload._status === Uninitialized) {
		      // In case, we're still uninitialized, then we're waiting for the thenable
		      // to resolve. Set it as pending in the meantime.
		      var pending = payload;
		      pending._status = Pending;
		      pending._result = thenable;
		    }
		  }

		  if (payload._status === Resolved) {
		    var moduleObject = payload._result;

		    {
		      if (moduleObject === undefined) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
		      }
		    }

		    {
		      if (!('default' in moduleObject)) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
		      }
		    }

		    return moduleObject.default;
		  } else {
		    throw payload._result;
		  }
		}

		function lazy(ctor) {
		  var payload = {
		    // We use these fields to store the result.
		    _status: Uninitialized,
		    _result: ctor
		  };
		  var lazyType = {
		    $$typeof: REACT_LAZY_TYPE,
		    _payload: payload,
		    _init: lazyInitializer
		  };

		  {
		    // In production, this would just set it on the object.
		    var defaultProps;
		    var propTypes; // $FlowFixMe

		    Object.defineProperties(lazyType, {
		      defaultProps: {
		        configurable: true,
		        get: function () {
		          return defaultProps;
		        },
		        set: function (newDefaultProps) {
		          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          defaultProps = newDefaultProps; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'defaultProps', {
		            enumerable: true
		          });
		        }
		      },
		      propTypes: {
		        configurable: true,
		        get: function () {
		          return propTypes;
		        },
		        set: function (newPropTypes) {
		          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          propTypes = newPropTypes; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'propTypes', {
		            enumerable: true
		          });
		        }
		      }
		    });
		  }

		  return lazyType;
		}

		function forwardRef(render) {
		  {
		    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
		      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
		    } else if (typeof render !== 'function') {
		      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
		    } else {
		      if (render.length !== 0 && render.length !== 2) {
		        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
		      }
		    }

		    if (render != null) {
		      if (render.defaultProps != null || render.propTypes != null) {
		        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
		      }
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_FORWARD_REF_TYPE,
		    render: render
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.forwardRef((props, ref) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!render.name && !render.displayName) {
		          render.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function memo(type, compare) {
		  {
		    if (!isValidElementType(type)) {
		      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_MEMO_TYPE,
		    type: type,
		    compare: compare === undefined ? null : compare
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.memo((props) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!type.name && !type.displayName) {
		          type.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		function resolveDispatcher() {
		  var dispatcher = ReactCurrentDispatcher.current;

		  {
		    if (dispatcher === null) {
		      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
		    }
		  } // Will result in a null access error if accessed outside render phase. We
		  // intentionally don't throw our own error because this is in a hot path.
		  // Also helps ensure this is inlined.


		  return dispatcher;
		}
		function useContext(Context) {
		  var dispatcher = resolveDispatcher();

		  {
		    // TODO: add a more generic warning for invalid values.
		    if (Context._context !== undefined) {
		      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
		      // and nobody should be using this in existing code.

		      if (realContext.Consumer === Context) {
		        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
		      } else if (realContext.Provider === Context) {
		        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
		      }
		    }
		  }

		  return dispatcher.useContext(Context);
		}
		function useState(initialState) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useState(initialState);
		}
		function useReducer(reducer, initialArg, init) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useReducer(reducer, initialArg, init);
		}
		function useRef(initialValue) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useRef(initialValue);
		}
		function useEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useEffect(create, deps);
		}
		function useInsertionEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useInsertionEffect(create, deps);
		}
		function useLayoutEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useLayoutEffect(create, deps);
		}
		function useCallback(callback, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useCallback(callback, deps);
		}
		function useMemo(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useMemo(create, deps);
		}
		function useImperativeHandle(ref, create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useImperativeHandle(ref, create, deps);
		}
		function useDebugValue(value, formatterFn) {
		  {
		    var dispatcher = resolveDispatcher();
		    return dispatcher.useDebugValue(value, formatterFn);
		  }
		}
		function useTransition() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useTransition();
		}
		function useDeferredValue(value) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useDeferredValue(value);
		}
		function useId() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useId();
		}
		function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		}

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: assign({}, props, {
		          value: prevLog
		        }),
		        info: assign({}, props, {
		          value: prevInfo
		        }),
		        warn: assign({}, props, {
		          value: prevWarn
		        }),
		        error: assign({}, props, {
		          value: prevError
		        }),
		        group: assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if ( !fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher$1.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                // but we have a user-provided "displayName"
		                // splice it in to make the stack more readable.


		                if (fn.displayName && _frame.includes('<anonymous>')) {
		                  _frame = _frame.replace('<anonymous>', fn.displayName);
		                }

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher$1.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            // eslint-disable-next-line react-internal/prod-error-codes
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		function setCurrentlyValidatingElement$1(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      setExtraStackFrame(stack);
		    } else {
		      setExtraStackFrame(null);
		    }
		  }
		}

		var propTypesMisspellWarningShown;

		{
		  propTypesMisspellWarningShown = false;
		}

		function getDeclarationErrorAddendum() {
		  if (ReactCurrentOwner.current) {
		    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

		    if (name) {
		      return '\n\nCheck the render method of `' + name + '`.';
		    }
		  }

		  return '';
		}

		function getSourceInfoErrorAddendum(source) {
		  if (source !== undefined) {
		    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		    var lineNumber = source.lineNumber;
		    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		  }

		  return '';
		}

		function getSourceInfoErrorAddendumForProps(elementProps) {
		  if (elementProps !== null && elementProps !== undefined) {
		    return getSourceInfoErrorAddendum(elementProps.__source);
		  }

		  return '';
		}
		/**
		 * Warn if there's no key explicitly set on dynamic arrays of children or
		 * object keys are not valid. This allows us to keep track of children between
		 * updates.
		 */


		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
		  var info = getDeclarationErrorAddendum();

		  if (!info) {
		    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		    if (parentName) {
		      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		    }
		  }

		  return info;
		}
		/**
		 * Warn if the element doesn't have an explicit key assigned to it.
		 * This element is in an array. The array could grow and shrink or be
		 * reordered. All children that haven't already been validated are required to
		 * have a "key" property assigned to it. Error statuses are cached so a warning
		 * will only be shown once.
		 *
		 * @internal
		 * @param {ReactElement} element Element that requires a key.
		 * @param {*} parentType element's parent's type.
		 */


		function validateExplicitKey(element, parentType) {
		  if (!element._store || element._store.validated || element.key != null) {
		    return;
		  }

		  element._store.validated = true;
		  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		    return;
		  }

		  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		  // property, it may be the creator of the child that's responsible for
		  // assigning it a key.

		  var childOwner = '';

		  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
		    // Give the component that originally created this child.
		    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
		  }

		  {
		    setCurrentlyValidatingElement$1(element);

		    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

		    setCurrentlyValidatingElement$1(null);
		  }
		}
		/**
		 * Ensure that every element either is passed in a static location, in an
		 * array with an explicit keys property defined, or in an object literal
		 * with valid key property.
		 *
		 * @internal
		 * @param {ReactNode} node Statically passed child of any type.
		 * @param {*} parentType node's parent's type.
		 */


		function validateChildKeys(node, parentType) {
		  if (typeof node !== 'object') {
		    return;
		  }

		  if (isArray(node)) {
		    for (var i = 0; i < node.length; i++) {
		      var child = node[i];

		      if (isValidElement(child)) {
		        validateExplicitKey(child, parentType);
		      }
		    }
		  } else if (isValidElement(node)) {
		    // This element was passed in a valid location.
		    if (node._store) {
		      node._store.validated = true;
		    }
		  } else if (node) {
		    var iteratorFn = getIteratorFn(node);

		    if (typeof iteratorFn === 'function') {
		      // Entry iterators used to provide implicit keys,
		      // but now we print a separate warning for them later.
		      if (iteratorFn !== node.entries) {
		        var iterator = iteratorFn.call(node);
		        var step;

		        while (!(step = iterator.next()).done) {
		          if (isValidElement(step.value)) {
		            validateExplicitKey(step.value, parentType);
		          }
		        }
		      }
		    }
		  }
		}
		/**
		 * Given an element, validate that its props follow the propTypes definition,
		 * provided by the type.
		 *
		 * @param {ReactElement} element
		 */


		function validatePropTypes(element) {
		  {
		    var type = element.type;

		    if (type === null || type === undefined || typeof type === 'string') {
		      return;
		    }

		    var propTypes;

		    if (typeof type === 'function') {
		      propTypes = type.propTypes;
		    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		    // Inner props are checked in the reconciler.
		    type.$$typeof === REACT_MEMO_TYPE)) {
		      propTypes = type.propTypes;
		    } else {
		      return;
		    }

		    if (propTypes) {
		      // Intentionally inside to avoid triggering lazy initializers:
		      var name = getComponentNameFromType(type);
		      checkPropTypes(propTypes, element.props, 'prop', name, element);
		    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		      var _name = getComponentNameFromType(type);

		      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		    }

		    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		    }
		  }
		}
		/**
		 * Given a fragment, validate that it can only be provided with fragment props
		 * @param {ReactElement} fragment
		 */


		function validateFragmentProps(fragment) {
		  {
		    var keys = Object.keys(fragment.props);

		    for (var i = 0; i < keys.length; i++) {
		      var key = keys[i];

		      if (key !== 'children' && key !== 'key') {
		        setCurrentlyValidatingElement$1(fragment);

		        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

		        setCurrentlyValidatingElement$1(null);
		        break;
		      }
		    }

		    if (fragment.ref !== null) {
		      setCurrentlyValidatingElement$1(fragment);

		      error('Invalid attribute `ref` supplied to `React.Fragment`.');

		      setCurrentlyValidatingElement$1(null);
		    }
		  }
		}
		function createElementWithValidation(type, props, children) {
		  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		  // succeed and there will likely be errors in render.

		  if (!validType) {
		    var info = '';

		    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		    }

		    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

		    if (sourceInfo) {
		      info += sourceInfo;
		    } else {
		      info += getDeclarationErrorAddendum();
		    }

		    var typeString;

		    if (type === null) {
		      typeString = 'null';
		    } else if (isArray(type)) {
		      typeString = 'array';
		    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
		      info = ' Did you accidentally export a JSX literal instead of a component?';
		    } else {
		      typeString = typeof type;
		    }

		    {
		      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		    }
		  }

		  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
		  // TODO: Drop this when these are no longer allowed as the type argument.

		  if (element == null) {
		    return element;
		  } // Skip key warning if the type isn't valid since our key validation logic
		  // doesn't expect a non-string/function type and can throw confusing errors.
		  // We don't want exception behavior to differ between dev and prod.
		  // (Rendering will throw with a helpful message and as soon as the type is
		  // fixed, the key warnings will appear.)


		  if (validType) {
		    for (var i = 2; i < arguments.length; i++) {
		      validateChildKeys(arguments[i], type);
		    }
		  }

		  if (type === REACT_FRAGMENT_TYPE) {
		    validateFragmentProps(element);
		  } else {
		    validatePropTypes(element);
		  }

		  return element;
		}
		var didWarnAboutDeprecatedCreateFactory = false;
		function createFactoryWithValidation(type) {
		  var validatedFactory = createElementWithValidation.bind(null, type);
		  validatedFactory.type = type;

		  {
		    if (!didWarnAboutDeprecatedCreateFactory) {
		      didWarnAboutDeprecatedCreateFactory = true;

		      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
		    } // Legacy hook: remove it


		    Object.defineProperty(validatedFactory, 'type', {
		      enumerable: false,
		      get: function () {
		        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

		        Object.defineProperty(this, 'type', {
		          value: type
		        });
		        return type;
		      }
		    });
		  }

		  return validatedFactory;
		}
		function cloneElementWithValidation(element, props, children) {
		  var newElement = cloneElement.apply(this, arguments);

		  for (var i = 2; i < arguments.length; i++) {
		    validateChildKeys(arguments[i], newElement.type);
		  }

		  validatePropTypes(newElement);
		  return newElement;
		}

		function startTransition(scope, options) {
		  var prevTransition = ReactCurrentBatchConfig.transition;
		  ReactCurrentBatchConfig.transition = {};
		  var currentTransition = ReactCurrentBatchConfig.transition;

		  {
		    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
		  }

		  try {
		    scope();
		  } finally {
		    ReactCurrentBatchConfig.transition = prevTransition;

		    {
		      if (prevTransition === null && currentTransition._updatedFibers) {
		        var updatedFibersCount = currentTransition._updatedFibers.size;

		        if (updatedFibersCount > 10) {
		          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
		        }

		        currentTransition._updatedFibers.clear();
		      }
		    }
		  }
		}

		var didWarnAboutMessageChannel = false;
		var enqueueTaskImpl = null;
		function enqueueTask(task) {
		  if (enqueueTaskImpl === null) {
		    try {
		      // read require off the module object to get around the bundlers.
		      // we don't want them to detect a require and bundle a Node polyfill.
		      var requireString = ('require' + Math.random()).slice(0, 7);
		      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
		      // version of setImmediate, bypassing fake timers if any.

		      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
		    } catch (_err) {
		      // we're in a browser
		      // we can't use regular timers because they may still be faked
		      // so we try MessageChannel+postMessage instead
		      enqueueTaskImpl = function (callback) {
		        {
		          if (didWarnAboutMessageChannel === false) {
		            didWarnAboutMessageChannel = true;

		            if (typeof MessageChannel === 'undefined') {
		              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
		            }
		          }
		        }

		        var channel = new MessageChannel();
		        channel.port1.onmessage = callback;
		        channel.port2.postMessage(undefined);
		      };
		    }
		  }

		  return enqueueTaskImpl(task);
		}

		var actScopeDepth = 0;
		var didWarnNoAwaitAct = false;
		function act(callback) {
		  {
		    // `act` calls can be nested, so we track the depth. This represents the
		    // number of `act` scopes on the stack.
		    var prevActScopeDepth = actScopeDepth;
		    actScopeDepth++;

		    if (ReactCurrentActQueue.current === null) {
		      // This is the outermost `act` scope. Initialize the queue. The reconciler
		      // will detect the queue and use it instead of Scheduler.
		      ReactCurrentActQueue.current = [];
		    }

		    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
		    var result;

		    try {
		      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
		      // set to `true` while the given callback is executed, not for updates
		      // triggered during an async event, because this is how the legacy
		      // implementation of `act` behaved.
		      ReactCurrentActQueue.isBatchingLegacy = true;
		      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
		      // which flushed updates immediately after the scope function exits, even
		      // if it's an async function.

		      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
		        var queue = ReactCurrentActQueue.current;

		        if (queue !== null) {
		          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
		          flushActQueue(queue);
		        }
		      }
		    } catch (error) {
		      popActScope(prevActScopeDepth);
		      throw error;
		    } finally {
		      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
		    }

		    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
		      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
		      // for it to resolve before exiting the current scope.

		      var wasAwaited = false;
		      var thenable = {
		        then: function (resolve, reject) {
		          wasAwaited = true;
		          thenableResult.then(function (returnValue) {
		            popActScope(prevActScopeDepth);

		            if (actScopeDepth === 0) {
		              // We've exited the outermost act scope. Recursively flush the
		              // queue until there's no remaining work.
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }, function (error) {
		            // The callback threw an error.
		            popActScope(prevActScopeDepth);
		            reject(error);
		          });
		        }
		      };

		      {
		        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
		          // eslint-disable-next-line no-undef
		          Promise.resolve().then(function () {}).then(function () {
		            if (!wasAwaited) {
		              didWarnNoAwaitAct = true;

		              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
		            }
		          });
		        }
		      }

		      return thenable;
		    } else {
		      var returnValue = result; // The callback is not an async function. Exit the current scope
		      // immediately, without awaiting.

		      popActScope(prevActScopeDepth);

		      if (actScopeDepth === 0) {
		        // Exiting the outermost act scope. Flush the queue.
		        var _queue = ReactCurrentActQueue.current;

		        if (_queue !== null) {
		          flushActQueue(_queue);
		          ReactCurrentActQueue.current = null;
		        } // Return a thenable. If the user awaits it, we'll flush again in
		        // case additional work was scheduled by a microtask.


		        var _thenable = {
		          then: function (resolve, reject) {
		            // Confirm we haven't re-entered another `act` scope, in case
		            // the user does something weird like await the thenable
		            // multiple times.
		            if (ReactCurrentActQueue.current === null) {
		              // Recursively flush the queue until there's no remaining work.
		              ReactCurrentActQueue.current = [];
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }
		        };
		        return _thenable;
		      } else {
		        // Since we're inside a nested `act` scope, the returned thenable
		        // immediately resolves. The outer scope will flush the queue.
		        var _thenable2 = {
		          then: function (resolve, reject) {
		            resolve(returnValue);
		          }
		        };
		        return _thenable2;
		      }
		    }
		  }
		}

		function popActScope(prevActScopeDepth) {
		  {
		    if (prevActScopeDepth !== actScopeDepth - 1) {
		      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
		    }

		    actScopeDepth = prevActScopeDepth;
		  }
		}

		function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
		  {
		    var queue = ReactCurrentActQueue.current;

		    if (queue !== null) {
		      try {
		        flushActQueue(queue);
		        enqueueTask(function () {
		          if (queue.length === 0) {
		            // No additional work was scheduled. Finish.
		            ReactCurrentActQueue.current = null;
		            resolve(returnValue);
		          } else {
		            // Keep flushing work until there's none left.
		            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		          }
		        });
		      } catch (error) {
		        reject(error);
		      }
		    } else {
		      resolve(returnValue);
		    }
		  }
		}

		var isFlushing = false;

		function flushActQueue(queue) {
		  {
		    if (!isFlushing) {
		      // Prevent re-entrance.
		      isFlushing = true;
		      var i = 0;

		      try {
		        for (; i < queue.length; i++) {
		          var callback = queue[i];

		          do {
		            callback = callback(true);
		          } while (callback !== null);
		        }

		        queue.length = 0;
		      } catch (error) {
		        // If something throws, leave the remaining callbacks on the queue.
		        queue = queue.slice(i + 1);
		        throw error;
		      } finally {
		        isFlushing = false;
		      }
		    }
		  }
		}

		var createElement$1 =  createElementWithValidation ;
		var cloneElement$1 =  cloneElementWithValidation ;
		var createFactory =  createFactoryWithValidation ;
		var Children = {
		  map: mapChildren,
		  forEach: forEachChildren,
		  count: countChildren,
		  toArray: toArray,
		  only: onlyChild
		};

		exports.Children = Children;
		exports.Component = Component;
		exports.Fragment = REACT_FRAGMENT_TYPE;
		exports.Profiler = REACT_PROFILER_TYPE;
		exports.PureComponent = PureComponent;
		exports.StrictMode = REACT_STRICT_MODE_TYPE;
		exports.Suspense = REACT_SUSPENSE_TYPE;
		exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
		exports.cloneElement = cloneElement$1;
		exports.createContext = createContext;
		exports.createElement = createElement$1;
		exports.createFactory = createFactory;
		exports.createRef = createRef;
		exports.forwardRef = forwardRef;
		exports.isValidElement = isValidElement;
		exports.lazy = lazy;
		exports.memo = memo;
		exports.startTransition = startTransition;
		exports.unstable_act = act;
		exports.useCallback = useCallback;
		exports.useContext = useContext;
		exports.useDebugValue = useDebugValue;
		exports.useDeferredValue = useDeferredValue;
		exports.useEffect = useEffect;
		exports.useId = useId;
		exports.useImperativeHandle = useImperativeHandle;
		exports.useInsertionEffect = useInsertionEffect;
		exports.useLayoutEffect = useLayoutEffect;
		exports.useMemo = useMemo;
		exports.useReducer = useReducer;
		exports.useRef = useRef;
		exports.useState = useState;
		exports.useSyncExternalStore = useSyncExternalStore;
		exports.useTransition = useTransition;
		exports.version = ReactVersion;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		}
	} (react_development, react_development.exports));

	(function (module) {

		{
		  module.exports = react_development.exports;
		}
	} (react));

	var React = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

	var React$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		'default': React
	}, [react.exports]);

	var reactDom = {exports: {}};

	var reactDom_development = {};

	var scheduler = {exports: {}};

	var scheduler_development = {};

	/**
	 * @license React
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		{
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var enableSchedulerDebugging = false;
		var enableProfiling = false;
		var frameYieldMs = 5;

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  return heap.length === 0 ? null : heap[0];
		}
		function pop(heap) {
		  if (heap.length === 0) {
		    return null;
		  }

		  var first = heap[0];
		  var last = heap.pop();

		  if (last !== first) {
		    heap[0] = last;
		    siftDown(heap, last, 0);
		  }

		  return first;
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (index > 0) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;
		  var halfLength = length >>> 1;

		  while (index < halfLength) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (compare(left, node) < 0) {
		      if (rightIndex < length && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (rightIndex < length && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		function markTaskErrored(task, ms) {
		}

		/* eslint-disable no-var */

		var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

		if (hasPerformanceNow) {
		  var localPerformance = performance;

		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date;
		  var initialTime = localDate.now();

		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111


		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

		var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
		var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
		var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

		typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    var currentTime; if (enableProfiling) ; else {
		      // No catch in prod code path.
		      return workLoop(hasTimeRemaining, initialTime);
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (typeof callback === 'function') {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		      } else {

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }
		  } else {
		    startTime = currentTime;
		  }

		  var timeout;

		  switch (priorityLevel) {
		    case ImmediatePriority:
		      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
		      break;

		    case UserBlockingPriority:
		      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
		      break;

		    case IdlePriority:
		      timeout = IDLE_PRIORITY_TIMEOUT;
		      break;

		    case LowPriority:
		      timeout = LOW_PRIORITY_TIMEOUT;
		      break;

		    case NormalPriority:
		    default:
		      timeout = NORMAL_PRIORITY_TIMEOUT;
		      break;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		var isMessageLoopRunning = false;
		var scheduledHostCallback = null;
		var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		// thread, like user events. By default, it yields multiple times per frame.
		// It does not attempt to align with frame boundaries, since most tasks don't
		// need to be frame aligned; for those that do, use requestAnimationFrame.

		var frameInterval = frameYieldMs;
		var startTime = -1;

		function shouldYieldToHost() {
		  var timeElapsed = exports.unstable_now() - startTime;

		  if (timeElapsed < frameInterval) {
		    // The main thread has only been blocked for a really short amount of time;
		    // smaller than a single frame. Don't yield yet.
		    return false;
		  } // The main thread has been blocked for a non-negligible amount of time. We


		  return true;
		}

		function requestPaint() {

		}

		function forceFrameRate(fps) {
		  if (fps < 0 || fps > 125) {
		    // Using console['error'] to evade Babel and ESLint
		    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
		    return;
		  }

		  if (fps > 0) {
		    frameInterval = Math.floor(1000 / fps);
		  } else {
		    // reset the framerate
		    frameInterval = frameYieldMs;
		  }
		}

		var performWorkUntilDeadline = function () {
		  if (scheduledHostCallback !== null) {
		    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
		    // has been blocked.

		    startTime = currentTime;
		    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
		    // error can be observed.
		    //
		    // Intentionally not using a try-catch, since that makes some debugging
		    // techniques harder. Instead, if `scheduledHostCallback` errors, then
		    // `hasMoreWork` will remain true, and we'll continue the work loop.

		    var hasMoreWork = true;

		    try {
		      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
		    } finally {
		      if (hasMoreWork) {
		        // If there's more work, schedule the next message event at the end
		        // of the preceding one.
		        schedulePerformWorkUntilDeadline();
		      } else {
		        isMessageLoopRunning = false;
		        scheduledHostCallback = null;
		      }
		    }
		  } else {
		    isMessageLoopRunning = false;
		  } // Yielding to the browser will give it a chance to paint, so we can
		};

		var schedulePerformWorkUntilDeadline;

		if (typeof localSetImmediate === 'function') {
		  // Node.js and old IE.
		  // There's a few reasons for why we prefer setImmediate.
		  //
		  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
		  // (Even though this is a DOM fork of the Scheduler, you could get here
		  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
		  // https://github.com/facebook/react/issues/20756
		  //
		  // But also, it runs earlier which is the semantic we want.
		  // If other browsers ever implement it, it's better to use it.
		  // Although both of these would be inferior to native scheduling.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		} else if (typeof MessageChannel !== 'undefined') {
		  // DOM and Worker environments.
		  // We prefer MessageChannel because of the 4ms setTimeout clamping.
		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else {
		  // We should only fallback here in non-browser environments.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		}

		function requestHostCallback(callback) {
		  scheduledHostCallback = callback;

		  if (!isMessageLoopRunning) {
		    isMessageLoopRunning = true;
		    schedulePerformWorkUntilDeadline();
		  }
		}

		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}

		function cancelHostTimeout() {
		  localClearTimeout(taskTimeoutID);
		  taskTimeoutID = -1;
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  null;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_forceFrameRate = forceFrameRate;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		}
	} (scheduler_development));

	(function (module) {

		{
		  module.exports = scheduler_development;
		}
	} (scheduler));

	/**
	 * @license React
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var React = react.exports;
	var Scheduler = scheduler.exports;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var suppressWarning = false;
	function setSuppressWarning(newSuppressWarning) {
	  {
	    suppressWarning = newSuppressWarning;
	  }
	} // In DEV, calls to console.warn and console.error get replaced
	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      printWarning('warn', format, args);
	    }
	  }
	}
	function error(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var ScopeComponent = 21;
	var OffscreenComponent = 22;
	var LegacyHiddenComponent = 23;
	var CacheComponent = 24;
	var TracingMarkerComponent = 25;

	// -----------------------------------------------------------------------------

	var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
	// the react-reconciler package.

	var enableNewReconciler = false; // Support legacy Primer support on internal FB www

	var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

	var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
	// React DOM Chopping Block
	//
	// Similar to main Chopping Block but only flags related to React DOM. These are
	// grouped because we will likely batch all of them into a single major release.
	// -----------------------------------------------------------------------------
	// Disable support for comment nodes as React DOM containers. Already disabled
	// in open source, but www codebase still relies on it. Need to remove.

	var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
	// and client rendering, mostly to allow JSX attributes to apply to the custom
	// element's object properties instead of only HTML attributes.
	// https://github.com/facebook/react/issues/11347

	var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
	var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
	// Debugging and DevTools
	// -----------------------------------------------------------------------------
	// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
	// for an experimental timeline tool.

	var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

	var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

	var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

	var allNativeEvents = new Set();
	/**
	 * Mapping from registration name to event name
	 */


	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	function registerTwoPhaseEvent(registrationName, dependencies) {
	  registerDirectEvent(registrationName, dependencies);
	  registerDirectEvent(registrationName + 'Capture', dependencies);
	}
	function registerDirectEvent(registrationName, dependencies) {
	  {
	    if (registrationNameDependencies[registrationName]) {
	      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
	    }
	  }

	  registrationNameDependencies[registrationName] = dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }

	  for (var i = 0; i < dependencies.length; i++) {
	    allNativeEvents.add(dependencies[i]);
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}

	function checkAttributeStringCoercion(value, attributeName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkPropStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkCSSPropertyStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkHtmlStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkFormFieldValueStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the filter are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {

	    return false;
	  }

	  if (propertyInfo !== null) {

	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	  this.removeEmptyString = removeEmptyString;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML attribute filter.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
	  false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
	false);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true, // sanitizeURL
	  true);
	});

	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */

	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      // This check protects multiple uses of `expected`, which is why the
	      // react-internal/safe-string-coercion rule is disabled in several spots
	      // below.
	      {
	        checkAttributeStringCoercion(expected, name);
	      }

	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        // eslint-disable-next-line react-internal/safe-string-coercion
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          } // eslint-disable-next-line react-internal/safe-string-coercion


	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected, isCustomComponentTag) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    {
	      checkAttributeStringCoercion(expected, name);
	    }

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        {
	          checkAttributeStringCoercion(value, name);
	        }

	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        {
	          checkAttributeStringCoercion(value, attributeName);
	        }

	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_SCOPE_TYPE = Symbol.for('react.scope');
	var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
	var REACT_CACHE_TYPE = Symbol.for('react.cache');
	var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}

	function describeClassComponentFrame(ctor, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(ctor, true);
	  }
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	function describeFiber(fiber) {
	  fiber._debugOwner ? fiber._debugOwner.type : null ;
	  fiber._debugSource ;

	  switch (fiber.tag) {
	    case HostComponent:
	      return describeBuiltInComponentFrame(fiber.type);

	    case LazyComponent:
	      return describeBuiltInComponentFrame('Lazy');

	    case SuspenseComponent:
	      return describeBuiltInComponentFrame('Suspense');

	    case SuspenseListComponent:
	      return describeBuiltInComponentFrame('SuspenseList');

	    case FunctionComponent:
	    case IndeterminateComponent:
	    case SimpleMemoComponent:
	      return describeFunctionComponentFrame(fiber.type);

	    case ForwardRef:
	      return describeFunctionComponentFrame(fiber.type.render);

	    case ClassComponent:
	      return describeClassComponentFrame(fiber.type);

	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = '';
	    var node = workInProgress;

	    do {
	      info += describeFiber(node);
	      node = node.return;
	    } while (node);

	    return info;
	  } catch (x) {
	    return '\nError generating stack: ' + x.message + '\n' + x.stack;
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	} // Keep in sync with shared/getComponentNameFromType


	function getContextName$1(type) {
	  return type.displayName || 'Context';
	}

	function getComponentNameFromFiber(fiber) {
	  var tag = fiber.tag,
	      type = fiber.type;

	  switch (tag) {
	    case CacheComponent:
	      return 'Cache';

	    case ContextConsumer:
	      var context = type;
	      return getContextName$1(context) + '.Consumer';

	    case ContextProvider:
	      var provider = type;
	      return getContextName$1(provider._context) + '.Provider';

	    case DehydratedFragment:
	      return 'DehydratedFragment';

	    case ForwardRef:
	      return getWrappedName$1(type, type.render, 'ForwardRef');

	    case Fragment:
	      return 'Fragment';

	    case HostComponent:
	      // Host component type is the display name (e.g. "div", "View")
	      return type;

	    case HostPortal:
	      return 'Portal';

	    case HostRoot:
	      return 'Root';

	    case HostText:
	      return 'Text';

	    case LazyComponent:
	      // Name comes from the type in this case; we don't have a tag.
	      return getComponentNameFromType(type);

	    case Mode:
	      if (type === REACT_STRICT_MODE_TYPE) {
	        // Don't be less specific than shared/getComponentNameFromType
	        return 'StrictMode';
	      }

	      return 'Mode';

	    case OffscreenComponent:
	      return 'Offscreen';

	    case Profiler:
	      return 'Profiler';

	    case ScopeComponent:
	      return 'Scope';

	    case SuspenseComponent:
	      return 'Suspense';

	    case SuspenseListComponent:
	      return 'SuspenseList';

	    case TracingMarkerComponent:
	      return 'TracingMarker';
	    // The display name for this tags come from the user-provided type:

	    case ClassComponent:
	    case FunctionComponent:
	    case IncompleteClassComponent:
	    case IndeterminateComponent:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      if (typeof type === 'function') {
	        return type.displayName || type.name || null;
	      }

	      if (typeof type === 'string') {
	        return type;
	      }

	      break;

	  }

	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentNameFromFiber(owner);
	    }
	  }

	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function getCurrentFiber() {
	  {
	    return current;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  // The coercion safety check is performed in getToStringValue().
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return value;

	    case 'object':
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};
	function checkControlledValueProps(tagName, props) {
	  {
	    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
	      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }

	    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
	      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  }
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  {
	    checkFormFieldValueStringCoercion(node[valueField]);
	  }

	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;
	  var hostProps = assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });
	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    checkControlledValueProps('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    {
	      checkAttributeStringCoercion(name, 'name');
	    }

	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode(otherNode);

	      if (!otherProps) {
	        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;
	var didWarnInvalidInnerHTML = false;
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // If a value is not provided, then the children must be simple.
	    if (props.value == null) {
	      if (typeof props.children === 'object' && props.children !== null) {
	        React.Children.forEach(props.children, function (child) {
	          if (child == null) {
	            return;
	          }

	          if (typeof child === 'string' || typeof child === 'number') {
	            return;
	          }

	          if (!didWarnInvalidChild) {
	            didWarnInvalidChild = true;

	            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
	          }
	        });
	      } else if (props.dangerouslySetInnerHTML != null) {
	        if (!didWarnInvalidInnerHTML) {
	          didWarnInvalidInnerHTML = true;

	          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
	        }
	      }
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    checkControlledValueProps('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var propNameIsArray = isArray(props[propName]);

	      if (props.multiple && !propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$1(element, props) {
	  return assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$2(element, props) {
	  var node = element;

	  if (props.dangerouslySetInnerHTML != null) {
	    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    checkControlledValueProps('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (defaultValue != null) {
	          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
	        }

	        if (isArray(children)) {
	          if (children.length > 1) {
	            throw new Error('<textarea> can only have at most one child.');
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === SVG_NAMESPACE) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  aspectRatio: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  {
	    checkCSSPropertyStringCoercion(value, name);
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {
	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a list for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (props.children != null || props.dangerouslySetInnerHTML != null) {
	      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (props.children != null) {
	      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
	    }

	    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
	      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (props.style != null && typeof props.style !== 'object') {
	    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this list too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG allowed attribute list, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  disableremoteplayback: 'disableRemotePlayback',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  enterkeyhint: 'enterKeyHint',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  imagesizes: 'imageSizes',
	  imagesrcset: 'imageSrcSet',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-description': 0,
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, eventRegistry) {
	    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (eventRegistry != null) {
	      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
	          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

	      if (registrationNameDependencies.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, eventRegistry) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, eventRegistry) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, eventRegistry);
	}

	var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
	var IS_NON_DELEGATED = 1 << 1;
	var IS_CAPTURE_PHASE = 1 << 2;
	// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
	// we call willDeferLaterForLegacyFBSupport, thus not bailing out
	// will result in endless cycles like an infinite loop.
	// We also don't want to defer during event replaying.

	var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

	// This exists to avoid circular dependency between ReactDOMEventReplaying
	// and DOMPluginEventSystem.
	var currentReplayingEvent = null;
	function setReplayingEvent(event) {
	  {
	    if (currentReplayingEvent !== null) {
	      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = event;
	}
	function resetReplayingEvent() {
	  {
	    if (currentReplayingEvent === null) {
	      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = null;
	}
	function isReplayingEvent(event) {
	  return event === currentReplayingEvent;
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (typeof restoreImpl !== 'function') {
	    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var flushSyncImpl = function () {};

	var isInsideEventHandler = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    // TODO: Restore state in the microtask, after the discrete updates flush,
	    // instead of early flushing them here.
	    flushSyncImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, a, b) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, a, b);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	} // TODO: Replace with flushSync
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  flushSyncImpl = _flushSyncImpl;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var stateNode = inst.stateNode;

	  if (stateNode === null) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (props === null) {
	    // Work in progress.
	    return null;
	  }

	  var listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (listener && typeof listener !== 'function') {
	    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
	  }

	  return listener;
	}

	var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
	// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

	if (canUseDOM) {
	  try {
	    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

	    Object.defineProperty(options, 'passive', {
	      get: function () {
	        passiveBrowserEventsSupported = true;
	      }
	    });
	    window.addEventListener('test', options, options);
	    window.removeEventListener('test', options, options);
	  } catch (e) {
	    passiveBrowserEventsSupported = false;
	  }
	}

	function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	}

	var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebook/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (typeof document === 'undefined' || document === null) {
	        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
	      }

	      var evt = document.createEvent('Event');
	      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      function restoreAfterDispatch() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }
	      } // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.


	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        didCall = true;
	        restoreAfterDispatch();
	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didCall && didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);

	      if (!didCall) {
	        // Something went really wrong, and our event was not dispatched.
	        // https://github.com/facebook/react/issues/16734
	        // https://github.com/facebook/react/issues/16585
	        // Fall back to the production implementation.
	        restoreAfterDispatch();
	        return invokeGuardedCallbackProd.apply(this, arguments);
	      }
	    };
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternals;
	}
	function has(key) {
	  return key._reactInternals !== undefined;
	}
	function set(key, value) {
	  key._reactInternals = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoFlags =
	/*                      */
	0;
	var PerformedWork =
	/*                */
	1; // You can change the rest (and add more).

	var Placement =
	/*                    */
	2;
	var Update =
	/*                       */
	4;
	var ChildDeletion =
	/*                */
	16;
	var ContentReset =
	/*                 */
	32;
	var Callback =
	/*                     */
	64;
	var DidCapture =
	/*                   */
	128;
	var ForceClientRender =
	/*            */
	256;
	var Ref =
	/*                          */
	512;
	var Snapshot =
	/*                     */
	1024;
	var Passive =
	/*                      */
	2048;
	var Hydrating =
	/*                    */
	4096;
	var Visibility =
	/*                   */
	8192;
	var StoreConsistency =
	/*             */
	16384;
	var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

	var HostEffectMask =
	/*               */
	32767; // These are not really side effects, but we still reuse this field.

	var Incomplete =
	/*                   */
	32768;
	var ShouldCapture =
	/*                */
	65536;
	var ForceUpdateForLegacySuspense =
	/* */
	131072;
	var Forked =
	/*                       */
	1048576; // Static tags describe aspects of a fiber that are not specific to a render,
	// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
	// This enables us to defer more work in the unmount case,
	// since we can defer traversing the tree during layout to look for Passive effects,
	// and instead rely on the static flag as a signal that there may be cleanup work.

	var RefStatic =
	/*                    */
	2097152;
	var LayoutStatic =
	/*                 */
	4194304;
	var PassiveStatic =
	/*                */
	8388608; // These flags allow us to traverse to fibers that have effects on mount
	// without traversing the entire tree after every commit for
	// double invoking

	var MountLayoutDev =
	/*               */
	16777216;
	var MountPassiveDev =
	/*              */
	33554432; // Groups of flags that are used in the commit phase to skip over trees that
	// don't contain effects, by checking subtreeFlags.

	var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
	// flag logic (see #20043)
	Update | Snapshot | ( 0);
	var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
	var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

	var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
	// This allows certain concepts to persist without recalculating them,
	// e.g. whether a subtree contains passive effects or portals.

	var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (getNearestMountedFiber(fiber) !== fiber) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (nearestMounted === null) {
	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
	        }
	      }
	    }

	    if (a.alternate !== b) {
	      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (a.tag !== HostRoot) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
	}

	function findCurrentHostFiberImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    var match = findCurrentHostFiberImpl(child);

	    if (match !== null) {
	      return match;
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
	}

	function findCurrentHostFiberWithNoPortalsImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    if (child.tag !== HostPortal) {
	      var match = findCurrentHostFiberWithNoPortalsImpl(child);

	      if (match !== null) {
	        return match;
	      }
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	// This module only exists as an ESM wrapper around the external CommonJS
	var scheduleCallback = Scheduler.unstable_scheduleCallback;
	var cancelCallback = Scheduler.unstable_cancelCallback;
	var shouldYield = Scheduler.unstable_shouldYield;
	var requestPaint = Scheduler.unstable_requestPaint;
	var now = Scheduler.unstable_now;
	var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
	var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var NormalPriority = Scheduler.unstable_NormalPriority;
	var LowPriority = Scheduler.unstable_LowPriority;
	var IdlePriority = Scheduler.unstable_IdlePriority;
	// this doesn't actually exist on the scheduler, but it *does*
	// on scheduler/unstable_mock, which we'll need for internal testing
	var unstable_yieldValue = Scheduler.unstable_yieldValue;
	var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

	var rendererID = null;
	var injectedHook = null;
	var injectedProfilingHooks = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    if (enableSchedulingProfiler) {
	      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
	      // This gives DevTools a way to feature detect that isn't tied to version number
	      // (since profiling and timeline are controlled by different feature flags).
	      internals = assign({}, internals, {
	        getLaneLabelMap: getLaneLabelMap,
	        injectProfilingHooks: injectProfilingHooks
	      });
	    }

	    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    injectedHook = hook;
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  }

	  if (hook.checkDCE) {
	    // This is the real DevTools.
	    return true;
	  } else {
	    // This is likely a hook installed by Fast Refresh runtime.
	    return false;
	  }
	}
	function onScheduleRoot(root, children) {
	  {
	    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
	      try {
	        injectedHook.onScheduleFiberRoot(rendererID, root, children);
	      } catch (err) {
	        if ( !hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitRoot(root, eventPriority) {
	  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
	    try {
	      var didError = (root.current.flags & DidCapture) === DidCapture;

	      if (enableProfilerTimer) {
	        var schedulerPriority;

	        switch (eventPriority) {
	          case DiscreteEventPriority:
	            schedulerPriority = ImmediatePriority;
	            break;

	          case ContinuousEventPriority:
	            schedulerPriority = UserBlockingPriority;
	            break;

	          case DefaultEventPriority:
	            schedulerPriority = NormalPriority;
	            break;

	          case IdleEventPriority:
	            schedulerPriority = IdlePriority;
	            break;

	          default:
	            schedulerPriority = NormalPriority;
	            break;
	        }

	        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
	      }
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onPostCommitRoot(root) {
	  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
	    try {
	      injectedHook.onPostCommitFiberRoot(rendererID, root);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitUnmount(fiber) {
	  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, fiber);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function setIsStrictModeForDevtools(newIsStrictMode) {
	  {
	    if (typeof unstable_yieldValue === 'function') {
	      // We're in a test because Scheduler.unstable_yieldValue only exists
	      // in SchedulerMock. To reduce the noise in strict mode tests,
	      // suppress warnings and disable scheduler yielding during the double render
	      unstable_setDisableYieldValue(newIsStrictMode);
	      setSuppressWarning(newIsStrictMode);
	    }

	    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
	      try {
	        injectedHook.setStrictMode(rendererID, newIsStrictMode);
	      } catch (err) {
	        {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    }
	  }
	} // Profiler API hooks

	function injectProfilingHooks(profilingHooks) {
	  injectedProfilingHooks = profilingHooks;
	}

	function getLaneLabelMap() {
	  {
	    var map = new Map();
	    var lane = 1;

	    for (var index = 0; index < TotalLanes; index++) {
	      var label = getLabelForLane(lane);
	      map.set(lane, label);
	      lane *= 2;
	    }

	    return map;
	  }
	}

	function markCommitStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
	      injectedProfilingHooks.markCommitStarted(lanes);
	    }
	  }
	}
	function markCommitStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
	      injectedProfilingHooks.markCommitStopped();
	    }
	  }
	}
	function markComponentRenderStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
	      injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	  }
	}
	function markComponentRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
	      injectedProfilingHooks.markComponentRenderStopped();
	    }
	  }
	}
	function markComponentPassiveEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
	    }
	  }
	}
	function markComponentErrored(fiber, thrownValue, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
	      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
	    }
	  }
	}
	function markComponentSuspended(fiber, wakeable, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
	      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
	    }
	  }
	}
	function markLayoutEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
	    }
	  }
	}
	function markLayoutEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStopped();
	    }
	  }
	}
	function markPassiveEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	    }
	  }
	}
	function markPassiveEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStopped();
	    }
	  }
	}
	function markRenderStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
	      injectedProfilingHooks.markRenderStarted(lanes);
	    }
	  }
	}
	function markRenderYielded() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
	      injectedProfilingHooks.markRenderYielded();
	    }
	  }
	}
	function markRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
	      injectedProfilingHooks.markRenderStopped();
	    }
	  }
	}
	function markRenderScheduled(lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
	      injectedProfilingHooks.markRenderScheduled(lane);
	    }
	  }
	}
	function markForceUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
	      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
	    }
	  }
	}
	function markStateUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
	      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	  }
	}

	var NoMode =
	/*                         */
	0; // TODO: Remove ConcurrentMode by reading from the root tag instead

	var ConcurrentMode =
	/*                 */
	1;
	var ProfileMode =
	/*                    */
	2;
	var StrictLegacyMode =
	/*               */
	8;
	var StrictEffectsMode =
	/*              */
	16;

	// TODO: This is pretty well supported by browsers. Maybe we can drop it.
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

	var log = Math.log;
	var LN2 = Math.LN2;

	function clz32Fallback(x) {
	  var asUint = x >>> 0;

	  if (asUint === 0) {
	    return 32;
	  }

	  return 31 - (log(asUint) / LN2 | 0) | 0;
	}

	// If those values are changed that package should be rebuilt and redeployed.

	var TotalLanes = 31;
	var NoLanes =
	/*                        */
	0;
	var NoLane =
	/*                          */
	0;
	var SyncLane =
	/*                        */
	1;
	var InputContinuousHydrationLane =
	/*    */
	2;
	var InputContinuousLane =
	/*             */
	4;
	var DefaultHydrationLane =
	/*            */
	8;
	var DefaultLane =
	/*                     */
	16;
	var TransitionHydrationLane =
	/*                */
	32;
	var TransitionLanes =
	/*                       */
	4194240;
	var TransitionLane1 =
	/*                        */
	64;
	var TransitionLane2 =
	/*                        */
	128;
	var TransitionLane3 =
	/*                        */
	256;
	var TransitionLane4 =
	/*                        */
	512;
	var TransitionLane5 =
	/*                        */
	1024;
	var TransitionLane6 =
	/*                        */
	2048;
	var TransitionLane7 =
	/*                        */
	4096;
	var TransitionLane8 =
	/*                        */
	8192;
	var TransitionLane9 =
	/*                        */
	16384;
	var TransitionLane10 =
	/*                       */
	32768;
	var TransitionLane11 =
	/*                       */
	65536;
	var TransitionLane12 =
	/*                       */
	131072;
	var TransitionLane13 =
	/*                       */
	262144;
	var TransitionLane14 =
	/*                       */
	524288;
	var TransitionLane15 =
	/*                       */
	1048576;
	var TransitionLane16 =
	/*                       */
	2097152;
	var RetryLanes =
	/*                            */
	130023424;
	var RetryLane1 =
	/*                             */
	4194304;
	var RetryLane2 =
	/*                             */
	8388608;
	var RetryLane3 =
	/*                             */
	16777216;
	var RetryLane4 =
	/*                             */
	33554432;
	var RetryLane5 =
	/*                             */
	67108864;
	var SomeRetryLane = RetryLane1;
	var SelectiveHydrationLane =
	/*          */
	134217728;
	var NonIdleLanes =
	/*                          */
	268435455;
	var IdleHydrationLane =
	/*               */
	268435456;
	var IdleLane =
	/*                        */
	536870912;
	var OffscreenLane =
	/*                   */
	1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
	// It should be kept in sync with the Lanes values above.

	function getLabelForLane(lane) {
	  {
	    if (lane & SyncLane) {
	      return 'Sync';
	    }

	    if (lane & InputContinuousHydrationLane) {
	      return 'InputContinuousHydration';
	    }

	    if (lane & InputContinuousLane) {
	      return 'InputContinuous';
	    }

	    if (lane & DefaultHydrationLane) {
	      return 'DefaultHydration';
	    }

	    if (lane & DefaultLane) {
	      return 'Default';
	    }

	    if (lane & TransitionHydrationLane) {
	      return 'TransitionHydration';
	    }

	    if (lane & TransitionLanes) {
	      return 'Transition';
	    }

	    if (lane & RetryLanes) {
	      return 'Retry';
	    }

	    if (lane & SelectiveHydrationLane) {
	      return 'SelectiveHydration';
	    }

	    if (lane & IdleHydrationLane) {
	      return 'IdleHydration';
	    }

	    if (lane & IdleLane) {
	      return 'Idle';
	    }

	    if (lane & OffscreenLane) {
	      return 'Offscreen';
	    }
	  }
	}
	var NoTimestamp = -1;
	var nextTransitionLane = TransitionLane1;
	var nextRetryLane = RetryLane1;

	function getHighestPriorityLanes(lanes) {
	  switch (getHighestPriorityLane(lanes)) {
	    case SyncLane:
	      return SyncLane;

	    case InputContinuousHydrationLane:
	      return InputContinuousHydrationLane;

	    case InputContinuousLane:
	      return InputContinuousLane;

	    case DefaultHydrationLane:
	      return DefaultHydrationLane;

	    case DefaultLane:
	      return DefaultLane;

	    case TransitionHydrationLane:
	      return TransitionHydrationLane;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return lanes & TransitionLanes;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      return lanes & RetryLanes;

	    case SelectiveHydrationLane:
	      return SelectiveHydrationLane;

	    case IdleHydrationLane:
	      return IdleHydrationLane;

	    case IdleLane:
	      return IdleLane;

	    case OffscreenLane:
	      return OffscreenLane;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


	      return lanes;
	  }
	}

	function getNextLanes(root, wipLanes) {
	  // Early bailout if there's no pending work left.
	  var pendingLanes = root.pendingLanes;

	  if (pendingLanes === NoLanes) {
	    return NoLanes;
	  }

	  var nextLanes = NoLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
	  // even if the work is suspended.

	  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

	  if (nonIdlePendingLanes !== NoLanes) {
	    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

	    if (nonIdleUnblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
	    } else {
	      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

	      if (nonIdlePingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
	      }
	    }
	  } else {
	    // The only remaining work is Idle.
	    var unblockedLanes = pendingLanes & ~suspendedLanes;

	    if (unblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(unblockedLanes);
	    } else {
	      if (pingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(pingedLanes);
	      }
	    }
	  }

	  if (nextLanes === NoLanes) {
	    // This should only be reachable if we're suspended
	    // TODO: Consider warning in this path if a fallback timer is not scheduled.
	    return NoLanes;
	  } // If we're already in the middle of a render, switching lanes will interrupt
	  // it and we'll lose our progress. We should only do this if the new lanes are
	  // higher priority.


	  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
	  // bother waiting until the root is complete.
	  (wipLanes & suspendedLanes) === NoLanes) {
	    var nextLane = getHighestPriorityLane(nextLanes);
	    var wipLane = getHighestPriorityLane(wipLanes);

	    if ( // Tests whether the next lane is equal or lower priority than the wip
	    // one. This works because the bits decrease in priority as you go left.
	    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
	    // only difference between default updates and transition updates is that
	    // default updates do not support refresh transitions.
	    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
	      // Keep working on the existing in-progress tree. Do not interrupt.
	      return wipLanes;
	    }
	  }

	  if ((nextLanes & InputContinuousLane) !== NoLanes) {
	    // When updates are sync by default, we entangle continuous priority updates
	    // and default updates, so they render in the same batch. The only reason
	    // they use separate lanes is because continuous updates should interrupt
	    // transitions, but default updates should not.
	    nextLanes |= pendingLanes & DefaultLane;
	  } // Check for entangled lanes and add them to the batch.
	  //
	  // A lane is said to be entangled with another when it's not allowed to render
	  // in a batch that does not also include the other lane. Typically we do this
	  // when multiple updates have the same source, and we only want to respond to
	  // the most recent event from that source.
	  //
	  // Note that we apply entanglements *after* checking for partial work above.
	  // This means that if a lane is entangled during an interleaved event while
	  // it's already rendering, we won't interrupt it. This is intentional, since
	  // entanglement is usually "best effort": we'll try our best to render the
	  // lanes in the same batch, but it's not worth throwing out partially
	  // completed work in order to do it.
	  // TODO: Reconsider this. The counter-argument is that the partial work
	  // represents an intermediate state, which we don't want to show to the user.
	  // And by spending extra time finishing it, we're increasing the amount of
	  // time it takes to show the final state, which is what they are actually
	  // waiting for.
	  //
	  // For those exceptions where entanglement is semantically important, like
	  // useMutableSource, we should ensure that there is no partial work at the
	  // time we apply the entanglement.


	  var entangledLanes = root.entangledLanes;

	  if (entangledLanes !== NoLanes) {
	    var entanglements = root.entanglements;
	    var lanes = nextLanes & entangledLanes;

	    while (lanes > 0) {
	      var index = pickArbitraryLaneIndex(lanes);
	      var lane = 1 << index;
	      nextLanes |= entanglements[index];
	      lanes &= ~lane;
	    }
	  }

	  return nextLanes;
	}
	function getMostRecentEventTime(root, lanes) {
	  var eventTimes = root.eventTimes;
	  var mostRecentEventTime = NoTimestamp;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var eventTime = eventTimes[index];

	    if (eventTime > mostRecentEventTime) {
	      mostRecentEventTime = eventTime;
	    }

	    lanes &= ~lane;
	  }

	  return mostRecentEventTime;
	}

	function computeExpirationTime(lane, currentTime) {
	  switch (lane) {
	    case SyncLane:
	    case InputContinuousHydrationLane:
	    case InputContinuousLane:
	      // User interactions should expire slightly more quickly.
	      //
	      // NOTE: This is set to the corresponding constant as in Scheduler.js.
	      // When we made it larger, a product metric in www regressed, suggesting
	      // there's a user interaction that's being starved by a series of
	      // synchronous updates. If that theory is correct, the proper solution is
	      // to fix the starvation. However, this scenario supports the idea that
	      // expiration times are an important safeguard when starvation
	      // does happen.
	      return currentTime + 250;

	    case DefaultHydrationLane:
	    case DefaultLane:
	    case TransitionHydrationLane:
	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return currentTime + 5000;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      // TODO: Retries should be allowed to expire if they are CPU bound for
	      // too long, but when I made this change it caused a spike in browser
	      // crashes. There must be some other underlying bug; not super urgent but
	      // ideally should figure out why and fix it. Unfortunately we don't have
	      // a repro for the crashes, only detected via production metrics.
	      return NoTimestamp;

	    case SelectiveHydrationLane:
	    case IdleHydrationLane:
	    case IdleLane:
	    case OffscreenLane:
	      // Anything idle priority or lower should never expire.
	      return NoTimestamp;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      }

	      return NoTimestamp;
	  }
	}

	function markStarvedLanesAsExpired(root, currentTime) {
	  // TODO: This gets called every time we yield. We can optimize by storing
	  // the earliest expiration time on the root. Then use that to quickly bail out
	  // of this function.
	  var pendingLanes = root.pendingLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes;
	  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
	  // expiration time. If so, we'll assume the update is being starved and mark
	  // it as expired to force it to finish.

	  var lanes = pendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var expirationTime = expirationTimes[index];

	    if (expirationTime === NoTimestamp) {
	      // Found a pending lane with no expiration time. If it's not suspended, or
	      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
	      // using the current time.
	      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
	        // Assumes timestamps are monotonically increasing.
	        expirationTimes[index] = computeExpirationTime(lane, currentTime);
	      }
	    } else if (expirationTime <= currentTime) {
	      // This lane expired
	      root.expiredLanes |= lane;
	    }

	    lanes &= ~lane;
	  }
	} // This returns the highest priority pending lanes regardless of whether they
	// are suspended.

	function getHighestPriorityPendingLanes(root) {
	  return getHighestPriorityLanes(root.pendingLanes);
	}
	function getLanesToRetrySynchronouslyOnError(root) {
	  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

	  if (everythingButOffscreen !== NoLanes) {
	    return everythingButOffscreen;
	  }

	  if (everythingButOffscreen & OffscreenLane) {
	    return OffscreenLane;
	  }

	  return NoLanes;
	}
	function includesSyncLane(lanes) {
	  return (lanes & SyncLane) !== NoLanes;
	}
	function includesNonIdleWork(lanes) {
	  return (lanes & NonIdleLanes) !== NoLanes;
	}
	function includesOnlyRetries(lanes) {
	  return (lanes & RetryLanes) === lanes;
	}
	function includesOnlyNonUrgentLanes(lanes) {
	  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
	  return (lanes & UrgentLanes) === NoLanes;
	}
	function includesOnlyTransitions(lanes) {
	  return (lanes & TransitionLanes) === lanes;
	}
	function includesBlockingLane(root, lanes) {

	  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
	  return (lanes & SyncDefaultLanes) !== NoLanes;
	}
	function includesExpiredLane(root, lanes) {
	  // This is a separate check from includesBlockingLane because a lane can
	  // expire after a render has already started.
	  return (lanes & root.expiredLanes) !== NoLanes;
	}
	function isTransitionLane(lane) {
	  return (lane & TransitionLanes) !== NoLanes;
	}
	function claimNextTransitionLane() {
	  // Cycle through the lanes, assigning each new transition to the next lane.
	  // In most cases, this means every transition gets its own lane, until we
	  // run out of lanes and cycle back to the beginning.
	  var lane = nextTransitionLane;
	  nextTransitionLane <<= 1;

	  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
	    nextTransitionLane = TransitionLane1;
	  }

	  return lane;
	}
	function claimNextRetryLane() {
	  var lane = nextRetryLane;
	  nextRetryLane <<= 1;

	  if ((nextRetryLane & RetryLanes) === NoLanes) {
	    nextRetryLane = RetryLane1;
	  }

	  return lane;
	}
	function getHighestPriorityLane(lanes) {
	  return lanes & -lanes;
	}
	function pickArbitraryLane(lanes) {
	  // This wrapper function gets inlined. Only exists so to communicate that it
	  // doesn't matter which bit is selected; you can pick any bit without
	  // affecting the algorithms where its used. Here I'm using
	  // getHighestPriorityLane because it requires the fewest operations.
	  return getHighestPriorityLane(lanes);
	}

	function pickArbitraryLaneIndex(lanes) {
	  return 31 - clz32(lanes);
	}

	function laneToIndex(lane) {
	  return pickArbitraryLaneIndex(lane);
	}

	function includesSomeLane(a, b) {
	  return (a & b) !== NoLanes;
	}
	function isSubsetOfLanes(set, subset) {
	  return (set & subset) === subset;
	}
	function mergeLanes(a, b) {
	  return a | b;
	}
	function removeLanes(set, subset) {
	  return set & ~subset;
	}
	function intersectLanes(a, b) {
	  return a & b;
	} // Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).

	function laneToLanes(lane) {
	  return lane;
	}
	function higherPriorityLane(a, b) {
	  // This works because the bit ranges decrease in priority as you go left.
	  return a !== NoLane && a < b ? a : b;
	}
	function createLaneMap(initial) {
	  // Intentionally pushing one by one.
	  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	  var laneMap = [];

	  for (var i = 0; i < TotalLanes; i++) {
	    laneMap.push(initial);
	  }

	  return laneMap;
	}
	function markRootUpdated(root, updateLane, eventTime) {
	  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
	  // could unblock them. Clear the suspended lanes so that we can try rendering
	  // them again.
	  //
	  // TODO: We really only need to unsuspend only lanes that are in the
	  // `subtreeLanes` of the updated fiber, or the update lanes of the return
	  // path. This would exclude suspended updates in an unrelated sibling tree,
	  // since there's no way for this update to unblock it.
	  //
	  // We don't do this if the incoming update is idle, because we never process
	  // idle updates until after all the regular updates have finished; there's no
	  // way it could unblock a transition.

	  if (updateLane !== IdleLane) {
	    root.suspendedLanes = NoLanes;
	    root.pingedLanes = NoLanes;
	  }

	  var eventTimes = root.eventTimes;
	  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
	  // recent event, and we assume time is monotonically increasing.

	  eventTimes[index] = eventTime;
	}
	function markRootSuspended(root, suspendedLanes) {
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

	  var expirationTimes = root.expirationTimes;
	  var lanes = suspendedLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootPinged(root, pingedLanes, eventTime) {
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	}
	function markRootFinished(root, remainingLanes) {
	  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
	  root.pendingLanes = remainingLanes; // Let's try everything again

	  root.suspendedLanes = NoLanes;
	  root.pingedLanes = NoLanes;
	  root.expiredLanes &= remainingLanes;
	  root.mutableReadLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  var entanglements = root.entanglements;
	  var eventTimes = root.eventTimes;
	  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

	  var lanes = noLongerPendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] = NoLanes;
	    eventTimes[index] = NoTimestamp;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootEntangled(root, entangledLanes) {
	  // In addition to entangling each of the given lanes with each other, we also
	  // have to consider _transitive_ entanglements. For each lane that is already
	  // entangled with *any* of the given lanes, that lane is now transitively
	  // entangled with *all* the given lanes.
	  //
	  // Translated: If C is entangled with A, then entangling A with B also
	  // entangles C with B.
	  //
	  // If this is hard to grasp, it might help to intentionally break this
	  // function and look at the tests that fail in ReactTransition-test.js. Try
	  // commenting out one of the conditions below.
	  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
	  var entanglements = root.entanglements;
	  var lanes = rootEntangledLanes;

	  while (lanes) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;

	    if ( // Is this one of the newly entangled lanes?
	    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
	    entanglements[index] & entangledLanes) {
	      entanglements[index] |= entangledLanes;
	    }

	    lanes &= ~lane;
	  }
	}
	function getBumpedLaneForHydration(root, renderLanes) {
	  var renderLane = getHighestPriorityLane(renderLanes);
	  var lane;

	  switch (renderLane) {
	    case InputContinuousLane:
	      lane = InputContinuousHydrationLane;
	      break;

	    case DefaultLane:
	      lane = DefaultHydrationLane;
	      break;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      lane = TransitionHydrationLane;
	      break;

	    case IdleLane:
	      lane = IdleHydrationLane;
	      break;

	    default:
	      // Everything else is already either a hydration lane, or shouldn't
	      // be retried at a hydration lane.
	      lane = NoLane;
	      break;
	  } // Check if the lane we chose is suspended. If so, that indicates that we
	  // already attempted and failed to hydrate at that level. Also check if we're
	  // already rendering that lane, which is rare but could happen.


	  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
	    // Give up trying to hydrate and fall back to client render.
	    return NoLane;
	  }

	  return lane;
	}
	function addFiberToLanesMap(root, fiber, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];
	    updaters.add(fiber);
	    lanes &= ~lane;
	  }
	}
	function movePendingFibersToMemoized(root, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
	  var memoizedUpdaters = root.memoizedUpdaters;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];

	    if (updaters.size > 0) {
	      updaters.forEach(function (fiber) {
	        var alternate = fiber.alternate;

	        if (alternate === null || !memoizedUpdaters.has(alternate)) {
	          memoizedUpdaters.add(fiber);
	        }
	      });
	      updaters.clear();
	    }

	    lanes &= ~lane;
	  }
	}
	function getTransitionsForLanes(root, lanes) {
	  {
	    return null;
	  }
	}

	var DiscreteEventPriority = SyncLane;
	var ContinuousEventPriority = InputContinuousLane;
	var DefaultEventPriority = DefaultLane;
	var IdleEventPriority = IdleLane;
	var currentUpdatePriority = NoLane;
	function getCurrentUpdatePriority() {
	  return currentUpdatePriority;
	}
	function setCurrentUpdatePriority(newPriority) {
	  currentUpdatePriority = newPriority;
	}
	function runWithPriority(priority, fn) {
	  var previousPriority = currentUpdatePriority;

	  try {
	    currentUpdatePriority = priority;
	    return fn();
	  } finally {
	    currentUpdatePriority = previousPriority;
	  }
	}
	function higherEventPriority(a, b) {
	  return a !== 0 && a < b ? a : b;
	}
	function lowerEventPriority(a, b) {
	  return a === 0 || a > b ? a : b;
	}
	function isHigherEventPriority(a, b) {
	  return a !== 0 && a < b;
	}
	function lanesToEventPriority(lanes) {
	  var lane = getHighestPriorityLane(lanes);

	  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
	    return DiscreteEventPriority;
	  }

	  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
	    return ContinuousEventPriority;
	  }

	  if (includesNonIdleWork(lane)) {
	    return DefaultEventPriority;
	  }

	  return IdleEventPriority;
	}

	// This is imported by the event replaying implementation in React DOM. It's
	// in a separate file to break a circular dependency between the renderer and
	// the reconciler.
	function isRootDehydrated(root) {
	  var currentState = root.current.memoizedState;
	  return currentState.isDehydrated;
	}

	var _attemptSynchronousHydration;

	function setAttemptSynchronousHydration(fn) {
	  _attemptSynchronousHydration = fn;
	}
	function attemptSynchronousHydration(fiber) {
	  _attemptSynchronousHydration(fiber);
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	}
	var getCurrentUpdatePriority$1;
	function setGetCurrentUpdatePriority(fn) {
	  getCurrentUpdatePriority$1 = fn;
	}
	var attemptHydrationAtPriority;
	function setAttemptHydrationAtPriority(fn) {
	  attemptHydrationAtPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	// has this definition built-in.

	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
	'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
	function isDiscreteEventThatRequiresHydration(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    domEventName: domEventName,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetContainers: [targetContainer]
	  };
	}

	function clearIfContinuousEvent(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'focusin':
	    case 'focusout':
	      queuedFocus = null;
	      break;

	    case 'dragenter':
	    case 'dragleave':
	      queuedDrag = null;
	      break;

	    case 'mouseover':
	    case 'mouseout':
	      queuedMouse = null;
	      break;

	    case 'pointerover':
	    case 'pointerout':
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags, and the targetContainers, and
	  // store a single event to be replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  var targetContainers = existingQueuedEvent.targetContainers;

	  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
	    targetContainers.push(targetContainer);
	  }

	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (domEventName) {
	    case 'focusin':
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
	        return true;
	      }

	    case 'dragenter':
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
	        return true;
	      }

	    case 'mouseover':
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
	        return true;
	      }

	    case 'pointerover':
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
	        return true;
	      }

	    case 'gotpointercapture':
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          attemptHydrationAtPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function queueExplicitHydrationTarget(target) {
	  // TODO: This will read the priority if it's dispatched by the React
	  // event system but not native events. Should read window.event.type, like
	  // we do for updates (getCurrentEventPriority).
	  var updatePriority = getCurrentUpdatePriority$1();
	  var queuedTarget = {
	    blockedOn: null,
	    target: target,
	    priority: updatePriority
	  };
	  var i = 0;

	  for (; i < queuedExplicitHydrationTargets.length; i++) {
	    // Stop once we hit the first target with lower priority than
	    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
	      break;
	    }
	  }

	  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

	  if (i === 0) {
	    attemptExplicitHydrationTarget(queuedTarget);
	  }
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var targetContainers = queuedEvent.targetContainers;

	  while (targetContainers.length > 0) {
	    var targetContainer = targetContainers[0];
	    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

	    if (nextBlockedOn === null) {
	      {
	        var nativeEvent = queuedEvent.nativeEvent;
	        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        setReplayingEvent(nativeEventClone);
	        nativeEvent.target.dispatchEvent(nativeEventClone);
	        resetReplayingEvent();
	      }
	    } else {
	      // We're still blocked. Try again later.
	      var _fiber3 = getInstanceFromNode(nextBlockedOn);

	      if (_fiber3 !== null) {
	        attemptContinuousHydration(_fiber3);
	      }

	      queuedEvent.blockedOn = nextBlockedOn;
	      return false;
	    } // This target container was successfully dispatched. Try the next.


	    targetContainers.shift();
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false;


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

	var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
	// We'd like to remove this but it's not clear if this is safe.

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
	  var eventPriority = getEventPriority(domEventName);
	  var listenerWrapper;

	  switch (eventPriority) {
	    case DiscreteEventPriority:
	      listenerWrapper = dispatchDiscreteEvent;
	      break;

	    case ContinuousEventPriority:
	      listenerWrapper = dispatchContinuousEvent;
	      break;

	    case DefaultEventPriority:
	    default:
	      listenerWrapper = dispatchEvent;
	      break;
	  }

	  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
	}

	function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(ContinuousEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  {
	    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
	  }
	}

	function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	  if (blockedOn === null) {
	    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	    clearIfContinuousEvent(domEventName, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
	    nativeEvent.stopPropagation();
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accumulative.


	  clearIfContinuousEvent(domEventName, nativeEvent);

	  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
	    while (blockedOn !== null) {
	      var fiber = getInstanceFromNode(blockedOn);

	      if (fiber !== null) {
	        attemptSynchronousHydration(fiber);
	      }

	      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	      if (nextBlockedOn === null) {
	        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	      }

	      if (nextBlockedOn === blockedOn) {
	        break;
	      }

	      blockedOn = nextBlockedOn;
	    }

	    if (blockedOn !== null) {
	      nativeEvent.stopPropagation();
	    }

	    return;
	  } // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.


	  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
	}

	var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
	// The return_targetInst field above is conceptually part of the return value.

	function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  return_targetInst = null;
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  return_targetInst = targetInst; // We're not blocked on anything.

	  return null;
	}
	function getEventPriority(domEventName) {
	  switch (domEventName) {
	    // Used by SimpleEventPlugin:
	    case 'cancel':
	    case 'click':
	    case 'close':
	    case 'contextmenu':
	    case 'copy':
	    case 'cut':
	    case 'auxclick':
	    case 'dblclick':
	    case 'dragend':
	    case 'dragstart':
	    case 'drop':
	    case 'focusin':
	    case 'focusout':
	    case 'input':
	    case 'invalid':
	    case 'keydown':
	    case 'keypress':
	    case 'keyup':
	    case 'mousedown':
	    case 'mouseup':
	    case 'paste':
	    case 'pause':
	    case 'play':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointerup':
	    case 'ratechange':
	    case 'reset':
	    case 'resize':
	    case 'seeked':
	    case 'submit':
	    case 'touchcancel':
	    case 'touchend':
	    case 'touchstart':
	    case 'volumechange': // Used by polyfills:
	    // eslint-disable-next-line no-fallthrough

	    case 'change':
	    case 'selectionchange':
	    case 'textInput':
	    case 'compositionstart':
	    case 'compositionend':
	    case 'compositionupdate': // Only enableCreateEventHandleAPI:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeblur':
	    case 'afterblur': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeinput':
	    case 'blur':
	    case 'fullscreenchange':
	    case 'focus':
	    case 'hashchange':
	    case 'popstate':
	    case 'select':
	    case 'selectstart':
	      return DiscreteEventPriority;

	    case 'drag':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'mousemove':
	    case 'mouseout':
	    case 'mouseover':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'scroll':
	    case 'toggle':
	    case 'touchmove':
	    case 'wheel': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'mouseenter':
	    case 'mouseleave':
	    case 'pointerenter':
	    case 'pointerleave':
	      return ContinuousEventPriority;

	    case 'message':
	      {
	        // We might be in the Scheduler callback.
	        // Eventually this mechanism will be replaced by a check
	        // of the current priority on the native scheduler.
	        var schedulerPriority = getCurrentPriorityLevel();

	        switch (schedulerPriority) {
	          case ImmediatePriority:
	            return DiscreteEventPriority;

	          case UserBlockingPriority:
	            return ContinuousEventPriority;

	          case NormalPriority:
	          case LowPriority:
	            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
	            return DefaultEventPriority;

	          case IdlePriority:
	            return IdleEventPriority;

	          default:
	            return DefaultEventPriority;
	        }
	      }

	    default:
	      return DefaultEventPriority;
	  }
	}

	function addEventBubbleListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, false);
	  return listener;
	}
	function addEventCaptureListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, true);
	  return listener;
	}
	function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    capture: true,
	    passive: passive
	  });
	  return listener;
	}
	function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    passive: passive
	  });
	  return listener;
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	} // This is intentionally a factory so that we have different returned constructors.
	// If we had a single constructor, it would be megamorphic and engines would deopt.


	function createSyntheticEvent(Interface) {
	  /**
	   * Synthetic events are dispatched by event plugins, typically in response to a
	   * top-level event delegation handler.
	   *
	   * These systems should generally use pooling to reduce the frequency of garbage
	   * collection. The system should check `isPersistent` to determine whether the
	   * event should be released into the pool after being dispatched. Users that
	   * need a persisted event should invoke `persist`.
	   *
	   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	   * normalizing browser quirks. Subclasses do not necessarily have to implement a
	   * DOM interface; custom application-specific events can also subclass this.
	   */
	  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
	    this._reactName = reactName;
	    this._targetInst = targetInst;
	    this.type = reactEventType;
	    this.nativeEvent = nativeEvent;
	    this.target = nativeEventTarget;
	    this.currentTarget = null;

	    for (var _propName in Interface) {
	      if (!Interface.hasOwnProperty(_propName)) {
	        continue;
	      }

	      var normalize = Interface[_propName];

	      if (normalize) {
	        this[_propName] = normalize(nativeEvent);
	      } else {
	        this[_propName] = nativeEvent[_propName];
	      }
	    }

	    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	    if (defaultPrevented) {
	      this.isDefaultPrevented = functionThatReturnsTrue;
	    } else {
	      this.isDefaultPrevented = functionThatReturnsFalse;
	    }

	    this.isPropagationStopped = functionThatReturnsFalse;
	    return this;
	  }

	  assign(SyntheticBaseEvent.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = true;
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.preventDefault) {
	        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.returnValue !== 'unknown') {
	        event.returnValue = false;
	      }

	      this.isDefaultPrevented = functionThatReturnsTrue;
	    },
	    stopPropagation: function () {
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.stopPropagation) {
	        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.cancelBubble !== 'unknown') {
	        // The ChangeEventPlugin registers a "propertychange" event for
	        // IE. This event does not support bubbling or cancelling, and
	        // any references to cancelBubble throw "Member not found".  A
	        // typeof check of "unknown" circumvents this issue (and is also
	        // IE specific).
	        event.cancelBubble = true;
	      }

	      this.isPropagationStopped = functionThatReturnsTrue;
	    },

	    /**
	     * We release all dispatched `SyntheticEvent`s after each event loop, adding
	     * them back into the pool. This allows a way to hold onto a reference that
	     * won't be added back into the pool.
	     */
	    persist: function () {// Modern event system doesn't use pooling.
	    },

	    /**
	     * Checks if this event should be released back into the pool.
	     *
	     * @return {boolean} True if this should not be released, false otherwise.
	     */
	    isPersistent: functionThatReturnsTrue
	  });
	  return SyntheticBaseEvent;
	}
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var EventInterface = {
	  eventPhase: 0,
	  bubbles: 0,
	  cancelable: 0,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: 0,
	  isTrusted: 0
	};
	var SyntheticEvent = createSyntheticEvent(EventInterface);

	var UIEventInterface = assign({}, EventInterface, {
	  view: 0,
	  detail: 0
	});

	var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
	var lastMovementX;
	var lastMovementY;
	var lastMouseEvent;

	function updateMouseMovementPolyfillState(event) {
	  if (event !== lastMouseEvent) {
	    if (lastMouseEvent && event.type === 'mousemove') {
	      lastMovementX = event.screenX - lastMouseEvent.screenX;
	      lastMovementY = event.screenY - lastMouseEvent.screenY;
	    } else {
	      lastMovementX = 0;
	      lastMovementY = 0;
	    }

	    lastMouseEvent = event;
	  }
	}
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var MouseEventInterface = assign({}, UIEventInterface, {
	  screenX: 0,
	  screenY: 0,
	  clientX: 0,
	  clientY: 0,
	  pageX: 0,
	  pageY: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  getModifierState: getEventModifierState,
	  button: 0,
	  buttons: 0,
	  relatedTarget: function (event) {
	    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
	    return event.relatedTarget;
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    updateMouseMovementPolyfillState(event);
	    return lastMovementX;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    } // Don't need to call updateMouseMovementPolyfillState() here
	    // because it's guaranteed to have already run when movementX
	    // was copied.


	    return lastMovementY;
	  }
	});

	var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var DragEventInterface = assign({}, MouseEventInterface, {
	  dataTransfer: 0
	});

	var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var FocusEventInterface = assign({}, UIEventInterface, {
	  relatedTarget: 0
	});

	var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var AnimationEventInterface = assign({}, EventInterface, {
	  animationName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var ClipboardEventInterface = assign({}, EventInterface, {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var CompositionEventInterface = assign({}, EventInterface, {
	  data: 0
	});

	var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	// Happens to share the same list for now.

	var SyntheticInputEvent = SyntheticCompositionEvent;
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */


	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var KeyboardEventInterface = assign({}, UIEventInterface, {
	  key: getEventKey,
	  code: 0,
	  location: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  repeat: 0,
	  locale: 0,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var PointerEventInterface = assign({}, MouseEventInterface, {
	  pointerId: 0,
	  width: 0,
	  height: 0,
	  pressure: 0,
	  tangentialPressure: 0,
	  tiltX: 0,
	  tiltY: 0,
	  twist: 0,
	  pointerType: 0,
	  isPrimary: 0
	});

	var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var TouchEventInterface = assign({}, UIEventInterface, {
	  touches: 0,
	  targetTouches: 0,
	  changedTouches: 0,
	  altKey: 0,
	  metaKey: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  getModifierState: getEventModifierState
	});

	var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var TransitionEventInterface = assign({}, EventInterface, {
	  propertyName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var WheelEventInterface = assign({}, MouseEventInterface, {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: 0,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: 0
	});

	var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	function registerEvents() {
	  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
	  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	} // Track whether we've ever handled a keypress on the space key.


	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 */


	function getCompositionEventType(domEventName) {
	  switch (domEventName) {
	    case 'compositionstart':
	      return 'onCompositionStart';

	    case 'compositionend':
	      return 'onCompositionEnd';

	    case 'compositionupdate':
	      return 'onCompositionUpdate';
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 */


	function isFallbackCompositionStart(domEventName, nativeEvent) {
	  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 */


	function isFallbackCompositionEnd(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'keyup':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case 'keydown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case 'keypress':
	    case 'mousedown':
	    case 'focusout':
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(domEventName);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
	      eventType = 'onCompositionStart';
	    }
	  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
	    eventType = 'onCompositionEnd';
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === 'onCompositionStart') {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === 'onCompositionEnd') {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

	  if (listeners.length > 0) {
	    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });

	    if (fallbackData) {
	      // Inject data generated from fallback path into the synthetic event.
	      // This matches the property of native CompositionEventInterface.
	      event.data = fallbackData;
	    } else {
	      var customData = getDataFromCustomEvent(nativeEvent);

	      if (customData !== null) {
	        event.data = customData;
	      }
	    }
	  }
	}

	function getNativeBeforeInputChars(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'compositionend':
	      return getDataFromCustomEvent(nativeEvent);

	    case 'keypress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'textInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 */


	function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (domEventName) {
	    case 'paste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case 'keypress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case 'compositionend':
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

	  if (listeners.length > 0) {
	    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	    event.data = chars;
	  }
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function registerEvents$1() {
	  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
	}

	function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

	  if (listeners.length > 0) {
	    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var dispatchQueue = [];
	  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, dispatchQueue);
	}

	function runEventInBatch(dispatchQueue) {
	  processDispatchQueue(dispatchQueue, 0);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'change') {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
	  if (domEventName === 'focusin') {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (domEventName === 'focusout') {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
	  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(domEventName, targetInst) {
	  if (domEventName === 'click') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'input' || domEventName === 'change') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
	  var getTargetInstFunc, handleEventFunc;

	  if (shouldUseChangeEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForChangeEvent;
	  } else if (isTextInputElement(targetNode)) {
	    if (isInputEventSupported) {
	      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	    } else {
	      getTargetInstFunc = getTargetInstForInputEventPolyfill;
	      handleEventFunc = handleEventsForInputEventPolyfill;
	    }
	  } else if (shouldUseClickEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForClickEvent;
	  }

	  if (getTargetInstFunc) {
	    var inst = getTargetInstFunc(domEventName, targetInst);

	    if (inst) {
	      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
	      return;
	    }
	  }

	  if (handleEventFunc) {
	    handleEventFunc(domEventName, targetNode, targetInst);
	  } // When blurring, set the value attribute for number inputs


	  if (domEventName === 'focusout') {
	    handleControlledInputBlur(targetNode);
	  }
	}

	function registerEvents$2() {
	  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
	  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
	  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
	  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
	}
	/**
	 * For almost every interaction we care about, there will be both a top-level
	 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	 * we do not extract duplicate events. However, moving the mouse into the
	 * browser from outside will not fire a `mouseout` event. In this case, we use
	 * the `mouseover` top-level event.
	 */


	function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
	  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

	  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
	    // If this is an over event with a target, we might have already dispatched
	    // the event in the out event of the other target. If this is replayed,
	    // then it's because we couldn't dispatch against this target previously
	    // so we have to do it now instead.
	    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

	    if (related) {
	      // If the related node is managed by React, we can assume that we have
	      // already dispatched the corresponding events during its mouseout.
	      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
	        return;
	      }
	    }
	  }

	  if (!isOutEvent && !isOverEvent) {
	    // Must not be a mouse or pointer in or out - ignoring.
	    return;
	  }

	  var win; // TODO: why is this nullable in the types but we read from it?

	  if (nativeEventTarget.window === nativeEventTarget) {
	    // `nativeEventTarget` is probably a window object.
	    win = nativeEventTarget;
	  } else {
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    var doc = nativeEventTarget.ownerDocument;

	    if (doc) {
	      win = doc.defaultView || doc.parentWindow;
	    } else {
	      win = window;
	    }
	  }

	  var from;
	  var to;

	  if (isOutEvent) {
	    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

	    from = targetInst;
	    to = _related ? getClosestInstanceFromNode(_related) : null;

	    if (to !== null) {
	      var nearestMounted = getNearestMountedFiber(to);

	      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	        to = null;
	      }
	    }
	  } else {
	    // Moving to a node from outside the window.
	    from = null;
	    to = targetInst;
	  }

	  if (from === to) {
	    // Nothing pertains to our managed components.
	    return;
	  }

	  var SyntheticEventCtor = SyntheticMouseEvent;
	  var leaveEventType = 'onMouseLeave';
	  var enterEventType = 'onMouseEnter';
	  var eventTypePrefix = 'mouse';

	  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
	    SyntheticEventCtor = SyntheticPointerEvent;
	    leaveEventType = 'onPointerLeave';
	    enterEventType = 'onPointerEnter';
	    eventTypePrefix = 'pointer';
	  }

	  var fromNode = from == null ? win : getNodeFromInstance(from);
	  var toNode = to == null ? win : getNodeFromInstance(to);
	  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
	  leave.target = fromNode;
	  leave.relatedTarget = toNode;
	  var enter = null; // We should only process this nativeEvent if we are processing
	  // the first ancestor. Next time, we will ignore the event.

	  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (nativeTargetInst === targetInst) {
	    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
	    enterEvent.target = toNode;
	    enterEvent.relatedTarget = fromNode;
	    enter = enterEvent;
	  }

	  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    var currentKey = keysA[i];

	    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start;
	  var end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	function registerEvents$3() {
	  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
	}

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

	    if (listeners.length > 0) {
	      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
	      dispatchQueue.push({
	        event: event,
	        listeners: listeners
	      });
	      event.target = activeElement$1;
	    }
	  }
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

	  switch (domEventName) {
	    // Track the input node that has focus.
	    case 'focusin':
	      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	        activeElement$1 = targetNode;
	        activeElementInst$1 = targetInst;
	        lastSelection = null;
	      }

	      break;

	    case 'focusout':
	      activeElement$1 = null;
	      activeElementInst$1 = null;
	      lastSelection = null;
	      break;
	    // Don't fire the event while the user is dragging. This matches the
	    // semantics of the native select event.

	    case 'mousedown':
	      mouseDown = true;
	      break;

	    case 'contextmenu':
	    case 'mouseup':
	    case 'dragend':
	      mouseDown = false;
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	      break;
	    // Chrome and IE fire non-standard event when selection is changed (and
	    // sometimes when it hasn't). IE's event fires out of order with respect
	    // to key and input events on deletion, so we discard it.
	    //
	    // Firefox doesn't support selectionchange, so check selection status
	    // after each key entry. The selection changes after keydown and before
	    // keyup, but we check on keydown as well in the case of holding down a
	    // key, when multiple keydown events are fired but only one keyup is.
	    // This is also our approach for IE handling, for the reason above.

	    case 'selectionchange':
	      if (skipSelectionChangeEvent) {
	        break;
	      }

	    // falls through

	    case 'keydown':
	    case 'keyup':
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	  }
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	var ANIMATION_END = getVendorPrefixedEventName('animationend');
	var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
	var ANIMATION_START = getVendorPrefixedEventName('animationstart');
	var TRANSITION_END = getVendorPrefixedEventName('transitionend');

	var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
	//
	// E.g. it needs "pointerDown", not "pointerdown".
	// This is because we derive both React name ("onPointerDown")
	// and DOM name ("pointerdown") from the same list.
	//
	// Exceptions that don't match this convention are listed separately.
	//
	// prettier-ignore

	var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

	function registerSimpleEvent(domEventName, reactName) {
	  topLevelEventsToReactNames.set(domEventName, reactName);
	  registerTwoPhaseEvent(reactName, [domEventName]);
	}

	function registerSimpleEvents() {
	  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
	    var eventName = simpleEventPluginEvents[i];
	    var domEventName = eventName.toLowerCase();
	    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
	    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
	  } // Special cases where event names don't match.


	  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
	  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
	  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
	  registerSimpleEvent('dblclick', 'onDoubleClick');
	  registerSimpleEvent('focusin', 'onFocus');
	  registerSimpleEvent('focusout', 'onBlur');
	  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
	}

	function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var reactName = topLevelEventsToReactNames.get(domEventName);

	  if (reactName === undefined) {
	    return;
	  }

	  var SyntheticEventCtor = SyntheticEvent;
	  var reactEventType = domEventName;

	  switch (domEventName) {
	    case 'keypress':
	      // Firefox creates a keypress event for function keys too. This removes
	      // the unwanted keypress events. Enter is however both printable and
	      // non-printable. One would expect Tab to be as well (but it isn't).
	      if (getEventCharCode(nativeEvent) === 0) {
	        return;
	      }

	    /* falls through */

	    case 'keydown':
	    case 'keyup':
	      SyntheticEventCtor = SyntheticKeyboardEvent;
	      break;

	    case 'focusin':
	      reactEventType = 'focus';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'focusout':
	      reactEventType = 'blur';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'beforeblur':
	    case 'afterblur':
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'click':
	      // Firefox creates a click event on right mouse clicks. This removes the
	      // unwanted click events.
	      if (nativeEvent.button === 2) {
	        return;
	      }

	    /* falls through */

	    case 'auxclick':
	    case 'dblclick':
	    case 'mousedown':
	    case 'mousemove':
	    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

	    /* falls through */

	    case 'mouseout':
	    case 'mouseover':
	    case 'contextmenu':
	      SyntheticEventCtor = SyntheticMouseEvent;
	      break;

	    case 'drag':
	    case 'dragend':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'dragstart':
	    case 'drop':
	      SyntheticEventCtor = SyntheticDragEvent;
	      break;

	    case 'touchcancel':
	    case 'touchend':
	    case 'touchmove':
	    case 'touchstart':
	      SyntheticEventCtor = SyntheticTouchEvent;
	      break;

	    case ANIMATION_END:
	    case ANIMATION_ITERATION:
	    case ANIMATION_START:
	      SyntheticEventCtor = SyntheticAnimationEvent;
	      break;

	    case TRANSITION_END:
	      SyntheticEventCtor = SyntheticTransitionEvent;
	      break;

	    case 'scroll':
	      SyntheticEventCtor = SyntheticUIEvent;
	      break;

	    case 'wheel':
	      SyntheticEventCtor = SyntheticWheelEvent;
	      break;

	    case 'copy':
	    case 'cut':
	    case 'paste':
	      SyntheticEventCtor = SyntheticClipboardEvent;
	      break;

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'pointerup':
	      SyntheticEventCtor = SyntheticPointerEvent;
	      break;
	  }

	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  {
	    // Some events don't bubble in the browser.
	    // In the past, React has always bubbled them, but this can be surprising.
	    // We're going to try aligning closer to the browser behavior by not bubbling
	    // them in React either. We'll start by not bubbling onScroll, and then expand.
	    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
	    // nonDelegatedEvents list in DOMPluginEventSystem.
	    // Then we can remove this special list.
	    // This is a breaking change that can wait until React 18.
	    domEventName === 'scroll';

	    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

	    if (_listeners.length > 0) {
	      // Intentionally create event lazily.
	      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

	      dispatchQueue.push({
	        event: _event,
	        listeners: _listeners
	      });
	    }
	  }
	}

	// TODO: remove top-level side effect.
	registerSimpleEvents();
	registerEvents$2();
	registerEvents$1();
	registerEvents$3();
	registerEvents();

	function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  // TODO: we should remove the concept of a "SimpleEventPlugin".
	  // This is the basic functionality of the event system. All
	  // the other plugins are essentially polyfills. So the plugin
	  // should probably be inlined somewhere and have its logic
	  // be core the to event system. This would potentially allow
	  // us to ship builds of React without the polyfilled plugins below.
	  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
	  // event's native "bubble" phase, which means that we're
	  // not in the capture phase. That's because we emulate
	  // the capture phase here still. This is a trade-off,
	  // because in an ideal world we would not emulate and use
	  // the phases properly, like we do with the SimpleEvent
	  // plugin. However, the plugins below either expect
	  // emulation (EnterLeave) or use state localized to that
	  // plugin (BeforeInput, Change, Select). The state in
	  // these modules complicates things, as you'll essentially
	  // get the case where the capture phase event might change
	  // state, only for the following bubble event to come in
	  // later and not trigger anything as the state now
	  // invalidates the heuristics of the event plugin. We
	  // could alter all these plugins to work in such ways, but
	  // that might cause other unknown side-effects that we
	  // can't foresee right now.

	  if (shouldProcessPolyfillPlugins) {
	    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  }
	} // List of events that need to be individually attached to media elements.


	var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
	// set them on the actual target element itself. This is primarily
	// because these events do not consistently bubble in the DOM.

	var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

	function executeDispatch(event, listener, currentTarget) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = currentTarget;
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
	  var previousInstance;

	  if (inCapturePhase) {
	    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
	      var _dispatchListeners$i = dispatchListeners[i],
	          instance = _dispatchListeners$i.instance,
	          currentTarget = _dispatchListeners$i.currentTarget,
	          listener = _dispatchListeners$i.listener;

	      if (instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, listener, currentTarget);
	      previousInstance = instance;
	    }
	  } else {
	    for (var _i = 0; _i < dispatchListeners.length; _i++) {
	      var _dispatchListeners$_i = dispatchListeners[_i],
	          _instance = _dispatchListeners$_i.instance,
	          _currentTarget = _dispatchListeners$_i.currentTarget,
	          _listener = _dispatchListeners$_i.listener;

	      if (_instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, _listener, _currentTarget);
	      previousInstance = _instance;
	    }
	  }
	}

	function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  for (var i = 0; i < dispatchQueue.length; i++) {
	    var _dispatchQueue$i = dispatchQueue[i],
	        event = _dispatchQueue$i.event,
	        listeners = _dispatchQueue$i.listeners;
	    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var dispatchQueue = [];
	  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  processDispatchQueue(dispatchQueue, eventSystemFlags);
	}

	function listenToNonDelegatedEvent(domEventName, targetElement) {
	  {
	    if (!nonDelegatedEvents.has(domEventName)) {
	      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var isCapturePhaseListener = false;
	  var listenerSet = getEventListenerSet(targetElement);
	  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

	  if (!listenerSet.has(listenerSetKey)) {
	    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
	    listenerSet.add(listenerSetKey);
	  }
	}
	function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	  {
	    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
	      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var eventSystemFlags = 0;

	  if (isCapturePhaseListener) {
	    eventSystemFlags |= IS_CAPTURE_PHASE;
	  }

	  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
	} // This is only used by createEventHandle when the
	var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
	function listenToAllSupportedEvents(rootContainerElement) {
	  if (!rootContainerElement[listeningMarker]) {
	    rootContainerElement[listeningMarker] = true;
	    allNativeEvents.forEach(function (domEventName) {
	      // We handle selectionchange separately because it
	      // doesn't bubble and needs to be on the document.
	      if (domEventName !== 'selectionchange') {
	        if (!nonDelegatedEvents.has(domEventName)) {
	          listenToNativeEvent(domEventName, false, rootContainerElement);
	        }

	        listenToNativeEvent(domEventName, true, rootContainerElement);
	      }
	    });
	    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

	    if (ownerDocument !== null) {
	      // The selectionchange event also needs deduplication
	      // but it is attached to the document.
	      if (!ownerDocument[listeningMarker]) {
	        ownerDocument[listeningMarker] = true;
	        listenToNativeEvent('selectionchange', false, ownerDocument);
	      }
	    }
	  }
	}

	function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
	  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
	  // active and not passive.

	  var isPassiveListener = undefined;

	  if (passiveBrowserEventsSupported) {
	    // Browsers introduced an intervention, making these events
	    // passive by default on document. React doesn't bind them
	    // to document anymore, but changing this now would undo
	    // the performance wins from the change. So we emulate
	    // the existing behavior manually on the roots now.
	    // https://github.com/facebook/react/issues/19651
	    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
	      isPassiveListener = true;
	    }
	  }

	  targetContainer =  targetContainer;


	  if (isCapturePhaseListener) {
	    if (isPassiveListener !== undefined) {
	      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventCaptureListener(targetContainer, domEventName, listener);
	    }
	  } else {
	    if (isPassiveListener !== undefined) {
	      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventBubbleListener(targetContainer, domEventName, listener);
	    }
	  }
	}

	function isMatchingRootContainer(grandContainer, targetContainer) {
	  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
	}

	function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var ancestorInst = targetInst;

	  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
	    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

	    if (targetInst !== null) {
	      // The below logic attempts to work out if we need to change
	      // the target fiber to a different ancestor. We had similar logic
	      // in the legacy event system, except the big difference between
	      // systems is that the modern event system now has an event listener
	      // attached to each React Root and React Portal Root. Together,
	      // the DOM nodes representing these roots are the "rootContainer".
	      // To figure out which ancestor instance we should use, we traverse
	      // up the fiber tree from the target instance and attempt to find
	      // root boundaries that match that of our current "rootContainer".
	      // If we find that "rootContainer", we find the parent fiber
	      // sub-tree for that root and make that our ancestor instance.
	      var node = targetInst;

	      mainLoop: while (true) {
	        if (node === null) {
	          return;
	        }

	        var nodeTag = node.tag;

	        if (nodeTag === HostRoot || nodeTag === HostPortal) {
	          var container = node.stateNode.containerInfo;

	          if (isMatchingRootContainer(container, targetContainerNode)) {
	            break;
	          }

	          if (nodeTag === HostPortal) {
	            // The target is a portal, but it's not the rootContainer we're looking for.
	            // Normally portals handle their own events all the way down to the root.
	            // So we should be able to stop now. However, we don't know if this portal
	            // was part of *our* root.
	            var grandNode = node.return;

	            while (grandNode !== null) {
	              var grandTag = grandNode.tag;

	              if (grandTag === HostRoot || grandTag === HostPortal) {
	                var grandContainer = grandNode.stateNode.containerInfo;

	                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
	                  // This is the rootContainer we're looking for and we found it as
	                  // a parent of the Portal. That means we can ignore it because the
	                  // Portal will bubble through to us.
	                  return;
	                }
	              }

	              grandNode = grandNode.return;
	            }
	          } // Now we need to find it's corresponding host fiber in the other
	          // tree. To do this we can use getClosestInstanceFromNode, but we
	          // need to validate that the fiber is a host instance, otherwise
	          // we need to traverse up through the DOM till we find the correct
	          // node that is from the other tree.


	          while (container !== null) {
	            var parentNode = getClosestInstanceFromNode(container);

	            if (parentNode === null) {
	              return;
	            }

	            var parentTag = parentNode.tag;

	            if (parentTag === HostComponent || parentTag === HostText) {
	              node = ancestorInst = parentNode;
	              continue mainLoop;
	            }

	            container = container.parentNode;
	          }
	        }

	        node = node.return;
	      }
	    }
	  }

	  batchedUpdates(function () {
	    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
	  });
	}

	function createDispatchListener(instance, listener, currentTarget) {
	  return {
	    instance: instance,
	    listener: listener,
	    currentTarget: currentTarget
	  };
	}

	function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
	  var captureName = reactName !== null ? reactName + 'Capture' : null;
	  var reactEventName = inCapturePhase ? captureName : reactName;
	  var listeners = [];
	  var instance = targetFiber;
	  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance2 = instance,
	        stateNode = _instance2.stateNode,
	        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      lastHostComponent = stateNode; // createEventHandle listeners


	      if (reactEventName !== null) {
	        var listener = getListener(instance, reactEventName);

	        if (listener != null) {
	          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
	        }
	      }
	    } // If we are only accumulating events for the target, then we don't
	    // continue to propagate through the React fiber tree to find other
	    // listeners.


	    if (accumulateTargetOnly) {
	      break;
	    } // If we are processing the onBeforeBlur event, then we need to take

	    instance = instance.return;
	  }

	  return listeners;
	} // We should only use this function for:
	// - BeforeInputEventPlugin
	// - ChangeEventPlugin
	// - SelectEventPlugin
	// This is because we only process these plugins
	// in the bubble phase, so we need to accumulate two
	// phase event listeners (via emulation).

	function accumulateTwoPhaseListeners(targetFiber, reactName) {
	  var captureName = reactName + 'Capture';
	  var listeners = [];
	  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance3 = instance,
	        stateNode = _instance3.stateNode,
	        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;
	      var captureListener = getListener(instance, captureName);

	      if (captureListener != null) {
	        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	      }

	      var bubbleListener = getListener(instance, reactName);

	      if (bubbleListener != null) {
	        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	      }
	    }

	    instance = instance.return;
	  }

	  return listeners;
	}

	function getParent(inst) {
	  if (inst === null) {
	    return null;
	  }

	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var nodeA = instA;
	  var nodeB = instB;
	  var depthA = 0;

	  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    nodeA = getParent(nodeA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    nodeB = getParent(nodeB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
	      return nodeA;
	    }

	    nodeA = getParent(nodeA);
	    nodeB = getParent(nodeB);
	  }

	  return null;
	}

	function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
	  var registrationName = event._reactName;
	  var listeners = [];
	  var instance = target;

	  while (instance !== null) {
	    if (instance === common) {
	      break;
	    }

	    var _instance4 = instance,
	        alternate = _instance4.alternate,
	        stateNode = _instance4.stateNode,
	        tag = _instance4.tag;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;

	      if (inCapturePhase) {
	        var captureListener = getListener(instance, registrationName);

	        if (captureListener != null) {
	          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	        }
	      } else if (!inCapturePhase) {
	        var bubbleListener = getListener(instance, registrationName);

	        if (bubbleListener != null) {
	          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	        }
	      }
	    }

	    instance = instance.return;
	  }

	  if (listeners.length !== 0) {
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	} // We should only use this function for:
	// - EnterLeaveEventPlugin
	// This is because we only process this plugin
	// in the bubble phase, so we need to accumulate two
	// phase event listeners.


	function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;

	  if (from !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
	  }

	  if (to !== null && enterEvent !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
	  }
	}
	function getListenerSetKey(domEventName, capture) {
	  return domEventName + "__" + (capture ? 'capture' : 'bubble');
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var warnedUnknownTags;
	var validatePropertiesInDevelopment;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, {
	      registrationNameDependencies: registrationNameDependencies,
	      possibleRegistrationNames: possibleRegistrationNames
	    });
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	} // HTML parsing normalizes CR and CRLF to LF.
	// It also can turn \u0000 into \uFFFD inside attributes.
	// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	// If we have a mismatch, it might be caused by that.
	// We will still patch up in this case but not fire the warning.


	var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	function normalizeMarkupForTextOrAttribute(markup) {
	  {
	    checkHtmlStringCoercion(markup);
	  }

	  var markupString = typeof markup === 'string' ? markup : '' + markup;
	  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	}

	function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
	  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	  if (normalizedServerText === normalizedClientText) {
	    return;
	  }

	  if (shouldWarnDev) {
	    {
	      if (!didWarnInvalidHydration) {
	        didWarnInvalidHydration = true;

	        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	      }
	    }
	  }

	  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
	    // In concurrent roots, we throw when there's a text mismatch and revert to
	    // client rendering, up to the nearest Suspense boundary.
	    throw new Error('Text content does not match server-rendered HTML.');
	  }
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      props = rawProps;
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = rawProps;
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the allowed property list in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the allowed property list during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

	      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	        if (nextHtml != null) {
	          var expectedHTML = normalizeHTML(domElement, nextHtml);

	          if (expectedHTML !== serverHTML) {
	            warnForPropDifference(propKey, serverHTML, expectedHTML);
	          }
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

	        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    if (shouldWarnDev) {
	      if ( // $FlowFixMe - Should be inferred as not undefined.
	      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        warnForExtraAttributes(extraAttributeNames);
	      }
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text, isConcurrentMode) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  var activeInstance = null;

	  setEnabled(false);
	  return activeInstance;
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);

	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;

	    case 'img':
	      return true;

	    default:
	      return false;
	  }
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	function getCurrentEventPriority() {
	  var currentEvent = window.event;

	  if (currentEvent === undefined) {
	    return DefaultEventPriority;
	  }

	  return getEventPriority(currentEvent.type);
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;
	var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
	var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
	  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
	} : scheduleTimeout; // TODO: Determine the best fallback here.

	function handleErrorInNextTick(error) {
	  setTimeout(function () {
	    throw error;
	  });
	} // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      if (newProps.autoFocus) {
	        domElement.focus();
	      }

	      return;

	    case 'img':
	      {
	        if (newProps.src) {
	          domElement.src = newProps.src;
	        }

	        return;
	      }
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
	  // with current event handlers.

	  updateFiberProps(domElement, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}
	function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  do {
	    var nextNode = node.nextSibling;
	    parentInstance.removeChild(node);

	    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
	      var data = nextNode.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

	          retryIfBlockedOn(suspenseInstance);
	          return;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
	        depth++;
	      }
	    }

	    node = nextNode;
	  } while (node); // TODO: Warn, we didn't find the end comment boundary.
	  // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(suspenseInstance);
	}
	function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
	  if (container.nodeType === COMMENT_NODE) {
	    clearSuspenseBoundary(container.parentNode, suspenseInstance);
	  } else if (container.nodeType === ELEMENT_NODE) {
	    clearSuspenseBoundary(container, suspenseInstance);
	  } // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(container);
	}
	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}
	function clearContainer(container) {
	  if (container.nodeType === ELEMENT_NODE) {
	    container.textContent = '';
	  } else if (container.nodeType === DOCUMENT_NODE) {
	    if (container.documentElement) {
	      container.removeChild(container.documentElement);
	    }
	  }
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function canHydrateSuspenseInstance(instance) {
	  if (instance.nodeType !== COMMENT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a suspense node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}
	function getSuspenseInstanceFallbackErrorDetails(instance) {
	  var dataset = instance.nextSibling && instance.nextSibling.dataset;
	  var digest, message, stack;

	  if (dataset) {
	    digest = dataset.dgst;

	    {
	      message = dataset.msg;
	      stack = dataset.stck;
	    }
	  }

	  {
	    return {
	      message: message,
	      digest: digest,
	      stack: stack
	    };
	  } // let value = {message: undefined, hash: undefined};
	  // const nextSibling = instance.nextSibling;
	  // if (nextSibling) {
	  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
	  //   value.message = dataset.msg;
	  //   value.hash = dataset.hash;
	  //   if (true) {
	  //     value.stack = dataset.stack;
	  //   }
	  // }
	  // return value;

	}
	function registerSuspenseInstanceRetry(instance, callback) {
	  instance._reactRetry = callback;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }

	    if (nodeType === COMMENT_NODE) {
	      var nodeData = node.data;

	      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
	        break;
	      }

	      if (nodeData === SUSPENSE_END_DATA) {
	        return null;
	      }
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function getFirstHydratableChildWithinContainer(parentContainer) {
	  return getNextHydratable(parentContainer.firstChild);
	}
	function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
	  return getNextHydratable(parentInstance.nextSibling);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.


	  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.

	  (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedText(textInstance, text);
	}
	function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, suspenseInstance);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function shouldDeleteUnhydratedTailInstances(parentType) {
	  return parentType !== 'head' && parentType !== 'body';
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
	  var shouldWarnDev = true;
	  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    var shouldWarnDev = true;
	    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	  }
	}
	function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;

	    if (parentNode !== null) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentNode, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentNode, instance);
	      }
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentInstance, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentInstance, instance);
	      }
	    }
	  }
	}
	function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedElement(parentInstance, type);
	    }
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedText(parentInstance, text);
	    }
	  }
	}
	function errorHydratingContainer(parentContainer) {
	  {
	    // TODO: This gets logged by onRecoverableError, too, so we should be
	    // able to remove it.
	    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
	  }
	}
	function preparePortalMount(portalInstance) {
	  listenToAllSupportedEvents(portalInstance);
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactFiber$' + randomKey;
	var internalPropsKey = '__reactProps$' + randomKey;
	var internalContainerInstanceKey = '__reactContainer$' + randomKey;
	var internalEventHandlersKey = '__reactEvents$' + randomKey;
	var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
	var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
	function detachDeletedInstance(node) {
	  // TODO: This function is only called on host components. I don't think all of
	  // these fields are relevant.
	  delete node[internalInstanceKey];
	  delete node[internalPropsKey];
	  delete node[internalEventHandlersKey];
	  delete node[internalEventHandlerListenersKey];
	  delete node[internalEventHandlesSetKey];
	}
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  throw new Error('getNodeFromInstance: Invalid argument.');
	}
	function getFiberCurrentPropsFromNode(node) {
	  return node[internalPropsKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalPropsKey] = props;
	}
	function getEventListenerSet(node) {
	  var elementListenerSet = node[internalEventHandlersKey];

	  if (elementListenerSet === undefined) {
	    elementListenerSet = node[internalEventHandlersKey] = new Set();
	  }

	  return elementListenerSet;
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (contextStackCursor.current !== emptyContextObject) {
	      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext = instance.getChildContext();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
	      }
	    }

	    {
	      var name = getComponentNameFromFiber(fiber) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name);
	    }

	    return assign({}, parentContext, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
	      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	var LegacyRoot = 0;
	var ConcurrentRoot = 1;

	var syncQueue = null;
	var includesLegacySyncCallbacks = false;
	var isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback];
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }
	}
	function scheduleLegacySyncCallback(callback) {
	  includesLegacySyncCallbacks = true;
	  scheduleSyncCallback(callback);
	}
	function flushSyncCallbacksOnlyInLegacyMode() {
	  // Only flushes the queue if there's a legacy sync callback scheduled.
	  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
	  // it might make more sense for the queue to be a list of roots instead of a
	  // list of generic callbacks. Then we can have two: one for legacy roots, one
	  // for concurrent roots. And this method would only flush the legacy ones.
	  if (includesLegacySyncCallbacks) {
	    flushSyncCallbacks();
	  }
	}
	function flushSyncCallbacks() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrance.
	    isFlushingSyncQueue = true;
	    var i = 0;
	    var previousUpdatePriority = getCurrentUpdatePriority();

	    try {
	      var isSync = true;
	      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
	      // queue is in the render or commit phases.

	      setCurrentUpdatePriority(DiscreteEventPriority);

	      for (; i < queue.length; i++) {
	        var callback = queue[i];

	        do {
	          callback = callback(isSync);
	        } while (callback !== null);
	      }

	      syncQueue = null;
	      includesLegacySyncCallbacks = false;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
	      throw error;
	    } finally {
	      setCurrentUpdatePriority(previousUpdatePriority);
	      isFlushingSyncQueue = false;
	    }
	  }

	  return null;
	}

	// TODO: Use the unified fiber stack module instead of this local one?
	// Intentionally not using it yet to derisk the initial implementation, because
	// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
	// rather the ids be wrong than crash the whole reconciler.
	var forkStack = [];
	var forkStackIndex = 0;
	var treeForkProvider = null;
	var treeForkCount = 0;
	var idStack = [];
	var idStackIndex = 0;
	var treeContextProvider = null;
	var treeContextId = 1;
	var treeContextOverflow = '';
	function isForkedChild(workInProgress) {
	  warnIfNotHydrating();
	  return (workInProgress.flags & Forked) !== NoFlags;
	}
	function getForksAtLevel(workInProgress) {
	  warnIfNotHydrating();
	  return treeForkCount;
	}
	function getTreeId() {
	  var overflow = treeContextOverflow;
	  var idWithLeadingBit = treeContextId;
	  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
	  return id.toString(32) + overflow;
	}
	function pushTreeFork(workInProgress, totalChildren) {
	  // This is called right after we reconcile an array (or iterator) of child
	  // fibers, because that's the only place where we know how many children in
	  // the whole set without doing extra work later, or storing addtional
	  // information on the fiber.
	  //
	  // That's why this function is separate from pushTreeId — it's called during
	  // the render phase of the fork parent, not the child, which is where we push
	  // the other context values.
	  //
	  // In the Fizz implementation this is much simpler because the child is
	  // rendered in the same callstack as the parent.
	  //
	  // It might be better to just add a `forks` field to the Fiber type. It would
	  // make this module simpler.
	  warnIfNotHydrating();
	  forkStack[forkStackIndex++] = treeForkCount;
	  forkStack[forkStackIndex++] = treeForkProvider;
	  treeForkProvider = workInProgress;
	  treeForkCount = totalChildren;
	}
	function pushTreeId(workInProgress, totalChildren, index) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextProvider = workInProgress;
	  var baseIdWithLeadingBit = treeContextId;
	  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
	  // of the id; we use it to account for leading 0s.

	  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
	  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
	  var slot = index + 1;
	  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
	  // consideration the leading 1 we use to mark the end of the sequence.

	  if (length > 30) {
	    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
	    // This branch assumes the length of the base id is greater than 5; it won't
	    // work for smaller ids, because you need 5 bits per character.
	    //
	    // We encode the id in multiple steps: first the base id, then the
	    // remaining digits.
	    //
	    // Each 5 bit sequence corresponds to a single base 32 character. So for
	    // example, if the current id is 23 bits long, we can convert 20 of those
	    // bits into a string of 4 characters, with 3 bits left over.
	    //
	    // First calculate how many bits in the base id represent a complete
	    // sequence of characters.
	    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

	    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

	    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

	    var restOfBaseId = baseId >> numberOfOverflowBits;
	    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
	    // we made more room, this time it won't overflow.

	    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
	    var restOfNewBits = slot << restOfBaseLength;
	    var id = restOfNewBits | restOfBaseId;
	    var overflow = newOverflow + baseOverflow;
	    treeContextId = 1 << restOfLength | id;
	    treeContextOverflow = overflow;
	  } else {
	    // Normal path
	    var newBits = slot << baseLength;

	    var _id = newBits | baseId;

	    var _overflow = baseOverflow;
	    treeContextId = 1 << length | _id;
	    treeContextOverflow = _overflow;
	  }
	}
	function pushMaterializedTreeId(workInProgress) {
	  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
	  // in its children.

	  var returnFiber = workInProgress.return;

	  if (returnFiber !== null) {
	    var numberOfForks = 1;
	    var slotIndex = 0;
	    pushTreeFork(workInProgress, numberOfForks);
	    pushTreeId(workInProgress, numberOfForks, slotIndex);
	  }
	}

	function getBitLength(number) {
	  return 32 - clz32(number);
	}

	function getLeadingBit(id) {
	  return 1 << getBitLength(id) - 1;
	}

	function popTreeContext(workInProgress) {
	  // Restore the previous values.
	  // This is a bit more complicated than other context-like modules in Fiber
	  // because the same Fiber may appear on the stack multiple times and for
	  // different reasons. We have to keep popping until the work-in-progress is
	  // no longer at the top of the stack.
	  while (workInProgress === treeForkProvider) {
	    treeForkProvider = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	    treeForkCount = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	  }

	  while (workInProgress === treeContextProvider) {
	    treeContextProvider = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextOverflow = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextId = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	  }
	}
	function getSuspendedTreeContext() {
	  warnIfNotHydrating();

	  if (treeContextProvider !== null) {
	    return {
	      id: treeContextId,
	      overflow: treeContextOverflow
	    };
	  } else {
	    return null;
	  }
	}
	function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextId = suspendedContext.id;
	  treeContextOverflow = suspendedContext.overflow;
	  treeContextProvider = workInProgress;
	}

	function warnIfNotHydrating() {
	  {
	    if (!getIsHydrating()) {
	      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
	    }
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
	// due to earlier mismatches or a suspended fiber.

	var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

	var hydrationErrors = null;

	function warnIfHydrating() {
	  {
	    if (isHydrating) {
	      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
	    }
	  }
	}

	function markDidThrowWhileHydratingDEV() {
	  {
	    didSuspendOrErrorDEV = true;
	  }
	}
	function didSuspendOrErrorWhileHydratingDEV() {
	  {
	    return didSuspendOrErrorDEV;
	  }
	}

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;
	  return true;
	}

	function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

	  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;

	  if (treeContext !== null) {
	    restoreSuspendedTreeContext(fiber, treeContext);
	  }

	  return true;
	}

	function warnUnhydratedInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
	          break;
	        }

	      case HostComponent:
	        {
	          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
	          isConcurrentMode);
	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
	          break;
	        }
	    }
	  }
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  warnUnhydratedInstance(returnFiber, instance);
	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  var deletions = returnFiber.deletions;

	  if (deletions === null) {
	    returnFiber.deletions = [childToDelete];
	    returnFiber.flags |= ChildDeletion;
	  } else {
	    deletions.push(childToDelete);
	  }
	}

	function warnNonhydratedInstance(returnFiber, fiber) {
	  {
	    if (didSuspendOrErrorDEV) {
	      // Inside a boundary that already suspended. We're currently rendering the
	      // siblings of a suspended node. The mismatch may be due to the missing
	      // data, so it's probably a false positive.
	      return;
	    }

	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              {
	                var _type = fiber.type;
	                var _props = fiber.pendingProps;
	                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
	                isConcurrentMode);
	                break;
	              }

	            case HostText:
	              {
	                var _text = fiber.pendingProps;

	                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

	                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
	                _isConcurrentMode);
	                break;
	              }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          var _parentInstance = suspenseState.dehydrated;
	          if (_parentInstance !== null) switch (fiber.tag) {
	            case HostComponent:
	              var _type2 = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
	              break;

	            case HostText:
	              var _text2 = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
	              break;
	          }
	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.flags = fiber.flags & ~Hydrating | Placement;
	  warnNonhydratedInstance(returnFiber, fiber);
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          hydrationParentFiber = fiber;
	          nextHydratableInstance = getFirstHydratableChild(instance);
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {
	        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

	        if (suspenseInstance !== null) {
	          var suspenseState = {
	            dehydrated: suspenseInstance,
	            treeContext: getSuspendedTreeContext(),
	            retryLane: OffscreenLane
	          };
	          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
	          // This simplifies the code for getHostSibling and deleting nodes,
	          // since it doesn't have to consider all Suspense boundaries and
	          // check if they're dehydrated ones or not.

	          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
	          dehydratedFragment.return = fiber;
	          fiber.child = dehydratedFragment;
	          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
	          // it during the first pass. Instead, we'll reenter it later.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function shouldClientRenderOnMismatch(fiber) {
	  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
	}

	function throwOnHydrationMismatch(fiber) {
	  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // Nothing to hydrate. Make it an insertion.


	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.


	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    var prevHydrationParentFiber = hydrationParentFiber;

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
	  }
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  if (shouldUpdate) {
	    // We assume that prepareToHydrateHostTextInstance is called in a context where the
	    // hydration parent is the parent host component of this host text.
	    var returnFiber = hydrationParentFiber;

	    if (returnFiber !== null) {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          {
	            var parentContainer = returnFiber.stateNode.containerInfo;
	            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            isConcurrentMode);
	            break;
	          }

	        case HostComponent:
	          {
	            var parentType = returnFiber.type;
	            var parentProps = returnFiber.memoizedProps;
	            var parentInstance = returnFiber.stateNode;

	            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

	            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            _isConcurrentMode2);
	            break;
	          }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function prepareToHydrateHostSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  hydrateSuspenseInstance(suspenseInstance, fiber);
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  } // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them. We also don't delete anything inside the root container.


	  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
	    var nextInstance = nextHydratableInstance;

	    if (nextInstance) {
	      if (shouldClientRenderOnMismatch(fiber)) {
	        warnIfUnhydratedTailNodes(fiber);
	        throwOnHydrationMismatch();
	      } else {
	        while (nextInstance) {
	          deleteHydratableInstance(fiber, nextInstance);
	          nextInstance = getNextHydratableSibling(nextInstance);
	        }
	      }
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function hasUnhydratedTailNodes() {
	  return isHydrating && nextHydratableInstance !== null;
	}

	function warnIfUnhydratedTailNodes(fiber) {
	  var nextInstance = nextHydratableInstance;

	  while (nextInstance) {
	    warnUnhydratedInstance(fiber, nextInstance);
	    nextInstance = getNextHydratableSibling(nextInstance);
	  }
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	  didSuspendOrErrorDEV = false;
	}

	function upgradeHydrationErrorsToRecoverable() {
	  if (hydrationErrors !== null) {
	    // Successfully completed a forced client render. The errors that occurred
	    // during the hydration attempt are now recovered. We will log them in
	    // commit phase, once the entire tree has finished.
	    queueRecoverableErrors(hydrationErrors);
	    hydrationErrors = null;
	  }
	}

	function getIsHydrating() {
	  return isHydrating;
	}

	function queueHydrationError(error) {
	  if (hydrationErrors === null) {
	    hydrationErrors = [error];
	  } else {
	    hydrationErrors.push(error);
	  }
	}

	var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var NoTransition = null;
	function requestCurrentTransition() {
	  return ReactCurrentBatchConfig$1.transition;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictLegacyMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedupe strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);

	      try {
	        setCurrentFiber(firstFiber);

	        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
	      } finally {
	        resetCurrentFiber();
	      }
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = assign({}, baseProps);
	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastFullyObservedContext = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, context, nextValue) {
	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(context, providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);

	  {
	    {
	      context._currentValue = currentValue;
	    }
	  }
	}
	function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
	  // Update the child lanes of all the ancestors, including the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
	      node.childLanes = mergeLanes(node.childLanes, renderLanes);

	      if (alternate !== null) {
	        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	      }
	    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	    }

	    if (node === propagationRoot) {
	      break;
	    }

	    node = node.return;
	  }

	  {
	    if (node !== propagationRoot) {
	      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }
	}
	function propagateContextChange(workInProgress, context, renderLanes) {
	  {
	    propagateContextChange_eager(workInProgress, context, renderLanes);
	  }
	}

	function propagateContextChange_eager(workInProgress, context, renderLanes) {

	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var lane = pickArbitraryLane(renderLanes);
	            var update = createUpdate(NoTimestamp, lane);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            // Inlined `enqueueUpdate` to remove interleaved update check

	            var updateQueue = fiber.updateQueue;

	            if (updateQueue === null) ; else {
	              var sharedQueue = updateQueue.shared;
	              var pending = sharedQueue.pending;

	              if (pending === null) {
	                // This is the first update. Create a circular list.
	                update.next = update;
	              } else {
	                update.next = pending.next;
	                pending.next = update;
	              }

	              sharedQueue.pending = update;
	            }
	          }

	          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	          var alternate = fiber.alternate;

	          if (alternate !== null) {
	            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	          }

	          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

	          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
	          // dependency list.

	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else if (fiber.tag === DehydratedFragment) {
	      // If a dehydrated suspense boundary is in this subtree, we don't know
	      // if it will have any context consumers in it. The best we can do is
	      // mark it as having updates.
	      var parentSuspense = fiber.return;

	      if (parentSuspense === null) {
	        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
	      }

	      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
	      var _alternate = parentSuspense.alternate;

	      if (_alternate !== null) {
	        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
	      } // This is intentionally passing this fiber as the parent
	      // because we want to schedule this fiber as having work
	      // on its children. We'll use the childLanes on
	      // this fiber to indicate that a context has changed.


	      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
	      nextFiber = fiber.sibling;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderLanes) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    {
	      var firstContext = dependencies.firstContext;

	      if (firstContext !== null) {
	        if (includesSomeLane(dependencies.lanes, renderLanes)) {
	          // Context list has a pending update. Mark that this fiber performed work.
	          markWorkInProgressReceivedUpdate();
	        } // Reset the work-in-progress list


	        dependencies.firstContext = null;
	      }
	    }
	  }
	}
	function readContext(context) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  var value =  context._currentValue ;

	  if (lastFullyObservedContext === context) ; else {
	    var contextItem = {
	      context: context,
	      memoizedValue: value,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (currentlyRenderingFiber === null) {
	        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        lanes: NoLanes,
	        firstContext: contextItem
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return value;
	}

	// render. When this render exits, either because it finishes or because it is
	// interrupted, the interleaved updates will be transferred onto the main part
	// of the queue.

	var concurrentQueues = null;
	function pushConcurrentUpdateQueue(queue) {
	  if (concurrentQueues === null) {
	    concurrentQueues = [queue];
	  } else {
	    concurrentQueues.push(queue);
	  }
	}
	function finishQueueingConcurrentUpdates() {
	  // Transfer the interleaved updates onto the main queue. Each queue has a
	  // `pending` field and an `interleaved` field. When they are not null, they
	  // point to the last node in a circular linked list. We need to append the
	  // interleaved list to the end of the pending list by joining them into a
	  // single, circular list.
	  if (concurrentQueues !== null) {
	    for (var i = 0; i < concurrentQueues.length; i++) {
	      var queue = concurrentQueues[i];
	      var lastInterleavedUpdate = queue.interleaved;

	      if (lastInterleavedUpdate !== null) {
	        queue.interleaved = null;
	        var firstInterleavedUpdate = lastInterleavedUpdate.next;
	        var lastPendingUpdate = queue.pending;

	        if (lastPendingUpdate !== null) {
	          var firstPendingUpdate = lastPendingUpdate.next;
	          lastPendingUpdate.next = firstInterleavedUpdate;
	          lastInterleavedUpdate.next = firstPendingUpdate;
	        }

	        queue.pending = lastInterleavedUpdate;
	      }
	    }

	    concurrentQueues = null;
	  }
	}
	function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	}
	function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentRenderForLane(fiber, lane) {
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	} // Calling this function outside this module should only be done for backwards
	// compatibility and should always be accompanied by a warning.

	var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

	function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
	  // Update the source fiber's lanes
	  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
	  var alternate = sourceFiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, lane);
	  }

	  {
	    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
	      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	    }
	  } // Walk the parent path to the root and update the child lanes.


	  var node = sourceFiber;
	  var parent = sourceFiber.return;

	  while (parent !== null) {
	    parent.childLanes = mergeLanes(parent.childLanes, lane);
	    alternate = parent.alternate;

	    if (alternate !== null) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
	    } else {
	      {
	        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	        }
	      }
	    }

	    node = parent;
	    parent = parent.return;
	  }

	  if (node.tag === HostRoot) {
	    var root = node.stateNode;
	    return root;
	  } else {
	    return null;
	  }
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null,
	      interleaved: null,
	      lanes: NoLanes
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      firstBaseUpdate: currentQueue.firstBaseUpdate,
	      lastBaseUpdate: currentQueue.lastBaseUpdate,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(eventTime, lane) {
	  var update = {
	    eventTime: eventTime,
	    lane: lane,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  return update;
	}
	function enqueueUpdate(fiber, update, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return null;
	  }

	  var sharedQueue = updateQueue.shared;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }

	  if (isUnsafeClassRenderPhaseUpdate()) {
	    // This is an unsafe render phase update. Add directly to the update
	    // queue so we can process it immediately during the current render.
	    var pending = sharedQueue.pending;

	    if (pending === null) {
	      // This is the first update. Create a circular list.
	      update.next = update;
	    } else {
	      update.next = pending.next;
	      pending.next = update;
	    }

	    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
	    // this fiber. This is for backwards compatibility in the case where you
	    // update a different component during render phase than the one that is
	    // currently renderings (a pattern that is accompanied by a warning).

	    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
	  } else {
	    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
	  }
	}
	function entangleTransitions(root, fiber, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;

	  if (isTransitionLane(lane)) {
	    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
	    // have finished. We can remove them from the shared queue, which represents
	    // a superset of the actually pending lanes. In some cases we may entangle
	    // more than we need to, but that's OK. In fact it's worse if we *don't*
	    // entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  // Captured updates are updates that are thrown by a child during the render
	  // phase. They should be discarded if the render is aborted. Therefore,
	  // we should only put them on the work-in-progress queue, not the current one.
	  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

	  var current = workInProgress.alternate;

	  if (current !== null) {
	    var currentQueue = current.updateQueue;

	    if (queue === currentQueue) {
	      // The work-in-progress queue is the same as current. This happens when
	      // we bail out on a parent fiber that then captures an error thrown by
	      // a child. Since we want to append the update only to the work-in
	      // -progress queue, we need to clone the updates. We usually clone during
	      // processUpdateQueue, but that didn't happen in this case because we
	      // skipped over the parent when we bailed out.
	      var newFirst = null;
	      var newLast = null;
	      var firstBaseUpdate = queue.firstBaseUpdate;

	      if (firstBaseUpdate !== null) {
	        // Loop through the updates and clone them.
	        var update = firstBaseUpdate;

	        do {
	          var clone = {
	            eventTime: update.eventTime,
	            lane: update.lane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newLast === null) {
	            newFirst = newLast = clone;
	          } else {
	            newLast.next = clone;
	            newLast = clone;
	          }

	          update = update.next;
	        } while (update !== null); // Append the captured update the end of the cloned list.


	        if (newLast === null) {
	          newFirst = newLast = capturedUpdate;
	        } else {
	          newLast.next = capturedUpdate;
	          newLast = capturedUpdate;
	        }
	      } else {
	        // There are no base updates.
	        newFirst = newLast = capturedUpdate;
	      }

	      queue = {
	        baseState: currentQueue.baseState,
	        firstBaseUpdate: newFirst,
	        lastBaseUpdate: newLast,
	        shared: currentQueue.shared,
	        effects: currentQueue.effects
	      };
	      workInProgress.updateQueue = queue;
	      return;
	    }
	  } // Append the update to the end of the list.


	  var lastBaseUpdate = queue.lastBaseUpdate;

	  if (lastBaseUpdate === null) {
	    queue.firstBaseUpdate = capturedUpdate;
	  } else {
	    lastBaseUpdate.next = capturedUpdate;
	  }

	  queue.lastBaseUpdate = capturedUpdate;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                _payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderLanes) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  }

	  var firstBaseUpdate = queue.firstBaseUpdate;
	  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
	    // and last so that it's non-circular.

	    var lastPendingUpdate = pendingQueue;
	    var firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null; // Append pending updates to base queue

	    if (lastBaseUpdate === null) {
	      firstBaseUpdate = firstPendingUpdate;
	    } else {
	      lastBaseUpdate.next = firstPendingUpdate;
	    }

	    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
	    // we need to transfer the updates to that queue, too. Because the base
	    // queue is a singly-linked list with no cycles, we can append to both
	    // lists and take advantage of structural sharing.
	    // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      // This is always non-null on a ClassComponent or HostRoot
	      var currentQueue = current.updateQueue;
	      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

	      if (currentLastBaseUpdate !== lastBaseUpdate) {
	        if (currentLastBaseUpdate === null) {
	          currentQueue.firstBaseUpdate = firstPendingUpdate;
	        } else {
	          currentLastBaseUpdate.next = firstPendingUpdate;
	        }

	        currentQueue.lastBaseUpdate = lastPendingUpdate;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (firstBaseUpdate !== null) {
	    // Iterate through the list of updates to compute the result.
	    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	    // from the original lanes.

	    var newLanes = NoLanes;
	    var newBaseState = null;
	    var newFirstBaseUpdate = null;
	    var newLastBaseUpdate = null;
	    var update = firstBaseUpdate;

	    do {
	      var updateLane = update.lane;
	      var updateEventTime = update.eventTime;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          eventTime: updateEventTime,
	          lane: updateLane,
	          tag: update.tag,
	          payload: update.payload,
	          callback: update.callback,
	          next: null
	        };

	        if (newLastBaseUpdate === null) {
	          newFirstBaseUpdate = newLastBaseUpdate = clone;
	          newBaseState = newState;
	        } else {
	          newLastBaseUpdate = newLastBaseUpdate.next = clone;
	        } // Update the remaining priority in the queue.


	        newLanes = mergeLanes(newLanes, updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newLastBaseUpdate !== null) {
	          var _clone = {
	            eventTime: updateEventTime,
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };
	          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
	        } // Process this update.


	        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	        var callback = update.callback;

	        if (callback !== null && // If the update was already committed, we should not queue its
	        // callback again.
	        update.lane !== NoLane) {
	          workInProgress.flags |= Callback;
	          var effects = queue.effects;

	          if (effects === null) {
	            queue.effects = [update];
	          } else {
	            effects.push(update);
	          }
	        }
	      }

	      update = update.next;

	      if (update === null) {
	        pendingQueue = queue.shared.pending;

	        if (pendingQueue === null) {
	          break;
	        } else {
	          // An update was scheduled from inside a reducer. Add the new
	          // pending updates to the end of the list and keep processing.
	          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
	          // unravel them when transferring them to the base queue.

	          var _firstPendingUpdate = _lastPendingUpdate.next;
	          _lastPendingUpdate.next = null;
	          update = _firstPendingUpdate;
	          queue.lastBaseUpdate = _lastPendingUpdate;
	          queue.shared.pending = null;
	        }
	      }
	    } while (true);

	    if (newLastBaseUpdate === null) {
	      newBaseState = newState;
	    }

	    queue.baseState = newBaseState;
	    queue.firstBaseUpdate = newFirstBaseUpdate;
	    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
	    // process them during this render, but we do need to track which lanes
	    // are remaining.

	    var lastInterleaved = queue.shared.interleaved;

	    if (lastInterleaved !== null) {
	      var interleaved = lastInterleaved;

	      do {
	        newLanes = mergeLanes(newLanes, interleaved.lane);
	        interleaved = interleaved.next;
	      } while (interleaved !== lastInterleaved);
	    } else if (firstBaseUpdate === null) {
	      // `queue.lanes` is used for entangling transitions. We can set it back to
	      // zero once the queue is empty.
	      queue.shared.lanes = NoLanes;
	    } // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.


	    markSkippedUpdateLanes(newLanes);
	    workInProgress.lanes = newLanes;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (typeof callback !== 'function') {
	    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + '_' + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentNameFromType(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;
	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        // Invoke the function an extra time to help detect side-effects.
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.lanes === NoLanes) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markForceUpdateScheduled(fiber, lane);
	    }
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

	    {
	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          // Invoke the function an extra time to help detect side-effects.
	          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentNameFromType(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        instance = new ctor(props, context); // eslint-disable-line no-new
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	  }

	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentNameFromType(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    var fiberFlags = Update;

	    {
	      fiberFlags |= LayoutStatic;
	    }

	    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	      fiberFlags |= MountLayoutDev;
	    }

	    workInProgress.flags |= fiberFlags;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var fiberFlags = Update;

	      {
	        fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= fiberFlags;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags = Update;

	      {
	        _fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags2 = Update;

	      {
	        _fiberFlags2 |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags2 |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags2;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var unresolvedOldProps = workInProgress.memoizedProps;
	  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
	  instance.props = oldProps;
	  var unresolvedNewProps = workInProgress.pendingProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
	  // both before and after `shouldComponentUpdate` has been called. Not ideal,
	  // but I'm loath to refactor this function. This only happens for memoized
	  // components so it's not that common.
	  enableLazyContextPropagation   ;

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.flags |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.flags |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child, returnFiber) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child, returnFiber) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (typeof child._store !== 'object') {
	      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    child._store.validated = true;
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasKeyUseWarning[componentName]) {
	      return;
	    }

	    ownerHasKeyUseWarning[componentName] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
	  };
	}

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
	        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (ownerFiber.tag !== ClassComponent) {
	          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
	      } // Assigning this to a const so Flow knows it won't change in the closure


	      var resolvedInst = inst;

	      {
	        checkPropStringCoercion(mixedRef, 'ref');
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = resolvedInst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = resolvedInst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (typeof mixedRef !== 'string') {
	        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
	      }

	      if (!element._owner) {
	        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  var childString = Object.prototype.toString.call(newChild);
	  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	}

	function warnOnFunctionType(returnFiber) {
	  {
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasFunctionTypeWarning[componentName]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[componentName] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	}

	function resolveLazy(lazyType) {
	  var payload = lazyType._payload;
	  var init = lazyType._init;
	  return init(payload);
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }

	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [childToDelete];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(childToDelete);
	    }
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // During hydration, the useId algorithm needs to know which fibers are
	      // part of a list of children (arrays, iterators).
	      newFiber.flags |= Forked;
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.flags |= Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.flags |= Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.flags |= Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, lanes) {
	    var elementType = element.type;

	    if (elementType === REACT_FRAGMENT_TYPE) {
	      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
	    }

	    if (current !== null) {
	      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
	      // We need to do this after the Hot Reloading check above,
	      // because hot reloading has different semantics than prod because
	      // it doesn't resuspend. So we can't let the call below suspend.
	      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, lanes);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

	            _created2.return = returnFiber;
	            return _created2;
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return createChild(returnFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              return updateElement(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
	          }

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init;
	          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys, returnFiber) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child, returnFiber);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;

	        case REACT_LAZY_TYPE:
	          var payload = child._payload;
	          var init = child._init;
	          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks2 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks2);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (typeof iteratorFn !== 'function') {
	      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (newChildren == null) {
	      throw new Error('An iterable object provided no iterator.');
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, lanes);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks3 = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks3);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks4 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks4);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        var elementType = element.type;

	        if (elementType === REACT_FRAGMENT_TYPE) {
	          if (child.tag === Fragment) {
	            deleteRemainingChildren(returnFiber, child.sibling);
	            var existing = useFiber(child, element.props.children);
	            existing.return = returnFiber;

	            {
	              existing._debugSource = element._source;
	              existing._debugOwner = element._owner;
	            }

	            return existing;
	          }
	        } else {
	          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
	          // We need to do this after the Hot Reloading check above,
	          // because hot reloading has different semantics than prod because
	          // it doesn't resuspend. So we can't let the call below suspend.
	          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
	            deleteRemainingChildren(returnFiber, child.sibling);

	            var _existing = useFiber(child, element.props);

	            _existing.ref = coerceRef(returnFiber, child, element);
	            _existing.return = returnFiber;

	            {
	              _existing._debugSource = element._source;
	              _existing._debugOwner = element._owner;
	            }

	            return _existing;
	          }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

	          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
	      }

	      if (isArray(newChild)) {
	        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      if (getIteratorFn(newChild)) {
	        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (current !== null && workInProgress.child !== current.child) {
	    throw new Error('Resuming work not yet implemented.');
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, lanes) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, lanes);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (c === NO_CONTEXT) {
	    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  workInProgress.memoizedProps; // Regular boundaries always capture.

	  {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.flags & DidCapture) !== NoFlags;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	var NoFlags$1 =
	/*   */
	0; // Represents whether effect should fire.

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Insertion =
	/*  */
	2;
	var Layout =
	/*    */
	4;
	var Passive$1 =
	/*   */
	8;

	// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.

	var workInProgressSources = [];
	function resetWorkInProgressVersions() {
	  for (var i = 0; i < workInProgressSources.length; i++) {
	    var mutableSource = workInProgressSources[i];

	    {
	      mutableSource._workInProgressVersionPrimary = null;
	    }
	  }

	  workInProgressSources.length = 0;
	}
	// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.

	function registerMutableSourceForHydration(root, mutableSource) {
	  var getVersion = mutableSource._getVersion;
	  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
	  // Retaining it forever may interfere with GC.

	  if (root.mutableSourceEagerHydrationData == null) {
	    root.mutableSourceEagerHydrationData = [mutableSource, version];
	  } else {
	    root.mutableSourceEagerHydrationData.push(mutableSource, version);
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;
	var didWarnUncachedGetSnapshot;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

	var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

	var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
	// hydration). This counter is global, so client ids are not stable across
	// render attempts.

	var globalClientIdCounter = 0;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = NoLanes; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // localIdCounter = 0;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (didScheduleRenderPhaseUpdateDuringThisPass) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      localIdCounter = 0;

	      if (numberOfReRenders >= RE_RENDER_LIMIT) {
	        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
	    // render. If this fires, it suggests that we incorrectly reset the static
	    // flags in some other part of the codebase. This has happened before, for
	    // example, in the SuspenseList implementation.

	    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
	    // and creates false positives. To make this work in legacy mode, we'd
	    // need to mark fibers that commit in an incomplete state, somehow. For
	    // now I'll disable the warning that most of the bugs that would trigger
	    // it are either exclusive to concurrent mode or exist in both.
	    (current.mode & ConcurrentMode) !== NoMode) {
	      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
	    }
	  }

	  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
	  // localIdCounter = 0;

	  if (didRenderTooFewHooks) {
	    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
	  }

	  return children;
	}
	function checkDidRenderIdHook() {
	  // This should be called immediately after every renderWithHooks call.
	  // Conceptually, it's part of the return value of renderWithHooks; it's only a
	  // separate function to avoid using an array tuple.
	  var didRenderIdHook = localIdCounter !== 0;
	  localIdCounter = 0;
	  return didRenderIdHook;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
	  // complete phase (bubbleProperties).

	  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
	  } else {
	    workInProgress.flags &= ~(Passive | Update);
	  }

	  current.lanes = removeLanes(current.lanes, lanes);
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }

	    didScheduleRenderPhaseUpdate = false;
	  }

	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	    isUpdatingOpaqueValueInRenderPhase = false;
	  }

	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	  localIdCounter = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (nextCurrentHook === null) {
	      throw new Error('Rendered more hooks than during the previous render.');
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null,
	    stores: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    {
	      if (current.baseQueue !== baseQueue) {
	        // Internal invariant that should never happen, but feasibly could in
	        // the future if we implement resuming, or some form of that.
	        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
	      }
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateLane = update.lane;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          lane: updateLane,
	          action: update.action,
	          hasEagerState: update.hasEagerState,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.
	        // TODO: Don't need to accumulate this. Instead, we can remove
	        // renderLanes from the original lanes.


	        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
	        markSkippedUpdateLanes(updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            action: update.action,
	            hasEagerState: update.hasEagerState,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Process this update.


	        if (update.hasEagerState) {
	          // If this update is a state update (not a reducer) and was processed eagerly,
	          // we can use the eagerly computed state
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  } // Interleaved updates are stored on a separate queue. We aren't going to
	  // process them during this render, but we do need to track which lanes
	  // are remaining.


	  var lastInterleaved = queue.interleaved;

	  if (lastInterleaved !== null) {
	    var interleaved = lastInterleaved;

	    do {
	      var interleavedLane = interleaved.lane;
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
	      markSkippedUpdateLanes(interleavedLane);
	      interleaved = interleaved.next;
	    } while (interleaved !== lastInterleaved);
	  } else if (baseQueue === null) {
	    // `queue.lanes` is used for entangling transitions. We can set it back to
	    // zero once the queue is empty.
	    queue.lanes = NoLanes;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function updateMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = mountWorkInProgressHook();
	  var nextSnapshot;
	  var isHydrating = getIsHydrating();

	  if (isHydrating) {
	    if (getServerSnapshot === undefined) {
	      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
	    }

	    nextSnapshot = getServerSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        if (nextSnapshot !== getServerSnapshot()) {
	          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    }
	  } else {
	    nextSnapshot = getSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        var cachedSnapshot = getSnapshot();

	        if (!objectIs(nextSnapshot, cachedSnapshot)) {
	          error('The result of getSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    } // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.
	    //
	    // We won't do this if we're hydrating server-rendered content, because if
	    // the content is stale, it's already visible anyway. Instead we'll patch
	    // it up in a passive effect.


	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  } // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.


	  hook.memoizedState = nextSnapshot;
	  var inst = {
	    value: nextSnapshot,
	    getSnapshot: getSnapshot
	  };
	  hook.queue = inst; // Schedule an effect to subscribe to the store.

	  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
	  // this whenever subscribe, getSnapshot, or value changes. Because there's no
	  // clean-up function, and we track the deps correctly, we can call pushEffect
	  // directly, without storing any additional state. For the same reason, we
	  // don't need to set a static flag, either.
	  // TODO: We can move this to the passive phase once we add a pre-commit
	  // consistency check. See the next comment.

	  fiber.flags |= Passive;
	  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
	  return nextSnapshot;
	}

	function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.

	  var nextSnapshot = getSnapshot();

	  {
	    if (!didWarnUncachedGetSnapshot) {
	      var cachedSnapshot = getSnapshot();

	      if (!objectIs(nextSnapshot, cachedSnapshot)) {
	        error('The result of getSnapshot should be cached to avoid an infinite loop');

	        didWarnUncachedGetSnapshot = true;
	      }
	    }
	  }

	  var prevSnapshot = hook.memoizedState;
	  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

	  if (snapshotChanged) {
	    hook.memoizedState = nextSnapshot;
	    markWorkInProgressReceivedUpdate();
	  }

	  var inst = hook.queue;
	  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
	  // commit phase if there was an interleaved mutation. In concurrent mode
	  // this can happen all the time, but even in synchronous mode, an earlier
	  // effect may have mutated the store.

	  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
	  // checking whether we scheduled a subscription effect above.
	  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
	    fiber.flags |= Passive;
	    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.

	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  }

	  return nextSnapshot;
	}

	function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	  fiber.flags |= StoreConsistency;
	  var check = {
	    getSnapshot: getSnapshot,
	    value: renderedSnapshot
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.stores = [check];
	  } else {
	    var stores = componentUpdateQueue.stores;

	    if (stores === null) {
	      componentUpdateQueue.stores = [check];
	    } else {
	      stores.push(check);
	    }
	  }
	}

	function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	  // These are updated in the passive phase
	  inst.value = nextSnapshot;
	  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
	  // have been in an event that fired before the passive effects, or it could
	  // have been in a layout effect. In that case, we would have used the old
	  // snapsho and getSnapshot values to bail out. We need to check one more time.

	  if (checkIfSnapshotChanged(inst)) {
	    // Force a re-render.
	    forceStoreRerender(fiber);
	  }
	}

	function subscribeToStore(fiber, inst, subscribe) {
	  var handleStoreChange = function () {
	    // The store changed. Check if the snapshot changed since the last time we
	    // read from the store.
	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceStoreRerender(fiber);
	    }
	  }; // Subscribe to the store and return a clean-up function.


	  return subscribe(handleStoreChange);
	}

	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  var prevValue = inst.value;

	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(prevValue, nextValue);
	  } catch (error) {
	    return true;
	  }
	}

	function forceStoreRerender(fiber) {
	  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	  }
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();

	  {
	    var _ref2 = {
	      current: initialValue
	    };
	    hook.memoizedState = _ref2;
	    return _ref2;
	  }
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
	  } else {
	    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
	  }
	}

	function updateEffect(create, deps) {
	  return updateEffectImpl(Passive, Passive$1, create, deps);
	}

	function mountInsertionEffect(create, deps) {
	  return mountEffectImpl(Update, Insertion, create, deps);
	}

	function updateInsertionEffect(create, deps) {
	  return updateEffectImpl(Update, Insertion, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = value;
	  return value;
	}

	function updateDeferredValue(value) {
	  var hook = updateWorkInProgressHook();
	  var resolvedCurrentHook = currentHook;
	  var prevValue = resolvedCurrentHook.memoizedState;
	  return updateDeferredValueImpl(hook, prevValue, value);
	}

	function rerenderDeferredValue(value) {
	  var hook = updateWorkInProgressHook();

	  if (currentHook === null) {
	    // This is a rerender during a mount.
	    hook.memoizedState = value;
	    return value;
	  } else {
	    // This is a rerender during an update.
	    var prevValue = currentHook.memoizedState;
	    return updateDeferredValueImpl(hook, prevValue, value);
	  }
	}

	function updateDeferredValueImpl(hook, prevValue, value) {
	  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

	  if (shouldDeferValue) {
	    // This is an urgent update. If the value has changed, keep using the
	    // previous value and spawn a deferred render to update it later.
	    if (!objectIs(value, prevValue)) {
	      // Schedule a deferred render
	      var deferredLane = claimNextTransitionLane();
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
	      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
	      // from the latest value. The name "baseState" doesn't really match how we
	      // use it because we're reusing a state hook field instead of creating a
	      // new one.

	      hook.baseState = true;
	    } // Reuse the previous value


	    return prevValue;
	  } else {
	    // This is not an urgent update, so we can use the latest value regardless
	    // of what it is. No need to defer it.
	    // However, if we're currently inside a spawned render, then we need to mark
	    // this as an update to prevent the fiber from bailing out.
	    //
	    // `baseState` is true when the current value is different from the rendered
	    // value. The name doesn't really match how we use it because we're reusing
	    // a state hook field instead of creating a new one.
	    if (hook.baseState) {
	      // Flip this back to false.
	      hook.baseState = false;
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = value;
	    return value;
	  }
	}

	function startTransition(setPending, callback, options) {
	  var previousPriority = getCurrentUpdatePriority();
	  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
	  setPending(true);
	  var prevTransition = ReactCurrentBatchConfig$2.transition;
	  ReactCurrentBatchConfig$2.transition = {};
	  var currentTransition = ReactCurrentBatchConfig$2.transition;

	  {
	    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
	  }

	  try {
	    setPending(false);
	    callback();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;

	    {
	      if (prevTransition === null && currentTransition._updatedFibers) {
	        var updatedFibersCount = currentTransition._updatedFibers.size;

	        if (updatedFibersCount > 10) {
	          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	        }

	        currentTransition._updatedFibers.clear();
	      }
	    }
	  }
	}

	function mountTransition() {
	  var _mountState = mountState(false),
	      isPending = _mountState[0],
	      setPending = _mountState[1]; // The `start` method never changes.


	  var start = startTransition.bind(null, setPending);
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = start;
	  return [isPending, start];
	}

	function updateTransition() {
	  var _updateState = updateState(),
	      isPending = _updateState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	function rerenderTransition() {
	  var _rerenderState = rerenderState(),
	      isPending = _rerenderState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	var isUpdatingOpaqueValueInRenderPhase = false;
	function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
	  {
	    return isUpdatingOpaqueValueInRenderPhase;
	  }
	}

	function mountId() {
	  var hook = mountWorkInProgressHook();
	  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
	  // should do this in Fiber, too? Deferring this decision for now because
	  // there's no other place to store the prefix except for an internal field on
	  // the public createRoot object, which the fiber tree does not currently have
	  // a reference to.

	  var identifierPrefix = root.identifierPrefix;
	  var id;

	  if (getIsHydrating()) {
	    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

	    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
	    // that represents the position of this useId hook among all the useId
	    // hooks for this fiber.

	    var localId = localIdCounter++;

	    if (localId > 0) {
	      id += 'H' + localId.toString(32);
	    }

	    id += ':';
	  } else {
	    // Use a lowercase r prefix for client-generated ids.
	    var globalClientId = globalClientIdCounter++;
	    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
	  }

	  hook.memoizedState = id;
	  return id;
	}

	function updateId() {
	  var hook = updateWorkInProgressHook();
	  var id = hook.memoizedState;
	  return id;
	}

	function dispatchReducerAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function dispatchSetState(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var alternate = fiber.alternate;

	    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.hasEagerState = true;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            // TODO: Do we still need to entangle transitions in this case?
	            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function isRenderPhaseUpdate(fiber) {
	  var alternate = fiber.alternate;
	  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
	}

	function enqueueRenderPhaseUpdate(queue, update) {
	  // This is a render phase update. Stash it in a lazily-created map of
	  // queue -> linked list of updates. After this render pass, we'll restart
	  // and apply the stashed updates on top of the work-in-progress hook.
	  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	} // TODO: Move to ReactFiberConcurrentUpdates?


	function entangleTransitionUpdate(root, queue, lane) {
	  if (isTransitionLane(lane)) {
	    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
	    // must have finished. We can remove them from the shared queue, which
	    // represents a superset of the actually pending lanes. In some cases we
	    // may entangle more than we need to, but that's OK. In fact it's worse if
	    // we *don't* entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}

	function markUpdateInDevTools(fiber, lane, action) {

	  {
	    markStateUpdateScheduled(fiber, lane);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useInsertionEffect: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useMutableSource: throwInvalidHookError,
	  useSyncExternalStore: throwInvalidHookError,
	  useId: throwInvalidHookError,
	  unstable_isNewReconciler: enableNewReconciler
	};

	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var layoutEffectStartTime = -1;
	var profilerStartTime = -1;
	var passiveEffectStartTime = -1;
	/**
	 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
	 *
	 * The overall sequence is:
	 *   1. render
	 *   2. commit (and call `onRender`, `onCommit`)
	 *   3. check for nested updates
	 *   4. flush passive effects (and call `onPostCommit`)
	 *
	 * Nested updates are identified in step 3 above,
	 * but step 4 still applies to the work that was just committed.
	 * We use two flags to track nested updates then:
	 * one tracks whether the upcoming update is a nested update,
	 * and the other tracks whether the current update was a nested update.
	 * The first value gets synced to the second at the start of the render phase.
	 */

	var currentUpdateIsNested = false;
	var nestedUpdateScheduled = false;

	function isCurrentUpdateNested() {
	  return currentUpdateIsNested;
	}

	function markNestedUpdateScheduled() {
	  {
	    nestedUpdateScheduled = true;
	  }
	}

	function resetNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = false;
	    nestedUpdateScheduled = false;
	  }
	}

	function syncNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = nestedUpdateScheduled;
	    nestedUpdateScheduled = false;
	  }
	}

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	function recordLayoutEffectDuration(fiber) {

	  if (layoutEffectStartTime >= 0) {
	    var elapsedTime = now$1() - layoutEffectStartTime;
	    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;
	          root.effectDuration += elapsedTime;
	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;
	          parentStateNode.effectDuration += elapsedTime;
	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function recordPassiveEffectDuration(fiber) {

	  if (passiveEffectStartTime >= 0) {
	    var elapsedTime = now$1() - passiveEffectStartTime;
	    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;

	          if (root !== null) {
	            root.passiveEffectDuration += elapsedTime;
	          }

	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;

	          if (parentStateNode !== null) {
	            // Detached fibers have their state node cleared out.
	            // In this case, the return pointer is also cleared out,
	            // so we won't be able to report the time spent in this Profiler's subtree.
	            parentStateNode.passiveEffectDuration += elapsedTime;
	          }

	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function startLayoutEffectTimer() {

	  layoutEffectStartTime = now$1();
	}

	function startPassiveEffectTimer() {

	  passiveEffectStartTime = now$1();
	}

	function transferActualDuration(fiber) {
	  // Transfer time spent rendering these children so we don't lose it
	  // after we rerender. This is used as a helper in special cases
	  // where we should count the work of multiple passes.
	  var child = fiber.child;

	  while (child) {
	    fiber.actualDuration += child.actualDuration;
	    child = child.sibling;
	  }
	}

	function createCapturedValueAtFiber(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source),
	    digest: null
	  };
	}
	function createCapturedValue(value, digest, stack) {
	  return {
	    value: value,
	    source: null,
	    stack: stack != null ? stack : null,
	    digest: digest != null ? digest : null
	  };
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary, errorInfo) {
	  return true;
	}

	function logCapturedError(boundary, errorInfo) {
	  try {
	    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
	    // This enables renderers like ReactNative to better manage redbox behavior.

	    if (logError === false) {
	      return;
	    }

	    var error = errorInfo.value;

	    if (true) {
	      var source = errorInfo.source;
	      var stack = errorInfo.stack;
	      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
	      // `preventDefault()` in window `error` handler.
	      // We record this information as an expando on the error.

	      if (error != null && error._suppressLogging) {
	        if (boundary.tag === ClassComponent) {
	          // The error is recoverable and was silenced.
	          // Ignore it and don't print the stack addendum.
	          // This is handy for testing error boundaries without noise.
	          return;
	        } // The error is fatal. Since the silencing might have
	        // been accidental, we'll surface it anyway.
	        // However, the browser would have silenced the original error
	        // so we'll print it first, and then print the stack addendum.


	        console['error'](error); // Don't transform to our wrapper
	        // For a more detailed description of this block, see:
	        // https://github.com/facebook/react/pull/13384
	      }

	      var componentName = source ? getComponentNameFromFiber(source) : null;
	      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	      var errorBoundaryMessage;

	      if (boundary.tag === HostRoot) {
	        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
	      } else {
	        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      }

	      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	      // We don't include the original error message and JS stack because the browser
	      // has already printed it. Even if the application swallows the error, it is still
	      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	      console['error'](combinedMessage); // Don't transform to our wrapper
	    }
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logCapturedError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      return getDerivedStateFromError(error$1);
	    };

	    update.callback = function () {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (!includesSomeLane(fiber.lanes, SyncLane)) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
	          }
	        }
	      }
	    };
	  }

	  return update;
	}

	function attachPingListener(root, wakeable, lanes) {
	  // Attach a ping listener
	  //
	  // The data might resolve before we have a chance to commit the fallback. Or,
	  // in the case of a refresh, we'll never commit a fallback. So we need to
	  // attach a listener now. When it resolves ("pings"), we can decide whether to
	  // try rendering the tree again.
	  //
	  // Only attach a listener if one does not already exist for the lanes
	  // we're currently rendering (which acts like a "thread ID" here).
	  //
	  // We only need to do this in concurrent mode. Legacy Suspense always
	  // commits fallbacks synchronously, so there are no pings.
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(wakeable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(wakeable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(lanes)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(lanes);
	    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

	    {
	      if (isDevToolsPresent) {
	        // If we have pending work still, restore the original updaters
	        restorePendingUpdaters(root, lanes);
	      }
	    }

	    wakeable.then(ping, ping);
	  }
	}

	function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
	  // Retry listener
	  //
	  // If the fallback does commit, we need to attach a different type of
	  // listener. This one schedules an update on the Suspense boundary to turn
	  // the fallback state off.
	  //
	  // Stash the wakeable on the boundary fiber so we can access it in the
	  // commit phase.
	  //
	  // When the wakeable resolves, we'll attempt to render the boundary
	  // again ("retry").
	  var wakeables = suspenseBoundary.updateQueue;

	  if (wakeables === null) {
	    var updateQueue = new Set();
	    updateQueue.add(wakeable);
	    suspenseBoundary.updateQueue = updateQueue;
	  } else {
	    wakeables.add(wakeable);
	  }
	}

	function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
	  // A legacy mode Suspense quirk, only relevant to hook components.


	  var tag = sourceFiber.tag;

	  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
	    var currentSource = sourceFiber.alternate;

	    if (currentSource) {
	      sourceFiber.updateQueue = currentSource.updateQueue;
	      sourceFiber.memoizedState = currentSource.memoizedState;
	      sourceFiber.lanes = currentSource.lanes;
	    } else {
	      sourceFiber.updateQueue = null;
	      sourceFiber.memoizedState = null;
	    }
	  }
	}

	function getNearestSuspenseBoundaryToCapture(returnFiber) {
	  var node = returnFiber;

	  do {
	    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
	      return node;
	    } // This boundary already captured during this render. Continue to the next
	    // boundary.


	    node = node.return;
	  } while (node !== null);

	  return null;
	}

	function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
	  // This marks a Suspense boundary so that when we're unwinding the stack,
	  // it captures the suspended "exception" and does a second (fallback) pass.
	  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
	    // Legacy Mode Suspense
	    //
	    // If the boundary is in legacy mode, we should *not*
	    // suspend the commit. Pretend as if the suspended component rendered
	    // null and keep rendering. When the Suspense boundary completes,
	    // we'll do a second pass to render the fallback.
	    if (suspenseBoundary === returnFiber) {
	      // Special case where we suspended while reconciling the children of
	      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
	      // when a React.lazy component is a direct child of a
	      // Suspense boundary.
	      //
	      // Suspense boundaries are implemented as multiple fibers, but they
	      // are a single conceptual unit. The legacy mode behavior where we
	      // pretend the suspended fiber committed as `null` won't work,
	      // because in this case the "suspended" fiber is the inner
	      // Offscreen wrapper.
	      //
	      // Because the contents of the boundary haven't started rendering
	      // yet (i.e. nothing in the tree has partially rendered) we can
	      // switch to the regular, concurrent mode behavior: mark the
	      // boundary with ShouldCapture and enter the unwind phase.
	      suspenseBoundary.flags |= ShouldCapture;
	    } else {
	      suspenseBoundary.flags |= DidCapture;
	      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
	      // But we shouldn't call any lifecycle methods or callbacks. Remove
	      // all lifecycle effect tags.

	      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

	      if (sourceFiber.tag === ClassComponent) {
	        var currentSourceFiber = sourceFiber.alternate;

	        if (currentSourceFiber === null) {
	          // This is a new mount. Change the tag so it's not mistaken for a
	          // completed class component. For example, we should not call
	          // componentWillUnmount if it is deleted.
	          sourceFiber.tag = IncompleteClassComponent;
	        } else {
	          // When we try rendering again, we should not reuse the current fiber,
	          // since it's known to be in an inconsistent state. Use a force update to
	          // prevent a bail out.
	          var update = createUpdate(NoTimestamp, SyncLane);
	          update.tag = ForceUpdate;
	          enqueueUpdate(sourceFiber, update, SyncLane);
	        }
	      } // The source fiber did not complete. Mark it with Sync priority to
	      // indicate that it still has pending work.


	      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
	    }

	    return suspenseBoundary;
	  } // Confirmed that the boundary is in a concurrent mode tree. Continue
	  // with the normal suspend path.
	  //
	  // After this we'll use a set of heuristics to determine whether this
	  // render pass will run to completion or restart or "suspend" the commit.
	  // The actual logic for this is spread out in different places.
	  //
	  // This first principle is that if we're going to suspend when we complete
	  // a root, then we should also restart if we get an update or ping that
	  // might unsuspend it, and vice versa. The only reason to suspend is
	  // because you think you might want to restart before committing. However,
	  // it doesn't make sense to restart only while in the period we're suspended.
	  //
	  // Restarting too aggressively is also not good because it starves out any
	  // intermediate loading state. So we use heuristics to determine when.
	  // Suspense Heuristics
	  //
	  // If nothing threw a Promise or all the same fallbacks are already showing,
	  // then don't suspend/restart.
	  //
	  // If this is an initial render of a new tree of Suspense boundaries and
	  // those trigger a fallback, then don't suspend/restart. We want to ensure
	  // that we can show the initial loading state as quickly as possible.
	  //
	  // If we hit a "Delayed" case, such as when we'd switch from content back into
	  // a fallback, then we should always suspend/restart. Transitions apply
	  // to this case. If none is defined, JND is used instead.
	  //
	  // If we're already showing a fallback and it gets "retried", allowing us to show
	  // another level, but there's still an inner boundary that would show a fallback,
	  // then we suspend/restart for 500ms since the last time we showed a fallback
	  // anywhere in the tree. This effectively throttles progressive loading into a
	  // consistent train of commits. This also gives us an opportunity to restart to
	  // get to the completed state slightly earlier.
	  //
	  // If there's ambiguity due to batching it's resolved in preference of:
	  // 1) "delayed", 2) "initial render", 3) "retry".
	  //
	  // We want to ensure that a "busy" state doesn't get force committed. We want to
	  // ensure that new initial loading states can commit as soon as possible.


	  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
	  // the begin phase to prevent an early bailout.

	  suspenseBoundary.lanes = rootRenderLanes;
	  return suspenseBoundary;
	}

	function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
	  // The source fiber did not complete.
	  sourceFiber.flags |= Incomplete;

	  {
	    if (isDevToolsPresent) {
	      // If we have pending work still, restore the original updaters
	      restorePendingUpdaters(root, rootRenderLanes);
	    }
	  }

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a wakeable. The component suspended.
	    var wakeable = value;
	    resetSuspendedComponent(sourceFiber);

	    {
	      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	        markDidThrowWhileHydratingDEV();
	      }
	    }


	    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

	    if (suspenseBoundary !== null) {
	      suspenseBoundary.flags &= ~ForceClientRender;
	      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
	      // commits fallbacks synchronously, so there are no pings.

	      if (suspenseBoundary.mode & ConcurrentMode) {
	        attachPingListener(root, wakeable, rootRenderLanes);
	      }

	      attachRetryListener(suspenseBoundary, root, wakeable);
	      return;
	    } else {
	      // No boundary was found. Unless this is a sync update, this is OK.
	      // We can suspend and wait for more data to arrive.
	      if (!includesSyncLane(rootRenderLanes)) {
	        // This is not a sync update. Suspend. Since we're not activating a
	        // Suspense boundary, this will unwind all the way to the root without
	        // performing a second pass to render a fallback. (This is arguably how
	        // refresh transitions should work, too, since we're not going to commit
	        // the fallbacks anyway.)
	        //
	        // This case also applies to initial hydration.
	        attachPingListener(root, wakeable, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return;
	      } // This is a sync/discrete update. We treat this case like an error
	      // because discrete renders are expected to produce a complete tree
	      // synchronously to maintain consistency with external state.


	      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
	      // The error will be caught by the nearest suspense boundary.

	      value = uncaughtSuspenseError;
	    }
	  } else {
	    // This is a regular error, not a Suspense wakeable.
	    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	      markDidThrowWhileHydratingDEV();

	      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
	      // discarding the dehydrated content and switching to a client render.
	      // Instead of surfacing the error, find the nearest Suspense boundary
	      // and render it again without hydration.


	      if (_suspenseBoundary !== null) {
	        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
	          // Set a flag to indicate that we should try rendering the normal
	          // children again, not the fallback.
	          _suspenseBoundary.flags |= ForceClientRender;
	        }

	        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
	        // still log it so it can be fixed.

	        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
	        return;
	      }
	    }
	  }

	  value = createCapturedValueAtFiber(value, sourceFiber);
	  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.

	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.flags |= ShouldCapture;
	          var lane = pickArbitraryLane(rootRenderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.flags |= ShouldCapture;

	          var _lane = pickArbitraryLane(rootRenderLanes);

	          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

	          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function getSuspendedCache() {
	  {
	    return null;
	  } // This function is called when a Suspense boundary suspends. It returns the
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(type));
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentNameFromType(_type));
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	  if (!hasScheduledUpdateOrContext) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        var lazyComponent = outerMemoType;
	        var payload = lazyComponent._payload;
	        var init = lazyComponent._init;

	        try {
	          outerMemoType = init(payload);
	        } catch (x) {
	          outerMemoType = null;
	        } // Inner propTypes will be validated in the function component path.


	        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	        if (outerPropTypes) {
	          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	          'prop', getComponentNameFromType(outerMemoType));
	        }
	      }
	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
	      // would during a normal fiber bailout.
	      //
	      // We don't have strong guarantees that the props object is referentially
	      // equal during updates where we can't bail out anyway — like if the props
	      // are shallowly equal, but there's a local state or context update in the
	      // same batch.
	      //
	      // However, as a principle, we should aim to make the behavior consistent
	      // across different ways of memoizing a component. For example, React.memo
	      // has a different internal Fiber layout if you pass a normal function
	      // component (SimpleMemoComponent) versus if you pass a different type
	      // like forwardRef (MemoComponent). But this is an implementation detail.
	      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
	      // affect whether the props object is reused during a bailout.

	      workInProgress.pendingProps = nextProps = prevProps;

	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        // The pending lanes were cleared at the beginning of beginWork. We're
	        // about to bail out, but there might be other lanes that weren't
	        // included in the current render. Usually, the priority level of the
	        // remaining updates is accumulated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.lanes = current.lanes;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
	}

	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  var prevState = current !== null ? current.memoizedState : null;

	  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
	    // Rendering a hidden tree.
	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      // In legacy sync mode, don't defer the subtree. Render it now.
	      // TODO: Consider how Offscreen should work with transitions in the future
	      var nextState = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = nextState;

	      pushRenderLanes(workInProgress, renderLanes);
	    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
	      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
	      // and resume this tree later.

	      var nextBaseLanes;

	      if (prevState !== null) {
	        var prevBaseLanes = prevState.baseLanes;
	        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
	      } else {
	        nextBaseLanes = renderLanes;
	      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
	      var _nextState = {
	        baseLanes: nextBaseLanes,
	        cachePool: spawnedCachePool,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState;
	      workInProgress.updateQueue = null;
	      // to avoid a push/pop misalignment.


	      pushRenderLanes(workInProgress, nextBaseLanes);

	      return null;
	    } else {
	      // This is the second render. The surrounding visible content has already
	      // committed. Now we resume rendering the hidden tree.
	      // Rendering at offscreen, so we can clear the base lanes.
	      var _nextState2 = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

	      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

	      pushRenderLanes(workInProgress, subtreeRenderLanes);
	    }
	  } else {
	    // Rendering a visible tree.
	    var _subtreeRenderLanes;

	    if (prevState !== null) {
	      // We're going from hidden -> visible.
	      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

	      workInProgress.memoizedState = null;
	    } else {
	      // We weren't previously hidden, and we still aren't, so there's nothing
	      // special to do. Need to push to the stack regardless, though, to avoid
	      // a push/pop misalignment.
	      _subtreeRenderLanes = renderLanes;
	    }

	    pushRenderLanes(workInProgress, _subtreeRenderLanes);
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	} // Note: These happen to have identical begin phases, for now. We shouldn't hold

	function updateFragment(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderLanes) {
	  {
	    workInProgress.flags |= Update;

	    {
	      // Reset effect durations for the next eventual effect phase.
	      // These are reset during render to allow the DevTools commit hook a chance to read them,
	      var stateNode = workInProgress.stateNode;
	      stateNode.effectDuration = 0;
	      stateNode.passiveEffectDuration = 0;
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.flags |= Ref;

	    {
	      workInProgress.flags |= RefStatic;
	    }
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    // This is used by DevTools to force a boundary to error.
	    switch (shouldError(workInProgress)) {
	      case false:
	        {
	          var _instance = workInProgress.stateNode;
	          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
	          // Is there a better way to do this?

	          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
	          var state = tempInstance.state;

	          _instance.updater.enqueueSetState(_instance, state, null);

	          break;
	        }

	      case true:
	        {
	          workInProgress.flags |= DidCapture;
	          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

	          var error$1 = new Error('Simulated error coming from DevTools');
	          var lane = pickArbitraryLane(renderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

	          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          break;
	        }
	    }

	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

	  {
	    var inst = workInProgress.stateNode;

	    if (shouldUpdate && inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      markComponentRenderStarted(workInProgress);
	    }

	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          instance.render();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      setIsRendering(false);
	    }

	    {
	      markComponentRenderStopped();
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderLanes) {
	  pushHostRootContext(workInProgress);

	  if (current === null) {
	    throw new Error('Should have a current fiber. This is a bug in React.');
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState.element;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	  var nextState = workInProgress.memoizedState;
	  workInProgress.stateNode;
	  // being called "element".


	  var nextChildren = nextState.element;

	  if ( prevState.isDehydrated) {
	    // This is a hydration root whose shell has not yet hydrated. We should
	    // attempt to hydrate.
	    // Flip isDehydrated to false to indicate that when this render
	    // finishes, the root will no longer be dehydrated.
	    var overrideState = {
	      element: nextChildren,
	      isDehydrated: false,
	      cache: nextState.cache,
	      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
	      transitions: nextState.transitions
	    };
	    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
	    // have reducer functions so it doesn't need rebasing.

	    updateQueue.baseState = overrideState;
	    workInProgress.memoizedState = overrideState;

	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during a previous attempt to hydrate the shell, so we
	      // forced a client render.
	      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
	    } else if (nextChildren !== prevChildren) {
	      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
	    } else {
	      // The outermost shell has not hydrated yet. Start hydrating.
	      enterHydrationState(workInProgress);

	      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	      workInProgress.child = child;
	      var node = child;

	      while (node) {
	        // Mark each child as hydrating. This is a fast path to know whether this
	        // tree is part of a hydrating tree. This is used to determine if a child
	        // node has fully mounted yet, and for scheduling event replaying.
	        // Conceptually this is similar to Placement in that a new subtree is
	        // inserted into the React tree here. It just happens to not need DOM
	        // mutations because it already exists.
	        node.flags = node.flags & ~Placement | Hydrating;
	        node = node.sibling;
	      }
	    }
	  } else {
	    // Root is not dehydrated. Either this is a client-only root, or it
	    // already hydrated.
	    resetHydrationState();

	    if (nextChildren === prevChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }

	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
	  // Revert to client rendering.
	  resetHydrationState();
	  queueHydrationError(recoverableError);
	  workInProgress.flags |= ForceClientRender;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderLanes) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.flags |= ContentReset;
	  }

	  markRef(current, workInProgress);
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var lazyComponent = elementType;
	  var payload = lazyComponent._payload;
	  var init = lazyComponent._init;
	  var Component = init(payload); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentNameFromType(Component));
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        renderLanes);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var value;
	  var hasId;

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	    hasId = checkDidRenderIdHook();
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  {
	    // Support for module components is deprecated and is removed behind a flag.
	    // Whether or not it would crash later, we want to show a good message in DEV first.
	    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	      var _componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    }
	  }

	  if ( // Run these checks in production only if the flag is off.
	  // Eventually we'll delete this branch altogether.
	   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName2]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

	        didWarnAboutModulePatternComponent[_componentName2] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderLanes);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	          hasId = checkDidRenderIdHook();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	    }

	    if (getIsHydrating() && hasId) {
	      pushMaterializedTreeId(workInProgress);
	    }

	    reconcileChildren(null, workInProgress, value, renderLanes);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
	        error('%s: Function components do not support contextType.', _componentName4);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  treeContext: null,
	  retryLane: NoLane
	};

	function mountSuspenseOffscreenState(renderLanes) {
	  return {
	    baseLanes: renderLanes,
	    cachePool: getSuspendedCache(),
	    transitions: null
	  };
	}

	function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
	  var cachePool = null;

	  return {
	    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
	    cachePool: cachePool,
	    transitions: prevOffscreenState.transitions
	  };
	} // TODO: Probably should inline this back


	function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
	  // If we're already showing a fallback, there are cases where we need to
	  // remain on that fallback regardless of whether the content has resolved.
	  // For example, SuspenseList coordinates when nested content appears.
	  if (current !== null) {
	    var suspenseState = current.memoizedState;

	    if (suspenseState === null) {
	      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
	      // is true. More precise name might be "ForceRemainSuspenseFallback".
	      // Note: This is a factoring smell. Can't remain on a fallback if there's
	      // no fallback to remain on.
	      return false;
	    }
	  } // Not currently showing content. Consult the Suspense context.


	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
	}

	function getRemainingWorkInPrimaryTree(current, renderLanes) {
	  // TODO: Should not remove render lanes that were pinged during this render
	  return removeLanes(current.childLanes, renderLanes);
	}

	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.flags |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var showFallback = false;
	  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    showFallback = true;
	    workInProgress.flags &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
	      {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
	  // boundary's children. This involves some custom reconciliation logic. Two
	  // main reasons this is so complicated.
	  //
	  // First, Legacy Mode has different semantics for backwards compatibility. The
	  // primary tree will commit in an inconsistent state, so when we do the
	  // second pass to render the fallback, we do some exceedingly, uh, clever
	  // hacks to make that not totally break. Like transferring effects and
	  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
	  // because we bailout on the primary tree completely and leave it in its old
	  // state, no effects. Same as what we do for Offscreen (except that
	  // Offscreen doesn't have the first render pass).
	  //
	  // Second is hydration. During hydration, the Suspense fiber has a slightly
	  // different layout, where the child points to a dehydrated fragment, which
	  // contains the DOM rendered by the server.
	  //
	  // Third, even if you set all that aside, Suspense is like error boundaries in
	  // that we first we try to render one tree, and if that fails, we render again
	  // and switch to a different tree. Like a try/catch block. So we have to track
	  // which branch we're currently rendering. Ideally we would model this using
	  // a stack.

	  if (current === null) {
	    // Initial mount
	    // Special path for hydration
	    // If we're currently hydrating, try to hydrate this boundary.
	    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

	    var suspenseState = workInProgress.memoizedState;

	    if (suspenseState !== null) {
	      var dehydrated = suspenseState.dehydrated;

	      if (dehydrated !== null) {
	        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
	      }
	    }

	    var nextPrimaryChildren = nextProps.children;
	    var nextFallbackChildren = nextProps.fallback;

	    if (showFallback) {
	      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var primaryChildFragment = workInProgress.child;
	      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;

	      return fallbackFragment;
	    } else {
	      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
	    }
	  } else {
	    // This is an update.
	    // Special path for hydration
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      var _dehydrated = prevState.dehydrated;

	      if (_dehydrated !== null) {
	        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
	      }
	    }

	    if (showFallback) {
	      var _nextFallbackChildren = nextProps.fallback;
	      var _nextPrimaryChildren = nextProps.children;
	      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
	      var _primaryChildFragment2 = workInProgress.child;
	      var prevOffscreenState = current.child.memoizedState;
	      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

	      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    } else {
	      var _nextPrimaryChildren2 = nextProps.children;

	      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

	      workInProgress.memoizedState = null;
	      return _primaryChildFragment3;
	    }
	  }
	}

	function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	  primaryChildFragment.return = workInProgress;
	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var progressedPrimaryFragment = workInProgress.child;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;
	  var fallbackChildFragment;

	  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
	    // In legacy mode, we commit the primary tree as if it successfully
	    // completed, even though it's in an inconsistent state.
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = 0;
	      primaryChildFragment.treeBaseDuration = 0;
	    }

	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  } else {
	    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  }

	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
	  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
	  // this wrapper function to constrain it.
	  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
	}

	function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
	  // The props argument to `createWorkInProgress` is `any` typed, so we use this
	  // wrapper function to constrain it.
	  return createWorkInProgress(current, offscreenProps);
	}

	function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
	    mode: 'visible',
	    children: primaryChildren
	  });

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    primaryChildFragment.lanes = renderLanes;
	  }

	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = null;

	  if (currentFallbackChildFragment !== null) {
	    // Delete the fallback child fragment
	    var deletions = workInProgress.deletions;

	    if (deletions === null) {
	      workInProgress.deletions = [currentFallbackChildFragment];
	      workInProgress.flags |= ChildDeletion;
	    } else {
	      deletions.push(currentFallbackChildFragment);
	    }
	  }

	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;

	  if ( // In legacy mode, we commit the primary tree as if it successfully
	  // completed, even though it's in an inconsistent state.
	  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
	  // already cloned. In legacy mode, the only case where this isn't true is
	  // when DevTools forces us to display a fallback; we skip the first render
	  // pass entirely and go straight to rendering the fallback. (In Concurrent
	  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	  // only codepath.)
	  workInProgress.child !== currentPrimaryChildFragment) {
	    var progressedPrimaryFragment = workInProgress.child;
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
	      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
	    } // The fallback fiber was added as a deletion during the first pass.
	    // However, since we're going to remain on the fallback, we no longer want
	    // to delete it.


	    workInProgress.deletions = null;
	  } else {
	    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
	    // (We don't do this in legacy mode, because in legacy mode we don't re-use
	    // the current tree; see previous branch.)

	    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
	  }

	  var fallbackChildFragment;

	  if (currentFallbackChildFragment !== null) {
	    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
	  } else {
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
	    // mounted but this is a new fiber.

	    fallbackChildFragment.flags |= Placement;
	  }

	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
	  // Falling back to client rendering. Because this has performance
	  // implications, it's considered a recoverable error, even though the user
	  // likely won't observe anything wrong with the UI.
	  //
	  // The error is passed in as an argument to enforce that every caller provide
	  // a custom message, or explicitly opt out (currently the only path that opts
	  // out is legacy mode; every concurrent path provides an error).
	  if (recoverableError !== null) {
	    queueHydrationError(recoverableError);
	  } // This will add the old fiber to the deletion list


	  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

	  var nextProps = workInProgress.pendingProps;
	  var primaryChildren = nextProps.children;
	  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
	  // mounted but this is a new fiber.

	  primaryChildFragment.flags |= Placement;
	  workInProgress.memoizedState = null;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var fiberMode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
	  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
	  // boundary) already mounted but this is a new fiber.

	  fallbackChildFragment.flags |= Placement;
	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;

	  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	    // We will have dropped the effect list which contains the
	    // deletion. We need to reconcile to delete the current child.
	    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	  }

	  return fallbackChildFragment;
	}

	function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
	  // During the first pass, we'll bail out and not drill into the children.
	  // Instead, we'll leave the content in place and try to hydrate it later.
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    {
	      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
	    }

	    workInProgress.lanes = laneToLanes(SyncLane);
	  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
	    // This is a client-only boundary. Since we won't get any content from the server
	    // for this, we need to schedule that at a higher priority based on when it would
	    // have timed out. In theory we could render it in this pass but it would have the
	    // wrong priority associated with it and will prevent hydration of parent path.
	    // Instead, we'll leave work left on it to render it in a separate commit.
	    // TODO This time should be the time at which the server rendered response that is
	    // a parent to this boundary was displayed. However, since we currently don't have
	    // a protocol to transfer that time, we'll just estimate it by using the current
	    // time. This will mean that Suspense timeouts are slightly shifted to later than
	    // they should be.
	    // Schedule a normal pri update to render this content.
	    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
	  } else {
	    // We'll continue hydrating the rest at offscreen priority since we'll already
	    // be showing the right content coming from the server, it is no rush.
	    workInProgress.lanes = laneToLanes(OffscreenLane);
	  }

	  return null;
	}

	function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
	  if (!didSuspend) {
	    // This is the first render pass. Attempt to hydrate.
	    // We should never be hydrating at this point because it is the first pass,
	    // but after we've already committed once.
	    warnIfHydrating();

	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
	      // required — every concurrent mode path that causes hydration to
	      // de-opt to client rendering should have an error message.
	      null);
	    }

	    if (isSuspenseInstanceFallback(suspenseInstance)) {
	      // This boundary is in a permanent fallback state. In this case, we'll never
	      // get an update and we'll never be able to hydrate the final content. Let's just try the
	      // client side render instead.
	      var digest, message, stack;

	      {
	        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

	        digest = _getSuspenseInstanceF.digest;
	        message = _getSuspenseInstanceF.message;
	        stack = _getSuspenseInstanceF.stack;
	      }

	      var error;

	      if (message) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        error = new Error(message);
	      } else {
	        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
	      }

	      var capturedValue = createCapturedValue(error, digest, stack);
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
	    }
	    // any context has changed, we need to treat is as if the input might have changed.


	    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

	    if (didReceiveUpdate || hasContextChanged) {
	      // This boundary has changed since the first render. This means that we are now unable to
	      // hydrate it. We might still be able to hydrate it using a higher priority lane.
	      var root = getWorkInProgressRoot();

	      if (root !== null) {
	        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

	        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
	          // Intentionally mutating since this render will get interrupted. This
	          // is one of the very rare times where we mutate the current tree
	          // during the render phase.
	          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

	          var eventTime = NoTimestamp;
	          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
	          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
	        }
	      } // If we have scheduled higher pri work above, this will probably just abort the render
	      // since we now have higher priority work, but in case it doesn't, we need to prepare to
	      // render something, if we time out. Even if that requires us to delete everything and
	      // skip hydration.
	      // Delay having to do this as long as the suspense timeout allows us.


	      renderDidSuspendDelayIfPossible();

	      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
	    } else if (isSuspenseInstancePending(suspenseInstance)) {
	      // This component is still pending more data from the server, so we can't hydrate its
	      // content. We treat it as if this component suspended itself. It might seem as if
	      // we could just try to render it client-side instead. However, this will perform a
	      // lot of unnecessary work and is unlikely to complete since it often will suspend
	      // on missing data anyway. Additionally, the server might be able to render more
	      // than we can on the client yet. In that case we'd end up with more fallback states
	      // on the client than if we just leave it alone. If the server times out or errors
	      // these should update this boundary to the permanent Fallback state instead.
	      // Mark it as having captured (i.e. suspended).
	      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

	      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

	      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
	      registerSuspenseInstanceRetry(suspenseInstance, retry);
	      return null;
	    } else {
	      // This is the first attempt.
	      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
	      var primaryChildren = nextProps.children;
	      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.

	      primaryChildFragment.flags |= Hydrating;
	      return primaryChildFragment;
	    }
	  } else {
	    // This is the second render pass. We already attempted to hydrated, but
	    // something either suspended or errored.
	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during hydration. Try again without hydrating.
	      workInProgress.flags &= ~ForceClientRender;

	      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
	    } else if (workInProgress.memoizedState !== null) {
	      // Something suspended and we should still be in dehydrated mode.
	      // Leave the existing child in place.
	      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
	      // but the normal suspense pass doesn't.

	      workInProgress.flags |= DidCapture;
	      return null;
	    } else {
	      // Suspended but we should no longer be in dehydrated mode.
	      // Therefore we now have to render the fallback.
	      var nextPrimaryChildren = nextProps.children;
	      var nextFallbackChildren = nextProps.fallback;
	      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var _primaryChildFragment4 = workInProgress.child;
	      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    }
	  }
	}

	function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	  }

	  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isAnArray = isArray(childSlot);
	    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isAnArray || isIterable) {
	      var type = isAnArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailMode: tailMode
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailMode = tailMode;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.flags |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    // In legacy mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderLanes) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

	function updateContextProvider(current, workInProgress, renderLanes) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    if (!('value' in newProps)) {
	      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
	        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

	        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
	      }
	    }

	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
	    }
	  }

	  pushProvider(workInProgress, context, newValue);

	  {
	    if (oldProps !== null) {
	      var oldValue = oldProps.value;

	      if (objectIs(oldValue, newValue)) {
	        // No change. Bailout early if children are the same.
	        if (oldProps.children === newProps.children && !hasContextChanged()) {
	          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	        }
	      } else {
	        // The context value changed. Search for matching consumers and schedule
	        // them to update.
	        propagateContextChange(workInProgress, context, renderLanes);
	      }
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderLanes) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var newValue = readContext(context);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    if (current !== null) {
	      // A lazy component only mounts if it suspended inside a non-
	      // concurrent tree, in an inconsistent state. We want to treat it like
	      // a new mount, even though an empty version of it already committed.
	      // Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.flags |= Placement;
	    }
	  }
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

	  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    {
	      return null;
	    }
	  } // This fiber doesn't have work, but its subtree does. Clone the child
	  // fibers and continue.


	  cloneChildFibers(current, workInProgress);
	  return workInProgress.child;
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      // eslint-disable-next-line react-internal/prod-error-codes
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [current];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(current);
	    }

	    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function checkScheduledUpdateOrContext(current, renderLanes) {
	  // Before performing an early bailout, we must check if there are pending
	  // updates or context.
	  var updateLanes = current.lanes;

	  if (includesSomeLane(updateLanes, renderLanes)) {
	    return true;
	  } // No pending update, but because context is propagated lazily, we need

	  return false;
	}

	function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
	  // This fiber does not have any pending work. Bailout without entering
	  // the begin phase. There's still some bookkeeping we that needs to be done
	  // in this optimized path, mostly pushing stuff onto the stack.
	  switch (workInProgress.tag) {
	    case HostRoot:
	      pushHostRootContext(workInProgress);
	      workInProgress.stateNode;

	      resetHydrationState();
	      break;

	    case HostComponent:
	      pushHostContext(workInProgress);
	      break;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          pushContextProvider(workInProgress);
	        }

	        break;
	      }

	    case HostPortal:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      break;

	    case ContextProvider:
	      {
	        var newValue = workInProgress.memoizedProps.value;
	        var context = workInProgress.type._context;
	        pushProvider(workInProgress, context, newValue);
	        break;
	      }

	    case Profiler:
	      {
	        // Profiler should only call onRender when one of its descendants actually rendered.
	        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (hasChildWork) {
	          workInProgress.flags |= Update;
	        }

	        {
	          // Reset effect durations for the next eventual effect phase.
	          // These are reset during render to allow the DevTools commit hook a chance to read them,
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = 0;
	          stateNode.passiveEffectDuration = 0;
	        }
	      }

	      break;

	    case SuspenseComponent:
	      {
	        var state = workInProgress.memoizedState;

	        if (state !== null) {
	          if (state.dehydrated !== null) {
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
	            // been unsuspended it has committed as a resolved Suspense component.
	            // If it needs to be retried, it should have work scheduled on it.

	            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
	            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

	            return null;
	          } // If this boundary is currently timed out, we need to decide
	          // whether to retry the primary children, or to skip over it and
	          // go straight to the fallback. Check the priority of the primary
	          // child fragment.


	          var primaryChildFragment = workInProgress.child;
	          var primaryChildLanes = primaryChildFragment.childLanes;

	          if (includesSomeLane(renderLanes, primaryChildLanes)) {
	            // The primary children have pending work. Use the normal path
	            // to attempt to render the primary children again.
	            return updateSuspenseComponent(current, workInProgress, renderLanes);
	          } else {
	            // The primary child fragment does not have pending work marked
	            // on it
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	            // priority. Bailout.

	            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

	            if (child !== null) {
	              // The fallback children have pending work. Skip over the
	              // primary children and work on the fallback.
	              return child.sibling;
	            } else {
	              // Note: We can return `null` here because we already checked
	              // whether there were nested context consumers, via the call to
	              // `bailoutOnAlreadyFinishedWork` above.
	              return null;
	            }
	          }
	        } else {
	          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	        }

	        break;
	      }

	    case SuspenseListComponent:
	      {
	        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

	        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (didSuspendBefore) {
	          if (_hasChildWork) {
	            // If something was in fallback state last time, and we have all the
	            // same children then we're still in progressive loading state.
	            // Something might get unblocked by state updates or retries in the
	            // tree which will affect the tail. So we need to use the normal
	            // path to compute the correct tail.
	            return updateSuspenseListComponent(current, workInProgress, renderLanes);
	          } // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.


	          workInProgress.flags |= DidCapture;
	        } // If nothing suspended before and we're rendering the same children,
	        // then the tail doesn't matter. Anything new that suspends will work
	        // in the "together" mode, so we can continue from the state we had.


	        var renderState = workInProgress.memoizedState;

	        if (renderState !== null) {
	          // Reset to the "together" mode in case we've started a different
	          // update in the past but didn't complete it.
	          renderState.rendering = null;
	          renderState.tail = null;
	          renderState.lastEffect = null;
	        }

	        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	        if (_hasChildWork) {
	          break;
	        } else {
	          // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.
	          return null;
	        }
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        // Need to check if the tree still needs to be deferred. This is
	        // almost identical to the logic used in the normal update path,
	        // so we'll just enter that. The only difference is we'll bail out
	        // at the next level instead of this one, because the child props
	        // have not changed. Which is fine.
	        // TODO: Probably should refactor `beginWork` to split the bailout
	        // path from the normal path. I'm tempted to do a labeled break here
	        // but I won't :)
	        workInProgress.lanes = NoLanes;
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	}

	function beginWork(current, workInProgress, renderLanes) {
	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else {
	      // Neither props nor legacy context changes. Check if there's a pending
	      // update or context change.
	      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
	      // may not be work scheduled on `current`, so we check for this flag.
	      (workInProgress.flags & DidCapture) === NoFlags) {
	        // No pending updates or context. Bail out now.
	        didReceiveUpdate = false;
	        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
	      }

	      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      } else {
	        // An update was scheduled on this fiber, but there are no new props
	        // nor legacy context. Set this to false. If an update queue or context
	        // consumer produces a changed value, it will set this to true. Otherwise,
	        // the component will assume the children have not changed and bail out.
	        didReceiveUpdate = false;
	      }
	    }
	  } else {
	    didReceiveUpdate = false;

	    if (getIsHydrating() && isForkedChild(workInProgress)) {
	      // Check if this child belongs to a list of muliple children in
	      // its parent.
	      //
	      // In a true multi-threaded implementation, we would render children on
	      // parallel threads. This would represent the beginning of a new render
	      // thread for this subtree.
	      //
	      // We only use this for id generation during hydration, which is why the
	      // logic is located in this special branch.
	      var slotIndex = workInProgress.index;
	      var numberOfForks = getForksAtLevel();
	      pushTreeId(workInProgress, numberOfForks, slotIndex);
	    }
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.lanes = NoLanes;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
	      }

	    case FunctionComponent:
	      {
	        var Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
	      }

	    case ClassComponent:
	      {
	        var _Component = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderLanes);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderLanes);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderLanes);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderLanes);

	    case Mode:
	      return updateMode(current, workInProgress, renderLanes);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderLanes);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderLanes);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderLanes);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentNameFromType(_type2));
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderLanes);
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	      {
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.flags |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.flags |= Ref;

	  {
	    workInProgress.flags |= RefStatic;
	  }
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (current, workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (getIsHydrating()) {
	    // If we're hydrating, we should consume as many items as we can
	    // so we don't leave any behind.
	    return;
	  }

	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function bubbleProperties(completedWork) {
	  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
	  var newChildLanes = NoLanes;
	  var subtreeFlags = NoFlags;

	  if (!didBailout) {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var actualDuration = completedWork.actualDuration;
	      var treeBaseDuration = completedWork.selfBaseDuration;
	      var child = completedWork.child;

	      while (child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	        // When work is done, it should bubble to the parent's actualDuration. If
	        // the fiber has not been cloned though, (meaning no work was done), then
	        // this value will reflect the amount of time spent working on a previous
	        // render. In that case it should not bubble. We determine whether it was
	        // cloned by comparing the child pointer.

	        actualDuration += child.actualDuration;
	        treeBaseDuration += child.treeBaseDuration;
	        child = child.sibling;
	      }

	      completedWork.actualDuration = actualDuration;
	      completedWork.treeBaseDuration = treeBaseDuration;
	    } else {
	      var _child = completedWork.child;

	      while (_child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
	        subtreeFlags |= _child.subtreeFlags;
	        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child.return = completedWork;
	        _child = _child.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  } else {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var _treeBaseDuration = completedWork.selfBaseDuration;
	      var _child2 = completedWork.child;

	      while (_child2 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child2.subtreeFlags & StaticMask;
	        subtreeFlags |= _child2.flags & StaticMask;
	        _treeBaseDuration += _child2.treeBaseDuration;
	        _child2 = _child2.sibling;
	      }

	      completedWork.treeBaseDuration = _treeBaseDuration;
	    } else {
	      var _child3 = completedWork.child;

	      while (_child3 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child3.subtreeFlags & StaticMask;
	        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child3.return = completedWork;
	        _child3 = _child3.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  }

	  completedWork.childLanes = newChildLanes;
	  return didBailout;
	}

	function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
	  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
	    warnIfUnhydratedTailNodes(workInProgress);
	    resetHydrationState();
	    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
	    return false;
	  }

	  var wasHydrated = popHydrationState(workInProgress);

	  if (nextState !== null && nextState.dehydrated !== null) {
	    // We might be inside a hydration state the first time we're picking up this
	    // Suspense boundary, and also after we've reentered it for further hydration.
	    if (current === null) {
	      if (!wasHydrated) {
	        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
	      }

	      prepareToHydrateHostSuspenseInstance(workInProgress);
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var isTimedOutSuspense = nextState !== null;

	          if (isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var primaryChildFragment = workInProgress.child;

	            if (primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    } else {
	      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
	      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
	      resetHydrationState();

	      if ((workInProgress.flags & DidCapture) === NoFlags) {
	        // This boundary did not suspend so it's now hydrated and unsuspended.
	        workInProgress.memoizedState = null;
	      } // If nothing suspended, we need to schedule an effect to mark this boundary
	      // as having hydrated so events know that they're free to be invoked.
	      // It's also a signal to replay events and the suspense callback.
	      // If something suspended, schedule an effect to attach retry listeners.
	      // So we might as well always mark this.


	      workInProgress.flags |= Update;
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var _isTimedOutSuspense = nextState !== null;

	          if (_isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var _primaryChildFragment = workInProgress.child;

	            if (_primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    }
	  } else {
	    // Successfully completed this tree. If this was a forced client render,
	    // there may have been recoverable errors during first hydration
	    // attempt. If so, add them to a queue so we can log them in the
	    // commit phase.
	    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

	    return true;
	  }
	}

	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.

	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      bubbleProperties(workInProgress);
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostRoot:
	      {
	        var fiberRoot = workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          } else {
	            if (current !== null) {
	              var prevState = current.memoizedState;

	              if ( // Check if this is a client root
	              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
	              (workInProgress.flags & ForceClientRender) !== NoFlags) {
	                // Schedule an effect to clear this container at the start of the
	                // next commit. This handles the case of React rendering into a
	                // container with previous children. It's also safe to do for
	                // updates too, because current.child would only be null if the
	                // previous render was null (so the container would already
	                // be empty).
	                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
	                // recoverable errors during first hydration attempt. If so, add
	                // them to a queue so we can log them in the commit phase.

	                upgradeHydrationErrorsToRecoverable();
	              }
	            }
	          }
	        }

	        updateHostContainer(current, workInProgress);
	        bubbleProperties(workInProgress);

	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.


	            bubbleProperties(workInProgress);
	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false);
	            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.

	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
	        // to its own fiber type so that we can add other kinds of hydration
	        // boundaries that aren't associated with a Suspense tree. In anticipation
	        // of such a refactor, all the hydration logic is contained in
	        // this branch.

	        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
	          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

	          if (!fallthroughToNormalSuspensePath) {
	            if (workInProgress.flags & ShouldCapture) {
	              // Special case. There were remaining unhydrated nodes. We treat
	              // this as a mismatch. Revert to client rendering.
	              return workInProgress;
	            } else {
	              // Did not finish hydrating, either because this is the initial
	              // render or because something suspended.
	              return null;
	            }
	          } // Continue with the normal Suspense path.

	        }

	        if ((workInProgress.flags & DidCapture) !== NoFlags) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.lanes = renderLanes; // Do not reset the effect list.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          } // Don't bubble properties in this case.


	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;
	        // a passive effect, which is when we process the transitions


	        if (nextDidTimeout !== prevDidTimeout) {
	          // an effect to toggle the subtree's visibility. When we switch from
	          // fallback -> primary, the inner Offscreen fiber schedules this effect
	          // as part of its normal complete phase. But when we switch from
	          // primary -> fallback, the inner Offscreen fiber does not have a complete
	          // phase. So we need to schedule its effect here.
	          //
	          // We also use this flag to connect/disconnect the effects, but the same
	          // logic applies: when re-connecting, the Offscreen fiber's complete
	          // phase will handle scheduling the effect. It's only when the fallback
	          // is active that we have to do anything special.


	          if (nextDidTimeout) {
	            var _offscreenFiber2 = workInProgress.child;
	            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
	            // in the concurrent tree already suspended during this render.
	            // This is a known bug.

	            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	              // TODO: Move this back to throwException because this is too late
	              // if this is a large tree which is common for initial loads. We
	              // don't know if we should restart a render or not until we get
	              // this marker, and this is too late.
	              // If this render already had a ping or lower pri updates,
	              // and this is the first time we know we're going to suspend we
	              // should be able to immediately restart from within throwException.
	              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

	              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	                // If this was in an invisible tree or a new render, then showing
	                // this boundary is ok.
	                renderDidSuspend();
	              } else {
	                // Otherwise, we're going to have to hide content so we should
	                // suspend for longer if possible.
	                renderDidSuspendDelayIfPossible();
	              }
	            }
	          }
	        }

	        var wakeables = workInProgress.updateQueue;

	        if (wakeables !== null) {
	          // Schedule an effect to attach a retry listener to the promise.
	          // TODO: Move to passive phase
	          workInProgress.flags |= Update;
	        }

	        bubbleProperties(workInProgress);

	        {
	          if ((workInProgress.mode & ProfileMode) !== NoMode) {
	            if (nextDidTimeout) {
	              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	              var primaryChildFragment = workInProgress.child;

	              if (primaryChildFragment !== null) {
	                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	              }
	            }
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(current, workInProgress);

	      if (current === null) {
	        preparePortalMount(workInProgress.stateNode.containerInfo);
	      }

	      bubbleProperties(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      bubbleProperties(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          bubbleProperties(workInProgress);
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.flags |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thenables. Instead, we'll transfer its thenables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThenables = suspended.updateQueue;

	                  if (newThenables !== null) {
	                    workInProgress.updateQueue = newThenables;
	                    workInProgress.flags |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect flags before doing the second pass since that's now invalid.
	                  // Reset the child fibers to their original state.


	                  workInProgress.subtreeFlags = NoFlags;
	                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }

	            if (renderState.tail !== null && now() > getRenderTargetTime()) {
	              // We have already passed our CPU deadline but we still have rows
	              // left in the tail. We'll just give up further attempts to render
	              // the main content and only render fallbacks.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThenables = _suspended.updateQueue;

	              if (_newThenables !== null) {
	                workInProgress.updateQueue = _newThenables;
	                workInProgress.flags |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
	              ) {
	                  // We're done.
	                  bubbleProperties(workInProgress);
	                  return null;
	                }
	            } else if ( // The time it took to render last row is greater than the remaining
	            // time we have to render. So rendering one more row would likely
	            // exceed it.
	            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          // Pop a row.
	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
	          // Don't bubble properties in this case.

	          return next;
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        popRenderLanes(workInProgress);
	        var _nextState = workInProgress.memoizedState;
	        var nextIsHidden = _nextState !== null;

	        if (current !== null) {
	          var _prevState = current.memoizedState;
	          var prevIsHidden = _prevState !== null;

	          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
	          !enableLegacyHidden )) {
	            workInProgress.flags |= Visibility;
	          }
	        }

	        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
	          bubbleProperties(workInProgress);
	        } else {
	          // Don't bubble properties for hidden children unless we're rendering
	          // at offscreen priority.
	          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
	            bubbleProperties(workInProgress);

	            {
	              // Check if there was an insertion or update in the hidden subtree.
	              // If so, we need to hide those nodes in the commit phase, so
	              // schedule a visibility effect.
	              if ( workInProgress.subtreeFlags & (Placement | Update)) {
	                workInProgress.flags |= Visibility;
	              }
	            }
	          }
	        }
	        return null;
	      }

	    case CacheComponent:
	      {

	        return null;
	      }

	    case TracingMarkerComponent:
	      {

	        return null;
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function unwindWork(current, workInProgress, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var flags = workInProgress.flags;

	        if (flags & ShouldCapture) {
	          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var _flags = workInProgress.flags;

	        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
	          // There was an error during render that wasn't captured by a suspense
	          // boundary. Do a second pass on the root to unmount the children.
	          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        } // We unwound to the root without completing it. Exit.


	        return null;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var suspenseState = workInProgress.memoizedState;

	        if (suspenseState !== null && suspenseState.dehydrated !== null) {
	          if (workInProgress.alternate === null) {
	            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
	          }

	          resetHydrationState();
	        }

	        var _flags2 = workInProgress.flags;

	        if (_flags2 & ShouldCapture) {
	          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      return null;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(workInProgress);
	      return null;

	    case CacheComponent:

	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(current, interruptedWork, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(interruptedWork);

	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        interruptedWork.stateNode;
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        resetWorkInProgressVersions();
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      var context = interruptedWork.type._context;
	      popProvider(context, interruptedWork);
	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(interruptedWork);
	      break;
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	} // Used during the commit phase to track the state of the Offscreen component stack.
	// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
	// Only used when enableSuspenseLayoutEffectSemantics is enabled.


	var offscreenSubtreeIsHidden = false;
	var offscreenSubtreeWasHidden = false;
	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	var nextEffect = null; // Used for Profiling builds to track updaters.

	var inProgressLanes = null;
	var inProgressRoot = null;
	function reportUncaughtErrorInDEV(error) {
	  // Wrapping each small part of the commit phase into a guarded
	  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
	  // But we rely on it to surface errors to DEV tools like overlays
	  // (https://github.com/facebook/react/issues/21712).
	  // As a compromise, rethrow only caught errors in a guard.
	  {
	    invokeGuardedCallback(null, function () {
	      throw error;
	    });
	    clearCaughtError();
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;

	  if ( current.mode & ProfileMode) {
	    try {
	      startLayoutEffectTimer();
	      instance.componentWillUnmount();
	    } finally {
	      recordLayoutEffectDuration(current);
	    }
	  } else {
	    instance.componentWillUnmount();
	  }
	}; // Capture errors so they don't interrupt mounting.


	function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
	  try {
	    commitHookEffectListMount(Layout, current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
	  try {
	    callComponentWillUnmountWithTimer(current, instance);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
	  try {
	    instance.componentDidMount();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyAttachRef(current, nearestMountedAncestor) {
	  try {
	    commitAttachRef(current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}

	function safelyDetachRef(current, nearestMountedAncestor) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      var retVal;

	      try {
	        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            retVal = ref(null);
	          } finally {
	            recordLayoutEffectDuration(current);
	          }
	        } else {
	          retVal = ref(null);
	        }
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
	  try {
	    destroy();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	var shouldFireAfterActiveInstanceBlur = false;
	function commitBeforeMutationEffects(root, firstChild) {
	  prepareForCommit(root.containerInfo);
	  nextEffect = firstChild;
	  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

	  var shouldFire = shouldFireAfterActiveInstanceBlur;
	  shouldFireAfterActiveInstanceBlur = false;
	  return shouldFire;
	}

	function commitBeforeMutationEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

	    var child = fiber.child;

	    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitBeforeMutationEffects_complete();
	    }
	  }
	}

	function commitBeforeMutationEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    setCurrentFiber(fiber);

	    try {
	      commitBeforeMutationEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();
	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitBeforeMutationEffectsOnFiber(finishedWork) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags;

	  if ((flags & Snapshot) !== NoFlags) {
	    setCurrentFiber(finishedWork);

	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          break;
	        }

	      case ClassComponent:
	        {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          {
	            var root = finishedWork.stateNode;
	            clearContainer(root.containerInfo);
	          }

	          break;
	        }

	      case HostComponent:
	      case HostText:
	      case HostPortal:
	      case IncompleteClassComponent:
	        // Nothing to do for these component types
	        break;

	      default:
	        {
	          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	        }
	    }

	    resetCurrentFiber();
	  }
	}

	function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStarted(finishedWork);
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStarted(finishedWork);
	            }
	          }

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(true);
	            }
	          }

	          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(false);
	            }
	          }

	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStopped();
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStopped();
	            }
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(flags, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStarted(finishedWork);
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStarted(finishedWork);
	          }
	        } // Mount


	        var create = effect.create;

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(true);
	          }
	        }

	        effect.destroy = create();

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(false);
	          }
	        }

	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStopped();
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStopped();
	          }
	        }

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var hookName = void 0;

	            if ((effect.tag & Layout) !== NoFlags) {
	              hookName = 'useLayoutEffect';
	            } else if ((effect.tag & Insertion) !== NoFlags) {
	              hookName = 'useInsertionEffect';
	            } else {
	              hookName = 'useEffect';
	            }

	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveEffectDurations(finishedRoot, finishedWork) {
	  {
	    // Only Profilers with work in their subtree will have an Update effect scheduled.
	    if ((finishedWork.flags & Update) !== NoFlags) {
	      switch (finishedWork.tag) {
	        case Profiler:
	          {
	            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
	            var _finishedWork$memoize = finishedWork.memoizedProps,
	                id = _finishedWork$memoize.id,
	                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
	            // It does not get reset until the start of the next commit phase.

	            var commitTime = getCommitTime();
	            var phase = finishedWork.alternate === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onPostCommit === 'function') {
	              onPostCommit(id, phase, passiveEffectDuration, commitTime);
	            } // Bubble times to the next nearest ancestor Profiler.
	            // After we process that Profiler, we'll bubble further up.


	            var parentFiber = finishedWork.return;

	            outer: while (parentFiber !== null) {
	              switch (parentFiber.tag) {
	                case HostRoot:
	                  var root = parentFiber.stateNode;
	                  root.passiveEffectDuration += passiveEffectDuration;
	                  break outer;

	                case Profiler:
	                  var parentStateNode = parentFiber.stateNode;
	                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
	                  break outer;
	              }

	              parentFiber = parentFiber.return;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
	  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          if ( !offscreenSubtreeWasHidden) {
	            // At this point layout effects have already been destroyed (during mutation phase).
	            // This is done to prevent sibling component effects from interfering with each other,
	            // e.g. a destroy function in one component should never override a ref set
	            // by a create function in another component during the same commit.
	            if ( finishedWork.mode & ProfileMode) {
	              try {
	                startLayoutEffectTimer();
	                commitHookEffectListMount(Layout | HasEffect, finishedWork);
	              } finally {
	                recordLayoutEffectDuration(finishedWork);
	              }
	            } else {
	              commitHookEffectListMount(Layout | HasEffect, finishedWork);
	            }
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = finishedWork.stateNode;

	          if (finishedWork.flags & Update) {
	            if (!offscreenSubtreeWasHidden) {
	              if (current === null) {
	                // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.
	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidMount();
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidMount();
	                }
	              } else {
	                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	                var prevState = current.memoizedState; // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.

	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                }
	              }
	            }
	          } // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.


	          var updateQueue = finishedWork.updateQueue;

	          if (updateQueue !== null) {
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            } // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.


	            commitUpdateQueue(finishedWork, updateQueue, instance);
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.
	          var _updateQueue = finishedWork.updateQueue;

	          if (_updateQueue !== null) {
	            var _instance = null;

	            if (finishedWork.child !== null) {
	              switch (finishedWork.child.tag) {
	                case HostComponent:
	                  _instance = getPublicInstance(finishedWork.child.stateNode);
	                  break;

	                case ClassComponent:
	                  _instance = finishedWork.child.stateNode;
	                  break;
	              }
	            }

	            commitUpdateQueue(finishedWork, _updateQueue, _instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	          // These effects should only be committed when components are first mounted,
	          // aka when there is no current/alternate.

	          if (current === null && finishedWork.flags & Update) {
	            var type = finishedWork.type;
	            var props = finishedWork.memoizedProps;
	            commitMount(_instance2, type, props);
	          }

	          break;
	        }

	      case HostText:
	        {
	          // We have no life-cycles associated with text.
	          break;
	        }

	      case HostPortal:
	        {
	          // We have no life-cycles associated with portals.
	          break;
	        }

	      case Profiler:
	        {
	          {
	            var _finishedWork$memoize2 = finishedWork.memoizedProps,
	                onCommit = _finishedWork$memoize2.onCommit,
	                onRender = _finishedWork$memoize2.onRender;
	            var effectDuration = finishedWork.stateNode.effectDuration;
	            var commitTime = getCommitTime();
	            var phase = current === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onRender === 'function') {
	              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
	            }

	            {
	              if (typeof onCommit === 'function') {
	                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
	              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
	              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
	              // because the effect is also where times bubble to parent Profilers.


	              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
	              // Do not reset these values until the next render so DevTools has a chance to read them first.

	              var parentFiber = finishedWork.return;

	              outer: while (parentFiber !== null) {
	                switch (parentFiber.tag) {
	                  case HostRoot:
	                    var root = parentFiber.stateNode;
	                    root.effectDuration += effectDuration;
	                    break outer;

	                  case Profiler:
	                    var parentStateNode = parentFiber.stateNode;
	                    parentStateNode.effectDuration += effectDuration;
	                    break outer;
	                }

	                parentFiber = parentFiber.return;
	              }
	            }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        }

	      case SuspenseListComponent:
	      case IncompleteClassComponent:
	      case ScopeComponent:
	      case OffscreenComponent:
	      case LegacyHiddenComponent:
	      case TracingMarkerComponent:
	        {
	          break;
	        }

	      default:
	        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  if ( !offscreenSubtreeWasHidden) {
	    {
	      if (finishedWork.flags & Ref) {
	        commitAttachRef(finishedWork);
	      }
	    }
	  }
	}

	function reappearLayoutEffectsOnFiber(node) {
	  // Turn on layout effects in a tree that previously disappeared.
	  // TODO (Offscreen) Check: flags & LayoutStatic
	  switch (node.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( node.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            safelyCallCommitHookLayoutEffectListMount(node, node.return);
	          } finally {
	            recordLayoutEffectDuration(node);
	          }
	        } else {
	          safelyCallCommitHookLayoutEffectListMount(node, node.return);
	        }

	        break;
	      }

	    case ClassComponent:
	      {
	        var instance = node.stateNode;

	        if (typeof instance.componentDidMount === 'function') {
	          safelyCallComponentDidMount(node, node.return, instance);
	        }

	        safelyAttachRef(node, node.return);
	        break;
	      }

	    case HostComponent:
	      {
	        safelyAttachRef(node, node.return);
	        break;
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  // Only hide or unhide the top-most host nodes.
	  var hostSubtreeRoot = null;

	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        if (hostSubtreeRoot === null) {
	          hostSubtreeRoot = node;

	          try {
	            var instance = node.stateNode;

	            if (isHidden) {
	              hideInstance(instance);
	            } else {
	              unhideInstance(node.stateNode, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if (node.tag === HostText) {
	        if (hostSubtreeRoot === null) {
	          try {
	            var _instance3 = node.stateNode;

	            if (isHidden) {
	              hideTextInstance(_instance3);
	            } else {
	              unhideTextInstance(_instance3, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        if (hostSubtreeRoot === node) {
	          hostSubtreeRoot = null;
	        }

	        node = node.return;
	      }

	      if (hostSubtreeRoot === node) {
	        hostSubtreeRoot = null;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      var retVal;

	      if ( finishedWork.mode & ProfileMode) {
	        try {
	          startLayoutEffectTimer();
	          retVal = ref(instanceToUse);
	        } finally {
	          recordLayoutEffectDuration(finishedWork);
	        }
	      } else {
	        retVal = ref(instanceToUse);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
	        }
	      }
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function detachFiberMutation(fiber) {
	  // Cut off the return pointer to disconnect it from the tree.
	  // This enables us to detect and warn against state updates on an unmounted component.
	  // It also prevents events from bubbling from within disconnected components.
	  //
	  // Ideally, we should also clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child.
	  // This child itself will be GC:ed when the parent updates the next time.
	  //
	  // Note that we can't clear child or sibling pointers yet.
	  // They're needed for passive effects and for findDOMNode.
	  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	  //
	  // Don't reset the alternate yet, either. We need that so we can detach the
	  // alternate's fields in the passive phase. Clearing the return pointer is
	  // sufficient for findDOMNode semantics.
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.return = null;
	  }

	  fiber.return = null;
	}

	function detachFiberAfterEffects(fiber) {
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    fiber.alternate = null;
	    detachFiberAfterEffects(alternate);
	  } // Note: Defensively using negation instead of < in case
	  // `deletedTreeCleanUpLevel` is undefined.


	  {
	    // Clear cyclical Fiber fields. This level alone is designed to roughly
	    // approximate the planned Fiber refactor. In that world, `setState` will be
	    // bound to a special "instance" object instead of a Fiber. The Instance
	    // object will not have any of these fields. It will only be connected to
	    // the fiber tree via a single link at the root. So if this level alone is
	    // sufficient to fix memory issues, that bodes well for our plans.
	    fiber.child = null;
	    fiber.deletions = null;
	    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
	    // tree, which has its own pointers to children, parents, and siblings.
	    // The other host nodes also point back to fibers, so we should detach that
	    // one, too.

	    if (fiber.tag === HostComponent) {
	      var hostInstance = fiber.stateNode;

	      if (hostInstance !== null) {
	        detachDeletedInstance(hostInstance);
	      }
	    }

	    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
	    // already disconnect the `return` pointer at the root of the deleted
	    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
	    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
	    // `alternate`. But we'll clear it in the next level anyway, just in case.

	    {
	      fiber._debugOwner = null;
	    }

	    {
	      // Theoretically, nothing in here should be necessary, because we already
	      // disconnected the fiber from the tree. So even if something leaks this
	      // particular fiber, it won't leak anything else
	      //
	      // The purpose of this branch is to be super aggressive so we can measure
	      // if there's any difference in memory impact. If there is, that could
	      // indicate a React leak we don't know about.
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

	      fiber.updateQueue = null;
	    }
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.flags & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.flags & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  switch (parentFiber.tag) {
	    case HostComponent:
	      {
	        var parent = parentFiber.stateNode;

	        if (parentFiber.flags & ContentReset) {
	          // Reset the text content of the parent before doing any insertions
	          resetTextContent(parent); // Clear ContentReset from the effect tag

	          parentFiber.flags &= ~ContentReset;
	        }

	        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	        // children to find all the terminal nodes.

	        insertOrAppendPlacementNode(finishedWork, before, parent);
	        break;
	      }

	    case HostRoot:
	    case HostPortal:
	      {
	        var _parent = parentFiber.stateNode.containerInfo;

	        var _before = getHostSibling(finishedWork);

	        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
	        break;
	      }
	    // eslint-disable-next-line-no-fallthrough

	    default:
	      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	} // These are tracked on the stack as we recursively traverse a
	// deleted subtree.
	// TODO: Update these during the whole mutation phase, not just during
	// a deletion.


	var hostParent = null;
	var hostParentIsContainer = false;

	function commitDeletionEffects(root, returnFiber, deletedFiber) {
	  {
	    // We only have the top Fiber that was deleted but we need to recurse down its
	    // children to find all the terminal nodes.
	    // Recursively delete all host nodes from the parent, detach refs, clean
	    // up mounted layout effects, and call componentWillUnmount.
	    // We only need to remove the topmost host child in each branch. But then we
	    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
	    // could split this into two separate traversals functions, where the second
	    // one doesn't include any removeChild logic. This is maybe the same
	    // function as "disappearLayoutEffects" (or whatever that turns into after
	    // the layout phase is refactored to use recursion).
	    // Before starting, find the nearest host parent on the stack so we know
	    // which instance/container to remove the children from.
	    // TODO: Instead of searching up the fiber return path on every deletion, we
	    // can track the nearest host component on the JS stack as we traverse the
	    // tree during the commit phase. This would make insertions faster, too.
	    var parent = returnFiber;

	    findParent: while (parent !== null) {
	      switch (parent.tag) {
	        case HostComponent:
	          {
	            hostParent = parent.stateNode;
	            hostParentIsContainer = false;
	            break findParent;
	          }

	        case HostRoot:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }

	        case HostPortal:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }
	      }

	      parent = parent.return;
	    }

	    if (hostParent === null) {
	      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	    }

	    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	    hostParent = null;
	    hostParentIsContainer = false;
	  }

	  detachFiberMutation(deletedFiber);
	}

	function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
	  // TODO: Use a static flag to skip trees that don't have unmount effects
	  var child = parent.child;

	  while (child !== null) {
	    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
	    child = child.sibling;
	  }
	}

	function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
	  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
	  // into their subtree. There are simpler cases in the inner switch
	  // that don't modify the stack.

	  switch (deletedFiber.tag) {
	    case HostComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        } // Intentional fallthrough to next branch

	      }
	    // eslint-disable-next-line-no-fallthrough

	    case HostText:
	      {
	        // We only need to remove the nearest host child. Set the host parent
	        // to `null` on the stack to indicate that nested children don't
	        // need to be removed.
	        {
	          var prevHostParent = hostParent;
	          var prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;

	          if (hostParent !== null) {
	            // Now that all the child effects have unmounted, we can remove the
	            // node from the tree.
	            if (hostParentIsContainer) {
	              removeChildFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              removeChild(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case DehydratedFragment:
	      {
	        // Delete the dehydrated suspense boundary and all of its content.


	        {
	          if (hostParent !== null) {
	            if (hostParentIsContainer) {
	              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        {
	          // When we go into a portal, it becomes the parent to remove from.
	          var _prevHostParent = hostParent;
	          var _prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = _prevHostParent;
	          hostParentIsContainer = _prevHostParentIsContainer;
	        }

	        return;
	      }

	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          var updateQueue = deletedFiber.updateQueue;

	          if (updateQueue !== null) {
	            var lastEffect = updateQueue.lastEffect;

	            if (lastEffect !== null) {
	              var firstEffect = lastEffect.next;
	              var effect = firstEffect;

	              do {
	                var _effect = effect,
	                    destroy = _effect.destroy,
	                    tag = _effect.tag;

	                if (destroy !== undefined) {
	                  if ((tag & Insertion) !== NoFlags$1) {
	                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                  } else if ((tag & Layout) !== NoFlags$1) {
	                    {
	                      markComponentLayoutEffectUnmountStarted(deletedFiber);
	                    }

	                    if ( deletedFiber.mode & ProfileMode) {
	                      startLayoutEffectTimer();
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                      recordLayoutEffectDuration(deletedFiber);
	                    } else {
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                    }

	                    {
	                      markComponentLayoutEffectUnmountStopped();
	                    }
	                  }
	                }

	                effect = effect.next;
	              } while (effect !== firstEffect);
	            }
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ClassComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var instance = deletedFiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ScopeComponent:
	      {

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case OffscreenComponent:
	      {
	        if ( // TODO: Remove this dead flag
	         deletedFiber.mode & ConcurrentMode) {
	          // If this offscreen component is hidden, we already unmounted it. Before
	          // deleting the children, track that it's already unmounted so that we
	          // don't attempt to unmount the effects again.
	          // TODO: If the tree is hidden, in most cases we should be able to skip
	          // over the nested children entirely. An exception is we haven't yet found
	          // the topmost host node to delete, which we already track on the stack.
	          // But the other case is portals, which need to be detached no matter how
	          // deeply they are nested. We should use a subtree flag to track whether a
	          // subtree includes a nested portal.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        break;
	      }

	    default:
	      {
	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }
	  }
	}

	function commitSuspenseCallback(finishedWork) {
	  // TODO: Move this to passive phase
	  finishedWork.memoizedState;
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of wakeables.
	  // For each wakeable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var wakeables = finishedWork.updateQueue;

	  if (wakeables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    wakeables.forEach(function (wakeable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

	      if (!retryCache.has(wakeable)) {
	        retryCache.add(wakeable);

	        {
	          if (isDevToolsPresent) {
	            if (inProgressLanes !== null && inProgressRoot !== null) {
	              // If we have pending work still, associate the original updaters with it.
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            } else {
	              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
	            }
	          }
	        }

	        wakeable.then(retry, retry);
	      }
	    });
	  }
	} // This function detects when a Suspense boundary goes from visible to hidden.
	function commitMutationEffects(root, finishedWork, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  setCurrentFiber(finishedWork);
	  commitMutationEffectsOnFiber(finishedWork, root);
	  setCurrentFiber(finishedWork);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
	  // Deletions effects can be scheduled on any fiber type. They need to happen
	  // before the children effects hae fired.
	  var deletions = parentFiber.deletions;

	  if (deletions !== null) {
	    for (var i = 0; i < deletions.length; i++) {
	      var childToDelete = deletions[i];

	      try {
	        commitDeletionEffects(root, parentFiber, childToDelete);
	      } catch (error) {
	        captureCommitPhaseError(childToDelete, parentFiber, error);
	      }
	    }
	  }

	  var prevDebugFiber = getCurrentFiber();

	  if (parentFiber.subtreeFlags & MutationMask) {
	    var child = parentFiber.child;

	    while (child !== null) {
	      setCurrentFiber(child);
	      commitMutationEffectsOnFiber(child, root);
	      child = child.sibling;
	    }
	  }

	  setCurrentFiber(prevDebugFiber);
	}

	function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
	  // because the fiber tag is more specific. An exception is any flag related
	  // to reconcilation, because those can be set on all fiber types.

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          try {
	            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          } // Layout effects are destroyed during the mutation phase so that all
	          // destroy functions for all fibers are called before any create functions.
	          // This prevents sibling component effects from interfering with each other,
	          // e.g. a destroy function in one component should never override a ref set
	          // by a create function in another component during the same commit.


	          if ( finishedWork.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }

	            recordLayoutEffectDuration(finishedWork);
	          } else {
	            try {
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        {
	          // TODO: ContentReset gets cleared by the children during the commit
	          // phase. This is a refactor hazard because it means we must read
	          // flags the flags after `commitReconciliationEffects` has already run;
	          // the order matters. We should refactor so that ContentReset does not
	          // rely on mutating the flag during commit. Like by setting a flag
	          // during the render phase instead.
	          if (finishedWork.flags & ContentReset) {
	            var instance = finishedWork.stateNode;

	            try {
	              resetTextContent(instance);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }

	          if (flags & Update) {
	            var _instance4 = finishedWork.stateNode;

	            if (_instance4 != null) {
	              // Commit the work prepared earlier.
	              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	              // as the newProps. The updatePayload will contain the real change in
	              // this case.

	              var oldProps = current !== null ? current.memoizedProps : newProps;
	              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	              var updatePayload = finishedWork.updateQueue;
	              finishedWork.updateQueue = null;

	              if (updatePayload !== null) {
	                try {
	                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (finishedWork.stateNode === null) {
	              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            }

	            var textInstance = finishedWork.stateNode;
	            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	            // as the newProps. The updatePayload will contain the real change in
	            // this case.

	            var oldText = current !== null ? current.memoizedProps : newText;

	            try {
	              commitTextUpdate(textInstance, oldText, newText);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (current !== null) {
	              var prevRootState = current.memoizedState;

	              if (prevRootState.isDehydrated) {
	                try {
	                  commitHydratedContainer(root.containerInfo);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        return;
	      }

	    case SuspenseComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        var offscreenFiber = finishedWork.child;

	        if (offscreenFiber.flags & Visibility) {
	          var offscreenInstance = offscreenFiber.stateNode;
	          var newState = offscreenFiber.memoizedState;
	          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          offscreenInstance.isHidden = isHidden;

	          if (isHidden) {
	            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

	            if (!wasHidden) {
	              // TODO: Move to passive phase
	              markCommitTimeOfFallback();
	            }
	          }
	        }

	        if (flags & Update) {
	          try {
	            commitSuspenseCallback(finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }

	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case OffscreenComponent:
	      {
	        var _wasHidden = current !== null && current.memoizedState !== null;

	        if ( // TODO: Remove this dead flag
	         finishedWork.mode & ConcurrentMode) {
	          // Before committing the children, track on the stack whether this
	          // offscreen subtree was already hidden, so that we don't unmount the
	          // effects again.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseMutationEffects(root, finishedWork);
	        }

	        commitReconciliationEffects(finishedWork);

	        if (flags & Visibility) {
	          var _offscreenInstance = finishedWork.stateNode;
	          var _newState = finishedWork.memoizedState;

	          var _isHidden = _newState !== null;

	          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          _offscreenInstance.isHidden = _isHidden;

	          {
	            if (_isHidden) {
	              if (!_wasHidden) {
	                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
	                  nextEffect = offscreenBoundary;
	                  var offscreenChild = offscreenBoundary.child;

	                  while (offscreenChild !== null) {
	                    nextEffect = offscreenChild;
	                    disappearLayoutEffects_begin(offscreenChild);
	                    offscreenChild = offscreenChild.sibling;
	                  }
	                }
	              }
	            }
	          }

	          {
	            // TODO: This needs to run whenever there's an insertion or update
	            // inside a hidden Offscreen tree.
	            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
	          }
	        }

	        return;
	      }

	    case SuspenseListComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }

	    default:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        return;
	      }
	  }
	}

	function commitReconciliationEffects(finishedWork) {
	  // Placement effects (insertions, reorders) can be scheduled on any fiber
	  // type. They needs to happen after the children effects have fired, but
	  // before the effects on this fiber have fired.
	  var flags = finishedWork.flags;

	  if (flags & Placement) {
	    try {
	      commitPlacement(finishedWork);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    } // Clear the "placement" from effect tag so that we know that this is
	    // inserted, before any life-cycles like componentDidMount gets called.
	    // TODO: findDOMNode doesn't rely on this any more but isMounted does
	    // and isMounted is deprecated anyway so we should be able to kill this.


	    finishedWork.flags &= ~Placement;
	  }

	  if (flags & Hydrating) {
	    finishedWork.flags &= ~Hydrating;
	  }
	}

	function commitLayoutEffects(finishedWork, root, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  nextEffect = finishedWork;
	  commitLayoutEffects_begin(finishedWork, root, committedLanes);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
	  // Suspense layout effects semantics don't change for legacy roots.
	  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ( fiber.tag === OffscreenComponent && isModernRoot) {
	      // Keep track of the current Offscreen stack's state.
	      var isHidden = fiber.memoizedState !== null;
	      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

	      if (newOffscreenSubtreeIsHidden) {
	        // The Offscreen tree is hidden. Skip over its layout effects.
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      } else {
	        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
	        var current = fiber.alternate;
	        var wasHidden = current !== null && current.memoizedState !== null;
	        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
	        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
	        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

	        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

	        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
	          // This is the root of a reappearing boundary. Turn its layout effects
	          // back on.
	          nextEffect = fiber;
	          reappearLayoutEffects_begin(fiber);
	        }

	        var child = firstChild;

	        while (child !== null) {
	          nextEffect = child;
	          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
	          root, committedLanes);
	          child = child.sibling;
	        } // Restore Offscreen state and resume in our-progress traversal.


	        nextEffect = fiber;
	        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      }
	    }

	    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	    }
	  }
	}

	function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & LayoutMask) !== NoFlags) {
	      var current = fiber.alternate;
	      setCurrentFiber(fiber);

	      try {
	        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function disappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ( fiber.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout, fiber, fiber.return);
	            } finally {
	              recordLayoutEffectDuration(fiber);
	            }
	          } else {
	            commitHookEffectListUnmount(Layout, fiber, fiber.return);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          // TODO (Offscreen) Check: flags & RefStatic
	          safelyDetachRef(fiber, fiber.return);
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          safelyDetachRef(fiber, fiber.return);
	          break;
	        }

	      case OffscreenComponent:
	        {
	          // Check if this is a
	          var isHidden = fiber.memoizedState !== null;

	          if (isHidden) {
	            // Nested Offscreen tree is already hidden. Don't disappear
	            // its effects.
	            disappearLayoutEffects_complete(subtreeRoot);
	            continue;
	          }

	          break;
	        }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      disappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function disappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function reappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if (fiber.tag === OffscreenComponent) {
	      var isHidden = fiber.memoizedState !== null;

	      if (isHidden) {
	        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
	        reappearLayoutEffects_complete(subtreeRoot);
	        continue;
	      }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      reappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function reappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

	    setCurrentFiber(fiber);

	    try {
	      reappearLayoutEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
	  nextEffect = finishedWork;
	  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
	}

	function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
	    }
	  }
	}

	function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);

	      try {
	        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();

	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          } finally {
	            recordPassiveEffectDuration(finishedWork);
	          }
	        } else {
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffects(firstChild) {
	  nextEffect = firstChild;
	  commitPassiveUnmountEffects_begin();
	}

	function commitPassiveUnmountEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var child = fiber.child;

	    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
	      var deletions = fiber.deletions;

	      if (deletions !== null) {
	        for (var i = 0; i < deletions.length; i++) {
	          var fiberToDelete = deletions[i];
	          nextEffect = fiberToDelete;
	          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
	        }

	        {
	          // A fiber was deleted from this parent fiber, but it's still part of
	          // the previous (alternate) parent fiber's list of children. Because
	          // children are a linked list, an earlier sibling that's still alive
	          // will be connected to the deleted fiber via its `alternate`:
	          //
	          //   live fiber
	          //   --alternate--> previous live fiber
	          //   --sibling--> deleted fiber
	          //
	          // We can't disconnect `alternate` on nodes that haven't been deleted
	          // yet, but we can disconnect the `sibling` and `child` pointers.
	          var previousFiber = fiber.alternate;

	          if (previousFiber !== null) {
	            var detachedChild = previousFiber.child;

	            if (detachedChild !== null) {
	              previousFiber.child = null;

	              do {
	                var detachedSibling = detachedChild.sibling;
	                detachedChild.sibling = null;
	                detachedChild = detachedSibling;
	              } while (detachedChild !== null);
	            }
	          }
	        }

	        nextEffect = fiber;
	      }
	    }

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffects_complete();
	    }
	  }
	}

	function commitPassiveUnmountEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);
	      commitPassiveUnmountOnFiber(fiber);
	      resetCurrentFiber();
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveUnmountOnFiber(finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	          recordPassiveEffectDuration(finishedWork);
	        } else {
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // Deletion effects fire in parent -> child order
	    // TODO: Check if fiber has a PassiveStatic flag

	    setCurrentFiber(fiber);
	    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
	    resetCurrentFiber();
	    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
	    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

	    if (child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
	    }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var sibling = fiber.sibling;
	    var returnFiber = fiber.return;

	    {
	      // Recursively traverse the entire deleted tree and clean up fiber fields.
	      // This is more aggressive than ideal, and the long term goal is to only
	      // have to detach the deleted tree at the root.
	      detachFiberAfterEffects(fiber);

	      if (fiber === deletedSubtreeRoot) {
	        nextEffect = null;
	        return;
	      }
	    }

	    if (sibling !== null) {
	      sibling.return = returnFiber;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = returnFiber;
	  }
	}

	function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( current.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	          recordPassiveEffectDuration(current);
	        } else {
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	        }

	        break;
	      }
	  }
	} // TODO: Reuse reappearLayoutEffects traversal here?


	function invokeLayoutEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Layout | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokeLayoutEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }
	        }
	    }
	  }
	}

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  symbolFor('selector.component');
	  symbolFor('selector.has_pseudo_class');
	  symbolFor('selector.role');
	  symbolFor('selector.test_id');
	  symbolFor('selector.text');
	}
	var commitHooks = [];
	function onCommitRoot$1() {
	  {
	    commitHooks.forEach(function (commitHook) {
	      return commitHook();
	    });
	  }
	}

	var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
	function isLegacyActEnvironment(fiber) {
	  {
	    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
	    // act environment whenever `jest` is defined, but you can still turn off
	    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
	    // to false.
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

	    var jestIsDefined = typeof jest !== 'undefined';
	    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
	  }
	}
	function isConcurrentActEnvironment() {
	  {
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

	    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
	      // TODO: Include link to relevant documentation page.
	      error('The current testing environment is not configured to support ' + 'act(...)');
	    }

	    return isReactActEnvironmentGlobal;
	  }
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
	    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
	var NoContext =
	/*             */
	0;
	var BatchedContext =
	/*               */
	1;
	var RenderContext =
	/*                */
	2;
	var CommitContext =
	/*                */
	4;
	var RootInProgress = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	var RootDidNotComplete = 6; // Describes where we are in the React execution stack

	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The lanes we're rendering

	var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.

	var subtreeRenderLanes = NoLanes;
	var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

	var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

	var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

	var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
	// We will log them once the tree commits.

	var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.

	var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.

	var RENDER_TIMEOUT_MS = 500;
	var workInProgressTransitions = null;

	function resetRenderTimer() {
	  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
	}

	function getRenderTargetTime() {
	  return workInProgressRootRenderTargetTime;
	}
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsLanes = NoLanes;
	var pendingPassiveProfilerEffects = [];
	var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var isFlushingPassiveEffects = false;
	var didScheduleUpdateDuringPassiveEffects = false;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.

	var currentEventTime = NoTimestamp;
	var currentEventTransitionLane = NoLanes;
	var isRunningInsertionEffect = false;
	function getWorkInProgressRoot() {
	  return workInProgressRoot;
	}
	function requestEventTime() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return now();
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoTimestamp) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = now();
	  return currentEventTime;
	}
	function requestUpdateLane(fiber) {
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
	    // This is a render phase update. These are not officially supported. The
	    // old behavior is to give this the same "thread" (lanes) as
	    // whatever is currently rendering. So if you call `setState` on a component
	    // that happens later in the same render, it will flush. Ideally, we want to
	    // remove the special case and treat them as if they came from an
	    // interleaved event. Regardless, this pattern is not officially supported.
	    // This behavior is only a fallback. The flag only exists until we can roll
	    // out the setState warning, since existing code might accidentally rely on
	    // the current behavior.
	    return pickArbitraryLane(workInProgressRootRenderLanes);
	  }

	  var isTransition = requestCurrentTransition() !== NoTransition;

	  if (isTransition) {
	    if ( ReactCurrentBatchConfig$3.transition !== null) {
	      var transition = ReactCurrentBatchConfig$3.transition;

	      if (!transition._updatedFibers) {
	        transition._updatedFibers = new Set();
	      }

	      transition._updatedFibers.add(fiber);
	    } // The algorithm for assigning an update to a lane should be stable for all
	    // updates at the same priority within the same event. To do this, the
	    // inputs to the algorithm must be the same.
	    //
	    // The trick we use is to cache the first of each of these inputs within an
	    // event. Then reset the cached values once we can be sure the event is
	    // over. Our heuristic for that is whenever we enter a concurrent work loop.


	    if (currentEventTransitionLane === NoLane) {
	      // All transitions within the same event are assigned the same lane.
	      currentEventTransitionLane = claimNextTransitionLane();
	    }

	    return currentEventTransitionLane;
	  } // Updates originating inside certain React methods, like flushSync, have
	  // their priority set by tracking it with a context variable.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var updateLane = getCurrentUpdatePriority();

	  if (updateLane !== NoLane) {
	    return updateLane;
	  } // This update originated outside React. Ask the host environment for an
	  // appropriate priority, based on the type of event.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var eventLane = getCurrentEventPriority();
	  return eventLane;
	}

	function requestRetryLane(fiber) {
	  // This is a fork of `requestUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  }

	  return claimNextRetryLane();
	}

	function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
	  checkForNestedUpdates();

	  {
	    if (isRunningInsertionEffect) {
	      error('useInsertionEffect must not schedule updates.');
	    }
	  }

	  {
	    if (isFlushingPassiveEffects) {
	      didScheduleUpdateDuringPassiveEffects = true;
	    }
	  } // Mark that the root has a pending update.


	  markRootUpdated(root, lane, eventTime);

	  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
	    // This update was dispatched during the render phase. This is a mistake
	    // if the update originates from user space (with the exception of local
	    // hook updates, which are handled differently and don't reach this
	    // function), but there are some internal React features that use this as
	    // an implementation detail, like selective hydration.
	    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
	  } else {
	    // This is a normal update, scheduled from outside the render phase. For
	    // example, during an input event.
	    {
	      if (isDevToolsPresent) {
	        addFiberToLanesMap(root, fiber, lane);
	      }
	    }

	    warnIfUpdatesNotWrappedWithActDEV(fiber);

	    if (root === workInProgressRoot) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that there was an interleaved update work on this root. Unless the
	      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	      // phase update. In that case, we don't treat render phase updates as if
	      // they were interleaved, for backwards compat reasons.
	      if ( (executionContext & RenderContext) === NoContext) {
	        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
	      }

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: Make sure this doesn't override pings that happen while we've
	        // already started rendering.
	        markRootSuspended$1(root, workInProgressRootRenderLanes);
	      }
	    }

	    ensureRootIsScheduled(root, eventTime);

	    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      // Flush the synchronous work now, unless we're already working or inside
	      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	      // scheduleCallbackForFiber to preserve the ability to schedule a callback
	      // without immediately flushing it. We only do this for user-initiated
	      // updates, to preserve historical behavior of legacy mode.
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
	  // This is a special fork of scheduleUpdateOnFiber that is only used to
	  // schedule the initial hydration of a root that has just been created. Most
	  // of the stuff in scheduleUpdateOnFiber can be skipped.
	  //
	  // The main reason for this separate path, though, is to distinguish the
	  // initial children from subsequent updates. In fully client-rendered roots
	  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
	  // updates, but hydration roots are special because the initial render must
	  // match what was rendered on the server.
	  var current = root.current;
	  current.lanes = lane;
	  markRootUpdated(root, lane, eventTime);
	  ensureRootIsScheduled(root, eventTime);
	}
	function isUnsafeClassRenderPhaseUpdate(fiber) {
	  // Check if this is a render phase update. Only called by class components,
	  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
	  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
	    // decided not to enable it.
	     (executionContext & RenderContext) !== NoContext
	  );
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.

	function ensureRootIsScheduled(root, currentTime) {
	  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
	  // expired so we know to work on those next.

	  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

	  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (nextLanes === NoLanes) {
	    // Special case: There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      cancelCallback$1(existingCallbackNode);
	    }

	    root.callbackNode = null;
	    root.callbackPriority = NoLane;
	    return;
	  } // We use the highest priority lane to represent the priority of the callback.


	  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

	  var existingCallbackPriority = root.callbackPriority;

	  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
	  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
	  // on the `act` queue.
	  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
	    {
	      // If we're going to re-use an existing task, it needs to exist.
	      // Assume that discrete update microtasks are non-cancellable and null.
	      // TODO: Temporary until we confirm this warning is not fired.
	      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
	        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
	      }
	    } // The priority hasn't changed. We can reuse the existing task. Exit.


	    return;
	  }

	  if (existingCallbackNode != null) {
	    // Cancel the existing callback. We'll schedule a new one below.
	    cancelCallback$1(existingCallbackNode);
	  } // Schedule a new callback.


	  var newCallbackNode;

	  if (newCallbackPriority === SyncLane) {
	    // Special case: Sync React callbacks are scheduled on a special
	    // internal queue
	    if (root.tag === LegacyRoot) {
	      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
	        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
	      }

	      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
	    } else {
	      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    }

	    {
	      // Flush the queue in a microtask.
	      if ( ReactCurrentActQueue$1.current !== null) {
	        // Inside `act`, use our internal `act` queue so that these get flushed
	        // at the end of the current scope even when using the sync version
	        // of `act`.
	        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
	      } else {
	        scheduleMicrotask(function () {
	          // In Safari, appending an iframe forces microtasks to run.
	          // https://github.com/facebook/react/issues/22459
	          // We don't support running callbacks in the middle of render
	          // or commit so we need to check against that.
	          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	            // Note that this would still prematurely flush the callbacks
	            // if this happens outside render or commit phase (e.g. in an event).
	            flushSyncCallbacks();
	          }
	        });
	      }
	    }

	    newCallbackNode = null;
	  } else {
	    var schedulerPriorityLevel;

	    switch (lanesToEventPriority(nextLanes)) {
	      case DiscreteEventPriority:
	        schedulerPriorityLevel = ImmediatePriority;
	        break;

	      case ContinuousEventPriority:
	        schedulerPriorityLevel = UserBlockingPriority;
	        break;

	      case DefaultEventPriority:
	        schedulerPriorityLevel = NormalPriority;
	        break;

	      case IdleEventPriority:
	        schedulerPriorityLevel = IdlePriority;
	        break;

	      default:
	        schedulerPriorityLevel = NormalPriority;
	        break;
	    }

	    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
	  }

	  root.callbackPriority = newCallbackPriority;
	  root.callbackNode = newCallbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  {
	    resetNestedUpdateFlag();
	  } // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.


	  currentEventTime = NoTimestamp;
	  currentEventTransitionLane = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  } // Flush any pending passive effects before deciding which lanes to work on,
	  // in case they schedule additional work.


	  var originalCallbackNode = root.callbackNode;
	  var didFlushPassiveEffects = flushPassiveEffects();

	  if (didFlushPassiveEffects) {
	    // Something in the passive effect phase may have canceled the current task.
	    // Check if the task node for this root was changed.
	    if (root.callbackNode !== originalCallbackNode) {
	      // The current task was canceled. Exit. We don't need to call
	      // `ensureRootIsScheduled` because the check above implies either that
	      // there's a new task, or that there's no remaining work on this root.
	      return null;
	    }
	  } // Determine the next lanes to work on, using the fields stored
	  // on the root.


	  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (lanes === NoLanes) {
	    // Defensive coding. This is never expected to happen.
	    return null;
	  } // We disable time-slicing in some cases: if the work has been CPU-bound
	  // for too long ("expired" work, to prevent starvation), or we're in
	  // sync-updates-by-default mode.
	  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
	  // bug we're still investigating. Once the bug in Scheduler is fixed,
	  // we can remove this, since we track expiration ourselves.


	  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
	  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

	  if (exitStatus !== RootInProgress) {
	    if (exitStatus === RootErrored) {
	      // If something threw an error, try rendering one more time. We'll
	      // render synchronously to block concurrent data mutations, and we'll
	      // includes all pending updates are included. If it still fails after
	      // the second attempt, we'll give up and commit the resulting tree.
	      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	      if (errorRetryLanes !== NoLanes) {
	        lanes = errorRetryLanes;
	        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	      }
	    }

	    if (exitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      prepareFreshStack(root, NoLanes);
	      markRootSuspended$1(root, lanes);
	      ensureRootIsScheduled(root, now());
	      throw fatalError;
	    }

	    if (exitStatus === RootDidNotComplete) {
	      // The render unwound without completing the tree. This happens in special
	      // cases where need to exit the current render without producing a
	      // consistent tree or committing.
	      //
	      // This should only happen during a concurrent render, not a discrete or
	      // synchronous update. We should have already checked for this when we
	      // unwound the stack.
	      markRootSuspended$1(root, lanes);
	    } else {
	      // The render completed.
	      // Check if this render may have yielded to a concurrent event, and if so,
	      // confirm that any newly rendered stores are consistent.
	      // TODO: It's possible that even a concurrent render may never have yielded
	      // to the main thread, if it was fast enough, or if it expired. We could
	      // skip the consistency check in that case, too.
	      var renderWasConcurrent = !includesBlockingLane(root, lanes);
	      var finishedWork = root.current.alternate;

	      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
	        // A store was mutated in an interleaved event. Render again,
	        // synchronously, to block further mutations.
	        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

	        if (exitStatus === RootErrored) {
	          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	          if (_errorRetryLanes !== NoLanes) {
	            lanes = _errorRetryLanes;
	            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
	            // concurrent events.
	          }
	        }

	        if (exitStatus === RootFatalErrored) {
	          var _fatalError = workInProgressRootFatalError;
	          prepareFreshStack(root, NoLanes);
	          markRootSuspended$1(root, lanes);
	          ensureRootIsScheduled(root, now());
	          throw _fatalError;
	        }
	      } // We now have a consistent tree. The next step is either to commit it,
	      // or, if something suspended, wait to commit it after a timeout.


	      root.finishedWork = finishedWork;
	      root.finishedLanes = lanes;
	      finishConcurrentRender(root, exitStatus, lanes);
	    }
	  }

	  ensureRootIsScheduled(root, now());

	  if (root.callbackNode === originalCallbackNode) {
	    // The task node scheduled for this root is the same one that's
	    // currently executed. Need to return a continuation.
	    return performConcurrentWorkOnRoot.bind(null, root);
	  }

	  return null;
	}

	function recoverFromConcurrentError(root, errorRetryLanes) {
	  // If an error occurred during hydration, discard server response and fall
	  // back to client side render.
	  // Before rendering again, save the errors from the previous attempt.
	  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

	  if (isRootDehydrated(root)) {
	    // The shell failed to hydrate. Set a flag to force a client rendering
	    // during the next attempt. To do this, we call prepareFreshStack now
	    // to create the root work-in-progress fiber. This is a bit weird in terms
	    // of factoring, because it relies on renderRootSync not calling
	    // prepareFreshStack again in the call below, which happens because the
	    // root and lanes haven't changed.
	    //
	    // TODO: I think what we should do is set ForceClientRender inside
	    // throwException, like we do for nested Suspense boundaries. The reason
	    // it's here instead is so we can switch to the synchronous work loop, too.
	    // Something to consider for a future refactor.
	    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
	    rootWorkInProgress.flags |= ForceClientRender;

	    {
	      errorHydratingContainer(root.containerInfo);
	    }
	  }

	  var exitStatus = renderRootSync(root, errorRetryLanes);

	  if (exitStatus !== RootErrored) {
	    // Successfully finished rendering on retry
	    // The errors from the failed first attempt have been recovered. Add
	    // them to the collection of recoverable errors. We'll log them in the
	    // commit phase.
	    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
	    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
	    // from the first attempt, to preserve the causal sequence.

	    if (errorsFromSecondAttempt !== null) {
	      queueRecoverableErrors(errorsFromSecondAttempt);
	    }
	  }

	  return exitStatus;
	}

	function queueRecoverableErrors(errors) {
	  if (workInProgressRootRecoverableErrors === null) {
	    workInProgressRootRecoverableErrors = errors;
	  } else {
	    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
	  }
	}

	function finishConcurrentRender(root, exitStatus, lanes) {
	  switch (exitStatus) {
	    case RootInProgress:
	    case RootFatalErrored:
	      {
	        throw new Error('Root did not complete. This is a bug in React.');
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // We should have already attempted to retry this tree. If we reached
	        // this point, it errored again. Commit it.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.

	        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
	        !shouldForceFlushFallbacksInDEV()) {
	          // This render only included retries, no updates. Throttle committing
	          // retries so that we don't show too many loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            var nextLanes = getNextLanes(root, NoLanes);

	            if (nextLanes !== NoLanes) {
	              // There's additional work on this root.
	              break;
	            }

	            var suspendedLanes = root.suspendedLanes;

	            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              // FIXME: What if the suspended lanes are Idle? Should not restart.
	              requestEventTime();
	              markRootPinged(root, suspendedLanes);
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspended$1(root, lanes);

	        if (includesOnlyTransitions(lanes)) {
	          // This is a transition, so we should exit without committing a
	          // placeholder and without scheduling a timeout. Delay indefinitely
	          // until we receive more data.
	          break;
	        }

	        if (!shouldForceFlushFallbacksInDEV()) {
	          // This is not a transition, but we did trigger an avoided state.
	          // Schedule a placeholder to display after a short delay, using the Just
	          // Noticeable Difference.
	          // TODO: Is the JND optimization worth the added complexity? If this is
	          // the only reason we track the event time, then probably not.
	          // Consider removing.
	          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
	          var eventTimeMs = mostRecentEventTime;
	          var timeElapsedMs = now() - eventTimeMs;

	          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // Instead of committing the fallback immediately, wait for more data
	            // to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
	            break;
	          }
	        } // Commit the placeholder.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    default:
	      {
	        throw new Error('Unknown root exit status.');
	      }
	  }
	}

	function isRenderConsistentWithExternalStores(finishedWork) {
	  // Search the rendered tree for external store reads, and check whether the
	  // stores were mutated in a concurrent event. Intentionally using an iterative
	  // loop instead of recursion so we can exit early.
	  var node = finishedWork;

	  while (true) {
	    if (node.flags & StoreConsistency) {
	      var updateQueue = node.updateQueue;

	      if (updateQueue !== null) {
	        var checks = updateQueue.stores;

	        if (checks !== null) {
	          for (var i = 0; i < checks.length; i++) {
	            var check = checks[i];
	            var getSnapshot = check.getSnapshot;
	            var renderedValue = check.value;

	            try {
	              if (!objectIs(getSnapshot(), renderedValue)) {
	                // Found an inconsistent store.
	                return false;
	              }
	            } catch (error) {
	              // If `getSnapshot` throws, return `false`. This will schedule
	              // a re-render, and the error will be rethrown during render.
	              return false;
	            }
	          }
	        }
	      }
	    }

	    var child = node.child;

	    if (node.subtreeFlags & StoreConsistency && child !== null) {
	      child.return = node;
	      node = child;
	      continue;
	    }

	    if (node === finishedWork) {
	      return true;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return true;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow doesn't know this is unreachable, but eslint does
	  // eslint-disable-next-line no-unreachable


	  return true;
	}

	function markRootSuspended$1(root, suspendedLanes) {
	  // When suspending, we should always exclude lanes that were pinged or (more
	  // rarely, since we try to avoid it) updated during the render phase.
	  // TODO: Lol maybe there's a better way to factor this besides this
	  // obnoxiously named function :)
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
	  markRootSuspended(root, suspendedLanes);
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  {
	    syncNestedUpdateFlag();
	  }

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  flushPassiveEffects();
	  var lanes = getNextLanes(root, NoLanes);

	  if (!includesSomeLane(lanes, SyncLane)) {
	    // There's no remaining sync work left.
	    ensureRootIsScheduled(root, now());
	    return null;
	  }

	  var exitStatus = renderRootSync(root, lanes);

	  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
	    // If something threw an error, try rendering one more time. We'll render
	    // synchronously to block concurrent data mutations, and we'll includes
	    // all pending updates are included. If it still fails after the second
	    // attempt, we'll give up and commit the resulting tree.
	    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	    if (errorRetryLanes !== NoLanes) {
	      lanes = errorRetryLanes;
	      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	    }
	  }

	  if (exitStatus === RootFatalErrored) {
	    var fatalError = workInProgressRootFatalError;
	    prepareFreshStack(root, NoLanes);
	    markRootSuspended$1(root, lanes);
	    ensureRootIsScheduled(root, now());
	    throw fatalError;
	  }

	  if (exitStatus === RootDidNotComplete) {
	    throw new Error('Root did not complete. This is a bug in React.');
	  } // We now have a consistent tree. Because this is a sync render, we
	  // will commit it even if something suspended.


	  var finishedWork = root.current.alternate;
	  root.finishedWork = finishedWork;
	  root.finishedLanes = lanes;
	  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
	  // pending level.

	  ensureRootIsScheduled(root, now());
	  return null;
	}

	function flushRoot(root, lanes) {
	  if (lanes !== NoLanes) {
	    markRootEntangled(root, mergeLanes(lanes, SyncLane));
	    ensureRootIsScheduled(root, now());

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      resetRenderTimer();
	      flushSyncCallbacks();
	    }
	  }
	}
	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
	    // most batchedUpdates-like method.

	    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function discreteUpdates(fn, a, b, c, d) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    return fn(a, b, c, d);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;

	    if (executionContext === NoContext) {
	      resetRenderTimer();
	    }
	  }
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.

	// eslint-disable-next-line no-redeclare
	function flushSync(fn) {
	  // In legacy mode, we flush pending passive effects at the beginning of the
	  // next event, not at the end of the previous one.
	  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
	    flushPassiveEffects();
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;
	  var prevTransition = ReactCurrentBatchConfig$3.transition;
	  var previousPriority = getCurrentUpdatePriority();

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);

	    if (fn) {
	      return fn();
	    } else {
	      return undefined;
	    }
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      flushSyncCallbacks();
	    }
	  }
	}
	function isAlreadyRendering() {
	  // Used by the renderer to print a warning if certain APIs are called from
	  // the wrong context.
	  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
	}
	function pushRenderLanes(fiber, lanes) {
	  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
	  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
	}
	function popRenderLanes(fiber) {
	  subtreeRenderLanes = subtreeRenderLanesCursor.current;
	  pop(subtreeRenderLanesCursor, fiber);
	}

	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      var current = interruptedWork.alternate;
	      unwindInterruptedWork(current, interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  var rootWorkInProgress = createWorkInProgress(root.current, null);
	  workInProgress = rootWorkInProgress;
	  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
	  workInProgressRootExitStatus = RootInProgress;
	  workInProgressRootFatalError = null;
	  workInProgressRootSkippedLanes = NoLanes;
	  workInProgressRootInterleavedUpdatedLanes = NoLanes;
	  workInProgressRootPingedLanes = NoLanes;
	  workInProgressRootConcurrentErrors = null;
	  workInProgressRootRecoverableErrors = null;
	  finishQueueingConcurrentUpdates();

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }

	  return rootWorkInProgress;
	}

	function handleError(root, thrownValue) {
	  do {
	    var erroredWork = workInProgress;

	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
	      // separate issue. Write a regression test using string refs.

	      ReactCurrentOwner$2.current = null;

	      if (erroredWork === null || erroredWork.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // intentionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return;
	      }

	      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
	      }

	      if (enableSchedulingProfiler) {
	        markComponentRenderStopped();

	        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	          var wakeable = thrownValue;
	          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
	        } else {
	          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
	        }
	      }

	      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
	      completeUnitOfWork(erroredWork);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;

	      if (workInProgress === erroredWork && erroredWork !== null) {
	        // If this boundary has already errored, then we had trouble processing
	        // the error. Bubble it to the next boundary.
	        erroredWork = erroredWork.return;
	        workInProgress = erroredWork;
	      } else {
	        erroredWork = workInProgress;
	      }

	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher() {
	  var prevDispatcher = ReactCurrentDispatcher$2.current;
	  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$2.current = prevDispatcher;
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markSkippedUpdateLanes(lane) {
	  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there are updates that we skipped tree that might have unblocked
	  // this render.


	  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
	    // Mark the current render as suspended so that we switch to working on
	    // the updates that were skipped. Usually we only suspend at the end of
	    // the render phase.
	    // TODO: We should probably always mark the root as suspended immediately
	    // (inside this function), since by suspending at the end of the render
	    // phase introduces a potential mistake where we suspend lanes that were
	    // pinged or updated while we were rendering.
	    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
	  }
	}
	function renderDidError(error) {
	  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
	    workInProgressRootExitStatus = RootErrored;
	  }

	  if (workInProgressRootConcurrentErrors === null) {
	    workInProgressRootConcurrentErrors = [error];
	  } else {
	    workInProgressRootConcurrentErrors.push(error);
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootInProgress;
	}

	function renderRootSync(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopSync();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  executionContext = prevExecutionContext;
	  popDispatcher(prevDispatcher);

	  if (workInProgress !== null) {
	    // This is a sync render, so we should have finished the whole tree.
	    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
	  }

	  {
	    markRenderStopped();
	  } // Set this to null to indicate there's no in-progress render.


	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = NoLanes;
	  return workInProgressRootExitStatus;
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    resetRenderTimer();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  popDispatcher(prevDispatcher);
	  executionContext = prevExecutionContext;


	  if (workInProgress !== null) {
	    // Still work remaining.
	    {
	      markRenderYielded();
	    }

	    return RootInProgress;
	  } else {
	    // Completed the tree.
	    {
	      markRenderStopped();
	    } // Set this to null to indicate there's no in-progress render.


	    workInProgressRoot = null;
	    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

	    return workInProgressRootExitStatus;
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    completeUnitOfWork(unitOfWork);
	  } else {
	    workInProgress = next;
	  }

	  ReactCurrentOwner$2.current = null;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  var completedWork = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = completedWork.alternate;
	    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

	    if ((completedWork.flags & Incomplete) === NoFlags) {
	      setCurrentFiber(completedWork);
	      var next = void 0;

	      if ( (completedWork.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, completedWork, subtreeRenderLanes);
	      } else {
	        startProfilerTimer(completedWork);
	        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
	      }

	      resetCurrentFiber();

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        workInProgress = next;
	        return;
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        _next.flags &= HostEffectMask;
	        workInProgress = _next;
	        return;
	      }

	      if ( (completedWork.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = completedWork.actualDuration;
	        var child = completedWork.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        completedWork.actualDuration = actualDuration;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its subtree flags.
	        returnFiber.flags |= Incomplete;
	        returnFiber.subtreeFlags = NoFlags;
	        returnFiber.deletions = null;
	      } else {
	        // We've unwound all the way to the root.
	        workInProgressRootExitStatus = RootDidNotComplete;
	        workInProgress = null;
	        return;
	      }
	    }

	    var siblingFiber = completedWork.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      workInProgress = siblingFiber;
	      return;
	    } // Otherwise, return to the parent


	    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

	    workInProgress = completedWork;
	  } while (completedWork !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootCompleted;
	  }
	}

	function commitRoot(root, recoverableErrors, transitions) {
	  // TODO: This no longer makes any sense. We already wrap the mutation and
	  // layout phases. Should be able to remove.
	  var previousUpdateLanePriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
	  } finally {
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    setCurrentUpdatePriority(previousUpdateLanePriority);
	  }

	  return null;
	}

	function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  var finishedWork = root.finishedWork;
	  var lanes = root.finishedLanes;

	  {
	    markCommitStarted(lanes);
	  }

	  if (finishedWork === null) {

	    {
	      markCommitStopped();
	    }

	    return null;
	  } else {
	    {
	      if (lanes === NoLanes) {
	        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
	      }
	    }
	  }

	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;

	  if (finishedWork === root.current) {
	    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
	  markRootFinished(root, remainingLanes);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    workInProgressRootRenderLanes = NoLanes;
	  } // If there are pending passive effects, schedule a callback to process them.
	  // Do this as early as possible, so it is queued before anything else that
	  // might get scheduled in the commit phase. (See #16714.)
	  // TODO: Delete all other places that schedule the passive effect callback
	  // They're redundant.


	  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      // to store it in pendingPassiveTransitions until they get processed
	      // We need to pass this through as an argument to commitRoot
	      // because workInProgressTransitions might have changed between
	      // the previous render and commit if we throttle the commit
	      // with setTimeout

	      pendingPassiveTransitions = transitions;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
	        // *after* passive effects fire to avoid freeing a cache pool that may
	        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

	        return null;
	      });
	    }
	  } // Check if there are any effects in the whole tree.
	  // TODO: This is left over from the effect list implementation, where we had
	  // to check for the existence of `firstEffect` to satisfy Flow. I think the
	  // only other reason this optimization exists is because it affects profiling.
	  // Reconsider whether this is necessary.


	  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
	  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

	  if (subtreeHasEffects || rootHasEffect) {
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    ReactCurrentBatchConfig$3.transition = null;
	    var previousPriority = getCurrentUpdatePriority();
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext; // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    commitBeforeMutationEffects(root, finishedWork);

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    }


	    commitMutationEffects(root, finishedWork, lanes);

	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

	    {
	      markLayoutEffectsStarted(lanes);
	    }

	    commitLayoutEffects(finishedWork, root, lanes);

	    {
	      markLayoutEffectsStopped();
	    }
	    // opportunity to paint.


	    requestPaint();
	    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    {
	      recordCommitTime();
	    }
	  }

	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsLanes = lanes;
	  } else {

	    {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;
	    }
	  } // Read this again, since an effect might have updated it


	  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
	  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
	  // is to detect whether something might have called setState inside
	  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
	  // inside `componentDidCatch` is itself flawed — that's why we recommend
	  // `getDerivedStateFromError` instead. However, it could be improved by
	  // checking if remainingLanes includes Sync work, instead of whether there's
	  // any work remaining at all (which would also include stuff like Suspense
	  // retries or transitions). It's been like this for a while, though, so fixing
	  // it probably isn't that urgent.

	  if (remainingLanes === NoLanes) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      commitDoubleInvokeEffectsInDEV(root.current, false);
	    }
	  }

	  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

	  {
	    if (isDevToolsPresent) {
	      root.memoizedUpdaters.clear();
	    }
	  }

	  {
	    onCommitRoot$1();
	  } // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.


	  ensureRootIsScheduled(root, now());

	  if (recoverableErrors !== null) {
	    // There were errors during this render, but recovered from them without
	    // needing to surface it to the UI. We log them here.
	    var onRecoverableError = root.onRecoverableError;

	    for (var i = 0; i < recoverableErrors.length; i++) {
	      var recoverableError = recoverableErrors[i];
	      var componentStack = recoverableError.stack;
	      var digest = recoverableError.digest;
	      onRecoverableError(recoverableError.value, {
	        componentStack: componentStack,
	        digest: digest
	      });
	    }
	  }

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var error$1 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw error$1;
	  } // If the passive effects are the result of a discrete render, flush them
	  // synchronously at the end of the current task so that the result is
	  // immediately observable. Otherwise, we assume that they are not
	  // order-dependent and do not need to be observed by external systems, so we
	  // can wait until after paint.
	  // TODO: We can optimize this by not scheduling the callback earlier. Since we
	  // currently schedule the callback in multiple places, will wait until those
	  // are consolidated.


	  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
	    flushPassiveEffects();
	  } // Read this again, since a passive effect might have updated it


	  remainingLanes = root.pendingLanes;

	  if (includesSomeLane(remainingLanes, SyncLane)) {
	    {
	      markNestedUpdateScheduled();
	    } // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.


	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbacks();

	  {
	    markCommitStopped();
	  }

	  return null;
	}

	function flushPassiveEffects() {
	  // Returns whether passive effects were flushed.
	  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
	  // probably just combine the two functions. I believe they were only separate
	  // in the first place because we used to wrap it with
	  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
	  // priority within React itself, so we can mutate the variable directly.
	  if (rootWithPendingPassiveEffects !== null) {
	    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
	    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    var previousPriority = getCurrentUpdatePriority();

	    try {
	      ReactCurrentBatchConfig$3.transition = null;
	      setCurrentUpdatePriority(priority);
	      return flushPassiveEffectsImpl();
	    } finally {
	      setCurrentUpdatePriority(previousPriority);
	      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
	    }
	  }

	  return false;
	}
	function enqueuePendingPassiveProfilerEffect(fiber) {
	  {
	    pendingPassiveProfilerEffects.push(fiber);

	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects();
	        return null;
	      });
	    }
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  } // Cache and clear the transitions flag


	  var transitions = pendingPassiveTransitions;
	  pendingPassiveTransitions = null;
	  var root = rootWithPendingPassiveEffects;
	  var lanes = pendingPassiveEffectsLanes;
	  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
	  // Figure out why and fix it. It's not causing any known issues (probably
	  // because it's only used for profiling), but it's a refactor hazard.

	  pendingPassiveEffectsLanes = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Cannot flush passive effects while already rendering.');
	  }

	  {
	    isFlushingPassiveEffects = true;
	    didScheduleUpdateDuringPassiveEffects = false;
	  }

	  {
	    markPassiveEffectsStarted(lanes);
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  commitPassiveUnmountEffects(root.current);
	  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

	  {
	    var profilerEffects = pendingPassiveProfilerEffects;
	    pendingPassiveProfilerEffects = [];

	    for (var i = 0; i < profilerEffects.length; i++) {
	      var _fiber = profilerEffects[i];
	      commitPassiveEffectDurations(root, _fiber);
	    }
	  }

	  {
	    markPassiveEffectsStopped();
	  }

	  {
	    commitDoubleInvokeEffectsInDEV(root.current, true);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbacks();

	  {
	    // If additional passive effects were scheduled, increment a counter. If this
	    // exceeds the limit, we'll fire a warning.
	    if (didScheduleUpdateDuringPassiveEffects) {
	      if (root === rootWithPassiveNestedUpdates) {
	        nestedPassiveUpdateCount++;
	      } else {
	        nestedPassiveUpdateCount = 0;
	        rootWithPassiveNestedUpdates = root;
	      }
	    } else {
	      nestedPassiveUpdateCount = 0;
	    }

	    isFlushingPassiveEffects = false;
	    didScheduleUpdateDuringPassiveEffects = false;
	  } // TODO: Move to commitPassiveMountEffects


	  onPostCommitRoot(root);

	  {
	    var stateNode = root.current.stateNode;
	    stateNode.effectDuration = 0;
	    stateNode.passiveEffectDuration = 0;
	  }

	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
	  var root = enqueueUpdate(rootFiber, update, SyncLane);
	  var eventTime = requestEventTime();

	  if (root !== null) {
	    markRootUpdated(root, SyncLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
	  {
	    reportUncaughtErrorInDEV(error$1);
	    setIsRunningInsertionEffect(false);
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
	    return;
	  }

	  var fiber = null;

	  {
	    fiber = nearestMountedAncestor;
	  }

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
	        var root = enqueueUpdate(fiber, update, SyncLane);
	        var eventTime = requestEventTime();

	        if (root !== null) {
	          markRootUpdated(root, SyncLane, eventTime);
	          ensureRootIsScheduled(root, eventTime);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }

	  {
	    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
	    // will fire for errors that are thrown by destroy functions inside deleted
	    // trees. What it should instead do is propagate the error to the parent of
	    // the deleted tree. In the meantime, do not add this warning to the
	    // allowlist; this is only for our internal use.
	    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
	  }
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(wakeable);
	  }

	  var eventTime = requestEventTime();
	  markRootPinged(root, pingedLanes);
	  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

	  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, or if it's a retry, we'll always suspend
	    // so we can always restart.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root.
	      prepareFreshStack(root, NoLanes);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
	    }
	  }

	  ensureRootIsScheduled(root, eventTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new lanes.
	  if (retryLane === NoLane) {
	    // TODO: Assign this to `suspenseState.retryLane`? to avoid
	    // unnecessary entanglement?
	    retryLane = requestRetryLane(boundaryFiber);
	  } // TODO: Special case idle priority?


	  var eventTime = requestEventTime();
	  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

	  if (root !== null) {
	    markRootUpdated(root, retryLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function retryDehydratedSuspenseBoundary(boundaryFiber) {
	  var suspenseState = boundaryFiber.memoizedState;
	  var retryLane = NoLane;

	  if (suspenseState !== null) {
	    retryLane = suspenseState.retryLane;
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = NoLane; // Default

	  var retryCache;

	  switch (boundaryFiber.tag) {
	    case SuspenseComponent:
	      retryCache = boundaryFiber.stateNode;
	      var suspenseState = boundaryFiber.memoizedState;

	      if (suspenseState !== null) {
	        retryLane = suspenseState.retryLane;
	      }

	      break;

	    case SuspenseListComponent:
	      retryCache = boundaryFiber.stateNode;
	      break;

	    default:
	      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
	  }

	  if (retryCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(wakeable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;
	    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
	  {
	    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
	    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
	    // Maybe not a big deal since this is DEV only behavior.
	    setCurrentFiber(fiber);
	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
	    }

	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
	    }

	    resetCurrentFiber();
	  }
	}

	function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    var current = firstChild;
	    var subtreeRoot = null;

	    while (current !== null) {
	      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

	      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
	        current = current.child;
	      } else {
	        if ((current.flags & fiberFlags) !== NoFlags) {
	          invokeEffectFn(current);
	        }

	        if (current.sibling !== null) {
	          current = current.sibling;
	        } else {
	          current = subtreeRoot = current.return;
	        }
	      }
	    }
	  }
	}

	var didWarnStateUpdateForNotYetMountedComponent = null;
	function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	  {
	    if ((executionContext & RenderContext) !== NoContext) {
	      // We let the other warning about render phase updates deal with this one.
	      return;
	    }

	    if (!(fiber.mode & ConcurrentMode)) {
	      return;
	    }

	    var tag = fiber.tag;

	    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

	    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
	      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
	    }

	    var previousFiber = current;

	    try {
	      setCurrentFiber(fiber);

	      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
	    } finally {
	      if (previousFiber) {
	        setCurrentFiber(fiber);
	      } else {
	        resetCurrentFiber();
	      }
	    }
	  }
	}
	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, lanes) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, lanes);
	    } catch (originalError) {
	      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises.
	        // Don't replay errors if we are hydrating and have already suspended or handled an error
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError();

	        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
	          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
	          originalError._suppressLogging = true;
	        }
	      } // We always throw the original error in case the second render pass is not idempotent.
	      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


	      throw originalError;
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function restorePendingUpdaters(root, lanes) {
	  {
	    if (isDevToolsPresent) {
	      var memoizedUpdaters = root.memoizedUpdaters;
	      memoizedUpdaters.forEach(function (schedulingFiber) {
	        addFiberToLanesMap(root, schedulingFiber, lanes);
	      }); // This function intentionally does not clear memoized updaters.
	      // Those may still be relevant to the current commit
	      // and a future one (e.g. Suspense).
	    }
	  }
	}
	var fakeActCallbackNode = {};

	function scheduleCallback$1(priorityLevel, callback) {
	  {
	    // If we're currently inside an `act` scope, bypass Scheduler and push to
	    // the `act` queue instead.
	    var actQueue = ReactCurrentActQueue$1.current;

	    if (actQueue !== null) {
	      actQueue.push(callback);
	      return fakeActCallbackNode;
	    } else {
	      return scheduleCallback(priorityLevel, callback);
	    }
	  }
	}

	function cancelCallback$1(callbackNode) {
	  if ( callbackNode === fakeActCallbackNode) {
	    return;
	  } // In production, always call Scheduler. This function will be stripped out.


	  return cancelCallback(callbackNode);
	}

	function shouldForceFlushFallbacksInDEV() {
	  // Never force flush in production. This function should get stripped out.
	  return  ReactCurrentActQueue$1.current !== null;
	}

	function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	  {
	    if (fiber.mode & ConcurrentMode) {
	      if (!isConcurrentActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }
	    } else {
	      // Legacy mode has additional cases where we suppress a warning.
	      if (!isLegacyActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }

	      if (executionContext !== NoContext) {
	        // Legacy mode doesn't warn if the update is batched, i.e.
	        // batchedUpdates or flushSync.
	        return;
	      }

	      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
	        // For backwards compatibility with pre-hooks code, legacy mode only
	        // warns for updates that originate from a hook.
	        return;
	      }
	    }

	    if (ReactCurrentActQueue$1.current === null) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
	  {
	    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
	      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
	    }
	  }
	}

	function setIsRunningInsertionEffect(isRunning) {
	  {
	    isRunningInsertionEffect = isRunning;
	  }
	}

	/* eslint-disable react-internal/prod-error-codes */
	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    flushSync(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (_root !== null) {
	        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
	      }
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */

	    new Map([[nonExtensibleObject, null]]);
	    new Set([nonExtensibleObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.flags = NoFlags;
	  this.subtreeFlags = NoFlags;
	  this.deletions = null;
	  this.lanes = NoLanes;
	  this.childLanes = NoLanes;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    // This isn't directly used but is handy for debugging internals:
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct$1(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.flags = NoFlags; // The effects are no longer valid.

	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  } // Reset all effects except static ones.
	  // Static effects are not specific to a render.


	  workInProgress.flags = current.flags & StaticMask;
	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    lanes: currentDependencies.lanes,
	    firstContext: currentDependencies.firstContext
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderLanes) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect flags but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childLanes = NoLanes;
	    workInProgress.lanes = renderLanes;
	    workInProgress.child = null;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;
	    workInProgress.stateNode = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childLanes = current.childLanes;
	    workInProgress.lanes = current.lanes;
	    workInProgress.child = current.child;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      lanes: currentDependencies.lanes,
	      firstContext: currentDependencies.firstContext
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode;

	    if (isStrictMode === true) {
	      mode |= StrictLegacyMode;

	      {
	        mode |= StrictEffectsMode;
	      }
	    }
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, lanes) {
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct$1(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictLegacyMode;

	        if ( (mode & ConcurrentMode) !== NoMode) {
	          // Strict effects should never run on legacy roots
	          mode |= StrictEffectsMode;
	        }

	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

	      case REACT_LEGACY_HIDDEN_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_SCOPE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_CACHE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_TRACING_MARKER_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_DEBUG_TRACING_MODE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
	        }
	    }
	  }

	  var fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.lanes = lanes;

	  {
	    fiber._debugOwner = owner;
	  }

	  return fiber;
	}
	function createFiberFromElement(element, mode, lanes) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, lanes, key) {
	  {
	    if (typeof pendingProps.id !== 'string') {
	      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.lanes = lanes;

	  {
	    fiber.stateNode = {
	      effectDuration: 0,
	      passiveEffectDuration: 0
	    };
	  }

	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_OFFSCREEN_TYPE;
	  fiber.lanes = lanes;
	  var primaryChildInstance = {
	    isHidden: false
	  };
	  fiber.stateNode = primaryChildInstance;
	  return fiber;
	}
	function createFiberFromText(content, mode, lanes) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode);
	  fiber.elementType = 'DELETED';
	  return fiber;
	}
	function createFiberFromDehydratedFragment(dehydratedNode) {
	  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
	  fiber.stateNode = dehydratedNode;
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.lanes = lanes;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.flags = source.flags;
	  target.subtreeFlags = source.subtreeFlags;
	  target.deletions = source.deletions;
	  target.lanes = source.lanes;
	  target.childLanes = source.childLanes;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
	  this.tag = tag;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.current = null;
	  this.pingCache = null;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.callbackNode = null;
	  this.callbackPriority = NoLane;
	  this.eventTimes = createLaneMap(NoLanes);
	  this.expirationTimes = createLaneMap(NoTimestamp);
	  this.pendingLanes = NoLanes;
	  this.suspendedLanes = NoLanes;
	  this.pingedLanes = NoLanes;
	  this.expiredLanes = NoLanes;
	  this.mutableReadLanes = NoLanes;
	  this.finishedLanes = NoLanes;
	  this.entangledLanes = NoLanes;
	  this.entanglements = createLaneMap(NoLanes);
	  this.identifierPrefix = identifierPrefix;
	  this.onRecoverableError = onRecoverableError;

	  {
	    this.mutableSourceEagerHydrationData = null;
	  }

	  {
	    this.effectDuration = 0;
	    this.passiveEffectDuration = 0;
	  }

	  {
	    this.memoizedUpdaters = new Set();
	    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

	    for (var _i = 0; _i < TotalLanes; _i++) {
	      pendingUpdatersLaneMap.push(new Set());
	    }
	  }

	  {
	    switch (tag) {
	      case ConcurrentRoot:
	        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
	        break;

	      case LegacyRoot:
	        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
	        break;
	    }
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
	// host config, but because they are passed in at runtime, we have to thread
	// them through the root constructor. Perhaps we should put them all into a
	// single type, like a DynamicHostConfig that is defined by the renderer.
	identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;

	  {
	    var _initialState = {
	      element: initialChildren,
	      isDehydrated: hydrate,
	      cache: null,
	      // not enabled yet
	      transitions: null,
	      pendingSuspenseBoundaries: null
	    };
	    uninitializedFiber.memoizedState = _initialState;
	  }

	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}

	var ReactVersion = '18.2.0';

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  {
	    checkKeyStringCoercion(key);
	  }

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        throw new Error('Unable to find node on an unmounted component.');
	      } else {
	        var keys = Object.keys(component).join(',');
	        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictLegacyMode) {
	      var componentName = getComponentNameFromFiber(fiber) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        var previousFiber = current;

	        try {
	          setCurrentFiber(hostFiber);

	          if (fiber.mode & StrictLegacyMode) {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          } else {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          }
	        } finally {
	          // Ideally this should reset to previous but this shouldn't be called in
	          // render and there's another warning for that anyway.
	          if (previousFiber) {
	            setCurrentFiber(previousFiber);
	          } else {
	            resetCurrentFiber();
	          }
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = false;
	  var initialChildren = null;
	  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	}
	function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
	callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = true;
	  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

	  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
	  // a regular update because the initial render must match was was rendered
	  // on the server.
	  // NOTE: This update intentionally doesn't have a payload. We're only using
	  // the update to schedule work on the root fiber (and, for legacy roots, to
	  // enqueue the callback if one is provided).

	  var current = root.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current);
	  var update = createUpdate(eventTime, lane);
	  update.callback = callback !== undefined && callback !== null ? callback : null;
	  enqueueUpdate(current, update, lane);
	  scheduleInitialHydrationOnRoot(root, lane, eventTime);
	  return root;
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current$1);

	  {
	    markRenderScheduled(lane);
	  }

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
	    }
	  }

	  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  var root = enqueueUpdate(current$1, update, lane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
	    entangleTransitions(root, current$1, lane);
	  }

	  return lane;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}
	function attemptSynchronousHydration$1(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	      {
	        var root = fiber.stateNode;

	        if (isRootDehydrated(root)) {
	          // Flush the first scheduled "update".
	          var lanes = getHighestPriorityPendingLanes(root);
	          flushRoot(root, lanes);
	        }

	        break;
	      }

	    case SuspenseComponent:
	      {
	        flushSync(function () {
	          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	          if (root !== null) {
	            var eventTime = requestEventTime();
	            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
	          }
	        }); // If we're still blocked after this, we need to increase
	        // the priority of any promises resolving within this
	        // boundary so that they next attempt also has higher pri.

	        var retryLane = SyncLane;
	        markRetryLaneIfNotHydrated(fiber, retryLane);
	        break;
	      }
	  }
	}

	function markRetryLaneImpl(fiber, retryLane) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
	  }
	} // Increases the priority of thenables when they resolve within this boundary.


	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryLaneImpl(alternate, retryLane);
	  }
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var lane = SelectiveHydrationLane;
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var lane = requestUpdateLane(fiber);
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	var shouldErrorImpl = function (fiber) {
	  return null;
	};

	function shouldError(fiber) {
	  return shouldErrorImpl(fiber);
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideHookStateDeletePath = null;
	var overrideHookStateRenamePath = null;
	var overrideProps = null;
	var overridePropsDeletePath = null;
	var overridePropsRenamePath = null;
	var scheduleUpdate = null;
	var setErrorHandler = null;
	var setSuspenseHandler = null;

	{
	  var copyWithDeleteImpl = function (obj, path, index) {
	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === path.length) {
	      if (isArray(updated)) {
	        updated.splice(key, 1);
	      } else {
	        delete updated[key];
	      }

	      return updated;
	    } // $FlowFixMe number or string is fine here


	    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	    return updated;
	  };

	  var copyWithDelete = function (obj, path) {
	    return copyWithDeleteImpl(obj, path, 0);
	  };

	  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
	    var oldKey = oldPath[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === oldPath.length) {
	      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

	      updated[newKey] = updated[oldKey];

	      if (isArray(updated)) {
	        updated.splice(oldKey, 1);
	      } else {
	        delete updated[oldKey];
	      }
	    } else {
	      // $FlowFixMe number or string is fine here
	      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
	      obj[oldKey], oldPath, newPath, index + 1);
	    }

	    return updated;
	  };

	  var copyWithRename = function (obj, oldPath, newPath) {
	    if (oldPath.length !== newPath.length) {
	      warn('copyWithRename() expects paths of the same length');

	      return;
	    } else {
	      for (var i = 0; i < newPath.length - 1; i++) {
	        if (oldPath[i] !== newPath[i]) {
	          warn('copyWithRename() expects paths to be the same except for the deepest key');

	          return;
	        }
	      }
	    }

	    return copyWithRenameImpl(obj, oldPath, newPath, 0);
	  };

	  var copyWithSetImpl = function (obj, path, index, value) {
	    if (index >= path.length) {
	      return value;
	    }

	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  var findHook = function (fiber, id) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    return currentHook;
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithSet(hook.memoizedState, path, value);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateDeletePath = function (fiber, id, path) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithDelete(hook.memoizedState, path);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsDeletePath = function (fiber, path) {
	    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsRenamePath = function (fiber, oldPath, newPath) {
	    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  scheduleUpdate = function (fiber) {
	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  setErrorHandler = function (newShouldErrorImpl) {
	    shouldErrorImpl = newShouldErrorImpl;
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function findHostInstanceByFiber(fiber) {
	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function emptyFindFiberByHostInstance(instance) {
	  return null;
	}

	function getCurrentFiberForDevTools() {
	  return current;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals({
	    bundleType: devToolsConfig.bundleType,
	    version: devToolsConfig.version,
	    rendererPackageName: devToolsConfig.rendererPackageName,
	    rendererConfig: devToolsConfig.rendererConfig,
	    overrideHookState: overrideHookState,
	    overrideHookStateDeletePath: overrideHookStateDeletePath,
	    overrideHookStateRenamePath: overrideHookStateRenamePath,
	    overrideProps: overrideProps,
	    overridePropsDeletePath: overridePropsDeletePath,
	    overridePropsRenamePath: overridePropsRenamePath,
	    setErrorHandler: setErrorHandler,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: findHostInstanceByFiber,
	    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  getCurrentFiberForDevTools ,
	    // Enables DevTools to detect reconciler version rather than renderer version
	    // which may not match for third party renderers.
	    reconcilerVersion: ReactVersion
	  });
	}

	/* global reportError */

	var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
	// emulating an uncaught JavaScript error.
	reportError : function (error) {
	  // In older browsers and test environments, fallback to console.error.
	  // eslint-disable-next-line react-internal/no-production-logging
	  console['error'](error);
	};

	function ReactDOMRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  if (root === null) {
	    throw new Error('Cannot update an unmounted root.');
	  }

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    } else if (isValidContainer(arguments[1])) {
	      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
	    } else if (typeof arguments[1] !== 'undefined') {
	      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;

	  if (root !== null) {
	    this._internalRoot = null;
	    var container = root.containerInfo;

	    {
	      if (isAlreadyRendering()) {
	        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
	      }
	    }

	    flushSync(function () {
	      updateContainer(null, root, null, null);
	    });
	    unmarkContainerAsRoot(container);
	  }
	};

	function createRoot(container, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('createRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    {
	      if (options.hydrate) {
	        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
	      } else {
	        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
	          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
	        }
	      }
	    }

	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }

	    if (options.transitionCallbacks !== undefined) {
	      options.transitionCallbacks;
	    }
	  }

	  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container);
	  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	  listenToAllSupportedEvents(rootContainerElement);
	  return new ReactDOMRoot(root);
	}

	function ReactDOMHydrationRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	function scheduleHydration(target) {
	  if (target) {
	    queueExplicitHydrationTarget(target);
	  }
	}

	ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
	function hydrateRoot(container, initialChildren, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);

	  {
	    if (initialChildren === undefined) {
	      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
	    }
	  } // For now we reuse the whole bag of options since they contain
	  // the hydration callbacks.


	  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

	  var mutableSources = options != null && options.hydratedSources || null;
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }
	  }

	  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

	  listenToAllSupportedEvents(container);

	  if (mutableSources) {
	    for (var i = 0; i < mutableSources.length; i++) {
	      var mutableSource = mutableSources[i];
	      registerMutableSourceForHydration(root, mutableSource);
	    }
	  }

	  return new ReactDOMHydrationRoot(root);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
	} // TODO: Remove this function which also includes comment nodes.
	// We only use it in places that are currently more relaxed.

	function isValidContainerLegacy(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function warnIfReactDOMContainerInDEV(container) {
	  {
	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
	    }

	    if (isContainerMarkedAsRoot(container)) {
	      if (container._reactRootContainer) {
	        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
	      } else {
	        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
	      }
	    }
	  }
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
	  // legacy API.
	}

	function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
	  if (isHydrationContainer) {
	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    }

	    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);
	    container._reactRootContainer = root;
	    markContainerAsRoot(root.current, container);
	    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	    listenToAllSupportedEvents(rootContainerElement);
	    flushSync();
	    return root;
	  } else {
	    // First clear any existing content.
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      container.removeChild(rootSibling);
	    }

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(_root);

	        _originalCallback.call(instance);
	      };
	    }

	    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);

	    container._reactRootContainer = _root;
	    markContainerAsRoot(_root.current, container);

	    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

	    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

	    flushSync(function () {
	      updateContainer(initialChildren, _root, parentComponent, callback);
	    });
	    return _root;
	  }
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  }

	  var maybeRoot = container._reactRootContainer;
	  var root;

	  if (!maybeRoot) {
	    // Initial mount
	    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
	  } else {
	    root = maybeRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, root, parentComponent, callback);
	  }

	  return getPublicRootInstance(root);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  {
	    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  {
	    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  {
	    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(containerNode)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  if (parentComponent == null || !has(parentComponent)) {
	    throw new Error('parentComponent must be a valid React Component');
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainerLegacy(container)) {
	    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    flushSync(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	setAttemptSynchronousHydration(attemptSynchronousHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	setGetCurrentUpdatePriority(getCurrentUpdatePriority);
	setAttemptHydrationAtPriority(runWithPriority);

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    throw new Error('Target container is not a DOM element.');
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	var Internals = {
	  usingClientEntryPoint: false,
	  // Keep in sync with ReactTestUtils.js.
	  // This is an array for better minification.
	  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
	};

	function createRoot$1(container, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return createRoot(container, options);
	}

	function hydrateRoot$1(container, initialChildren, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return hydrateRoot(container, initialChildren, options);
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.


	// eslint-disable-next-line no-redeclare
	function flushSync$1(fn) {
	  {
	    if (isAlreadyRendering()) {
	      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
	    }
	  }

	  return flushSync(fn);
	}
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	reactDom_development.createPortal = createPortal$1;
	reactDom_development.createRoot = createRoot$1;
	reactDom_development.findDOMNode = findDOMNode;
	reactDom_development.flushSync = flushSync$1;
	reactDom_development.hydrate = hydrate;
	reactDom_development.hydrateRoot = hydrateRoot$1;
	reactDom_development.render = render;
	reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
	reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
	reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	reactDom_development.version = ReactVersion;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}

	(function (module) {

		{
		  module.exports = reactDom_development;
		}
	} (reactDom));

	var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDom.exports);

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	var propTypes = {exports: {}};

	var reactIs$4 = {exports: {}};

	var reactIs_development$3 = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$3.AsyncMode = AsyncMode;
	reactIs_development$3.ConcurrentMode = ConcurrentMode;
	reactIs_development$3.ContextConsumer = ContextConsumer;
	reactIs_development$3.ContextProvider = ContextProvider;
	reactIs_development$3.Element = Element;
	reactIs_development$3.ForwardRef = ForwardRef;
	reactIs_development$3.Fragment = Fragment;
	reactIs_development$3.Lazy = Lazy;
	reactIs_development$3.Memo = Memo;
	reactIs_development$3.Portal = Portal;
	reactIs_development$3.Profiler = Profiler;
	reactIs_development$3.StrictMode = StrictMode;
	reactIs_development$3.Suspense = Suspense;
	reactIs_development$3.isAsyncMode = isAsyncMode;
	reactIs_development$3.isConcurrentMode = isConcurrentMode;
	reactIs_development$3.isContextConsumer = isContextConsumer;
	reactIs_development$3.isContextProvider = isContextProvider;
	reactIs_development$3.isElement = isElement;
	reactIs_development$3.isForwardRef = isForwardRef;
	reactIs_development$3.isFragment = isFragment;
	reactIs_development$3.isLazy = isLazy;
	reactIs_development$3.isMemo = isMemo;
	reactIs_development$3.isPortal = isPortal;
	reactIs_development$3.isProfiler = isProfiler;
	reactIs_development$3.isStrictMode = isStrictMode;
	reactIs_development$3.isSuspense = isSuspense;
	reactIs_development$3.isValidElementType = isValidElementType;
	reactIs_development$3.typeOf = typeOf;
	  })();
	}

	(function (module) {

		{
		  module.exports = reactIs_development$3;
		}
	} (reactIs$4));

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$1.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

	var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var printWarning$1 = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has$1 = has$2;

	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has$1(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning$1(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning$1(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes$1.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactIs$1 = reactIs$4.exports;
	var assign$1 = objectAssign;

	var ReactPropTypesSecret = ReactPropTypesSecret_1;
	var has = has$2;
	var checkPropTypes = checkPropTypes_1;

	var printWarning = function() {};

	{
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs$1.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign$1({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs$4.exports;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    {
	      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

	      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
	        // this would only cause problem in speedy mode
	        // but we don't want enabling speedy to affect the observable behavior
	        // so we report this error at all times
	        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
	      }
	      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
	    }

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
	          console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
	        }
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;

	    {
	      this._alreadyInsertedOrderInsensitiveRule = false;
	    }
	  };

	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';

	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash$2 (value, length) {
		return (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3)
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim (value) {
		return value.trim()
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match (value, pattern) {
		return (value = pattern.exec(value)) ? value[0] : value
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace (value, pattern, replacement) {
		return value.replace(pattern, replacement)
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof (value, search) {
		return value.indexOf(search)
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat (value, index) {
		return value.charCodeAt(index) | 0
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr (value, begin, end) {
		return value.slice(begin, end)
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen (value) {
		return value.length
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof (value) {
		return value.length
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append (value, array) {
		return array.push(value), value
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine (array, callback) {
		return array.map(callback).join('')
	}

	var line = 1;
	var column = 1;
	var length = 0;
	var position$1 = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node (value, root, parent, type, props, children, length) {
		return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy (root, props) {
		return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
	}

	/**
	 * @return {number}
	 */
	function char () {
		return character
	}

	/**
	 * @return {number}
	 */
	function prev () {
		character = position$1 > 0 ? charat(characters, --position$1) : 0;

		if (column--, character === 10)
			column = 1, line--;

		return character
	}

	/**
	 * @return {number}
	 */
	function next () {
		character = position$1 < length ? charat(characters, position$1++) : 0;

		if (column++, character === 10)
			column = 1, line++;

		return character
	}

	/**
	 * @return {number}
	 */
	function peek () {
		return charat(characters, position$1)
	}

	/**
	 * @return {number}
	 */
	function caret () {
		return position$1
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice (begin, end) {
		return substr(characters, begin, end)
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token (type) {
		switch (type) {
			// \0 \t \n \r \s whitespace token
			case 0: case 9: case 10: case 13: case 32:
				return 5
			// ! + , / > @ ~ isolate token
			case 33: case 43: case 44: case 47: case 62: case 64: case 126:
			// ; { } breakpoint token
			case 59: case 123: case 125:
				return 4
			// : accompanied token
			case 58:
				return 3
			// " ' ( [ opening delimit token
			case 34: case 39: case 40: case 91:
				return 2
			// ) ] closing delimit token
			case 41: case 93:
				return 1
		}

		return 0
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc (value) {
		return line = column = 1, length = strlen(characters = value), position$1 = 0, []
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc (value) {
		return characters = '', value
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit (type) {
		return trim(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace (type) {
		while (character = peek())
			if (character < 33)
				next();
			else
				break

		return token(type) > 2 || token(character) > 3 ? '' : ' '
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping (index, count) {
		while (--count && next())
			// not 0-9 A-F a-f
			if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
				break

		return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter (type) {
		while (next())
			switch (character) {
				// ] ) " '
				case type:
					return position$1
				// " '
				case 34: case 39:
					if (type !== 34 && type !== 39)
						delimiter(character);
					break
				// (
				case 40:
					if (type === 41)
						delimiter(type);
					break
				// \
				case 92:
					next();
					break
			}

		return position$1
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter (type, index) {
		while (next())
			// //
			if (type + character === 47 + 10)
				break
			// /*
			else if (type + character === 42 + 42 && peek() === 47)
				break

		return '/*' + slice(index, position$1 - 1) + '*' + from(type === 47 ? type : next())
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier (index) {
		while (!token(peek()))
			next();

		return slice(index, position$1)
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile (value) {
		return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
		var index = 0;
		var offset = 0;
		var length = pseudo;
		var atrule = 0;
		var property = 0;
		var previous = 0;
		var variable = 1;
		var scanning = 1;
		var ampersand = 1;
		var character = 0;
		var type = '';
		var props = rules;
		var children = rulesets;
		var reference = rule;
		var characters = type;

		while (scanning)
			switch (previous = character, character = next()) {
				// (
				case 40:
					if (previous != 108 && characters.charCodeAt(length - 1) == 58) {
						if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
							ampersand = -1;
						break
					}
				// " ' [
				case 34: case 39: case 91:
					characters += delimit(character);
					break
				// \t \n \r \s
				case 9: case 10: case 13: case 32:
					characters += whitespace(previous);
					break
				// \
				case 92:
					characters += escaping(caret() - 1, 7);
					continue
				// /
				case 47:
					switch (peek()) {
						case 42: case 47:
							append(comment(commenter(next(), caret()), root, parent), declarations);
							break
						default:
							characters += '/';
					}
					break
				// {
				case 123 * variable:
					points[index++] = strlen(characters) * ampersand;
				// } ; \0
				case 125 * variable: case 59: case 0:
					switch (character) {
						// \0 }
						case 0: case 125: scanning = 0;
						// ;
						case 59 + offset:
							if (property > 0 && (strlen(characters) - length))
								append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
							break
						// @ ;
						case 59: characters += ';';
						// { rule/at-rule
						default:
							append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

							if (character === 123)
								if (offset === 0)
									parse(characters, root, reference, reference, props, rulesets, length, points, children);
								else
									switch (atrule) {
										// d m s
										case 100: case 109: case 115:
											parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
											break
										default:
											parse(characters, reference, reference, reference, [''], children, 0, points, children);
									}
					}

					index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
					break
				// :
				case 58:
					length = 1 + strlen(characters), property = previous;
				default:
					if (variable < 1)
						if (character == 123)
							--variable;
						else if (character == 125 && variable++ == 0 && prev() == 125)
							continue

					switch (characters += from(character), character * variable) {
						// &
						case 38:
							ampersand = offset > 0 ? 1 : (characters += '\f', -1);
							break
						// ,
						case 44:
							points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
							break
						// @
						case 64:
							// -
							if (peek() === 45)
								characters += delimit(next());

							atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
							break
						// -
						case 45:
							if (previous === 45 && strlen(characters) == 2)
								variable = 0;
					}
			}

		return rulesets
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
		var post = offset - 1;
		var rule = offset === 0 ? rules : [''];
		var size = sizeof(rule);

		for (var i = 0, j = 0, k = 0; i < index; ++i)
			for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
				if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
					props[k++] = z;

		return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment (value, root, parent) {
		return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration (value, root, parent, length) {
		return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
	}

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {string}
	 */
	function prefix (value, length) {
		switch (hash$2(value, length)) {
			// color-adjust
			case 5103:
				return WEBKIT + 'print-' + value + value
			// animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
			case 5737: case 4201: case 3177: case 3433: case 1641: case 4457: case 2921:
			// text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
			case 5572: case 6356: case 5844: case 3191: case 6645: case 3005:
			// mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
			case 6391: case 5879: case 5623: case 6135: case 4599: case 4855:
			// background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
			case 4215: case 6389: case 5109: case 5365: case 5621: case 3829:
				return WEBKIT + value + value
			// appearance, user-select, transform, hyphens, text-size-adjust
			case 5349: case 4246: case 4810: case 6968: case 2756:
				return WEBKIT + value + MOZ + value + MS + value + value
			// flex, flex-direction
			case 6828: case 4268:
				return WEBKIT + value + MS + value + value
			// order
			case 6165:
				return WEBKIT + value + MS + 'flex-' + value + value
			// align-items
			case 5187:
				return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value
			// align-self
			case 5443:
				return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value
			// align-content
			case 4675:
				return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value
			// flex-shrink
			case 5548:
				return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value
			// flex-basis
			case 5292:
				return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value
			// flex-grow
			case 6060:
				return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value
			// transition
			case 4554:
				return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value
			// cursor
			case 6187:
				return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value
			// background, background-image
			case 5495: case 3959:
				return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1')
			// justify-content
			case 4968:
				return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value
			// (margin|padding)-inline-(start|end)
			case 4095: case 3583: case 4068: case 2532:
				return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value
			// (min|max)?(width|height|inline-size|block-size)
			case 8116: case 7059: case 5753: case 5535:
			case 5445: case 5701: case 4933: case 4677:
			case 5533: case 5789: case 5021: case 4765:
				// stretch, max-content, min-content, fill-available
				if (strlen(value) - 1 - length > 6)
					switch (charat(value, length + 1)) {
						// (m)ax-content, (m)in-content
						case 109:
							// -
							if (charat(value, length + 4) !== 45)
								break
						// (f)ill-available, (f)it-content
						case 102:
							return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value
						// (s)tretch
						case 115:
							return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value
					}
				break
			// position: sticky
			case 4949:
				// (s)ticky?
				if (charat(value, length + 1) !== 115)
					break
			// display: (flex|inline-flex)
			case 6444:
				switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
					// stic(k)y
					case 107:
						return replace(value, ':', ':' + WEBKIT) + value
					// (inline-)?fl(e)x
					case 101:
						return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value
				}
				break
			// writing-mode
			case 5936:
				switch (charat(value, length + 11)) {
					// vertical-l(r)
					case 114:
						return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value
					// vertical-r(l)
					case 108:
						return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value
					// horizontal(-)tb
					case 45:
						return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value
				}

				return WEBKIT + value + MS + value + value
		}

		return value
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize (children, callback) {
		var output = '';
		var length = sizeof(children);

		for (var i = 0; i < length; i++)
			output += callback(children[i], i, children, callback) || '';

		return output
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify (element, index, children, callback) {
		switch (element.type) {
			case IMPORT: case DECLARATION: return element.return = element.return || element.value
			case COMMENT: return ''
			case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
			case RULESET: element.value = element.props.join(',');
		}

		return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware (collection) {
		var length = sizeof(collection);

		return function (element, index, children, callback) {
			var output = '';

			for (var i = 0; i < length; i++)
				output += collection[i](element, index, children, callback) || '';

			return output
		}
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 */
	function prefixer (element, index, children, callback) {
		if (element.length > -1)
			if (!element.return)
				switch (element.type) {
					case DECLARATION: element.return = prefix(element.value, element.length);
						break
					case KEYFRAMES:
						return serialize([copy(element, {value: replace(element.value, '@', '@' + WEBKIT)})], callback)
					case RULESET:
						if (element.length)
							return combine(element.props, function (value) {
								switch (match(value, /(::plac\w+|:read-\w+)/)) {
									// :read-(only|write)
									case ':read-only': case ':read-write':
										return serialize([copy(element, {props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]})], callback)
									// :placeholder
									case '::placeholder':
										return serialize([
											copy(element, {props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]}),
											copy(element, {props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]}),
											copy(element, {props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]})
										], callback)
								}

								return ''
							})
				}
	}

	var last = function last(arr) {
	  return arr.length ? arr[arr.length - 1] : null;
	}; // based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244


	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (token(character)) {
	      break;
	    }

	    next();
	  }

	  return slice(begin, position$1);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(position$1 - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from(character);
	    }
	  } while (character = next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};
	var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

	var isIgnoringComment = function isIgnoringComment(element) {
	  return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
	};

	var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
	  return function (element, index, children) {
	    if (element.type !== 'rule') return;
	    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

	    if (unsafePseudoClasses && cache.compat !== true) {
	      var prevElement = index > 0 ? children[index - 1] : null;

	      if (prevElement && isIgnoringComment(last(prevElement.children))) {
	        return;
	      }

	      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
	        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
	      });
	    }
	  };
	};

	var isImportRule = function isImportRule(element) {
	  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
	};

	var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
	  for (var i = index - 1; i >= 0; i--) {
	    if (!isImportRule(children[i])) {
	      return true;
	    }
	  }

	  return false;
	}; // use this to remove incorrect elements from further processing
	// so they don't get handed to the `sheet` (or anything else)
	// as that could potentially lead to additional logs which in turn could be overhelming to the user


	var nullifyElement = function nullifyElement(element) {
	  element.type = '';
	  element.value = '';
	  element["return"] = '';
	  element.children = '';
	  element.props = '';
	};

	var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
	  if (!isImportRule(element)) {
	    return;
	  }

	  if (element.parent) {
	    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
	    nullifyElement(element);
	  } else if (isPrependedWithRegularRules(index, children)) {
	    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
	    nullifyElement(element);
	  }
	};

	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (!key) {
	    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
	  }

	  if ( key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  {
	    // $FlowFixMe
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  {
	    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
	      get compat() {
	        return cache.compat;
	      }

	    }), incorrectImportAlarm);
	  }

	  {
	    var currentSheet;
	    var finalizingPlugins = [stringify, function (element) {
	      if (!element.root) {
	        if (element["return"]) {
	          currentSheet.insert(element["return"]);
	        } else if (element.value && element.type !== COMMENT) {
	          // insert empty rule in non-production environments
	          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
	          currentSheet.insert(element.value + "{}");
	        }
	      }
	    } ];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      if (serialized.map !== undefined) {
	        currentSheet = {
	          insert: function insert(rule) {
	            sheet.insert(rule + serialized.map);
	          }
	        };
	      }

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var reactIs$3 = reactIs$4.exports;
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs$3.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs$3.Memo] = MEMO_STATICS;

	var isBrowser$2 = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$2 === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
	var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	{
	  var contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
	  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;
	  var msPattern = /^-ms-/;
	  var hyphenPattern = /-(.)/g;
	  var hyphenatedCache = {};

	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }

	    var processed = oldProcessStyleValue(key, value);

	    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
	      hyphenatedCache[key] = true;
	      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
	        return _char.toUpperCase();
	      }) + "?");
	    }

	    return processed;
	  };
	}

	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {
	    if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
	      throw new Error(noComponentSelectorMessage);
	    }

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          if (interpolation.map !== undefined) {
	            styles += interpolation.map;
	          }

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        } else {
	          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }

	        break;
	      }

	    case 'string':
	      {
	        var matched = [];
	        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
	          var fakeVarName = "animation" + matched.length;
	          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
	          return "${" + fakeVarName + "}";
	        });

	        if (matched.length) {
	          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
	        }
	      }

	      break;
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {
	                if (_key === 'undefined') {
	                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
	                }

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	var sourceMapPattern;

	{
	  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
	} // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    if (strings[0] === undefined) {
	      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	    }

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {
	      if (strings[i] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	      }

	      styles += strings[i];
	    }
	  }

	  var sourceMap;

	  {
	    styles = styles.replace(sourceMapPattern, function (match) {
	      sourceMap = match;
	      return '';
	    });
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  {
	    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
	    return {
	      name: name,
	      styles: styles,
	      map: sourceMap,
	      next: cursor,
	      toString: function toString() {
	        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
	      }
	    };
	  }
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var EmotionCacheContext = /* #__PURE__ */react.exports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	{
	  EmotionCacheContext.displayName = 'EmotionCacheContext';
	}

	EmotionCacheContext.Provider;

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/react.exports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = react.exports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext$1 = /* #__PURE__ */react.exports.createContext({});

	{
	  ThemeContext$1.displayName = 'EmotionThemeContext';
	}

	var useInsertionEffect$2 = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : function useInsertionEffect(create) {
	  create();
	};
	function useInsertionEffectMaybe$1(create) {

	  useInsertionEffect$2(create);
	}

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';

	var Insertion$2 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectMaybe$1(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var WrappedComponent = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serializeStyles(registeredStyles, undefined, react.exports.useContext(ThemeContext$1));

	  if (serialized.name.indexOf('-') === -1) {
	    var labelFromStack = props[labelPropName];

	    if (labelFromStack) {
	      serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
	    }
	  }

	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && (key !== labelPropName)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps.ref = ref;
	  newProps.className = className;
	  return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Insertion$2, {
	    cache: cache,
	    serialized: serialized,
	    isStringTag: typeof WrappedComponent === 'string'
	  }), /*#__PURE__*/react.exports.createElement(WrappedComponent, newProps));
	});

	{
	  Emotion.displayName = 'EmotionCssPropInternal';
	}

	var pkg = {
		name: "@emotion/react",
		version: "11.9.3",
		main: "dist/emotion-react.cjs.js",
		module: "dist/emotion-react.esm.js",
		browser: {
			"./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
			"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
		},
		types: "types/index.d.ts",
		files: [
			"src",
			"dist",
			"jsx-runtime",
			"jsx-dev-runtime",
			"_isolated-hnrs",
			"types/*.d.ts",
			"macro.js",
			"macro.d.ts",
			"macro.js.flow"
		],
		sideEffects: false,
		author: "Emotion Contributors",
		license: "MIT",
		scripts: {
			"test:typescript": "dtslint types"
		},
		dependencies: {
			"@babel/runtime": "^7.13.10",
			"@emotion/babel-plugin": "^11.7.1",
			"@emotion/cache": "^11.9.3",
			"@emotion/serialize": "^1.0.4",
			"@emotion/utils": "^1.1.0",
			"@emotion/weak-memoize": "^0.2.5",
			"hoist-non-react-statics": "^3.3.1"
		},
		peerDependencies: {
			"@babel/core": "^7.0.0",
			react: ">=16.8.0"
		},
		peerDependenciesMeta: {
			"@babel/core": {
				optional: true
			},
			"@types/react": {
				optional: true
			}
		},
		devDependencies: {
			"@babel/core": "^7.13.10",
			"@definitelytyped/dtslint": "0.0.112",
			"@emotion/css": "11.9.0",
			"@emotion/css-prettifier": "1.0.1",
			"@emotion/server": "11.4.0",
			"@emotion/styled": "11.9.3",
			"html-tag-names": "^1.1.2",
			react: "16.14.0",
			"svg-tag-names": "^1.1.1",
			typescript: "^4.5.5"
		},
		repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
		publishConfig: {
			access: "public"
		},
		"umd:main": "dist/emotion-react.umd.min.js",
		preconstruct: {
			entrypoints: [
				"./index.js",
				"./jsx-runtime.js",
				"./jsx-dev-runtime.js",
				"./_isolated-hnrs.js"
			],
			umdName: "emotionReact"
		}
	};

	var useInsertionEffect$1 = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : react.exports.useLayoutEffect;
	var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
	  // probably using the custom createElement which
	  // means it will be turned into a className prop
	  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
	  props.className || props.css)) {
	    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
	    warnedAboutCssPropForGlobal = true;
	  }

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, react.exports.useContext(ThemeContext$1));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = react.exports.useRef();
	  useInsertionEffect$1(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffect$1(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	{
	  Global.displayName = 'EmotionGlobal';
	}

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var classnames = function classnames(args) {
	  var len = args.length;
	  var i = 0;
	  var cls = '';

	  for (; i < len; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;

	    switch (typeof arg) {
	      case 'boolean':
	        break;

	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            if (arg.styles !== undefined && arg.name !== undefined) {
	              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
	            }

	            toAdd = '';

	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }

	          break;
	        }

	      default:
	        {
	          toAdd = arg;
	        }
	    }

	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }

	  return cls;
	};

	function merge$1(registered, css, className) {
	  var registeredStyles = [];
	  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

	  if (registeredStyles.length < 2) {
	    return className;
	  }

	  return rawClassName + css(registeredStyles);
	}

	var Insertion$1 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serializedArr = _ref.serializedArr;
	  useInsertionEffectMaybe$1(function () {

	    for (var i = 0; i < serializedArr.length; i++) {
	      insertStyles(cache, serializedArr[i], false);
	    }
	  });

	  return null;
	};

	var ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  var hasRendered = false;
	  var serializedArr = [];

	  var css = function css() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('css can only be used during render');
	    }

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var serialized = serializeStyles(args, cache.registered);
	    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

	    registerStyles(cache, serialized, false);
	    return cache.key + "-" + serialized.name;
	  };

	  var cx = function cx() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('cx can only be used during render');
	    }

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return merge$1(cache.registered, css, classnames(args));
	  };

	  var content = {
	    css: css,
	    cx: cx,
	    theme: react.exports.useContext(ThemeContext$1)
	  };
	  var ele = props.children(content);
	  hasRendered = true;
	  return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Insertion$1, {
	    cache: cache,
	    serializedArr: serializedArr
	  }), ele);
	});

	{
	  ClassNames.displayName = 'EmotionClassNames';
	}

	{
	  var isBrowser$1 = "object" !== 'undefined'; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock

	  var isJest$1 = typeof jest !== 'undefined';

	  if (isBrowser$1 && !isJest$1) {
	    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
	    var globalContext = // $FlowIgnore
	    typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
	    : isBrowser$1 ? window : global;
	    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

	    if (globalContext[globalKey]) {
	      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
	    }

	    globalContext[globalKey] = true;
	  }
	}

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : function useInsertionEffect(create) {
	  create();
	};
	function useInsertionEffectMaybe(create) {

	  useInsertionEffect(create);
	}

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectMaybe(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var createStyled$1 = function createStyled(tag, options) {
	  {
	    if (tag === undefined) {
	      throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
	    }
	  }

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {
	      if (args[0][0] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	      }

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {
	        if (args[0][i] === undefined) {
	          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	        }

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = react.exports.useContext(ThemeContext$1);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/react.exports.createElement(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "development" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_development = {};

	/**
	 * @license React
	 * react-jsx-runtime.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	var React = react.exports;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;
	var didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function warnIfStringRefCannotBeAutoConverted(config, self) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingKey.isReactWarning = true;
	    Object.defineProperty(props, 'key', {
	      get: warnAboutAccessingKey,
	      configurable: true
	    });
	  }
	}

	function defineRefPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingRef.isReactWarning = true;
	    Object.defineProperty(props, 'ref', {
	      get: warnAboutAccessingRef,
	      configurable: true
	    });
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * https://github.com/reactjs/rfcs/pull/107
	 * @param {*} type
	 * @param {object} props
	 * @param {string} key
	 */

	function jsxDEV(type, config, maybeKey, source, self) {
	  {
	    var propName; // Reserved names are extracted

	    var props = {};
	    var key = null;
	    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	    // but as an intermediary step, we will use jsxDEV for everything except
	    // <div {...props} key="Hi" />, because we aren't currently able to tell if
	    // key is explicitly declared to be undefined or not.

	    if (maybeKey !== undefined) {
	      {
	        checkKeyStringCoercion(maybeKey);
	      }

	      key = '' + maybeKey;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	      warnIfStringRefCannotBeAutoConverted(config, self);
	    } // Remaining properties are added to a new props object


	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    } // Resolve default props


	    if (type && type.defaultProps) {
	      var defaultProps = type.defaultProps;

	      for (propName in defaultProps) {
	        if (props[propName] === undefined) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    }

	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }

	    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */


	function isValidElement(object) {
	  {
	    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  }
	}

	function getDeclarationErrorAddendum() {
	  {
	    if (ReactCurrentOwner$1.current) {
	      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

	      if (name) {
	        return '\n\nCheck the render method of `' + name + '`.';
	      }
	    }

	    return '';
	  }
	}

	function getSourceInfoErrorAddendum(source) {
	  {
	    if (source !== undefined) {
	      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	      var lineNumber = source.lineNumber;
	      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	    }

	    return '';
	  }
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  {
	    var info = getDeclarationErrorAddendum();

	    if (!info) {
	      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	      if (parentName) {
	        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	      }
	    }

	    return info;
	  }
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  {
	    if (!element._store || element._store.validated || element.key != null) {
	      return;
	    }

	    element._store.validated = true;
	    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	    // property, it may be the creator of the child that's responsible for
	    // assigning it a key.

	    var childOwner = '';

	    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	      // Give the component that originally created this child.
	      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	    }

	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  {
	    if (typeof node !== 'object') {
	      return;
	    }

	    if (isArray(node)) {
	      for (var i = 0; i < node.length; i++) {
	        var child = node[i];

	        if (isValidElement(child)) {
	          validateExplicitKey(child, parentType);
	        }
	      }
	    } else if (isValidElement(node)) {
	      // This element was passed in a valid location.
	      if (node._store) {
	        node._store.validated = true;
	      }
	    } else if (node) {
	      var iteratorFn = getIteratorFn(node);

	      if (typeof iteratorFn === 'function') {
	        // Entry iterators used to provide implicit keys,
	        // but now we print a separate warning for them later.
	        if (iteratorFn !== node.entries) {
	          var iterator = iteratorFn.call(node);
	          var step;

	          while (!(step = iterator.next()).done) {
	            if (isValidElement(step.value)) {
	              validateExplicitKey(step.value, parentType);
	            }
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}

	function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	  {
	    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.

	    if (!validType) {
	      var info = '';

	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }

	      var sourceInfo = getSourceInfoErrorAddendum(source);

	      if (sourceInfo) {
	        info += sourceInfo;
	      } else {
	        info += getDeclarationErrorAddendum();
	      }

	      var typeString;

	      if (type === null) {
	        typeString = 'null';
	      } else if (isArray(type)) {
	        typeString = 'array';
	      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	        info = ' Did you accidentally export a JSX literal instead of a component?';
	      } else {
	        typeString = typeof type;
	      }

	      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }

	    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.

	    if (element == null) {
	      return element;
	    } // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)


	    if (validType) {
	      var children = props.children;

	      if (children !== undefined) {
	        if (isStaticChildren) {
	          if (isArray(children)) {
	            for (var i = 0; i < children.length; i++) {
	              validateChildKeys(children[i], type);
	            }

	            if (Object.freeze) {
	              Object.freeze(children);
	            }
	          } else {
	            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	          }
	        } else {
	          validateChildKeys(children, type);
	        }
	      }
	    }

	    if (type === REACT_FRAGMENT_TYPE) {
	      validateFragmentProps(element);
	    } else {
	      validatePropTypes(element);
	    }

	    return element;
	  }
	} // These two functions exist to still get child warnings in dev
	// even with the prod transform. This means that jsxDEV is purely
	// opt-in behavior for better messages but that we won't stop
	// giving you warnings if you use production apis.

	function jsxWithValidationStatic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, true);
	  }
	}
	function jsxWithValidationDynamic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, false);
	  }
	}

	var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
	// for now we can ship identical prod functions

	var jsxs =  jsxWithValidationStatic ;

	reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_development.jsx = jsx;
	reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}

	(function (module) {

		{
		  module.exports = reactJsxRuntime_development;
		}
	} (jsxRuntime));

	createCache({
	  key: 'css',
	  prepend: true
	});
	({
	  /**
	   * Your component tree.
	   */
	  children: propTypes.exports.node,

	  /**
	   * By default, the styles are injected last in the <head> element of the page.
	   * As a result, they gain more specificity than any other style sheet.
	   * If you want to override MUI's styles, set this prop.
	   */
	  injectFirst: propTypes.exports.bool
	}) ;

	function isEmpty$4(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}

	function GlobalStyles$1(props) {
	  const {
	    styles,
	    defaultTheme = {}
	  } = props;
	  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Global, {
	    styles: globalStyles
	  });
	}
	GlobalStyles$1.propTypes = {
	  defaultTheme: propTypes.exports.object,
	  styles: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object, propTypes.exports.func])
	} ;

	/** @license MUI v5.8.7
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function styled$2(tag, options) {
	  const stylesFactory = newStyled(tag, options);

	  {
	    return (...styles) => {
	      const component = typeof tag === 'string' ? `"${tag}"` : 'component';

	      if (styles.length === 0) {
	        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
	      } else if (styles.some(style => style === undefined)) {
	        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
	      }

	      return stylesFactory(...styles);
	    };
	  }
	}

	const responsivePropType = propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string, propTypes.exports.object, propTypes.exports.array]) ;

	function chainPropTypes(propType1, propType2) {

	  return function validate(...args) {
	    return propType1(...args) || propType2(...args);
	  };
	}

	function isPlainObject(item) {
	  return item !== null && typeof item === 'object' && item.constructor === Object;
	}
	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? _extends({}, target) : target;

	  if (isPlainObject(target) && isPlainObject(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }

	      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }

	  return output;
	}

	function isClassComponent$1(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}

	function acceptingRef(props, propName, componentName, location, propFullName) {
	  const element = props[propName];
	  const safePropName = propFullName || propName;

	  if (element == null || // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for Emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }

	  let warningHint;
	  const elementType = element.type;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
	    warningHint = 'Did you accidentally use a plain function component for an element instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	const elementAcceptingRef = chainPropTypes(propTypes.exports.element, acceptingRef);
	elementAcceptingRef.isRequired = chainPropTypes(propTypes.exports.element.isRequired, acceptingRef);

	function isClassComponent(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}

	function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
	  const propValue = props[propName];
	  const safePropName = propFullName || propName;

	  if (propValue == null || // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }

	  let warningHint;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
	    warningHint = 'Did you accidentally provide a plain function component instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	var elementTypeAcceptingRef$1 = chainPropTypes(propTypes.exports.elementType, elementTypeAcceptingRef);

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.
	const specialProperty = 'exact-prop: \u200b';
	function exactProp(propTypes) {

	  return _extends({}, propTypes, {
	    [specialProperty]: props => {
	      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));

	      if (unsupportedProps.length > 0) {
	        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
	      }

	      return null;
	    }
	  });
	}

	var reactIs$2 = {exports: {}};

	var reactIs_development$2 = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development$2.ContextConsumer = ContextConsumer;
	reactIs_development$2.ContextProvider = ContextProvider;
	reactIs_development$2.Element = Element;
	reactIs_development$2.ForwardRef = ForwardRef;
	reactIs_development$2.Fragment = Fragment;
	reactIs_development$2.Lazy = Lazy;
	reactIs_development$2.Memo = Memo;
	reactIs_development$2.Portal = Portal;
	reactIs_development$2.Profiler = Profiler;
	reactIs_development$2.StrictMode = StrictMode;
	reactIs_development$2.Suspense = Suspense;
	reactIs_development$2.SuspenseList = SuspenseList;
	reactIs_development$2.isAsyncMode = isAsyncMode;
	reactIs_development$2.isConcurrentMode = isConcurrentMode;
	reactIs_development$2.isContextConsumer = isContextConsumer;
	reactIs_development$2.isContextProvider = isContextProvider;
	reactIs_development$2.isElement = isElement;
	reactIs_development$2.isForwardRef = isForwardRef;
	reactIs_development$2.isFragment = isFragment;
	reactIs_development$2.isLazy = isLazy;
	reactIs_development$2.isMemo = isMemo;
	reactIs_development$2.isPortal = isPortal;
	reactIs_development$2.isProfiler = isProfiler;
	reactIs_development$2.isStrictMode = isStrictMode;
	reactIs_development$2.isSuspense = isSuspense;
	reactIs_development$2.isSuspenseList = isSuspenseList;
	reactIs_development$2.isValidElementType = isValidElementType;
	reactIs_development$2.typeOf = typeOf;
	  })();
	}

	(function (module) {

		{
		  module.exports = reactIs_development$2;
		}
	} (reactIs$2));

	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

	const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
	function getFunctionName(fn) {
	  const match = `${fn}`.match(fnNameMatchRegex);
	  const name = match && match[1];
	  return name || '';
	}

	function getFunctionComponentName(Component, fallback = '') {
	  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  const functionName = getFunctionComponentName(innerType);
	  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
	}
	/**
	 * cherry-pick from
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 * originally forked from recompose/getDisplayName with added IE11 support
	 */


	function getDisplayName(Component) {
	  if (Component == null) {
	    return undefined;
	  }

	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (typeof Component === 'function') {
	    return getFunctionComponentName(Component, 'Component');
	  } // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`


	  if (typeof Component === 'object') {
	    switch (Component.$$typeof) {
	      case reactIs$2.exports.ForwardRef:
	        return getWrappedName(Component, Component.render, 'ForwardRef');

	      case reactIs$2.exports.Memo:
	        return getWrappedName(Component, Component.type, 'memo');

	      default:
	        return undefined;
	    }
	  }

	  return undefined;
	}

	function HTMLElementType(props, propName, componentName, location, propFullName) {

	  const propValue = props[propName];
	  const safePropName = propFullName || propName;

	  if (propValue == null) {
	    return null;
	  }

	  if (propValue && propValue.nodeType !== 1) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
	  }

	  return null;
	}

	/* eslint-disable */
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

	const refType = propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]);

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(`MUI: \`capitalize(string)\` expects a string argument.` );
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }

	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$1(func, wait = 166) {
	  let timeout;

	  function debounced(...args) {
	    const later = () => {
	      func.apply(this, args);
	    };

	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }

	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };

	  return debounced;
	}

	function isMuiElement(element, muiNames) {
	  return /*#__PURE__*/react.exports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  const doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	function requirePropFactory(componentNameInError, Component) {


	  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;

	  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
	    const propFullNameSafe = propFullName || propName;
	    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];

	    if (defaultTypeChecker) {
	      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);

	      if (typeCheckerResult) {
	        return typeCheckerResult;
	      }
	    }

	    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
	      return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
	    }

	    return null;
	  };

	  return requireProp;
	}

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	const useEnhancedEffect = typeof window !== 'undefined' ? react.exports.useLayoutEffect : react.exports.useEffect;

	let globalId = 0;

	function useGlobalId(idOverride) {
	  const [defaultId, setDefaultId] = react.exports.useState(idOverride);
	  const id = idOverride || defaultId;
	  react.exports.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the incrementing value for client-side rendering only.
	      // We can't use it server-side.
	      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
	      globalId += 1;
	      setDefaultId(`mui-${globalId}`);
	    }
	  }, [defaultId]);
	  return id;
	} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814


	const maybeReactUseId = React$1['useId' + ''];
	/**
	 *
	 * @example <div id={useId()} />
	 * @param idOverride
	 * @returns {string}
	 */

	function useId(idOverride) {
	  if (maybeReactUseId !== undefined) {
	    const reactId = maybeReactUseId();
	    return idOverride != null ? idOverride : reactId;
	  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.


	  return useGlobalId(idOverride);
	}

	function unsupportedProp(props, propName, componentName, location, propFullName) {

	  const propFullNameSafe = propFullName || propName;

	  if (typeof props[propName] !== 'undefined') {
	    return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
	  }

	  return null;
	}

	/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
	function useControlled({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = react.exports.useRef(controlled !== undefined);
	  const [valueState, setValue] = react.exports.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;

	  {
	    react.exports.useEffect(() => {
	      if (isControlled !== (controlled !== undefined)) {
	        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
	      }
	    }, [state, name, controlled]);
	    const {
	      current: defaultValue
	    } = react.exports.useRef(defaultProp);
	    react.exports.useEffect(() => {
	      if (!isControlled && defaultValue !== defaultProp) {
	        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
	      }
	    }, [JSON.stringify(defaultProp)]);
	  }

	  const setValueIfUncontrolled = react.exports.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	/**
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 */

	function useEventCallback(fn) {
	  const ref = react.exports.useRef(fn);
	  useEnhancedEffect(() => {
	    ref.current = fn;
	  });
	  return react.exports.useCallback((...args) => // @ts-expect-error hide `this`
	  // tslint:disable-next-line:ban-comma-operator
	  (0, ref.current)(...args), []);
	}

	function useForkRef(refA, refB) {
	  /**
	   * This will create a new function if the ref props change and are defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return react.exports.useMemo(() => {
	    if (refA == null && refB == null) {
	      return null;
	    }

	    return refValue => {
	      setRef(refA, refValue);
	      setRef(refB, refValue);
	    };
	  }, [refA, refB]);
	}

	// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};
	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */

	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;

	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }

	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }

	  if (node.isContentEditable) {
	    return true;
	  }

	  return false;
	}
	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */


	function handleKeyDown$1(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }

	  hadKeyboardEvent = true;
	}
	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */


	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}

	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}

	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown$1, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}

	function isFocusVisible(event) {
	  const {
	    target
	  } = event;

	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  } // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.


	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}

	function useIsFocusVisible() {
	  const ref = react.exports.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = react.exports.useRef(false);
	  /**
	   * Should be called if a blur event is fired
	   */

	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }

	    return false;
	  }
	  /**
	   * Should be called if a blur event is fired
	   */


	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }

	    return false;
	  }

	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
	function getScrollbarSize(doc) {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
	  const documentWidth = doc.documentElement.clientWidth;
	  return Math.abs(window.innerWidth - documentWidth);
	}

	// Source from https://github.com/alitaheri/normalize-scroll-left
	let cachedType;
	/**
	 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
	 *
	 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
	 *
	 * Type             | <- Most Left | Most Right -> | Initial
	 * ---------------- | ------------ | ------------- | -------
	 * default          | 0            | 100           | 100
	 * negative (spec*) | -100         | 0             | 0
	 * reverse          | 100          | 0             | 0
	 *
	 * Edge 85: default
	 * Safari 14: negative
	 * Chrome 85: negative
	 * Firefox 81: negative
	 * IE11: reverse
	 *
	 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
	 */

	function detectScrollType() {
	  if (cachedType) {
	    return cachedType;
	  }

	  const dummy = document.createElement('div');
	  const container = document.createElement('div');
	  container.style.width = '10px';
	  container.style.height = '1px';
	  dummy.appendChild(container);
	  dummy.dir = 'rtl';
	  dummy.style.fontSize = '14px';
	  dummy.style.width = '4px';
	  dummy.style.height = '1px';
	  dummy.style.position = 'absolute';
	  dummy.style.top = '-1000px';
	  dummy.style.overflow = 'scroll';
	  document.body.appendChild(dummy);
	  cachedType = 'reverse';

	  if (dummy.scrollLeft > 0) {
	    cachedType = 'default';
	  } else {
	    dummy.scrollLeft = 1;

	    if (dummy.scrollLeft === 0) {
	      cachedType = 'negative';
	    }
	  }

	  document.body.removeChild(dummy);
	  return cachedType;
	} // Based on https://stackoverflow.com/a/24394376

	function getNormalizedScrollLeft(element, direction) {
	  const scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior

	  if (direction !== 'rtl') {
	    return scrollLeft;
	  }

	  const type = detectScrollType();

	  switch (type) {
	    case 'negative':
	      return element.scrollWidth - element.clientWidth + scrollLeft;

	    case 'reverse':
	      return element.scrollWidth - element.clientWidth - scrollLeft;

	    default:
	      return scrollLeft;
	  }
	}

	const usePreviousProps = value => {
	  const ref = react.exports.useRef({});
	  react.exports.useEffect(() => {
	    ref.current = value;
	  });
	  return ref.current;
	};

	const visuallyHidden = {
	  border: 0,
	  clip: 'rect(0 0 0 0)',
	  height: '1px',
	  margin: -1,
	  overflow: 'hidden',
	  padding: 0,
	  position: 'absolute',
	  whiteSpace: 'nowrap',
	  width: '1px'
	};

	function getTypeByValue(value) {
	  const valueType = typeof value;

	  switch (valueType) {
	    case 'number':
	      if (Number.isNaN(value)) {
	        return 'NaN';
	      }

	      if (!Number.isFinite(value)) {
	        return 'Infinity';
	      }

	      if (value !== Math.floor(value)) {
	        return 'float';
	      }

	      return 'number';

	    case 'object':
	      if (value === null) {
	        return 'null';
	      }

	      return value.constructor.name;

	    default:
	      return valueType;
	  }
	} // IE 11 support

	function ponyfillIsInteger(x) {
	  // eslint-disable-next-line no-restricted-globals
	  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
	}

	const isInteger = Number.isInteger || ponyfillIsInteger;

	function requiredInteger(props, propName, componentName, location) {
	  const propValue = props[propName];

	  if (propValue == null || !isInteger(propValue)) {
	    const propType = getTypeByValue(propValue);
	    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
	  }

	  return null;
	}

	function validator(props, propName, ...other) {
	  const propValue = props[propName];

	  if (propValue === undefined) {
	    return null;
	  }

	  return requiredInteger(props, propName, ...other);
	}

	function validatorNoop() {
	  return null;
	}

	validator.isRequired = requiredInteger;
	validatorNoop.isRequired = validatorNoop;
	var integerPropType = validator;

	/**
	 * Add keys, values of `defaultProps` that does not exist in `props`
	 * @param {object} defaultProps
	 * @param {object} props
	 * @returns {object} resolved props
	 */
	function resolveProps(defaultProps, props) {
	  const output = _extends({}, props);

	  Object.keys(defaultProps).forEach(propName => {
	    if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  });
	  return output;
	}

	function composeClasses(slots, getUtilityClass, classes) {
	  const output = {};
	  Object.keys(slots).forEach( // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }

	        acc.push(getUtilityClass(key));
	      }

	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	const defaultGenerator = componentName => componentName;

	const createClassNameGenerator = () => {
	  let generate = defaultGenerator;
	  return {
	    configure(generator) {
	      generate = generator;
	    },

	    generate(componentName) {
	      return generate(componentName);
	    },

	    reset() {
	      generate = defaultGenerator;
	    }

	  };
	};

	const ClassNameGenerator = createClassNameGenerator();

	const globalStateClassesMapping = {
	  active: 'active',
	  checked: 'checked',
	  completed: 'completed',
	  disabled: 'disabled',
	  error: 'error',
	  expanded: 'expanded',
	  focused: 'focused',
	  focusVisible: 'focusVisible',
	  required: 'required',
	  selected: 'selected'
	};
	function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
	}

	function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
	  });
	  return result;
	}

	function merge(acc, item) {
	  if (!item) {
	    return acc;
	  }

	  return deepmerge(acc, item, {
	    clone: false // No need to clone deep, it's way faster.

	  });
	}

	// For instance with the first breakpoint xs: [xs, sm[.

	const values$1 = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablet
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screen

	};
	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values$1[key]}px)`
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};

	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }

	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }

	      return acc;
	    }, {});
	  }

	  const output = styleFromPropValue(propValue);
	  return output;
	}

	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;

	  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}
	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;

	    if (isBreakpointUnused) {
	      delete acc[key];
	    }

	    return acc;
	  }, style);
	}
	// [1,2,3] => {xs: true, sm: true, md: true}
	// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}

	function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
	  // fixed value
	  if (typeof breakpointValues !== 'object') {
	    return {};
	  }

	  const base = {};
	  const breakpointsKeys = Object.keys(themeBreakpoints);

	  if (Array.isArray(breakpointValues)) {
	    breakpointsKeys.forEach((breakpoint, i) => {
	      if (i < breakpointValues.length) {
	        base[breakpoint] = true;
	      }
	    });
	  } else {
	    breakpointsKeys.forEach(breakpoint => {
	      if (breakpointValues[breakpoint] != null) {
	        base[breakpoint] = true;
	      }
	    });
	  }

	  return base;
	}
	function resolveBreakpointValues({
	  values: breakpointValues,
	  breakpoints: themeBreakpoints,
	  base: customBase
	}) {
	  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
	  const keys = Object.keys(base);

	  if (keys.length === 0) {
	    return breakpointValues;
	  }

	  let previous;
	  return keys.reduce((acc, breakpoint, i) => {
	    if (Array.isArray(breakpointValues)) {
	      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
	      previous = i;
	    } else if (typeof breakpointValues === 'object') {
	      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
	      previous = breakpoint;
	    } else {
	      acc[breakpoint] = breakpointValues;
	    }

	    return acc;
	  }, {});
	}

	function getPath(obj, path, checkVars = true) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  } // Check if CSS variables are used


	  if (obj && obj.vars && checkVars) {
	    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);

	    if (val != null) {
	      return val;
	    }
	  }

	  return path.split('.').reduce((acc, item) => {
	    if (acc && acc[item] != null) {
	      return acc[item];
	    }

	    return null;
	  }, obj);
	}

	function getValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;

	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }

	  if (transform) {
	    value = transform(value);
	  }

	  return value;
	}

	function style$2(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;

	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }

	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};

	    const styleFromPropValue = propValueFinal => {
	      let value = getValue$1(themeMapping, transform, propValueFinal);

	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }

	      if (cssProperty === false) {
	        return value;
	      }

	      return {
	        [cssProperty]: value
	      };
	    };

	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };

	  fn.propTypes = {
	    [prop]: responsivePropType
	  } ;
	  fn.filterProps = [prop];
	  return fn;
	}

	function compose(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});

	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return merge(acc, handlers[prop](props));
	      }

	      return acc;
	    }, {});
	  };

	  fn.propTypes = styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) ;
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }

	    return cache[arg];
	  };
	}

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	}; // memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec

	const getCssProperties = memoize(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }

	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
	const spacingKeys = [...marginKeys, ...paddingKeys];
	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  var _getPath;

	  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;

	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      {
	        if (typeof abs !== 'number') {
	          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
	        }
	      }

	      return themeSpacing * abs;
	    };
	  }

	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      {
	        if (!Number.isInteger(abs)) {
	          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
	        } else if (abs > themeSpacing.length - 1) {
	          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
	        }
	      }

	      return themeSpacing[abs];
	    };
	  }

	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }

	  {
	    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
	  }

	  return () => undefined;
	}
	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
	}
	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }

	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);

	  if (propValue >= 0) {
	    return transformed;
	  }

	  if (typeof transformed === 'number') {
	    return -transformed;
	  }

	  return `-${transformed}`;
	}
	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}

	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }

	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return handleBreakpoints(props, propValue, styleFromPropValue);
	}

	function style$1(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
	}
	marginKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType;
	  return obj;
	}, {}) ;
	paddingKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType;
	  return obj;
	}, {}) ;

	function spacing(props) {
	  return style$1(props, spacingKeys);
	}

	spacing.propTypes = spacingKeys.reduce((obj, key) => {
	  obj[key] = responsivePropType;
	  return obj;
	}, {}) ;
	spacing.filterProps = spacingKeys;

	function getBorder(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }

	  return `${value}px solid`;
	}

	const border = style$2({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderTop = style$2({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderRight = style$2({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderBottom = style$2({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderLeft = style$2({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderColor = style$2({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	const borderTopColor = style$2({
	  prop: 'borderTopColor',
	  themeKey: 'palette'
	});
	const borderRightColor = style$2({
	  prop: 'borderRightColor',
	  themeKey: 'palette'
	});
	const borderBottomColor = style$2({
	  prop: 'borderBottomColor',
	  themeKey: 'palette'
	});
	const borderLeftColor = style$2({
	  prop: 'borderLeftColor',
	  themeKey: 'palette'
	});
	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');

	    const styleFromPropValue = propValue => ({
	      borderRadius: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
	  }

	  return null;
	};
	borderRadius.propTypes = {
	  borderRadius: responsivePropType
	} ;
	borderRadius.filterProps = ['borderRadius'];
	const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);

	const displayPrint = style$2({
	  prop: 'displayPrint',
	  cssProperty: false,
	  transform: value => ({
	    '@media print': {
	      display: value
	    }
	  })
	});
	const displayRaw = style$2({
	  prop: 'display'
	});
	const overflow = style$2({
	  prop: 'overflow'
	});
	const textOverflow = style$2({
	  prop: 'textOverflow'
	});
	const visibility = style$2({
	  prop: 'visibility'
	});
	const whiteSpace = style$2({
	  prop: 'whiteSpace'
	});
	var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

	const flexBasis = style$2({
	  prop: 'flexBasis'
	});
	const flexDirection = style$2({
	  prop: 'flexDirection'
	});
	const flexWrap = style$2({
	  prop: 'flexWrap'
	});
	const justifyContent = style$2({
	  prop: 'justifyContent'
	});
	const alignItems = style$2({
	  prop: 'alignItems'
	});
	const alignContent = style$2({
	  prop: 'alignContent'
	});
	const order$1 = style$2({
	  prop: 'order'
	});
	const flex = style$2({
	  prop: 'flex'
	});
	const flexGrow = style$2({
	  prop: 'flexGrow'
	});
	const flexShrink = style$2({
	  prop: 'flexShrink'
	});
	const alignSelf = style$2({
	  prop: 'alignSelf'
	});
	const justifyItems = style$2({
	  prop: 'justifyItems'
	});
	const justifySelf = style$2({
	  prop: 'justifySelf'
	});
	const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);

	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');

	    const styleFromPropValue = propValue => ({
	      gap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.gap, styleFromPropValue);
	  }

	  return null;
	};
	gap.propTypes = {
	  gap: responsivePropType
	} ;
	gap.filterProps = ['gap'];
	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');

	    const styleFromPropValue = propValue => ({
	      columnGap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
	  }

	  return null;
	};
	columnGap.propTypes = {
	  columnGap: responsivePropType
	} ;
	columnGap.filterProps = ['columnGap'];
	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');

	    const styleFromPropValue = propValue => ({
	      rowGap: getValue(transformer, propValue)
	    });

	    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
	  }

	  return null;
	};
	rowGap.propTypes = {
	  rowGap: responsivePropType
	} ;
	rowGap.filterProps = ['rowGap'];
	const gridColumn = style$2({
	  prop: 'gridColumn'
	});
	const gridRow = style$2({
	  prop: 'gridRow'
	});
	const gridAutoFlow = style$2({
	  prop: 'gridAutoFlow'
	});
	const gridAutoColumns = style$2({
	  prop: 'gridAutoColumns'
	});
	const gridAutoRows = style$2({
	  prop: 'gridAutoRows'
	});
	const gridTemplateColumns = style$2({
	  prop: 'gridTemplateColumns'
	});
	const gridTemplateRows = style$2({
	  prop: 'gridTemplateRows'
	});
	const gridTemplateAreas = style$2({
	  prop: 'gridTemplateAreas'
	});
	const gridArea = style$2({
	  prop: 'gridArea'
	});
	const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

	const color = style$2({
	  prop: 'color',
	  themeKey: 'palette'
	});
	const bgcolor = style$2({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette'
	});
	const backgroundColor = style$2({
	  prop: 'backgroundColor',
	  themeKey: 'palette'
	});
	const palette = compose(color, bgcolor, backgroundColor);

	const position = style$2({
	  prop: 'position'
	});
	const zIndex$1 = style$2({
	  prop: 'zIndex',
	  themeKey: 'zIndex'
	});
	const top$1 = style$2({
	  prop: 'top'
	});
	const right$1 = style$2({
	  prop: 'right'
	});
	const bottom$1 = style$2({
	  prop: 'bottom'
	});
	const left$1 = style$2({
	  prop: 'left'
	});
	var positions = compose(position, zIndex$1, top$1, right$1, bottom$1, left$1);

	const boxShadow = style$2({
	  prop: 'boxShadow',
	  themeKey: 'shadows'
	});

	function transform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}

	const width = style$2({
	  prop: 'width',
	  transform
	});
	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;

	      const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
	      return {
	        maxWidth: breakpoint || transform(propValue)
	      };
	    };

	    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
	  }

	  return null;
	};
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = style$2({
	  prop: 'minWidth',
	  transform
	});
	const height = style$2({
	  prop: 'height',
	  transform
	});
	const maxHeight = style$2({
	  prop: 'maxHeight',
	  transform
	});
	const minHeight = style$2({
	  prop: 'minHeight',
	  transform
	});
	style$2({
	  prop: 'size',
	  cssProperty: 'width',
	  transform
	});
	style$2({
	  prop: 'size',
	  cssProperty: 'height',
	  transform
	});
	const boxSizing = style$2({
	  prop: 'boxSizing'
	});
	const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

	const fontFamily = style$2({
	  prop: 'fontFamily',
	  themeKey: 'typography'
	});
	const fontSize = style$2({
	  prop: 'fontSize',
	  themeKey: 'typography'
	});
	const fontStyle = style$2({
	  prop: 'fontStyle',
	  themeKey: 'typography'
	});
	const fontWeight = style$2({
	  prop: 'fontWeight',
	  themeKey: 'typography'
	});
	const letterSpacing = style$2({
	  prop: 'letterSpacing'
	});
	const textTransform = style$2({
	  prop: 'textTransform'
	});
	const lineHeight = style$2({
	  prop: 'lineHeight'
	});
	const textAlign = style$2({
	  prop: 'textAlign'
	});
	const typographyVariant = style$2({
	  prop: 'typography',
	  cssProperty: false,
	  themeKey: 'typography'
	});
	const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);

	const filterPropsMapping = {
	  borders: borders.filterProps,
	  display: display.filterProps,
	  flexbox: flexbox.filterProps,
	  grid: grid.filterProps,
	  positions: positions.filterProps,
	  palette: palette.filterProps,
	  shadows: boxShadow.filterProps,
	  sizing: sizing.filterProps,
	  spacing: spacing.filterProps,
	  typography: typography.filterProps
	};
	const styleFunctionMapping = {
	  borders,
	  display,
	  flexbox,
	  grid,
	  positions,
	  palette,
	  shadows: boxShadow,
	  sizing,
	  spacing,
	  typography
	};
	const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
	  filterPropsMapping[styleFnName].forEach(propName => {
	    acc[propName] = styleFunctionMapping[styleFnName];
	  });
	  return acc;
	}, {});

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}

	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	} // eslint-disable-next-line @typescript-eslint/naming-convention


	function unstable_createStyleFunctionSx(styleFunctionMapping$1 = styleFunctionMapping) {
	  const propToStyleFunction = Object.keys(styleFunctionMapping$1).reduce((acc, styleFnName) => {
	    styleFunctionMapping$1[styleFnName].filterProps.forEach(propName => {
	      acc[propName] = styleFunctionMapping$1[styleFnName];
	    });
	    return acc;
	  }, {});

	  function getThemeValue(prop, value, theme) {
	    const inputProps = {
	      [prop]: value,
	      theme
	    };
	    const styleFunction = propToStyleFunction[prop];
	    return styleFunction ? styleFunction(inputProps) : {
	      [prop]: value
	    };
	  }

	  function styleFunctionSx(props) {
	    const {
	      sx,
	      theme = {}
	    } = props || {};

	    if (!sx) {
	      return null; // Emotion & styled-components will neglect null
	    }
	    /*
	     * Receive `sxInput` as object or callback
	     * and then recursively check keys & values to create media query object styles.
	     * (the result will be used in `styled`)
	     */


	    function traverse(sxInput) {
	      let sxObject = sxInput;

	      if (typeof sxInput === 'function') {
	        sxObject = sxInput(theme);
	      } else if (typeof sxInput !== 'object') {
	        // value
	        return sxInput;
	      }

	      if (!sxObject) {
	        return null;
	      }

	      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
	      const breakpointsKeys = Object.keys(emptyBreakpoints);
	      let css = emptyBreakpoints;
	      Object.keys(sxObject).forEach(styleKey => {
	        const value = callIfFn(sxObject[styleKey], theme);

	        if (value !== null && value !== undefined) {
	          if (typeof value === 'object') {
	            if (propToStyleFunction[styleKey]) {
	              css = merge(css, getThemeValue(styleKey, value, theme));
	            } else {
	              const breakpointsValues = handleBreakpoints({
	                theme
	              }, value, x => ({
	                [styleKey]: x
	              }));

	              if (objectsHaveSameKeys(breakpointsValues, value)) {
	                css[styleKey] = styleFunctionSx({
	                  sx: value,
	                  theme
	                });
	              } else {
	                css = merge(css, breakpointsValues);
	              }
	            }
	          } else {
	            css = merge(css, getThemeValue(styleKey, value, theme));
	          }
	        }
	      });
	      return removeUnusedBreakpoints(breakpointsKeys, css);
	    }

	    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
	  }

	  return styleFunctionSx;
	}
	const styleFunctionSx = unstable_createStyleFunctionSx();
	styleFunctionSx.filterProps = ['sx'];

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	const _excluded$2y = ["sx"];

	const splitProps = props => {
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  Object.keys(props).forEach(prop => {
	    if (propToStyleFunction[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};

	function extendSxProp(props) {
	  const {
	    sx: inSx
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2y);

	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  let finalSx;

	  if (Array.isArray(inSx)) {
	    finalSx = [systemProps, ...inSx];
	  } else if (typeof inSx === 'function') {
	    finalSx = (...args) => {
	      const result = inSx(...args);

	      if (!isPlainObject(result)) {
	        return systemProps;
	      }

	      return _extends({}, systemProps, result);
	    };
	  } else {
	    finalSx = _extends({}, systemProps, inSx);
	  }

	  return _extends({}, otherProps, {
	    sx: finalSx
	  });
	}

	function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

	const _excluded$2x = ["values", "unit", "step"];

	const sortBreakpointsValues = values => {
	  const breakpointsAsArray = Object.keys(values).map(key => ({
	    key,
	    val: values[key]
	  })) || []; // Sort in ascending order

	  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
	  return breakpointsAsArray.reduce((acc, obj) => {
	    return _extends({}, acc, {
	      [obj.key]: obj.val
	    });
	  }, {});
	}; // Keep in mind that @media is inclusive by the CSS specification.


	function createBreakpoints(breakpoints) {
	  const {
	    // The breakpoint **start** at this value.
	    // For instance with the first breakpoint xs: [xs, sm).
	    values = {
	      xs: 0,
	      // phone
	      sm: 600,
	      // tablet
	      md: 900,
	      // small laptop
	      lg: 1200,
	      // desktop
	      xl: 1536 // large screen

	    },
	    unit = 'px',
	    step = 5
	  } = breakpoints,
	        other = _objectWithoutPropertiesLoose(breakpoints, _excluded$2x);

	  const sortedValues = sortBreakpointsValues(values);
	  const keys = Object.keys(sortedValues);

	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }

	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }

	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }

	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }

	    return up(key);
	  }

	  function not(key) {
	    // handle first and last key separately, for better readability
	    const keyIndex = keys.indexOf(key);

	    if (keyIndex === 0) {
	      return up(keys[1]);
	    }

	    if (keyIndex === keys.length - 1) {
	      return down(keys[keyIndex]);
	    }

	    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
	  }

	  return _extends({
	    keys,
	    values: sortedValues,
	    up,
	    down,
	    between,
	    only,
	    not,
	    unit
	  }, other);
	}

	const shape = {
	  borderRadius: 4
	};

	/* tslint:enable:unified-signatures */
	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://material.io/design/layout/understanding-layout.html#usage


	  const transform = createUnarySpacing({
	    spacing: spacingInput
	  });

	  const spacing = (...argsInput) => {
	    {
	      if (!(argsInput.length <= 4)) {
	        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
	      }
	    }

	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };

	  spacing.mui = true;
	  return spacing;
	}

	const _excluded$2w = ["breakpoints", "palette", "spacing", "shape"];

	function createTheme$1(options = {}, ...args) {
	  const {
	    breakpoints: breakpointsInput = {},
	    palette: paletteInput = {},
	    spacing: spacingInput,
	    shape: shapeInput = {}
	  } = options,
	        other = _objectWithoutPropertiesLoose(options, _excluded$2w);

	  const breakpoints = createBreakpoints(breakpointsInput);
	  const spacing = createSpacing(spacingInput);
	  let muiTheme = deepmerge({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: _extends({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: _extends({}, shape, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  return muiTheme;
	}

	const ThemeContext = /*#__PURE__*/react.exports.createContext(null);

	{
	  ThemeContext.displayName = 'ThemeContext';
	}

	function useTheme$3() {
	  const theme = react.exports.useContext(ThemeContext);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useDebugValue(theme);
	  }

	  return theme;
	}

	const hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

	function mergeOuterLocalTheme(outerTheme, localTheme) {
	  if (typeof localTheme === 'function') {
	    const mergedTheme = localTheme(outerTheme);

	    {
	      if (!mergedTheme) {
	        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
	      }
	    }

	    return mergedTheme;
	  }

	  return _extends({}, outerTheme, localTheme);
	}
	/**
	 * This component takes a `theme` prop.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */


	function ThemeProvider$1(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  const outerTheme = useTheme$3();

	  {
	    if (outerTheme === null && typeof localTheme === 'function') {
	      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	    }
	  }

	  const theme = react.exports.useMemo(() => {
	    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

	    if (output != null) {
	      output[nested] = outerTheme !== null;
	    }

	    return output;
	  }, [localTheme, outerTheme]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext.Provider, {
	    value: theme,
	    children: children
	  });
	}

	ThemeProvider$1.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: propTypes.exports.node,

	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.func]).isRequired
	} ;

	{
	  ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) ;
	}

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}

	function useTheme$2(defaultTheme = null) {
	  const contextTheme = useTheme$3();
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	const systemDefaultTheme$1 = createTheme$1();

	function useTheme$1(defaultTheme = systemDefaultTheme$1) {
	  return useTheme$2(defaultTheme);
	}

	const _excluded$2v = ["className", "component"];
	function createBox(options = {}) {
	  const {
	    defaultTheme,
	    defaultClassName = 'MuiBox-root',
	    generateClassName,
	    styleFunctionSx: styleFunctionSx$1 = styleFunctionSx
	  } = options;
	  const BoxRoot = styled$2('div')(styleFunctionSx$1);
	  const Box = /*#__PURE__*/react.exports.forwardRef(function Box(inProps, ref) {
	    const theme = useTheme$1(defaultTheme);

	    const _extendSxProp = extendSxProp(inProps),
	          {
	      className,
	      component = 'div'
	    } = _extendSxProp,
	          other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$2v);

	    return /*#__PURE__*/jsxRuntime.exports.jsx(BoxRoot, _extends({
	      as: component,
	      ref: ref,
	      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
	      theme: theme
	    }, other));
	  });
	  return Box;
	}

	const Box$1 = createBox();
	Box$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const _excluded$2u = ["variant"];

	function isEmpty$3(string) {
	  return string.length === 0;
	}
	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */


	function propsToClassKey(props) {
	  const {
	    variant
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2u);

	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
	    } else {
	      classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	const _excluded$2t = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
	      _excluded2$c = ["theme"],
	      _excluded3$1 = ["theme"];

	function isEmpty$2(obj) {
	  return Object.keys(obj).length === 0;
	}

	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }

	  return null;
	};

	const getVariantStyles = (name, theme) => {
	  let variants = [];

	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }

	  const variantsStyles = {};
	  variants.forEach(definition => {
	    const key = propsToClassKey(definition.props);
	    variantsStyles[key] = definition.style;
	  });
	  return variantsStyles;
	};

	const variantsResolver = (props, styles, theme, name) => {
	  var _theme$components, _theme$components$nam;

	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

	  if (themeVariants) {
	    themeVariants.forEach(themeVariant => {
	      let isMatch = true;
	      Object.keys(themeVariant.props).forEach(key => {
	        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
	          isMatch = false;
	        }
	      });

	      if (isMatch) {
	        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
	      }
	    });
	  }

	  return variantsStyles;
	}; // Update /system/styled/#api in case if this changes


	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}
	const systemDefaultTheme = createTheme$1();

	const lowercaseFirstLetter = string => {
	  return string.charAt(0).toLowerCase() + string.slice(1);
	};

	function createStyled(input = {}) {
	  const {
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp,
	    styleFunctionSx: styleFunctionSx$1 = styleFunctionSx
	  } = input;
	  return (tag, inputOptions = {}) => {
	    const {
	      name: componentName,
	      slot: componentSlot,
	      skipVariantsResolver: inputSkipVariantsResolver,
	      skipSx: inputSkipSx,
	      overridesResolver
	    } = inputOptions,
	          options = _objectWithoutPropertiesLoose(inputOptions, _excluded$2t); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.


	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;

	    {
	      if (componentName) {
	        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
	      }
	    }

	    let shouldForwardPropOption = shouldForwardProp;

	    if (componentSlot === 'Root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    }

	    const defaultStyledResolver = styled$2(tag, _extends({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));

	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	        // component stays as a function. This condition makes sure that we do not interpolate functions
	        // which are basically components used as a selectors.
	        // eslint-disable-next-line no-underscore-dangle
	        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
	          let {
	            theme: themeInput
	          } = _ref,
	              other = _objectWithoutPropertiesLoose(_ref, _excluded2$c);

	          return stylesArg(_extends({
	            theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
	          }, other));
	        } : stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;

	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	          const styleOverrides = getStyleOverrides(componentName, theme);

	          if (styleOverrides) {
	            const resolvedStyleOverrides = {};
	            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
	              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
	                theme
	              })) : slotStyle;
	            });
	            return overridesResolver(props, resolvedStyleOverrides);
	          }

	          return null;
	        });
	      }

	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }

	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	          return styleFunctionSx$1(_extends({}, props, {
	            theme
	          }));
	        });
	      }

	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      } else if (typeof styleArg === 'function' && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	      // component stays as a function. This condition makes sure that we do not interpolate functions
	      // which are basically components used as a selectors.
	      // eslint-disable-next-line no-underscore-dangle
	      styleArg.__emotion_real !== styleArg) {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = _ref2 => {
	          let {
	            theme: themeInput
	          } = _ref2,
	              other = _objectWithoutPropertiesLoose(_ref2, _excluded3$1);

	          return styleArg(_extends({
	            theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
	          }, other));
	        };
	      }

	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);

	      {
	        let displayName;

	        if (componentName) {
	          displayName = `${componentName}${componentSlot || ''}`;
	        }

	        if (displayName === undefined) {
	          displayName = `Styled(${getDisplayName(tag)})`;
	        }

	        Component.displayName = displayName;
	      }

	      return Component;
	    };

	    if (defaultStyledResolver.withConfig) {
	      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
	    }

	    return muiStyledResolver;
	  };
	}

	const styled$1 = createStyled();

	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;

	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }

	  return resolveProps(theme.components[name].defaultProps, props);
	}

	function useThemeProps$1({
	  props,
	  name,
	  defaultTheme
	}) {
	  const theme = useTheme$1(defaultTheme);
	  const mergedProps = getThemeProps({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp$3(value, min = 0, max = 1) {
	  {
	    if (value < min || value > max) {
	      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
	    }
	  }

	  return Math.min(Math.max(min, value), max);
	}
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */


	function hexToRgb(color) {
	  color = color.slice(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }

	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */


	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }

	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }

	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);

	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` );
	  }

	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;

	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();

	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].slice(1);
	    }

	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` );
	    }
	  } else {
	    values = values.split(',');
	  }

	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}
	/**
	 * Returns a channel created from the input color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
	 */

	const colorChannel = color => {
	  const decomposedColor = decomposeColor(color);
	  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');
	};
	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */

	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;

	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }

	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }

	  return `${type}(${values})`;
	}
	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */

	function hslToRgb(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);

	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }

	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */

	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }

	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  }); // Truncate at 3 digits

	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */

	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}
	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp$3(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }

	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }

	  return recomposeColor(color);
	}
	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$3(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$3(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Darken or lighten a color, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function emphasize(color, coefficient = 0.15) {
	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}

	function InnerThemeProvider(props) {
	  const theme = useTheme$1();
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$1.Provider, {
	    value: typeof theme === 'object' ? theme : {},
	    children: props.children
	  });
	}

	InnerThemeProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: propTypes.exports.node
	} ;
	/**
	 * This component makes the `theme` available down the React tree.
	 * It should preferably be used at **the root of your component tree**.
	 */

	function ThemeProvider(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeProvider$1, {
	    theme: localTheme,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(InnerThemeProvider, {
	      children: children
	    })
	  });
	}

	ThemeProvider.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Your component tree.
	   */
	  children: propTypes.exports.node,

	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]).isRequired
	} ;

	{
	  ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) ;
	}

	/**
	 * This function create an object from keys, value and then assign to target
	 *
	 * @param {Object} obj : the target object to be assigned
	 * @param {string[]} keys
	 * @param {string | number} value
	 *
	 * @example
	 * const source = {}
	 * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')
	 * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }
	 *
	 * @example
	 * const source = { palette: { primary: 'var(--palette-primary)' } }
	 * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')
	 * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }
	 */
	const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
	  let temp = obj;
	  keys.forEach((k, index) => {
	    if (index === keys.length - 1) {
	      if (Array.isArray(temp)) {
	        temp[Number(k)] = value;
	      } else if (temp && typeof temp === 'object') {
	        temp[k] = value;
	      }
	    } else if (temp && typeof temp === 'object') {
	      if (!temp[k]) {
	        temp[k] = arrayKeys.includes(k) ? [] : {};
	      }

	      temp = temp[k];
	    }
	  });
	};
	/**
	 *
	 * @param {Object} obj : source object
	 * @param {Function} callback : a function that will be called when
	 *                   - the deepest key in source object is reached
	 *                   - the value of the deepest key is NOT `undefined` | `null`
	 *
	 * @example
	 * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)
	 * // ['palette', 'primary', 'main'] '#000000'
	 */

	const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
	  function recurse(object, parentKeys = [], arrayKeys = []) {
	    Object.entries(object).forEach(([key, value]) => {
	      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
	        if (value !== undefined && value !== null) {
	          if (typeof value === 'object' && Object.keys(value).length > 0) {
	            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
	          } else {
	            callback([...parentKeys, key], value, arrayKeys);
	          }
	        }
	      }
	    });
	  }

	  recurse(obj);
	};

	const getCssValue = (keys, value) => {
	  if (typeof value === 'number') {
	    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {
	      // CSS property that are unitless
	      return value;
	    }

	    const lastKey = keys[keys.length - 1];

	    if (lastKey.toLowerCase().indexOf('opacity') >= 0) {
	      // opacity values are unitless
	      return value;
	    }

	    return `${value}px`;
	  }

	  return value;
	};
	/**
	 * a function that parse theme and return { css, vars }
	 *
	 * @param {Object} theme
	 * @param {{
	 *  prefix?: string,
	 *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean
	 * }} options.
	 *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.
	 *
	 * @returns {{ css: Object, vars: Object, parsedTheme: typeof theme }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme), and `parsedTheme` is the cloned version of theme.
	 *
	 * @example
	 * const { css, vars, parsedTheme } = parser({
	 *   fontSize: 12,
	 *   lineHeight: 1.2,
	 *   palette: { primary: { 500: 'var(--color)' } }
	 * }, { prefix: 'foo' })
	 *
	 * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }
	 * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }
	 * console.log(parsedTheme) // { fontSize: 12, lineHeight: 1.2, palette: { primary: { 500: 'var(--color)' } } }
	 */


	function cssVarsParser(theme, options) {
	  const {
	    prefix,
	    shouldSkipGeneratingVar
	  } = options || {};
	  const css = {};
	  const vars = {};
	  const parsedTheme = {};
	  walkObjectDeep(theme, (keys, value, arrayKeys) => {
	    if (typeof value === 'string' || typeof value === 'number') {
	      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {
	        // only create css & var if `shouldSkipGeneratingVar` return false
	        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
	        Object.assign(css, {
	          [cssVar]: getCssValue(keys, value)
	        });
	        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
	      }
	    }

	    assignNestedKeys(parsedTheme, keys, value, arrayKeys);
	  }, keys => keys[0] === 'vars' // skip 'vars/*' paths
	  );
	  return {
	    css,
	    vars,
	    parsedTheme
	  };
	}

	const DEFAULT_MODE_STORAGE_KEY = 'mode';
	const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';
	const DEFAULT_ATTRIBUTE = 'data-color-scheme';
	function getInitColorSchemeScript(options) {
	  const {
	    enableColorScheme = true,
	    enableSystem = false,
	    defaultLightColorScheme = 'light',
	    defaultDarkColorScheme = 'dark',
	    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
	    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
	    attribute = DEFAULT_ATTRIBUTE,
	    colorSchemeNode = 'document.documentElement'
	  } = options || {};
	  return /*#__PURE__*/jsxRuntime.exports.jsx("script", {
	    // eslint-disable-next-line react/no-danger
	    dangerouslySetInnerHTML: {
	      __html: `(function() { try {
        var mode = localStorage.getItem('${modeStorageKey}');
        var cssColorScheme = mode;
        var colorScheme = '';
        if (mode === 'system' || (!mode && !!${enableSystem})) {
          // handle system mode
          var mql = window.matchMedia('(prefers-color-scheme: dark)');
          if (mql.matches) {
            cssColorScheme = 'dark';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
          } else {
            cssColorScheme = 'light';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
          }
        }
        if (mode === 'light') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
        }
        if (mode === 'dark') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
        }
        if (colorScheme) {
          ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
        }
        if (${enableColorScheme} && !!cssColorScheme) {
          ${colorSchemeNode}.style.setProperty('color-scheme', cssColorScheme);
        }
      } catch (e) {} })();`
	    }
	  });
	}

	function getSystemMode(mode) {
	  if (typeof window !== 'undefined' && mode === 'system') {
	    const mql = window.matchMedia('(prefers-color-scheme: dark)');

	    if (mql.matches) {
	      return 'dark';
	    }

	    return 'light';
	  }

	  return undefined;
	}

	function processState(state, callback) {
	  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {
	    return callback('light');
	  }

	  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {
	    return callback('dark');
	  }

	  return undefined;
	}

	function getColorScheme(state) {
	  return processState(state, mode => {
	    if (mode === 'light') {
	      return state.lightColorScheme;
	    }

	    if (mode === 'dark') {
	      return state.darkColorScheme;
	    }

	    return undefined;
	  });
	}

	function resolveValue(key, defaultValue) {
	  if (typeof window === 'undefined') {
	    return undefined;
	  }

	  let value;

	  try {
	    value = localStorage.getItem(key) || undefined;
	  } catch (e) {// Unsupported
	  }

	  return value || defaultValue;
	}

	function useCurrentColorScheme(options) {
	  const {
	    defaultMode = 'light',
	    defaultLightColorScheme,
	    defaultDarkColorScheme,
	    supportedColorSchemes = [],
	    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
	    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
	    storageWindow = typeof window === 'undefined' ? undefined : window
	  } = options;
	  const joinedColorSchemes = supportedColorSchemes.join(',');
	  const [state, setState] = react.exports.useState(() => {
	    const initialMode = resolveValue(modeStorageKey, defaultMode);
	    return {
	      mode: initialMode,
	      systemMode: getSystemMode(initialMode),
	      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,
	      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme
	    };
	  });
	  const colorScheme = getColorScheme(state);
	  const setMode = react.exports.useCallback(mode => {
	    setState(currentState => {
	      const newMode = !mode ? defaultMode : mode;

	      if (mode === currentState.mode) {
	        return currentState;
	      }

	      if (typeof localStorage !== 'undefined') {
	        localStorage.setItem(modeStorageKey, newMode);
	      }

	      return _extends({}, currentState, {
	        mode: newMode,
	        systemMode: getSystemMode(newMode)
	      });
	    });
	  }, [modeStorageKey, defaultMode]);
	  const setColorScheme = react.exports.useCallback(value => {
	    if (!value || typeof value === 'string') {
	      if (value && !joinedColorSchemes.includes(value)) {
	        console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
	      } else {
	        setState(currentState => {
	          const newState = _extends({}, currentState);

	          if (!value) {
	            // reset to default color scheme
	            newState.lightColorScheme = defaultLightColorScheme;
	            newState.darkColorScheme = defaultDarkColorScheme;
	            return newState;
	          }

	          processState(currentState, mode => {
	            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);

	            if (mode === 'light') {
	              newState.lightColorScheme = value;
	            }

	            if (mode === 'dark') {
	              newState.darkColorScheme = value;
	            }
	          });
	          return newState;
	        });
	      }
	    } else if (value.light && !joinedColorSchemes.includes(value.light) || value.dark && !joinedColorSchemes.includes(value.dark)) {
	      console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
	    } else {
	      setState(currentState => {
	        const newState = _extends({}, currentState);

	        if (value.light || value.light === null) {
	          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
	        }

	        if (value.dark || value.dark === null) {
	          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
	        }

	        return newState;
	      });

	      if (value.light) {
	        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);
	      }

	      if (value.dark) {
	        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);
	      }
	    }
	  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
	  const handleMediaQuery = react.exports.useCallback(e => {
	    if (state.mode === 'system') {
	      setState(currentState => _extends({}, currentState, {
	        systemMode: e != null && e.matches ? 'dark' : 'light'
	      }));
	    }
	  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep

	  const mediaListener = react.exports.useRef(handleMediaQuery);
	  mediaListener.current = handleMediaQuery;
	  react.exports.useEffect(() => {
	    const handler = (...args) => mediaListener.current(...args); // Always listen to System preference


	    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers

	    media.addListener(handler);
	    handler(media);
	    return () => media.removeListener(handler);
	  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage

	  react.exports.useEffect(() => {
	    if (state.mode) {
	      localStorage.setItem(modeStorageKey, state.mode);
	    }

	    processState(state, mode => {
	      if (mode === 'light') {
	        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);
	      }

	      if (mode === 'dark') {
	        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);
	      }
	    });
	  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed

	  react.exports.useEffect(() => {
	    const handleStorage = event => {
	      const value = event.newValue;

	      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
	        // If the key is deleted, value will be null then reset color scheme to the default one.
	        if (event.key.endsWith('light')) {
	          setColorScheme({
	            light: value
	          });
	        }

	        if (event.key.endsWith('dark')) {
	          setColorScheme({
	            dark: value
	          });
	        }
	      }

	      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {
	        setMode(value || defaultMode);
	      }
	    };

	    if (storageWindow) {
	      // For syncing color-scheme changes between iframes
	      storageWindow.addEventListener('storage', handleStorage);
	      return () => storageWindow.removeEventListener('storage', handleStorage);
	    }

	    return undefined;
	  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
	  return _extends({}, state, {
	    colorScheme,
	    setMode,
	    setColorScheme
	  });
	}

	const _excluded$2s = ["colorSchemes", "components", "cssVarPrefix"];
	const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';
	function createCssVarsProvider(options) {
	  const {
	    theme: defaultTheme = {},
	    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,
	    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,
	    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
	    defaultMode: desisgnSystemMode = 'light',
	    defaultColorScheme: designSystemColorScheme,
	    disableTransitionOnChange: designSystemTransitionOnChange = false,
	    enableColorScheme: designSystemEnableColorScheme = true,
	    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,
	    resolveTheme
	  } = options;

	  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
	    console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
	  }

	  const ColorSchemeContext = /*#__PURE__*/react.exports.createContext(undefined);

	  const useColorScheme = () => {
	    const value = react.exports.useContext(ColorSchemeContext);

	    if (!value) {
	      throw new Error(`MUI: \`useColorScheme\` must be called under <CssVarsProvider />` );
	    }

	    return value;
	  };

	  function CssVarsProvider({
	    children,
	    theme: themeProp = defaultTheme,
	    modeStorageKey = defaultModeStorageKey,
	    colorSchemeStorageKey = defaultColorSchemeStorageKey,
	    attribute = defaultAttribute,
	    defaultMode = desisgnSystemMode,
	    defaultColorScheme = designSystemColorScheme,
	    disableTransitionOnChange = designSystemTransitionOnChange,
	    enableColorScheme = designSystemEnableColorScheme,
	    storageWindow = typeof window === 'undefined' ? undefined : window,
	    documentNode = typeof document === 'undefined' ? undefined : document,
	    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,
	    colorSchemeSelector = ':root',
	    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar
	  }) {
	    const hasMounted = react.exports.useRef(false);

	    const {
	      colorSchemes = {},
	      components = {},
	      cssVarPrefix
	    } = themeProp,
	          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded$2s);

	    const allColorSchemes = Object.keys(colorSchemes);
	    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;
	    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;
	    const {
	      mode,
	      setMode,
	      systemMode,
	      lightColorScheme,
	      darkColorScheme,
	      colorScheme,
	      setColorScheme
	    } = useCurrentColorScheme({
	      supportedColorSchemes: allColorSchemes,
	      defaultLightColorScheme,
	      defaultDarkColorScheme,
	      modeStorageKey,
	      colorSchemeStorageKey,
	      defaultMode,
	      storageWindow
	    });

	    const resolvedColorScheme = (() => {
	      if (!colorScheme) {
	        // This scope occurs on the server
	        if (defaultMode === 'dark') {
	          return defaultDarkColorScheme;
	        } // use light color scheme, if default mode is 'light' | 'auto'


	        return defaultLightColorScheme;
	      }

	      return colorScheme;
	    })();

	    let theme = restThemeProp;
	    const {
	      css: rootCss,
	      vars: rootVars,
	      parsedTheme
	    } = cssVarsParser(theme, {
	      prefix: cssVarPrefix,
	      shouldSkipGeneratingVar
	    });
	    theme = _extends({}, parsedTheme, {
	      components,
	      colorSchemes,
	      cssVarPrefix,
	      vars: rootVars,
	      getColorSchemeSelector: targetColorScheme => `[${attribute}="${targetColorScheme}"] &`
	    });
	    const defaultColorSchemeStyleSheet = {};
	    const otherColorSchemesStyleSheet = {};
	    Object.entries(colorSchemes).forEach(([key, scheme]) => {
	      const {
	        css,
	        vars,
	        parsedTheme: parsedScheme
	      } = cssVarsParser(scheme, {
	        prefix: cssVarPrefix,
	        shouldSkipGeneratingVar
	      });
	      theme.vars = deepmerge(theme.vars, vars);

	      if (key === resolvedColorScheme) {
	        theme = _extends({}, theme, parsedScheme);

	        if (theme.palette) {
	          // assign runtime mode & colorScheme
	          theme.palette.mode = mode;
	          theme.palette.colorScheme = resolvedColorScheme;
	        }
	      }

	      const resolvedDefaultColorScheme = (() => {
	        if (typeof defaultColorScheme === 'string') {
	          return defaultColorScheme;
	        }

	        if (defaultMode === 'dark') {
	          return defaultColorScheme.dark;
	        }

	        return defaultColorScheme.light;
	      })();

	      if (key === resolvedDefaultColorScheme) {
	        defaultColorSchemeStyleSheet[colorSchemeSelector] = css;
	      } else {
	        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}="${key}"]`] = css;
	      }
	    });
	    react.exports.useEffect(() => {
	      if (colorScheme && colorSchemeNode) {
	        // attaches attribute to <html> because the css variables are attached to :root (html)
	        colorSchemeNode.setAttribute(attribute, colorScheme);
	      }
	    }, [colorScheme, attribute, colorSchemeNode]);
	    useEnhancedEffect(() => {
	      if (!mode || !enableColorScheme || !colorSchemeNode) {
	        return undefined;
	      }

	      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`

	      if (mode === 'system') {
	        colorSchemeNode.style.setProperty('color-scheme', systemMode);
	      } else {
	        colorSchemeNode.style.setProperty('color-scheme', mode);
	      }

	      return () => {
	        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);
	      };
	    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);
	    react.exports.useEffect(() => {
	      let timer;

	      if (disableTransitionOnChange && hasMounted.current && documentNode) {
	        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313
	        const css = documentNode.createElement('style');
	        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
	        documentNode.head.appendChild(css); // Force browser repaint

	        (() => window.getComputedStyle(documentNode.body))();

	        timer = setTimeout(() => {
	          documentNode.head.removeChild(css);
	        }, 1);
	      }

	      return () => {
	        clearTimeout(timer);
	      };
	    }, [colorScheme, disableTransitionOnChange, documentNode]);
	    react.exports.useEffect(() => {
	      hasMounted.current = true;
	      return () => {
	        hasMounted.current = false;
	      };
	    }, []);
	    return /*#__PURE__*/jsxRuntime.exports.jsxs(ColorSchemeContext.Provider, {
	      value: {
	        mode,
	        setMode,
	        lightColorScheme,
	        darkColorScheme,
	        colorScheme,
	        setColorScheme,
	        allColorSchemes
	      },
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, {
	        styles: {
	          [colorSchemeSelector]: rootCss
	        }
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, {
	        styles: defaultColorSchemeStyleSheet
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, {
	        styles: otherColorSchemesStyleSheet
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(ThemeProvider, {
	        theme: resolveTheme ? resolveTheme(theme) : theme,
	        children: children
	      })]
	    });
	  }

	  CssVarsProvider.propTypes = {
	    /**
	     * The body attribute name to attach colorScheme.
	     */
	    attribute: propTypes.exports.string,

	    /**
	     * The component tree.
	     */
	    children: propTypes.exports.node,

	    /**
	     * The node used to attach the color-scheme attribute
	     */
	    colorSchemeNode: propTypes.exports.any,

	    /**
	     * The CSS selector for attaching the generated custom properties
	     */
	    colorSchemeSelector: propTypes.exports.string,

	    /**
	     * localStorage key used to store `colorScheme`
	     */
	    colorSchemeStorageKey: propTypes.exports.string,

	    /**
	     * The initial color scheme used.
	     */
	    defaultColorScheme: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),

	    /**
	     * The initial mode used.
	     */
	    defaultMode: propTypes.exports.string,

	    /**
	     * Disable CSS transitions when switching between modes or color schemes
	     */
	    disableTransitionOnChange: propTypes.exports.bool,

	    /**
	     * The document to attach the attribute to
	     */
	    documentNode: propTypes.exports.any,

	    /**
	     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI
	     */
	    enableColorScheme: propTypes.exports.bool,

	    /**
	     * The key in the local storage used to store current color scheme.
	     */
	    modeStorageKey: propTypes.exports.string,

	    /**
	     * A function to determine if the key, value should be attached as CSS Variable
	     */
	    shouldSkipGeneratingVar: propTypes.exports.func,

	    /**
	     * The window that attaches the 'storage' event listener
	     * @default window
	     */
	    storageWindow: propTypes.exports.any,

	    /**
	     * The calculated theme object that will be passed through context.
	     */
	    theme: propTypes.exports.object
	  } ;

	  const getInitColorSchemeScript$1 = params => getInitColorSchemeScript(_extends({
	    attribute: defaultAttribute,
	    colorSchemeStorageKey: defaultColorSchemeStorageKey,
	    modeStorageKey: defaultModeStorageKey,
	    enableColorScheme: designSystemEnableColorScheme
	  }, params));

	  return {
	    CssVarsProvider,
	    useColorScheme,
	    getInitColorSchemeScript: getInitColorSchemeScript$1
	  };
	}

	/**
	 * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable
	 * and they does not need to remember the prefix (defined once).
	 */
	function createGetCssVar$1(prefix = '') {
	  function appendVar(...vars) {
	    if (!vars.length) {
	      return '';
	    }

	    const value = vars[0];

	    if (typeof value === 'string' && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {
	      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;
	    }

	    return `, ${value}`;
	  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.


	  const getCssVar = (field, ...fallbacks) => {
	    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;
	  };

	  return getCssVar;
	}

	const _excluded$2r = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
	const defaultTheme$4 = createTheme$1();
	const defaultCreateStyledComponent$1 = styled$1('div', {
	  name: 'MuiContainer',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
	  }
	});

	const useThemePropsDefault$1 = inProps => useThemeProps$1({
	  props: inProps,
	  name: 'MuiContainer',
	  defaultTheme: defaultTheme$4
	});

	const useUtilityClasses$1Z = (ownerState, componentName) => {
	  const getContainerUtilityClass = slot => {
	    return generateUtilityClass(componentName, slot);
	  };

	  const {
	    classes,
	    fixed,
	    disableGutters,
	    maxWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']
	  };
	  return composeClasses(slots, getContainerUtilityClass, classes);
	};

	function createContainer(options = {}) {
	  const {
	    // This will allow adding custom styled fn (for example for custom sx style function)
	    createStyledComponent = defaultCreateStyledComponent$1,
	    useThemeProps = useThemePropsDefault$1,
	    componentName = 'MuiContainer'
	  } = options;
	  const ContainerRoot = createStyledComponent(({
	    theme,
	    ownerState
	  }) => _extends({
	    width: '100%',
	    marginLeft: 'auto',
	    boxSizing: 'border-box',
	    marginRight: 'auto',
	    display: 'block'
	  }, !ownerState.disableGutters && {
	    paddingLeft: theme.spacing(2),
	    paddingRight: theme.spacing(2),
	    // @ts-ignore module augmentation fails if custom breakpoints are used
	    [theme.breakpoints.up('sm')]: {
	      paddingLeft: theme.spacing(3),
	      paddingRight: theme.spacing(3)
	    }
	  }), ({
	    theme,
	    ownerState
	  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
	    const breakpoint = breakpointValueKey;
	    const value = theme.breakpoints.values[breakpoint];

	    if (value !== 0) {
	      // @ts-ignore
	      acc[theme.breakpoints.up(breakpoint)] = {
	        maxWidth: `${value}${theme.breakpoints.unit}`
	      };
	    }

	    return acc;
	  }, {}), ({
	    theme,
	    ownerState
	  }) => _extends({}, ownerState.maxWidth === 'xs' && {
	    // @ts-ignore module augmentation fails if custom breakpoints are used
	    [theme.breakpoints.up('xs')]: {
	      // @ts-ignore module augmentation fails if custom breakpoints are used
	      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
	    }
	  }, ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
	  ownerState.maxWidth !== 'xs' && {
	    // @ts-ignore module augmentation fails if custom breakpoints are used
	    [theme.breakpoints.up(ownerState.maxWidth)]: {
	      // @ts-ignore module augmentation fails if custom breakpoints are used
	      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
	    }
	  }));
	  const Container = /*#__PURE__*/react.exports.forwardRef(function Container(inProps, ref) {
	    const props = useThemeProps(inProps);

	    const {
	      className,
	      component = 'div',
	      disableGutters = false,
	      fixed = false,
	      maxWidth = 'lg'
	    } = props,
	          other = _objectWithoutPropertiesLoose(props, _excluded$2r);

	    const ownerState = _extends({}, props, {
	      component,
	      disableGutters,
	      fixed,
	      maxWidth
	    }); // @ts-ignore module augmentation fails if custom breakpoints are used


	    const classes = useUtilityClasses$1Z(ownerState, componentName);
	    return (
	      /*#__PURE__*/
	      // @ts-ignore theme is injected by the styled util
	      jsxRuntime.exports.jsx(ContainerRoot, _extends({
	        as: component // @ts-ignore module augmentation fails if custom breakpoints are used
	        ,
	        ownerState: ownerState,
	        className: clsx(classes.root, className),
	        ref: ref
	      }, other))
	    );
	  });
	  Container.propTypes
	  /* remove-proptypes */
	  = {
	    children: propTypes.exports.node,
	    classes: propTypes.exports.object,
	    className: propTypes.exports.string,
	    component: propTypes.exports.elementType,
	    disableGutters: propTypes.exports.bool,
	    fixed: propTypes.exports.bool,
	    maxWidth: propTypes.exports
	    /* @typescript-to-proptypes-ignore */
	    .oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.exports.string]),
	    sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	  } ;
	  return Container;
	}

	/**
	 *
	 * Demos:
	 *
	 * - [Container (Material UI)](https://mui.com/material-ui/react-container/)
	 * - [Container (MUI System)](https://mui.com/system/react-container/)
	 *
	 * API:
	 *
	 * - [Container API](https://mui.com/system/api/container/)
	 */

	const Container$1 = createContainer();
	Container$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * Set the max-width to match the min-width of the current breakpoint.
	   * This is useful if you'd prefer to design for a fixed set of sizes
	   * instead of trying to accommodate a fully fluid viewport.
	   * It's fluid by default.
	   * @default false
	   */
	  fixed: propTypes.exports.bool,

	  /**
	   * Determine the max-width of the container.
	   * The container width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   * @default 'lg'
	   */
	  maxWidth: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	generateUtilityClasses('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);

	const traverseBreakpoints = (breakpoints, responsize, iterator) => {
	  const smallestBreakpoint = breakpoints.keys[0]; // the keys is sorted from smallest to largest by `createBreakpoints`.

	  if (Array.isArray(responsize)) {
	    responsize.forEach((breakpointValue, index) => {
	      iterator((responsizeStyles, style) => {
	        if (index <= breakpoints.keys.length - 1) {
	          if (index === 0) {
	            Object.assign(responsizeStyles, style);
	          } else {
	            responsizeStyles[breakpoints.up(breakpoints.keys[index])] = style;
	          }
	        }
	      }, breakpointValue);
	    });
	  } else if (responsize && typeof responsize === 'object') {
	    // prevent null
	    // responsize could be a very big object, pick the smallest responsive values
	    const keys = Object.keys(responsize).length > breakpoints.keys.length ? breakpoints.keys : Object.keys(responsize);
	    keys.forEach(key => {
	      if (breakpoints.keys.indexOf(key) !== -1) {
	        // @ts-ignore already checked that responsize is an object
	        const breakpointValue = responsize[key];

	        if (breakpointValue !== undefined) {
	          iterator((responsizeStyles, style) => {
	            if (smallestBreakpoint === key) {
	              Object.assign(responsizeStyles, style);
	            } else {
	              responsizeStyles[breakpoints.up(key)] = style;
	            }
	          }, breakpointValue);
	        }
	      }
	    });
	  } else if (typeof responsize === 'number' || typeof responsize === 'string') {
	    iterator((responsizeStyles, style) => {
	      Object.assign(responsizeStyles, style);
	    }, responsize);
	  }
	};
	const generateGridSizeStyles = ({
	  theme,
	  ownerState
	}) => {
	  const styles = {};
	  traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
	    let style = {};

	    if (value === true) {
	      style = {
	        flexBasis: 0,
	        flexGrow: 1,
	        maxWidth: '100%'
	      };
	    }

	    if (value === 'auto') {
	      style = {
	        flexBasis: 'auto',
	        flexGrow: 0,
	        flexShrink: 0,
	        maxWidth: 'none',
	        width: 'auto'
	      };
	    }

	    if (typeof value === 'number') {
	      style = {
	        flexGrow: 0,
	        flexBasis: 'auto',
	        width: `calc(100% * ${value} / var(--Grid-columns)${ownerState.nested && ownerState.container ? ` + var(--Grid-columnSpacing)` : ''})`
	      };
	    }

	    appendStyle(styles, style);
	  });
	  return styles;
	};
	const generateGridOffsetStyles = ({
	  theme,
	  ownerState
	}) => {
	  const styles = {};
	  traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
	    let style = {};

	    if (value === 'auto') {
	      style = {
	        marginLeft: 'auto'
	      };
	    }

	    if (typeof value === 'number') {
	      style = {
	        marginLeft: value === 0 ? '0px' : `calc(100% * ${value} / var(--Grid-columns))`
	      };
	    }

	    appendStyle(styles, style);
	  });
	  return styles;
	};
	const generateGridColumnsStyles = ({
	  theme,
	  ownerState
	}) => {
	  if (!ownerState.container) {
	    return {};
	  }

	  const styles = {
	    '--Grid-columns': 12
	  };
	  traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
	    appendStyle(styles, {
	      '--Grid-columns': value
	    });
	  });
	  return styles;
	};
	const generateGridRowSpacingStyles = ({
	  theme,
	  ownerState
	}) => {
	  if (!ownerState.container) {
	    return {};
	  }

	  const styles = {};
	  traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
	    var _theme$spacing;

	    appendStyle(styles, {
	      '--Grid-rowSpacing': typeof value === 'string' ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
	    });
	  });
	  return styles;
	};
	const generateGridColumnSpacingStyles = ({
	  theme,
	  ownerState
	}) => {
	  if (!ownerState.container) {
	    return {};
	  }

	  const styles = {};
	  traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
	    var _theme$spacing2;

	    appendStyle(styles, {
	      '--Grid-columnSpacing': typeof value === 'string' ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
	    });
	  });
	  return styles;
	};
	const generateGridDirectionStyles = ({
	  theme,
	  ownerState
	}) => {
	  if (!ownerState.container) {
	    return {};
	  }

	  const styles = {};
	  traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
	    appendStyle(styles, {
	      flexDirection: value
	    });
	  });
	  return styles;
	};
	const generateGridStyles = ({
	  ownerState
	}) => {
	  return _extends({
	    minWidth: 0,
	    boxSizing: 'border-box'
	  }, ownerState.container ? _extends({
	    display: 'flex',
	    flexWrap: 'wrap'
	  }, ownerState.wrap && ownerState.wrap !== 'wrap' && {
	    flexWrap: ownerState.wrap
	  }, {
	    margin: `calc(var(--Grid-rowSpacing) / -2) calc(var(--Grid-columnSpacing) / -2)`
	  }, ownerState.disableEqualOverflow && {
	    margin: `calc(var(--Grid-rowSpacing) * -1) 0px 0px calc(var(--Grid-columnSpacing) * -1)`
	  }, ownerState.nested ? _extends({
	    padding: `calc(var(--Grid-nested-rowSpacing) / 2) calc(var(--Grid-nested-columnSpacing) / 2)`
	  }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
	    padding: `calc(var(--Grid-nested-rowSpacing)) 0px 0px calc(var(--Grid-nested-columnSpacing))`
	  }) : {
	    '--Grid-nested-rowSpacing': 'var(--Grid-rowSpacing)',
	    '--Grid-nested-columnSpacing': 'var(--Grid-columnSpacing)'
	  }) : _extends({
	    padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`
	  }, ownerState.disableEqualOverflow && {
	    padding: `calc(var(--Grid-rowSpacing)) 0px 0px calc(var(--Grid-columnSpacing))`
	  }));
	};
	const generateSizeClassNames = gridSize => {
	  const classNames = [];
	  Object.entries(gridSize).forEach(([key, value]) => {
	    if (value !== false && value !== undefined) {
	      classNames.push(`grid-${key}-${String(value)}`);
	    }
	  });
	  return classNames;
	};
	const generateSpacingClassNames = (spacing, smallestBreakpoint = 'xs') => {
	  function isValidSpacing(val) {
	    if (val === undefined) {
	      return false;
	    }

	    return typeof val === 'string' && !Number.isNaN(Number(val)) || typeof val === 'number' && val > 0;
	  }

	  if (isValidSpacing(spacing)) {
	    return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
	  }

	  if (typeof spacing === 'object' && !Array.isArray(spacing)) {
	    const classNames = [];
	    Object.entries(spacing).forEach(([key, value]) => {
	      if (isValidSpacing(value)) {
	        classNames.push(`spacing-${key}-${String(value)}`);
	      }
	    });
	    return classNames;
	  }

	  return [];
	};

	const _excluded$2q = ["className", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow"];
	const defaultTheme$3 = createTheme$1(); // widening Theme to any so that the consumer can own the theme structure.

	const defaultCreateStyledComponent = styled$1('div', {
	  name: 'MuiGrid',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	});

	function useThemePropsDefault(props) {
	  return useThemeProps$1({
	    props,
	    name: 'MuiGrid',
	    defaultTheme: defaultTheme$3
	  });
	}

	function createGrid(options = {}) {
	  const {
	    // This will allow adding custom styled fn (for example for custom sx style function)
	    createStyledComponent = defaultCreateStyledComponent,
	    useThemeProps = useThemePropsDefault,
	    componentName = 'MuiGrid'
	  } = options;
	  const NestedContext = /*#__PURE__*/react.exports.createContext(false);
	  const OverflowContext = /*#__PURE__*/react.exports.createContext(undefined);

	  const useUtilityClasses = (ownerState, theme) => {
	    const {
	      container,
	      direction,
	      spacing,
	      wrap,
	      gridSize
	    } = ownerState;
	    const slots = {
	      root: ['root', container && 'container', direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...generateSizeClassNames(gridSize), ...(container ? generateSpacingClassNames(spacing, theme.breakpoints.keys[0]) : [])]
	    };
	    return composeClasses(slots, slot => generateUtilityClass(componentName, slot), {});
	  };

	  const GridRoot = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
	  const Grid = /*#__PURE__*/react.exports.forwardRef(function Grid(inProps, ref) {
	    var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;

	    const theme = useTheme$1();
	    const themeProps = useThemeProps(inProps);
	    const props = extendSxProp(themeProps); // `color` type conflicts with html color attribute.

	    const nested = react.exports.useContext(NestedContext);
	    const overflow = react.exports.useContext(OverflowContext);

	    const {
	      className,
	      columns: columnsProp = 12,
	      container = false,
	      component = 'div',
	      direction = 'row',
	      wrap = 'wrap',
	      spacing: spacingProp = 0,
	      rowSpacing: rowSpacingProp = spacingProp,
	      columnSpacing: columnSpacingProp = spacingProp,
	      disableEqualOverflow: themeDisableEqualOverflow
	    } = props,
	          rest = _objectWithoutPropertiesLoose(props, _excluded$2q); // Because `disableEqualOverflow` can be set from the theme's defaultProps, the **nested** grid should look at the instance props instead.


	    let disableEqualOverflow = themeDisableEqualOverflow;

	    if (nested && themeDisableEqualOverflow !== undefined) {
	      disableEqualOverflow = inProps.disableEqualOverflow;
	    } // collect breakpoints related props because they can be customized from the theme.


	    const gridSize = {};
	    const gridOffset = {};
	    const other = {};
	    Object.entries(rest).forEach(([key, val]) => {
	      if (theme.breakpoints.values[key] !== undefined) {
	        gridSize[key] = val;
	      } else if (theme.breakpoints.values[key.replace('Offset', '')] !== undefined) {
	        gridOffset[key.replace('Offset', '')] = val;
	      } else {
	        other[key] = val;
	      }
	    });
	    const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : nested ? undefined : columnsProp;
	    const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : nested ? undefined : spacingProp;
	    const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : nested ? undefined : rowSpacingProp;
	    const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : nested ? undefined : columnSpacingProp;

	    const ownerState = _extends({}, props, {
	      nested,
	      columns,
	      container,
	      direction,
	      wrap,
	      spacing,
	      rowSpacing,
	      columnSpacing,
	      gridSize,
	      gridOffset,
	      disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
	      // use context value if exists.
	      parentDisableEqualOverflow: overflow // for nested grid

	    });

	    const classes = useUtilityClasses(ownerState, theme);

	    let result = /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, _extends({
	      ref: ref,
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className)
	    }, other));

	    if (!nested) {
	      result = /*#__PURE__*/jsxRuntime.exports.jsx(NestedContext.Provider, {
	        value: true,
	        children: result
	      });
	    }

	    if (disableEqualOverflow !== undefined && disableEqualOverflow !== (overflow != null ? overflow : false)) {
	      // There are 2 possibilities that should wrap with the OverflowContext to communicate with the nested grids:
	      // 1. It is the root grid with `disableEqualOverflow`.
	      // 2. It is a nested grid with different `disableEqualOverflow` from the context.
	      result = /*#__PURE__*/jsxRuntime.exports.jsx(OverflowContext.Provider, {
	        value: disableEqualOverflow,
	        children: result
	      });
	    }

	    return result;
	  });
	  Grid.propTypes
	  /* remove-proptypes */
	  = {
	    children: propTypes.exports.node,
	    className: propTypes.exports.string,
	    columns: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number, propTypes.exports.object]),
	    columnSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
	    component: propTypes.exports.elementType,
	    container: propTypes.exports.bool,
	    direction: propTypes.exports.oneOfType([propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.exports.object]),
	    disableEqualOverflow: propTypes.exports.bool,
	    lg: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),
	    lgOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),
	    md: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),
	    mdOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),
	    rowSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
	    sm: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),
	    smOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),
	    spacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
	    sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
	    wrap: propTypes.exports.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
	    xl: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),
	    xlOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),
	    xs: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),
	    xsOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number])
	  } ;
	  return Grid;
	}

	/**
	 *
	 * Demos:
	 *
	 * - [Grid (Material UI)](https://mui.com/material-ui/react-grid/)
	 *
	 * API:
	 *
	 * - [Grid API](https://mui.com/system/api/grid/)
	 */

	const Grid$1 = createGrid();
	Grid$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The number of columns.
	   * @default 12
	   */
	  columns: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number, propTypes.exports.object]),

	  /**
	   * Defines the horizontal space between the type `item` components.
	   * It overrides the value of the `spacing` prop.
	   */
	  columnSpacing: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * If `true`, the component will have the flex *container* behavior.
	   * You should be wrapping *items* with a *container*.
	   * @default false
	   */
	  container: propTypes.exports.bool,

	  /**
	   * Defines the `flex-direction` style property.
	   * It is applied for all screen sizes.
	   * @default 'row'
	   */
	  direction: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.exports.object]),

	  /**
	   * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
	   */
	  disableEqualOverflow: propTypes.exports.bool,

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  lg: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
	   * If 'auto', the grid item push itself to the right-end of the container.
	   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
	   */
	  lgOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `md` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  md: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
	   * If 'auto', the grid item push itself to the right-end of the container.
	   * The value is applied for the `md` breakpoint and wider screens if not overridden.
	   */
	  mdOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),

	  /**
	   * Defines the vertical space between the type `item` components.
	   * It overrides the value of the `spacing` prop.
	   */
	  rowSpacing: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  sm: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
	   * If 'auto', the grid item push itself to the right-end of the container.
	   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
	   */
	  smOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),

	  /**
	   * Defines the space between the type `item` components.
	   * It can only be used on a type `container` component.
	   * @default 0
	   */
	  spacing: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * @ignore
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Defines the `flex-wrap` style property.
	   * It's applied for all screen sizes.
	   * @default 'wrap'
	   */
	  wrap: propTypes.exports.oneOf(['nowrap', 'wrap-reverse', 'wrap']),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  xl: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
	   * If 'auto', the grid item push itself to the right-end of the container.
	   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
	   */
	  xlOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for all the screen sizes with the lowest priority.
	   * @default false
	   */
	  xs: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
	   * If 'auto', the grid item push itself to the right-end of the container.
	   * The value is applied for the `xs` breakpoint and wider screens if not overridden.
	   */
	  xsOffset: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number])
	} ;

	const SPACINGS$3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	const DIRECTIONS$2 = ['column-reverse', 'column', 'row-reverse', 'row'];
	const WRAPS$2 = ['nowrap', 'wrap-reverse', 'wrap'];
	const GRID_SIZES$2 = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	generateUtilityClasses('MuiGrid', ['root', 'container', 'item', // spacings
	...SPACINGS$3.map(spacing => `spacing-xs-${spacing}`), // direction values
	...DIRECTIONS$2.map(direction => `direction-xs-${direction}`), // wrap values
	...WRAPS$2.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints
	...GRID_SIZES$2.map(size => `grid-xs-${size}`), ...GRID_SIZES$2.map(size => `grid-sm-${size}`), ...GRID_SIZES$2.map(size => `grid-md-${size}`), ...GRID_SIZES$2.map(size => `grid-lg-${size}`), ...GRID_SIZES$2.map(size => `grid-xl-${size}`)]);

	/**
	 * Determines if a given element is a DOM element name (i.e. not a React component).
	 */
	function isHostComponent(element) {
	  return typeof element === 'string';
	}

	/**
	 * Type of the ownerState based on the type of an element it applies to.
	 * This resolves to the provided OwnerState for React components and `undefined` for host components.
	 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
	 */

	/**
	 * Appends the ownerState object to the props, merging with the existing one if necessary.
	 *
	 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node, `ownerState` is not applied.
	 * @param otherProps Props of the element.
	 * @param ownerState
	 */
	function appendOwnerState(elementType, otherProps = {}, ownerState) {
	  if (isHostComponent(elementType)) {
	    return otherProps;
	  }

	  return _extends({}, otherProps, {
	    ownerState: _extends({}, otherProps.ownerState, ownerState)
	  });
	}

	function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
	  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
	}

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 * @param excludeKeys An array of keys to exclude from the returned object.
	 */
	function extractEventHandlers(object, excludeKeys = []) {
	  if (object === undefined) {
	    return {};
	  }

	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * If `componentProps` is a function, calls it with the provided `ownerState`.
	 * Otherwise, just returns `componentProps`.
	 */
	function resolveComponentProps(componentProps, ownerState) {
	  if (typeof componentProps === 'function') {
	    return componentProps(ownerState);
	  }

	  return componentProps;
	}

	/**
	 * Removes event handlers from the given object.
	 * A field is considered an event handler if it is a function with a name beginning with `on`.
	 *
	 * @param object Object to remove event handlers from.
	 * @returns Object with event handlers removed.
	 */
	function omitEventHandlers(object) {
	  if (object === undefined) {
	    return {};
	  }

	  const result = {};
	  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * Merges the slot component internal props (usually coming from a hook)
	 * with the externally provided ones.
	 *
	 * The merge order is (the latter overrides the former):
	 * 1. The internal props (specified as a getter function to work with get*Props hook result)
	 * 2. Additional props (specified internally on an unstyled component)
	 * 3. External props specified on the owner component. These should only be used on a root slot.
	 * 4. External props specified in the `componentsProps.*` prop.
	 * 5. The `className` prop - combined from all the above.
	 * @param parameters
	 * @returns
	 */
	function mergeSlotProps(parameters) {
	  const {
	    getSlotProps,
	    additionalProps,
	    externalSlotProps,
	    externalForwardedProps,
	    className
	  } = parameters;

	  if (!getSlotProps) {
	    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
	    // so we can simply merge all the props without having to worry about extracting event handlers.
	    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);

	    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);

	    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);

	    if (joinedClasses.length > 0) {
	      props.className = joinedClasses;
	    }

	    if (Object.keys(mergedStyle).length > 0) {
	      props.style = mergedStyle;
	    }

	    return {
	      props,
	      internalRef: undefined
	    };
	  } // In this case, getSlotProps is responsible for calling the external event handlers.
	  // We don't need to include them in the merged props because of this.


	  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
	  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
	  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
	  const internalSlotProps = getSlotProps(eventHandlers); // The order of classes is important here.
	  // Emotion (that we use in libraries consuming MUI Base) depends on this order
	  // to properly override style. It requires the most important classes to be last
	  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.

	  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);

	  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);

	  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);

	  if (joinedClasses.length > 0) {
	    props.className = joinedClasses;
	  }

	  if (Object.keys(mergedStyle).length > 0) {
	    props.style = mergedStyle;
	  }

	  return {
	    props,
	    internalRef: internalSlotProps.ref
	  };
	}

	const _excluded$2p = ["elementType", "externalSlotProps", "ownerState"];

	/**
	 * Builds the props to be passed into the slot of an unstyled component.
	 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
	 * If the slot component is not a host component, it also merges in the `ownerState`.
	 *
	 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
	 */
	function useSlotProps(parameters) {
	  var _parameters$additiona;

	  const {
	    elementType,
	    externalSlotProps,
	    ownerState
	  } = parameters,
	        rest = _objectWithoutPropertiesLoose(parameters, _excluded$2p);

	  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
	  const {
	    props: mergedProps,
	    internalRef
	  } = mergeSlotProps(_extends({}, rest, {
	    externalSlotProps: resolvedComponentsProps
	  }));
	  const ref = useForkRef(internalRef, useForkRef(resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref));
	  const props = appendOwnerState(elementType, _extends({}, mergedProps, {
	    ref
	  }), ownerState);
	  return props;
	}

	// Give up on IE11 support for this feature

	function stripDiacritics(string) {
	  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
	}

	function createFilterOptions(config = {}) {
	  const {
	    ignoreAccents = true,
	    ignoreCase = true,
	    limit,
	    matchFrom = 'any',
	    stringify,
	    trim = false
	  } = config;
	  return (options, {
	    inputValue,
	    getOptionLabel
	  }) => {
	    let input = trim ? inputValue.trim() : inputValue;

	    if (ignoreCase) {
	      input = input.toLowerCase();
	    }

	    if (ignoreAccents) {
	      input = stripDiacritics(input);
	    }

	    const filteredOptions = options.filter(option => {
	      let candidate = (stringify || getOptionLabel)(option);

	      if (ignoreCase) {
	        candidate = candidate.toLowerCase();
	      }

	      if (ignoreAccents) {
	        candidate = stripDiacritics(candidate);
	      }

	      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
	    });
	    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
	  };
	} // To replace with .findIndex() once we stop IE11 support.

	function findIndex(array, comp) {
	  for (let i = 0; i < array.length; i += 1) {
	    if (comp(array[i])) {
	      return i;
	    }
	  }

	  return -1;
	}

	const defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.

	const pageSize$1 = 5;
	function useAutocomplete(props) {
	  const {
	    autoComplete = false,
	    autoHighlight = false,
	    autoSelect = false,
	    blurOnSelect = false,
	    clearOnBlur = !props.freeSolo,
	    clearOnEscape = false,
	    componentName = 'useAutocomplete',
	    defaultValue = props.multiple ? [] : null,
	    disableClearable = false,
	    disableCloseOnSelect = false,
	    disabled: disabledProp,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    filterOptions = defaultFilterOptions,
	    filterSelectedOptions = false,
	    freeSolo = false,
	    getOptionDisabled,
	    getOptionLabel: getOptionLabelProp = option => {
	      var _option$label;

	      return (_option$label = option.label) != null ? _option$label : option;
	    },
	    groupBy,
	    handleHomeEndKeys = !props.freeSolo,
	    id: idProp,
	    includeInputInList = false,
	    inputValue: inputValueProp,
	    isOptionEqualToValue = (option, value) => option === value,
	    multiple = false,
	    onChange,
	    onClose,
	    onHighlightChange,
	    onInputChange,
	    onOpen,
	    open: openProp,
	    openOnFocus = false,
	    options,
	    readOnly = false,
	    selectOnFocus = !props.freeSolo,
	    value: valueProp
	  } = props;
	  const id = useId(idProp);
	  let getOptionLabel = getOptionLabelProp;

	  getOptionLabel = option => {
	    const optionLabel = getOptionLabelProp(option);

	    if (typeof optionLabel !== 'string') {
	      {
	        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
	        console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
	      }

	      return String(optionLabel);
	    }

	    return optionLabel;
	  };

	  const ignoreFocus = react.exports.useRef(false);
	  const firstFocus = react.exports.useRef(true);
	  const inputRef = react.exports.useRef(null);
	  const listboxRef = react.exports.useRef(null);
	  const [anchorEl, setAnchorEl] = react.exports.useState(null);
	  const [focusedTag, setFocusedTag] = react.exports.useState(-1);
	  const defaultHighlighted = autoHighlight ? 0 : -1;
	  const highlightedIndexRef = react.exports.useRef(defaultHighlighted);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: componentName
	  });
	  const [inputValue, setInputValueState] = useControlled({
	    controlled: inputValueProp,
	    default: '',
	    name: componentName,
	    state: 'inputValue'
	  });
	  const [focused, setFocused] = react.exports.useState(false);
	  const resetInputValue = react.exports.useCallback((event, newValue) => {
	    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
	    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
	    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;

	    if (!isOptionSelected && !clearOnBlur) {
	      return;
	    }

	    let newInputValue;

	    if (multiple) {
	      newInputValue = '';
	    } else if (newValue == null) {
	      newInputValue = '';
	    } else {
	      const optionLabel = getOptionLabel(newValue);
	      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
	    }

	    if (inputValue === newInputValue) {
	      return;
	    }

	    setInputValueState(newInputValue);

	    if (onInputChange) {
	      onInputChange(event, newInputValue, 'reset');
	    }
	  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
	  const prevValue = react.exports.useRef();
	  react.exports.useEffect(() => {
	    const valueChange = value !== prevValue.current;
	    prevValue.current = value;

	    if (focused && !valueChange) {
	      return;
	    } // Only reset the input's value when freeSolo if the component's value changes.


	    if (freeSolo && !valueChange) {
	      return;
	    }

	    resetInputValue(null, value);
	  }, [value, resetInputValue, focused, prevValue, freeSolo]);
	  const [open, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: componentName,
	    state: 'open'
	  });
	  const [inputPristine, setInputPristine] = react.exports.useState(true);
	  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
	  const popupOpen = open && !readOnly;
	  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
	    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
	      return false;
	    }

	    return true;
	  }), // we use the empty string to manipulate `filterOptions` to not filter any options
	  // i.e. the filter predicate always returns true
	  {
	    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
	    getOptionLabel
	  }) : [];
	  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;

	  {
	    if (value !== null && !freeSolo && options.length > 0) {
	      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));

	      if (missingValue.length > 0) {
	        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\n'));
	      }
	    }
	  }

	  const focusTag = useEventCallback(tagToFocus => {
	    if (tagToFocus === -1) {
	      inputRef.current.focus();
	    } else {
	      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
	    }
	  }); // Ensure the focusedTag is never inconsistent

	  react.exports.useEffect(() => {
	    if (multiple && focusedTag > value.length - 1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }
	  }, [value, multiple, focusedTag, focusTag]);

	  function validOptionIndex(index, direction) {
	    if (!listboxRef.current || index === -1) {
	      return -1;
	    }

	    let nextFocus = index;

	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }

	      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`); // Same logic as MenuList.js

	      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';

	      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
	        // Move to the next element.
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }

	  const setHighlightedIndex = useEventCallback(({
	    event,
	    index,
	    reason = 'auto'
	  }) => {
	    highlightedIndexRef.current = index; // does the index exist?

	    if (index === -1) {
	      inputRef.current.removeAttribute('aria-activedescendant');
	    } else {
	      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
	    }

	    if (onHighlightChange) {
	      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
	    }

	    if (!listboxRef.current) {
	      return;
	    }

	    const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');

	    if (prev) {
	      prev.classList.remove('Mui-focused');
	      prev.classList.remove('Mui-focusVisible');
	    }

	    const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"

	    if (!listboxNode) {
	      return;
	    }

	    if (index === -1) {
	      listboxNode.scrollTop = 0;
	      return;
	    }

	    const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);

	    if (!option) {
	      return;
	    }

	    option.classList.add('Mui-focused');

	    if (reason === 'keyboard') {
	      option.classList.add('Mui-focusVisible');
	    } // Scroll active descendant into view.
	    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js
	    //
	    // Consider this API instead once it has a better browser support:
	    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });


	    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
	      const element = option;
	      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
	      const elementBottom = element.offsetTop + element.offsetHeight;

	      if (elementBottom > scrollBottom) {
	        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
	      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
	        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
	      }
	    }
	  });
	  const changeHighlightedIndex = useEventCallback(({
	    event,
	    diff,
	    direction = 'next',
	    reason = 'auto'
	  }) => {
	    if (!popupOpen) {
	      return;
	    }

	    const getNextIndex = () => {
	      const maxIndex = filteredOptions.length - 1;

	      if (diff === 'reset') {
	        return defaultHighlighted;
	      }

	      if (diff === 'start') {
	        return 0;
	      }

	      if (diff === 'end') {
	        return maxIndex;
	      }

	      const newIndex = highlightedIndexRef.current + diff;

	      if (newIndex < 0) {
	        if (newIndex === -1 && includeInputInList) {
	          return -1;
	        }

	        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
	          return 0;
	        }

	        return maxIndex;
	      }

	      if (newIndex > maxIndex) {
	        if (newIndex === maxIndex + 1 && includeInputInList) {
	          return -1;
	        }

	        if (disableListWrap || Math.abs(diff) > 1) {
	          return maxIndex;
	        }

	        return 0;
	      }

	      return newIndex;
	    };

	    const nextIndex = validOptionIndex(getNextIndex(), direction);
	    setHighlightedIndex({
	      index: nextIndex,
	      reason,
	      event
	    }); // Sync the content of the input with the highlighted option.

	    if (autoComplete && diff !== 'reset') {
	      if (nextIndex === -1) {
	        inputRef.current.value = inputValue;
	      } else {
	        const option = getOptionLabel(filteredOptions[nextIndex]);
	        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
	        // a completion string, appears inline after the input cursor in the textbox.

	        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());

	        if (index === 0 && inputValue.length > 0) {
	          inputRef.current.setSelectionRange(inputValue.length, option.length);
	        }
	      }
	    }
	  });
	  const syncHighlightedIndex = react.exports.useCallback(() => {
	    if (!popupOpen) {
	      return;
	    }

	    const valueItem = multiple ? value[0] : value; // The popup is empty, reset

	    if (filteredOptions.length === 0 || valueItem == null) {
	      changeHighlightedIndex({
	        diff: 'reset'
	      });
	      return;
	    }

	    if (!listboxRef.current) {
	      return;
	    } // Synchronize the value with the highlighted index


	    if (valueItem != null) {
	      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible

	      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
	        return;
	      }

	      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));

	      if (itemIndex === -1) {
	        changeHighlightedIndex({
	          diff: 'reset'
	        });
	      } else {
	        setHighlightedIndex({
	          index: itemIndex
	        });
	      }

	      return;
	    } // Prevent the highlighted index to leak outside the boundaries.


	    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
	      setHighlightedIndex({
	        index: filteredOptions.length - 1
	      });
	      return;
	    } // Restore the focus to the previous index.


	    setHighlightedIndex({
	      index: highlightedIndexRef.current
	    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [// Only sync the highlighted index when the option switch between empty and not
	  filteredOptions.length, // Don't sync the highlighted index with the value when multiple
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
	  const handleListboxRef = useEventCallback(node => {
	    setRef(listboxRef, node);

	    if (!node) {
	      return;
	    }

	    syncHighlightedIndex();
	  });

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useEffect(() => {
	      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
	        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {
	          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\n'));
	        } else {
	          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\n'));
	        }
	      }
	    }, [componentName]);
	  }

	  react.exports.useEffect(() => {
	    syncHighlightedIndex();
	  }, [syncHighlightedIndex]);

	  const handleOpen = event => {
	    if (open) {
	      return;
	    }

	    setOpenState(true);
	    setInputPristine(true);

	    if (onOpen) {
	      onOpen(event);
	    }
	  };

	  const handleClose = (event, reason) => {
	    if (!open) {
	      return;
	    }

	    setOpenState(false);

	    if (onClose) {
	      onClose(event, reason);
	    }
	  };

	  const handleValue = (event, newValue, reason, details) => {
	    if (multiple) {
	      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
	        return;
	      }
	    } else if (value === newValue) {
	      return;
	    }

	    if (onChange) {
	      onChange(event, newValue, reason, details);
	    }

	    setValueState(newValue);
	  };

	  const isTouch = react.exports.useRef(false);

	  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
	    let reason = reasonProp;
	    let newValue = option;

	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];

	      {
	        const matches = newValue.filter(val => isOptionEqualToValue(option, val));

	        if (matches.length > 1) {
	          console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\n'));
	        }
	      }

	      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));

	      if (itemIndex === -1) {
	        newValue.push(option);
	      } else if (origin !== 'freeSolo') {
	        newValue.splice(itemIndex, 1);
	        reason = 'removeOption';
	      }
	    }

	    resetInputValue(event, newValue);
	    handleValue(event, newValue, reason, {
	      option
	    });

	    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
	      handleClose(event, reason);
	    }

	    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
	      inputRef.current.blur();
	    }
	  };

	  function validTagIndex(index, direction) {
	    if (index === -1) {
	      return -1;
	    }

	    let nextFocus = index;

	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }

	      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`); // Same logic as MenuList.js

	      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }

	  const handleFocusTag = (event, direction) => {
	    if (!multiple) {
	      return;
	    }

	    if (inputValue === '') {
	      handleClose(event, 'toggleInput');
	    }

	    let nextTag = focusedTag;

	    if (focusedTag === -1) {
	      if (inputValue === '' && direction === 'previous') {
	        nextTag = value.length - 1;
	      }
	    } else {
	      nextTag += direction === 'next' ? 1 : -1;

	      if (nextTag < 0) {
	        nextTag = 0;
	      }

	      if (nextTag === value.length) {
	        nextTag = -1;
	      }
	    }

	    nextTag = validTagIndex(nextTag, direction);
	    setFocusedTag(nextTag);
	    focusTag(nextTag);
	  };

	  const handleClear = event => {
	    ignoreFocus.current = true;
	    setInputValueState('');

	    if (onInputChange) {
	      onInputChange(event, '', 'clear');
	    }

	    handleValue(event, multiple ? [] : null, 'clear');
	  };

	  const handleKeyDown = other => event => {
	    if (other.onKeyDown) {
	      other.onKeyDown(event);
	    }

	    if (event.defaultMuiPrevented) {
	      return;
	    }

	    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    } // Wait until IME is settled.


	    if (event.which !== 229) {
	      switch (event.key) {
	        case 'Home':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'start',
	              direction: 'next',
	              reason: 'keyboard',
	              event
	            });
	          }

	          break;

	        case 'End':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'end',
	              direction: 'previous',
	              reason: 'keyboard',
	              event
	            });
	          }

	          break;

	        case 'PageUp':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -pageSize$1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'PageDown':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: pageSize$1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowDown':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: 1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowUp':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowLeft':
	          handleFocusTag(event, 'previous');
	          break;

	        case 'ArrowRight':
	          handleFocusTag(event, 'next');
	          break;

	        case 'Enter':
	          if (highlightedIndexRef.current !== -1 && popupOpen) {
	            const option = filteredOptions[highlightedIndexRef.current];
	            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.

	            event.preventDefault();

	            if (disabled) {
	              return;
	            }

	            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.

	            if (autoComplete) {
	              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
	            }
	          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
	            if (multiple) {
	              // Allow people to add new values before they submit the form.
	              event.preventDefault();
	            }

	            selectNewValue(event, inputValue, 'createOption', 'freeSolo');
	          }

	          break;

	        case 'Escape':
	          if (popupOpen) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault(); // Avoid the Modal to handle the event.

	            event.stopPropagation();
	            handleClose(event, 'escape');
	          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault(); // Avoid the Modal to handle the event.

	            event.stopPropagation();
	            handleClear(event);
	          }

	          break;

	        case 'Backspace':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0) {
	            const index = focusedTag === -1 ? value.length - 1 : focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }

	          break;
	      }
	    }
	  };

	  const handleFocus = event => {
	    setFocused(true);

	    if (openOnFocus && !ignoreFocus.current) {
	      handleOpen(event);
	    }
	  };

	  const handleBlur = event => {
	    // Ignore the event when using the scrollbar with IE11
	    if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
	      inputRef.current.focus();
	      return;
	    }

	    setFocused(false);
	    firstFocus.current = true;
	    ignoreFocus.current = false;

	    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
	      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
	    } else if (autoSelect && freeSolo && inputValue !== '') {
	      selectNewValue(event, inputValue, 'blur', 'freeSolo');
	    } else if (clearOnBlur) {
	      resetInputValue(event, value);
	    }

	    handleClose(event, 'blur');
	  };

	  const handleInputChange = event => {
	    const newValue = event.target.value;

	    if (inputValue !== newValue) {
	      setInputValueState(newValue);
	      setInputPristine(false);

	      if (onInputChange) {
	        onInputChange(event, newValue, 'input');
	      }
	    }

	    if (newValue === '') {
	      if (!disableClearable && !multiple) {
	        handleValue(event, null, 'clear');
	      }
	    } else {
	      handleOpen(event);
	    }
	  };

	  const handleOptionMouseOver = event => {
	    setHighlightedIndex({
	      event,
	      index: Number(event.currentTarget.getAttribute('data-option-index')),
	      reason: 'mouse'
	    });
	  };

	  const handleOptionTouchStart = () => {
	    isTouch.current = true;
	  };

	  const handleOptionClick = event => {
	    const index = Number(event.currentTarget.getAttribute('data-option-index'));
	    selectNewValue(event, filteredOptions[index], 'selectOption');
	    isTouch.current = false;
	  };

	  const handleTagDelete = index => event => {
	    const newValue = value.slice();
	    newValue.splice(index, 1);
	    handleValue(event, newValue, 'removeOption', {
	      option: value[index]
	    });
	  };

	  const handlePopupIndicator = event => {
	    if (open) {
	      handleClose(event, 'toggleInput');
	    } else {
	      handleOpen(event);
	    }
	  }; // Prevent input blur when interacting with the combobox


	  const handleMouseDown = event => {
	    if (event.target.getAttribute('id') !== id) {
	      event.preventDefault();
	    }
	  }; // Focus the input when interacting with the combobox


	  const handleClick = () => {
	    inputRef.current.focus();

	    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
	      inputRef.current.select();
	    }

	    firstFocus.current = false;
	  };

	  const handleInputMouseDown = event => {
	    if (inputValue === '' || !open) {
	      handlePopupIndicator(event);
	    }
	  };

	  let dirty = freeSolo && inputValue.length > 0;
	  dirty = dirty || (multiple ? value.length > 0 : value !== null);
	  let groupedOptions = filteredOptions;

	  if (groupBy) {
	    // used to keep track of key and indexes in the result array
	    const indexBy = new Map();
	    let warn = false;
	    groupedOptions = filteredOptions.reduce((acc, option, index) => {
	      const group = groupBy(option);

	      if (acc.length > 0 && acc[acc.length - 1].group === group) {
	        acc[acc.length - 1].options.push(option);
	      } else {
	        {
	          if (indexBy.get(group) && !warn) {
	            console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
	            warn = true;
	          }

	          indexBy.set(group, true);
	        }

	        acc.push({
	          key: index,
	          index,
	          group,
	          options: [option]
	        });
	      }

	      return acc;
	    }, []);
	  }

	  if (disabledProp && focused) {
	    handleBlur();
	  }

	  return {
	    getRootProps: (other = {}) => _extends({
	      'aria-owns': listboxAvailable ? `${id}-listbox` : null
	    }, other, {
	      onKeyDown: handleKeyDown(other),
	      onMouseDown: handleMouseDown,
	      onClick: handleClick
	    }),
	    getInputLabelProps: () => ({
	      id: `${id}-label`,
	      htmlFor: id
	    }),
	    getInputProps: () => ({
	      id,
	      value: inputValue,
	      onBlur: handleBlur,
	      onFocus: handleFocus,
	      onChange: handleInputChange,
	      onMouseDown: handleInputMouseDown,
	      // if open then this is handled imperativeley so don't let react override
	      // only have an opinion about this when closed
	      'aria-activedescendant': popupOpen ? '' : null,
	      'aria-autocomplete': autoComplete ? 'both' : 'list',
	      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
	      'aria-expanded': listboxAvailable,
	      // Disable browser's suggestion that might overlap with the popup.
	      // Handle autocomplete but not autofill.
	      autoComplete: 'off',
	      ref: inputRef,
	      autoCapitalize: 'none',
	      spellCheck: 'false',
	      role: 'combobox'
	    }),
	    getClearProps: () => ({
	      tabIndex: -1,
	      onClick: handleClear
	    }),
	    getPopupIndicatorProps: () => ({
	      tabIndex: -1,
	      onClick: handlePopupIndicator
	    }),
	    getTagProps: ({
	      index
	    }) => _extends({
	      key: index,
	      'data-tag-index': index,
	      tabIndex: -1
	    }, !readOnly && {
	      onDelete: handleTagDelete(index)
	    }),
	    getListboxProps: () => ({
	      role: 'listbox',
	      id: `${id}-listbox`,
	      'aria-labelledby': `${id}-label`,
	      ref: handleListboxRef,
	      onMouseDown: event => {
	        // Prevent blur
	        event.preventDefault();
	      }
	    }),
	    getOptionProps: ({
	      index,
	      option
	    }) => {
	      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
	      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
	      return {
	        key: getOptionLabel(option),
	        tabIndex: -1,
	        role: 'option',
	        id: `${id}-option-${index}`,
	        onMouseOver: handleOptionMouseOver,
	        onClick: handleOptionClick,
	        onTouchStart: handleOptionTouchStart,
	        'data-option-index': index,
	        'aria-disabled': disabled,
	        'aria-selected': selected
	      };
	    },
	    id,
	    inputValue,
	    value,
	    dirty,
	    popupOpen,
	    focused: focused || focusedTag !== -1,
	    anchorEl,
	    setAnchorEl,
	    focusedTag,
	    groupedOptions
	  };
	}

	function useBadge(parameters) {
	  const {
	    badgeContent: badgeContentProp,
	    invisible: invisibleProp = false,
	    max: maxProp = 99,
	    showZero = false
	  } = parameters;
	  const prevProps = usePreviousProps({
	    badgeContent: badgeContentProp,
	    max: maxProp
	  });
	  let invisible = invisibleProp;

	  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
	    invisible = true;
	  }

	  const {
	    badgeContent,
	    max = maxProp
	  } = invisible ? prevProps : parameters;
	  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
	  return {
	    badgeContent,
	    invisible,
	    max,
	    displayValue
	  };
	}

	function getBadgeUnstyledUtilityClass(slot) {
	  return generateUtilityClass('BaseBadge', slot);
	}
	generateUtilityClasses('BaseBadge', ['root', 'badge', 'invisible']);

	const _excluded$2o = ["badgeContent", "component", "children", "components", "componentsProps", "invisible", "max", "showZero"];

	const useUtilityClasses$1Y = ownerState => {
	  const {
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Badge](https://mui.com/base/react-badge/)
	 *
	 * API:
	 *
	 * - [BadgeUnstyled API](https://mui.com/base/api/badge-unstyled/)
	 */


	const BadgeUnstyled = /*#__PURE__*/react.exports.forwardRef(function BadgeUnstyled(props, ref) {
	  const {
	    component,
	    children,
	    components = {},
	    componentsProps = {},
	    max: maxProp = 99,
	    showZero = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2o);

	  const {
	    badgeContent,
	    max,
	    displayValue,
	    invisible
	  } = useBadge(_extends({}, props, {
	    max: maxProp
	  }));

	  const ownerState = _extends({}, props, {
	    badgeContent,
	    invisible,
	    max,
	    showZero
	  });

	  const classes = useUtilityClasses$1Y(ownerState);
	  const Root = component || components.Root || 'span';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  const Badge = components.Badge || 'span';
	  const badgeProps = useSlotProps({
	    elementType: Badge,
	    externalSlotProps: componentsProps.badge,
	    ownerState,
	    className: classes.badge
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(Badge, _extends({}, badgeProps, {
	      children: displayValue
	    }))]
	  }));
	});
	BadgeUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content rendered within the badge.
	   */
	  badgeContent: propTypes.exports.node,

	  /**
	   * The badge will be added relative to this node.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Badge.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Badge: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Badge.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    badge: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the badge is invisible.
	   * @default false
	   */
	  invisible: propTypes.exports.bool,

	  /**
	   * Max count to show.
	   * @default 99
	   */
	  max: propTypes.exports.number,

	  /**
	   * Controls whether the badge is hidden when `badgeContent` is zero.
	   * @default false
	   */
	  showZero: propTypes.exports.bool
	} ;

	function getButtonUnstyledUtilityClass(slot) {
	  return generateUtilityClass('ButtonUnstyled', slot);
	}
	generateUtilityClasses('ButtonUnstyled', ['root', 'active', 'disabled', 'focusVisible']);

	function useButton(parameters) {
	  const {
	    disabled = false,
	    focusableWhenDisabled,
	    href,
	    ref,
	    tabIndex,
	    to,
	    type
	  } = parameters;
	  const buttonRef = react.exports.useRef();
	  const [active, setActive] = react.exports.useState(false);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);

	  if (disabled && !focusableWhenDisabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  react.exports.useEffect(() => {
	    isFocusVisibleRef.current = focusVisible;
	  }, [focusVisible, isFocusVisibleRef]);
	  const [hostElementName, setHostElementName] = react.exports.useState('');

	  const createHandleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    if (focusVisible) {
	      event.preventDefault();
	    }

	    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
	  };

	  const createHandleBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
	  };

	  const createHandleFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu2;

	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      var _otherHandlers$onFocu;

	      setFocusVisible(true);
	      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
	    }

	    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
	  };

	  const isNativeButton = () => {
	    const button = buttonRef.current;
	    return hostElementName === 'BUTTON' || hostElementName === 'INPUT' && ['button', 'submit', 'reset'].includes(button == null ? void 0 : button.type) || hostElementName === 'A' && (button == null ? void 0 : button.href);
	  };

	  const createHandleClick = otherHandlers => event => {
	    if (!disabled) {
	      var _otherHandlers$onClic;

	      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
	    }
	  };

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous2;

	    if (event.target === event.currentTarget && !disabled) {
	      setActive(true);
	    }

	    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
	  };

	  const createHandleMouseUp = otherHandlers => event => {
	    var _otherHandlers$onMous3;

	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
	  };

	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {
	      setActive(true);
	    } // Keyboard accessibility for non interactive elements


	    if (event.target === event.currentTarget && !isNativeButton() && event.key === 'Enter' && !disabled) {
	      var _otherHandlers$onClic2;

	      (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
	      event.preventDefault();
	    }
	  };

	  const createHandleKeyUp = otherHandlers => event => {
	    var _otherHandlers$onKeyU;

	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

	    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ' && !event.defaultPrevented) {
	      var _otherHandlers$onClic3;

	      (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
	    }
	  };

	  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
	  const handleRef = useForkRef(ref, handleOwnRef);

	  const updateRef = instance => {
	    var _instance$tagName;

	    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
	    setRef(handleRef, instance);
	  };

	  const buttonProps = {};

	  if (hostElementName === 'BUTTON') {
	    buttonProps.type = type != null ? type : 'button';

	    if (focusableWhenDisabled) {
	      buttonProps['aria-disabled'] = disabled;
	    } else {
	      buttonProps.disabled = disabled;
	    }
	  } else if (hostElementName !== '') {
	    if (!href && !to) {
	      buttonProps.role = 'button';
	      buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
	    }

	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
	    }
	  }

	  const getRootProps = (otherHandlers = {}) => {
	    const propsEventHandlers = extractEventHandlers(parameters);

	    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
	    // it must not be forwarded to the inner component.


	    delete externalEventHandlers.onFocusVisible;
	    return _extends({
	      type
	    }, externalEventHandlers, buttonProps, {
	      onBlur: createHandleBlur(externalEventHandlers),
	      onClick: createHandleClick(externalEventHandlers),
	      onFocus: createHandleFocus(externalEventHandlers),
	      onKeyDown: createHandleKeyDown(externalEventHandlers),
	      onKeyUp: createHandleKeyUp(externalEventHandlers),
	      onMouseDown: createHandleMouseDown(externalEventHandlers),
	      onMouseLeave: createHandleMouseLeave(externalEventHandlers),
	      onMouseUp: createHandleMouseUp(externalEventHandlers),
	      ref: updateRef
	    });
	  };

	  return {
	    getRootProps,
	    focusVisible,
	    setFocusVisible,
	    disabled,
	    active
	  };
	}

	const _excluded$2n = ["action", "children", "component", "components", "componentsProps", "disabled", "focusableWhenDisabled", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave"];

	const useUtilityClasses$1X = ownerState => {
	  const {
	    active,
	    disabled,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']
	  };
	  return composeClasses(slots, getButtonUnstyledUtilityClass, {});
	};
	/**
	 * The foundation for building custom-styled buttons.
	 *
	 * Demos:
	 *
	 * - [Button](https://mui.com/base/react-button/)
	 *
	 * API:
	 *
	 * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)
	 */


	const ButtonUnstyled = /*#__PURE__*/react.exports.forwardRef(function ButtonUnstyled(props, forwardedRef) {
	  var _ref;

	  const {
	    action,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    focusableWhenDisabled = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2n);

	  const buttonRef = react.exports.useRef();
	  const {
	    active,
	    focusVisible,
	    setFocusVisible,
	    getRootProps
	  } = useButton(_extends({}, props, {
	    focusableWhenDisabled
	  }));
	  react.exports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), [setFocusVisible]);

	  const ownerState = _extends({}, props, {
	    active,
	    focusableWhenDisabled,
	    focusVisible
	  });

	  const classes = useUtilityClasses$1X(ownerState);
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    getSlotProps: getRootProps,
	    externalForwardedProps: other,
	    externalSlotProps: componentsProps.root,
	    additionalProps: {
	      ref: forwardedRef
	    },
	    ownerState,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
	    children: children
	  }));
	});
	ButtonUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions. It currently only supports `focusVisible()` action.
	   */
	  action: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
	    current: propTypes.exports.shape({
	      focusVisible: propTypes.exports.func.isRequired
	    })
	  })]),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
	   */
	  component: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * The components used for each slot inside the Button.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Button.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, allows a disabled button to receive focus.
	   * @default false
	   */
	  focusableWhenDisabled: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onFocusVisible: propTypes.exports.func
	} ;

	function mapEventPropToEvent(eventProp) {
	  return eventProp.substring(2).toLowerCase();
	}

	function clickedRootScrollbar(event, doc) {
	  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
	}

	/**
	 * Listen for click events that occur somewhere in the document, outside of the element itself.
	 * For instance, if you need to hide a menu when people click anywhere else on your page.
	 *
	 * Demos:
	 *
	 * - [Click away listener](https://mui.com/base/react-click-away-listener/)
	 *
	 * API:
	 *
	 * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)
	 */
	function ClickAwayListener(props) {
	  const {
	    children,
	    disableReactTree = false,
	    mouseEvent = 'onClick',
	    onClickAway,
	    touchEvent = 'onTouchEnd'
	  } = props;
	  const movedRef = react.exports.useRef(false);
	  const nodeRef = react.exports.useRef(null);
	  const activatedRef = react.exports.useRef(false);
	  const syntheticEventRef = react.exports.useRef(false);
	  react.exports.useEffect(() => {
	    // Ensure that this component is not "activated" synchronously.
	    // https://github.com/facebook/react/issues/20074
	    setTimeout(() => {
	      activatedRef.current = true;
	    }, 0);
	    return () => {
	      activatedRef.current = false;
	    };
	  }, []);
	  const handleRef = useForkRef( // @ts-expect-error TODO upstream fix
	  children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:
	  //
	  // event.preventDefault() is meant to stop default behaviors like
	  // clicking a checkbox to check it, hitting a button to submit a form,
	  // and hitting left arrow to move the cursor in a text input etc.
	  // Only special HTML elements have these default behaviors.

	  const handleClickAway = useEventCallback(event => {
	    // Given developers can stop the propagation of the synthetic event,
	    // we can only be confident with a positive value.
	    const insideReactTree = syntheticEventRef.current;
	    syntheticEventRef.current = false;
	    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
	    // 2. The child might render null.
	    // 3. Behave like a blur listener.

	    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {
	      return;
	    } // Do not act if user performed touchmove


	    if (movedRef.current) {
	      movedRef.current = false;
	      return;
	    }

	    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

	    if (event.composedPath) {
	      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
	    } else {
	      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target);
	    }

	    if (!insideDOM && (disableReactTree || !insideReactTree)) {
	      onClickAway(event);
	    }
	  }); // Keep track of mouse/touch events that bubbled up through the portal.

	  const createHandleSynthetic = handlerName => event => {
	    syntheticEventRef.current = true;
	    const childrenPropsHandler = children.props[handlerName];

	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };

	  const childrenProps = {
	    ref: handleRef
	  };

	  if (touchEvent !== false) {
	    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
	  }

	  react.exports.useEffect(() => {
	    if (touchEvent !== false) {
	      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
	      const doc = ownerDocument(nodeRef.current);

	      const handleTouchMove = () => {
	        movedRef.current = true;
	      };

	      doc.addEventListener(mappedTouchEvent, handleClickAway);
	      doc.addEventListener('touchmove', handleTouchMove);
	      return () => {
	        doc.removeEventListener(mappedTouchEvent, handleClickAway);
	        doc.removeEventListener('touchmove', handleTouchMove);
	      };
	    }

	    return undefined;
	  }, [handleClickAway, touchEvent]);

	  if (mouseEvent !== false) {
	    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
	  }

	  react.exports.useEffect(() => {
	    if (mouseEvent !== false) {
	      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
	      const doc = ownerDocument(nodeRef.current);
	      doc.addEventListener(mappedMouseEvent, handleClickAway);
	      return () => {
	        doc.removeEventListener(mappedMouseEvent, handleClickAway);
	      };
	    }

	    return undefined;
	  }, [handleClickAway, mouseEvent]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: /*#__PURE__*/react.exports.cloneElement(children, childrenProps)
	  });
	}

	ClickAwayListener.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The wrapped element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * If `true`, the React tree is ignored and only the DOM tree is considered.
	   * This prop changes how portaled elements are handled.
	   * @default false
	   */
	  disableReactTree: propTypes.exports.bool,

	  /**
	   * The mouse event to listen to. You can disable the listener by providing `false`.
	   * @default 'onClick'
	   */
	  mouseEvent: propTypes.exports.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),

	  /**
	   * Callback fired when a "click away" event is detected.
	   */
	  onClickAway: propTypes.exports.func.isRequired,

	  /**
	   * The touch event to listen to. You can disable the listener by providing `false`.
	   * @default 'onTouchEnd'
	   */
	  touchEvent: propTypes.exports.oneOf(['onTouchEnd', 'onTouchStart', false])
	} ;

	{
	  // eslint-disable-next-line
	  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);
	}

	/**
	 * @ignore - internal component.
	 */
	const FormControlUnstyledContext = /*#__PURE__*/react.exports.createContext(undefined);

	{
	  FormControlUnstyledContext.displayName = 'FormControlUnstyledContext';
	}

	function getFormControlUnstyledUtilityClass(slot) {
	  return generateUtilityClass('BaseFormControl', slot);
	}
	generateUtilityClasses('BaseFormControl', ['root', 'disabled', 'error', 'filled', 'focused', 'required']);

	const _excluded$2m = ["defaultValue", "children", "component", "components", "componentsProps", "disabled", "error", "onChange", "required", "value"];

	function hasValue$1(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
	}

	function useUtilityClasses$1W(ownerState) {
	  const {
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']
	  };
	  return composeClasses(slots, getFormControlUnstyledUtilityClass, {});
	}
	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 * *   FormLabel
	 * *   FormHelperText
	 * *   Input
	 * *   InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 *
	 * Demos:
	 *
	 * - [Form control](https://mui.com/base/react-form-control/)
	 *
	 * API:
	 *
	 * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)
	 */


	const FormControlUnstyled = /*#__PURE__*/react.exports.forwardRef(function FormControlUnstyled(props, ref) {
	  var _ref;

	  const {
	    defaultValue,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    disabled = false,
	    error = false,
	    onChange,
	    required = false,
	    value: incomingValue
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2m);

	  const [value, setValue] = useControlled({
	    controlled: incomingValue,
	    default: defaultValue,
	    name: 'FormControl',
	    state: 'value'
	  });
	  const filled = hasValue$1(value);
	  const [focused, setFocused] = react.exports.useState(false);

	  if (disabled && focused) {
	    setFocused(false);
	  }

	  const ownerState = _extends({}, props, {
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  });

	  const handleChange = event => {
	    setValue(event.target.value);
	    onChange == null ? void 0 : onChange(event);
	  };

	  const childContext = {
	    disabled,
	    error,
	    filled,
	    focused,
	    onBlur: () => {
	      setFocused(false);
	    },
	    onChange: handleChange,
	    onFocus: () => {
	      setFocused(true);
	    },
	    required,
	    value: value != null ? value : ''
	  };
	  const classes = useUtilityClasses$1W(ownerState);

	  const renderChildren = () => {
	    if (typeof children === 'function') {
	      return children(childContext);
	    }

	    return children;
	  };

	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref,
	      children: renderChildren()
	    },
	    ownerState,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlUnstyledContext.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps))
	  });
	});
	FormControlUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.node, propTypes.exports.func]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the FormControl.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * @ignore
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * @ignore
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   * @default false
	   */
	  required: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  value: propTypes.exports.any
	} ;

	function useFormControlUnstyledContext() {
	  return react.exports.useContext(FormControlUnstyledContext);
	}

	const inputBaseClasses$1 = generateUtilityClasses('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'error', 'multiline', 'input', 'inputMultiline', 'inputTypeSearch', 'adornedStart', 'adornedEnd']);

	function useInput(parameters) {
	  const {
	    defaultValue: defaultValueProp,
	    disabled: disabledProp = false,
	    error: errorProp = false,
	    onBlur,
	    onChange,
	    onFocus,
	    required: requiredProp = false,
	    value: valueProp
	  } = parameters;
	  const formControlContext = useFormControlUnstyledContext();
	  let defaultValue;
	  let disabled;
	  let error;
	  let required;
	  let value;

	  if (formControlContext) {
	    var _formControlContext$d, _formControlContext$e, _formControlContext$r;

	    defaultValue = undefined;
	    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
	    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
	    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
	    value = formControlContext.value;

	    {
	      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);

	      if (definedLocalProps.length > 0) {
	        console.warn(['MUI: You have set props on an input that is inside a FormControlUnstyled.', 'Set these props on a FormControlUnstyled instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\n'));
	      }
	    }
	  } else {
	    defaultValue = defaultValueProp;
	    disabled = disabledProp;
	    error = errorProp;
	    required = requiredProp;
	    value = valueProp;
	  }

	  const {
	    current: isControlled
	  } = react.exports.useRef(value != null);
	  const handleInputRefWarning = react.exports.useCallback(instance => {
	    {
	      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
	        console.error(['MUI: You have provided a `components.Input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
	      }
	    }
	  }, []);
	  const inputRef = react.exports.useRef(null);
	  const handleInputRef = useForkRef(inputRef, handleInputRefWarning);
	  const [focused, setFocused] = react.exports.useState(false); // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.

	  react.exports.useEffect(() => {
	    if (!formControlContext && disabled && focused) {
	      setFocused(false); // @ts-ignore

	      onBlur == null ? void 0 : onBlur();
	    }
	  }, [formControlContext, disabled, focused, onBlur]);

	  const handleFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;

	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (formControlContext != null && formControlContext.disabled) {
	      event.stopPropagation();
	      return;
	    }

	    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);

	    if (formControlContext && formControlContext.onFocus) {
	      var _formControlContext$o;

	      formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
	    } else {
	      setFocused(true);
	    }
	  };

	  const handleBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);

	    if (formControlContext && formControlContext.onBlur) {
	      formControlContext.onBlur();
	    } else {
	      setFocused(false);
	    }
	  };

	  const handleChange = otherHandlers => (event, ...args) => {
	    var _formControlContext$o2, _otherHandlers$onChan;

	    if (!isControlled) {
	      const element = event.target || inputRef.current;

	      if (element == null) {
	        throw new Error(`MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
	      }
	    }

	    formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event); // @ts-ignore

	    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
	  };

	  const handleClick = otherHandlers => event => {
	    var _otherHandlers$onClic;

	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }

	    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
	  };

	  const getRootProps = (externalProps = {}) => {
	    // onBlur, onChange and onFocus are forwarded to the input slot.
	    const propsEventHandlers = extractEventHandlers(parameters, ['onBlur', 'onChange', 'onFocus']);

	    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));

	    return _extends({}, externalProps, externalEventHandlers, {
	      onClick: handleClick(externalEventHandlers)
	    });
	  };

	  const getInputProps = (externalProps = {}) => {
	    const propsEventHandlers = {
	      onBlur,
	      onChange,
	      onFocus
	    };

	    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));

	    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {
	      onBlur: handleBlur(externalEventHandlers),
	      onChange: handleChange(externalEventHandlers),
	      onFocus: handleFocus(externalEventHandlers)
	    });

	    return _extends({}, mergedEventHandlers, {
	      'aria-invalid': error || undefined,
	      defaultValue: defaultValue,
	      ref: handleInputRef,
	      value: value,
	      required,
	      disabled
	    });
	  };

	  return {
	    disabled,
	    error,
	    focused,
	    formControlContext,
	    getInputProps,
	    getRootProps,
	    required,
	    value
	  };
	}

	const _excluded$2l = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "maxRows", "minRows", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "rows", "type", "startAdornment", "value"],
	      _excluded2$b = ["ownerState"];
	const InputUnstyled = /*#__PURE__*/react.exports.forwardRef(function InputUnstyled(props, forwardedRef) {
	  var _ref, _components$Input;

	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledby,
	    autoComplete,
	    autoFocus,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    disabled,
	    endAdornment,
	    error,
	    id,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onClick,
	    onChange,
	    onKeyDown,
	    onKeyUp,
	    onFocus,
	    onBlur,
	    placeholder,
	    readOnly,
	    required,
	    rows,
	    type = 'text',
	    startAdornment,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2l);

	  const {
	    getRootProps,
	    getInputProps,
	    focused,
	    formControlContext,
	    error: errorState,
	    disabled: disabledState
	  } = useInput({
	    disabled,
	    defaultValue,
	    error,
	    onBlur,
	    onClick,
	    onChange,
	    onFocus,
	    required,
	    value
	  });

	  const ownerState = _extends({}, props, {
	    disabled: disabledState,
	    error: errorState,
	    focused,
	    formControlContext,
	    multiline,
	    type
	  });

	  const rootStateClasses = {
	    [inputBaseClasses$1.disabled]: disabledState,
	    [inputBaseClasses$1.error]: errorState,
	    [inputBaseClasses$1.focused]: focused,
	    [inputBaseClasses$1.formControl]: Boolean(formControlContext),
	    [inputBaseClasses$1.multiline]: multiline,
	    [inputBaseClasses$1.adornedStart]: Boolean(startAdornment),
	    [inputBaseClasses$1.adornedEnd]: Boolean(endAdornment)
	  };
	  const inputStateClasses = {
	    [inputBaseClasses$1.disabled]: disabledState,
	    [inputBaseClasses$1.multiline]: multiline
	  };
	  const propsToForward = {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledby,
	    autoComplete,
	    autoFocus,
	    id,
	    onKeyDown,
	    onKeyUp,
	    name,
	    placeholder,
	    readOnly,
	    type
	  };
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref: forwardedRef
	    },
	    ownerState,
	    className: [inputBaseClasses$1.root, rootStateClasses, className]
	  });
	  let Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
	  let inputProps = useSlotProps({
	    elementType: Input,
	    getSlotProps: otherHandlers => getInputProps(_extends({}, otherHandlers, propsToForward)),
	    externalSlotProps: componentsProps.input,
	    ownerState,
	    className: [inputBaseClasses$1.input, inputStateClasses]
	  });

	  if (multiline) {
	    var _components$Textarea, _components$Textarea2;

	    const hasHostTextarea = isHostComponent((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');

	    const inputPropsWithoutOwnerState = _objectWithoutPropertiesLoose(inputProps, _excluded2$b);

	    if (rows) {
	      {
	        if (minRows || maxRows) {
	          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
	        }
	      }
	    }

	    inputProps = _extends({}, !hasHostTextarea && {
	      minRows: rows || minRows,
	      maxRows: rows || maxRows
	    }, hasHostTextarea ? inputPropsWithoutOwnerState : inputProps, {
	      type: undefined
	    });
	    Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [startAdornment, /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({}, inputProps)), endAdornment]
	  }));
	});
	InputUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  'aria-describedby': propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  'aria-label': propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Class name applied to the root element.
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType,
	    Textarea: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * Trailing adornment for this input.
	   */
	  endAdornment: propTypes.exports.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.number,

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.number,

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.number,

	  /**
	   * Leading adornment for this input.
	   */
	  startAdornment: propTypes.exports.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any
	} ;

	var ActionTypes; // split declaration and export due to https://github.com/codesandbox/codesandbox-client/issues/6435

	(function (ActionTypes) {
	  ActionTypes["blur"] = "blur";
	  ActionTypes["focus"] = "focus";
	  ActionTypes["keyDown"] = "keyDown";
	  ActionTypes["optionClick"] = "optionClick";
	  ActionTypes["optionHover"] = "optionHover";
	  ActionTypes["optionsChange"] = "optionsChange";
	  ActionTypes["setValue"] = "setValue";
	  ActionTypes["setHighlight"] = "setHighlight";
	  ActionTypes["textNavigation"] = "textNagivation";
	})(ActionTypes || (ActionTypes = {}));

	const pageSize = 5;

	function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
	  if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
	    return -1;
	  }

	  let nextFocus = index;

	  for (;;) {
	    // No valid options found
	    if (!wrapAround && lookupDirection === 'next' && nextFocus === options.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {
	      return -1;
	    }

	    const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);

	    if (nextFocusDisabled) {
	      nextFocus += lookupDirection === 'next' ? 1 : -1;

	      if (wrapAround) {
	        nextFocus = (nextFocus + options.length) % options.length;
	      }
	    } else {
	      return nextFocus;
	    }
	  }
	}

	function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
	  var _options$nextIndex;

	  const maxIndex = options.length - 1;
	  const defaultHighlightedIndex = -1;
	  let nextIndexCandidate;
	  const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex(option => optionComparer(option, previouslyHighlightedOption));

	  if (diff === 'reset') {
	    var _options$defaultHighl;

	    return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
	  }

	  if (diff === 'start') {
	    nextIndexCandidate = 0;
	  } else if (diff === 'end') {
	    nextIndexCandidate = maxIndex;
	  } else {
	    const newIndex = previouslyHighlightedIndex + diff;

	    if (newIndex < 0) {
	      if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
	        nextIndexCandidate = 0;
	      } else {
	        nextIndexCandidate = maxIndex;
	      }
	    } else if (newIndex > maxIndex) {
	      if (!wrapAround || Math.abs(diff) > 1) {
	        nextIndexCandidate = maxIndex;
	      } else {
	        nextIndexCandidate = 0;
	      }
	    } else {
	      nextIndexCandidate = newIndex;
	    }
	  }

	  const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
	  return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
	}

	function handleOptionSelection(option, state, props) {
	  const {
	    multiple,
	    optionComparer = (o, v) => o === v,
	    isOptionDisabled = () => false
	  } = props;
	  const {
	    selectedValue
	  } = state;
	  const optionIndex = props.options.findIndex(o => props.optionComparer(option, o));

	  if (isOptionDisabled(option, optionIndex)) {
	    return state;
	  }

	  if (multiple) {
	    var _ref, _ref2;

	    const selectedValues = (_ref = selectedValue) != null ? _ref : []; // if the option is already selected, remove it from the selection, otherwise add it

	    const newSelectedValues = selectedValues.some(sv => optionComparer(sv, option)) ? selectedValue.filter(v => !optionComparer(v, option)) : [...((_ref2 = selectedValue) != null ? _ref2 : []), option];
	    return {
	      selectedValue: newSelectedValues,
	      highlightedValue: option
	    };
	  }

	  if (selectedValue != null && optionComparer(option, selectedValue)) {
	    return state;
	  }

	  return {
	    selectedValue: option,
	    highlightedValue: option
	  };
	}

	function handleKeyDown(event, state, props) {
	  const {
	    options,
	    isOptionDisabled,
	    disableListWrap,
	    disabledItemsFocusable,
	    optionComparer
	  } = props;

	  const moveHighlight = (diff, direction, wrapAround) => {
	    return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround, optionComparer);
	  };

	  switch (event.key) {
	    case 'Home':
	      return _extends({}, state, {
	        highlightedValue: moveHighlight('start', 'next', false)
	      });

	    case 'End':
	      return _extends({}, state, {
	        highlightedValue: moveHighlight('end', 'previous', false)
	      });

	    case 'PageUp':
	      return _extends({}, state, {
	        highlightedValue: moveHighlight(-pageSize, 'previous', false)
	      });

	    case 'PageDown':
	      return _extends({}, state, {
	        highlightedValue: moveHighlight(pageSize, 'next', false)
	      });

	    case 'ArrowUp':
	      // TODO: extend current selection with Shift modifier
	      return _extends({}, state, {
	        highlightedValue: moveHighlight(-1, 'previous', !(disableListWrap != null ? disableListWrap : false))
	      });

	    case 'ArrowDown':
	      // TODO: extend current selection with Shift modifier
	      return _extends({}, state, {
	        highlightedValue: moveHighlight(1, 'next', !(disableListWrap != null ? disableListWrap : false))
	      });

	    case 'Enter':
	    case ' ':
	      if (state.highlightedValue === null) {
	        return state;
	      }

	      return handleOptionSelection(state.highlightedValue, state, props);
	  }

	  return state;
	}

	function handleBlur(state) {
	  return _extends({}, state, {
	    highlightedValue: null
	  });
	}

	const textCriteriaMatches$1 = (nextFocus, searchString, stringifyOption) => {
	  var _stringifyOption;

	  const text = (_stringifyOption = stringifyOption(nextFocus)) == null ? void 0 : _stringifyOption.trim().toLowerCase();

	  if (!text || text.length === 0) {
	    // Make option not navigable if stringification fails or results in empty string.
	    return false;
	  }

	  return text.indexOf(searchString) === 0;
	};

	function handleTextNavigation(state, searchString, props) {
	  const {
	    options,
	    isOptionDisabled,
	    disableListWrap,
	    disabledItemsFocusable,
	    optionComparer,
	    optionStringifier
	  } = props;

	  const moveHighlight = previouslyHighlightedOption => {
	    return getNewHighlightedOption(options, previouslyHighlightedOption, 1, 'next', disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, !(disableListWrap != null ? disableListWrap : false), optionComparer);
	  };

	  const startWithCurrentOption = searchString.length > 1;
	  let nextOption = startWithCurrentOption ? state.highlightedValue : moveHighlight(state.highlightedValue); // use `for` instead of `while` prevent infinite loop

	  for (let index = 0; index < options.length; index += 1) {
	    // Return un-mutated state if looped back to the currently highlighted value
	    if (!nextOption || !startWithCurrentOption && state.highlightedValue === nextOption) {
	      return state;
	    }

	    if (textCriteriaMatches$1(nextOption, searchString, optionStringifier) && (!isOptionDisabled(nextOption, options.indexOf(nextOption)) || disabledItemsFocusable)) {
	      // The nextOption is the element to be highlighted
	      return _extends({}, state, {
	        highlightedValue: nextOption
	      });
	    } // Move to the next element.


	    nextOption = moveHighlight(nextOption);
	  } // No option match text search criteria


	  return state;
	}

	function handleOptionsChange(options, previousOptions, state, props) {
	  var _options$find, _options$find2;

	  const {
	    multiple,
	    optionComparer
	  } = props;
	  const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find(option => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;

	  if (multiple) {
	    var _ref3;

	    // exclude selected values that are no longer in the options
	    const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
	    const newSelectedValues = selectedValues.filter(selectedValue => options.some(option => optionComparer(option, selectedValue)));
	    return {
	      highlightedValue: newHighlightedOption,
	      selectedValue: newSelectedValues
	    };
	  }

	  const newSelectedValue = (_options$find2 = options.find(option => optionComparer(option, state.selectedValue))) != null ? _options$find2 : null;
	  return {
	    highlightedValue: newHighlightedOption,
	    selectedValue: newSelectedValue
	  };
	}

	function defaultListboxReducer(state, action) {
	  const {
	    type
	  } = action;

	  switch (type) {
	    case ActionTypes.keyDown:
	      return handleKeyDown(action.event, state, action.props);

	    case ActionTypes.optionClick:
	      return handleOptionSelection(action.option, state, action.props);

	    case ActionTypes.blur:
	      return handleBlur(state);

	    case ActionTypes.setValue:
	      return _extends({}, state, {
	        selectedValue: action.value
	      });

	    case ActionTypes.setHighlight:
	      return _extends({}, state, {
	        highlightedValue: action.highlight
	      });

	    case ActionTypes.textNavigation:
	      return handleTextNavigation(state, action.searchString, action.props);

	    case ActionTypes.optionsChange:
	      return handleOptionsChange(action.options, action.previousOptions, state, action.props);

	    default:
	      return state;
	  }
	}

	/**
	 * Gets the current state. If the selectedValue is controlled,
	 * the `value` prop is the source of truth instead of the internal state.
	 */

	function getControlledState(internalState, props) {
	  if (props.value !== undefined) {
	    return _extends({}, internalState, {
	      selectedValue: props.value
	    });
	  }

	  return internalState;
	}

	function areOptionsEqual(option1, option2, optionComparer) {
	  if (option1 === option2) {
	    return true;
	  }

	  if (option1 === null || option2 === null) {
	    return false;
	  }

	  return optionComparer(option1, option2);
	}
	/**
	 * Triggers change event handlers when reducer returns changed state.
	 */


	function useStateChangeDetection(nextState, internalPreviousState, propsRef) {
	  react.exports.useEffect(() => {
	    if (!propsRef.current) {
	      return;
	    }

	    const previousState = getControlledState(internalPreviousState, propsRef.current);
	    const {
	      multiple,
	      optionComparer
	    } = propsRef.current;

	    if (multiple) {
	      var _previousState$select;

	      const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];
	      const nextSelectedValues = nextState.selectedValue;
	      const onChange = propsRef.current.onChange;

	      if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {
	        onChange == null ? void 0 : onChange(nextSelectedValues);
	      }
	    } else {
	      const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;
	      const nextSelectedValue = nextState.selectedValue;
	      const onChange = propsRef.current.onChange;

	      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {
	        onChange == null ? void 0 : onChange(nextSelectedValue);
	      }
	    }
	  }, [nextState.selectedValue, internalPreviousState, propsRef]);
	  react.exports.useEffect(() => {
	    if (!propsRef.current) {
	      return;
	    } // Fires the highlightChange event when reducer returns changed `highlightedValue`.


	    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {
	      var _propsRef$current, _propsRef$current$onH;

	      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, nextState.highlightedValue);
	    }
	  }, [nextState.highlightedValue, internalPreviousState.highlightedValue, propsRef]);
	}

	function useControllableReducer(internalReducer, externalReducer, props) {
	  var _ref;

	  const {
	    value,
	    defaultValue
	  } = props;
	  const propsRef = react.exports.useRef(props);
	  propsRef.current = props;
	  const initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;
	  const initalState = {
	    highlightedValue: null,
	    selectedValue: initialSelectedValue
	  };
	  const combinedReducer = react.exports.useCallback((state, action) => {
	    if (externalReducer) {
	      return externalReducer(getControlledState(state, propsRef.current), action);
	    }

	    return internalReducer(getControlledState(state, propsRef.current), action);
	  }, [externalReducer, internalReducer, propsRef]);
	  const [nextState, dispatch] = react.exports.useReducer(combinedReducer, initalState);
	  const previousState = react.exports.useRef(initalState);
	  react.exports.useEffect(() => {
	    previousState.current = nextState;
	  }, [previousState, nextState]);
	  useStateChangeDetection(nextState, previousState.current, propsRef);
	  return [getControlledState(nextState, propsRef.current), dispatch];
	}

	const TEXT_NAVIGATION_RESET_TIMEOUT = 500; // milliseconds

	const defaultOptionComparer = (optionA, optionB) => optionA === optionB;

	const defaultIsOptionDisabled = () => false;

	const defaultOptionStringifier$1 = option => typeof option === 'string' ? option : String(option);

	function useListbox(props) {
	  var _props$optionIdGenera, _options$highlightedI;

	  const {
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    focusManagement = 'activeDescendant',
	    id: idProp,
	    isOptionDisabled = defaultIsOptionDisabled,
	    listboxRef: externalListboxRef,
	    multiple = false,
	    optionComparer = defaultOptionComparer,
	    optionStringifier = defaultOptionStringifier$1,
	    options,
	    stateReducer: externalReducer
	  } = props;
	  const id = useId(idProp);

	  function defaultIdGenerator(_, index) {
	    return `${id}-option-${index}`;
	  }

	  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;

	  const propsWithDefaults = _extends({}, props, {
	    disabledItemsFocusable,
	    disableListWrap,
	    focusManagement,
	    isOptionDisabled,
	    multiple,
	    optionComparer,
	    optionStringifier
	  });

	  const listboxRef = react.exports.useRef(null);
	  const handleRef = useForkRef(externalListboxRef, listboxRef);
	  const textCriteriaRef = react.exports.useRef({
	    searchString: '',
	    lastTime: null
	  });
	  const [{
	    highlightedValue,
	    selectedValue
	  }, dispatch] = useControllableReducer(defaultListboxReducer, externalReducer, propsWithDefaults);
	  const highlightedIndex = react.exports.useMemo(() => {
	    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));
	  }, [highlightedValue, options, optionComparer]);
	  const previousOptions = react.exports.useRef([]);
	  react.exports.useEffect(() => {
	    if (areArraysEqual(previousOptions.current, options, optionComparer)) {
	      return;
	    }

	    dispatch({
	      type: ActionTypes.optionsChange,
	      options,
	      previousOptions: previousOptions.current,
	      props: propsWithDefaults
	    });
	    previousOptions.current = options; // No need to re-run this effect if props change
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [options, optionComparer, dispatch]);
	  const setSelectedValue = react.exports.useCallback(option => {
	    dispatch({
	      type: ActionTypes.setValue,
	      value: option
	    });
	  }, [dispatch]);
	  const setHighlightedValue = react.exports.useCallback(option => {
	    dispatch({
	      type: ActionTypes.setHighlight,
	      highlight: option
	    });
	  }, [dispatch]);

	  const createHandleOptionClick = (option, other) => event => {
	    var _other$onClick;

	    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    event.preventDefault();
	    dispatch({
	      type: ActionTypes.optionClick,
	      option,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const createHandleOptionMouseOver = (option, other) => event => {
	    var _other$onMouseOver;

	    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    dispatch({
	      type: ActionTypes.optionHover,
	      option,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const createHandleKeyDown = other => event => {
	    var _other$onKeyDown;

	    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];

	    if (focusManagement === 'activeDescendant') {
	      // When the child element is focused using the activeDescendant attribute,
	      // the listbox handles keyboard events on its behalf.
	      // We have to `preventDefault()` is this case to prevent the browser from
	      // scrolling the view when space is pressed or submitting forms when enter is pressed.
	      keysToPreventDefault.push(' ', 'Enter');
	    }

	    if (keysToPreventDefault.includes(event.key)) {
	      event.preventDefault();
	    }

	    dispatch({
	      type: ActionTypes.keyDown,
	      event,
	      props: propsWithDefaults
	    }); // Handle text navigation

	    if (event.key.length === 1 && event.key !== ' ') {
	      const textCriteria = textCriteriaRef.current;
	      const lowerKey = event.key.toLowerCase();
	      const currentTime = performance.now();

	      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
	        textCriteria.searchString = lowerKey;
	      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
	        // If there is just one character in the buffer and the key is the same, do not append
	        textCriteria.searchString += lowerKey;
	      }

	      textCriteria.lastTime = currentTime;
	      dispatch({
	        type: ActionTypes.textNavigation,
	        searchString: textCriteria.searchString,
	        props: propsWithDefaults
	      });
	    }
	  };

	  const createHandleBlur = other => event => {
	    var _other$onBlur, _listboxRef$current;

	    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
	      // focus is within the listbox
	      return;
	    }

	    dispatch({
	      type: ActionTypes.blur,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const getRootProps = (otherHandlers = {}) => {
	    return _extends({}, otherHandlers, {
	      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,
	      id,
	      onBlur: createHandleBlur(otherHandlers),
	      onKeyDown: createHandleKeyDown(otherHandlers),
	      role: 'listbox',
	      tabIndex: focusManagement === 'DOM' ? -1 : 0,
	      ref: handleRef
	    });
	  };

	  const getOptionState = option => {
	    let selected;
	    const index = options.findIndex(opt => optionComparer(opt, option));

	    if (multiple) {
	      var _ref;

	      selected = ((_ref = selectedValue) != null ? _ref : []).some(value => value != null && optionComparer(option, value));
	    } else {
	      selected = optionComparer(option, selectedValue);
	    }

	    const disabled = isOptionDisabled(option, index);
	    return {
	      selected,
	      disabled,
	      highlighted: highlightedIndex === index
	    };
	  };

	  const getOptionTabIndex = optionState => {
	    if (focusManagement === 'activeDescendant') {
	      return undefined;
	    }

	    if (!optionState.highlighted) {
	      return -1;
	    }

	    if (optionState.disabled && !disabledItemsFocusable) {
	      return -1;
	    }

	    return 0;
	  };

	  const getOptionProps = (option, otherHandlers = {}) => {
	    const optionState = getOptionState(option);
	    const index = options.findIndex(opt => optionComparer(opt, option));
	    return _extends({}, otherHandlers, {
	      'aria-disabled': optionState.disabled || undefined,
	      'aria-selected': optionState.selected,
	      tabIndex: getOptionTabIndex(optionState),
	      id: optionIdGenerator(option, index),
	      onClick: createHandleOptionClick(option, otherHandlers),
	      onMouseOver: createHandleOptionMouseOver(option, otherHandlers),
	      role: 'option'
	    });
	  };

	  react.exports.useDebugValue({
	    highlightedOption: options[highlightedIndex],
	    selectedOption: selectedValue
	  });
	  return {
	    getRootProps,
	    getOptionProps,
	    getOptionState,
	    highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null,
	    selectedOption: selectedValue,
	    setSelectedValue,
	    setHighlightedValue
	  };
	}

	const MenuUnstyledContext = /*#__PURE__*/react.exports.createContext(null);
	MenuUnstyledContext.displayName = 'MenuUnstyledContext';

	function getMenuUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuUnstyled', slot);
	}
	generateUtilityClasses('MuiMenuUnstyled', ['root', 'listbox', 'expanded']);

	function stateReducer(state, action) {
	  if (action.type === ActionTypes.blur || action.type === ActionTypes.optionHover || action.type === ActionTypes.setValue) {
	    return state;
	  }

	  const newState = defaultListboxReducer(state, action);

	  if (action.type !== ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {
	    return _extends({}, newState, {
	      highlightedValue: action.props.options[0]
	    });
	  }

	  return newState;
	}

	function useMenu(parameters = {}) {
	  const {
	    listboxRef: listboxRefProp,
	    open = false,
	    onClose,
	    listboxId
	  } = parameters;
	  const [menuItems, setMenuItems] = react.exports.useState({});
	  const listboxRef = react.exports.useRef(null);
	  const handleRef = useForkRef(listboxRef, listboxRefProp);
	  const registerItem = react.exports.useCallback((id, metadata) => {
	    setMenuItems(previousState => {
	      const newState = _extends({}, previousState);

	      newState[id] = metadata;
	      return newState;
	    });
	  }, []);
	  const unregisterItem = react.exports.useCallback(id => {
	    setMenuItems(previousState => {
	      const newState = _extends({}, previousState);

	      delete newState[id];
	      return newState;
	    });
	  }, []);
	  const {
	    getOptionState,
	    getOptionProps,
	    getRootProps,
	    highlightedOption,
	    setHighlightedValue: setListboxHighlight
	  } = useListbox({
	    options: Object.keys(menuItems),
	    optionStringifier: id => {
	      var _menuItems$id$ref$cur;

	      return menuItems[id].label || ((_menuItems$id$ref$cur = menuItems[id].ref.current) == null ? void 0 : _menuItems$id$ref$cur.innerText);
	    },
	    isOptionDisabled: id => {
	      var _menuItems$id;

	      return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
	    },
	    listboxRef: handleRef,
	    focusManagement: 'DOM',
	    id: listboxId,
	    stateReducer,
	    disabledItemsFocusable: true
	  });
	  const highlightFirstItem = react.exports.useCallback(() => {
	    if (Object.keys(menuItems).length > 0) {
	      setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
	    }
	  }, [menuItems, setListboxHighlight]);
	  const highlightLastItem = react.exports.useCallback(() => {
	    if (Object.keys(menuItems).length > 0) {
	      setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
	    }
	  }, [menuItems, setListboxHighlight]);
	  react.exports.useEffect(() => {
	    if (!open) {
	      highlightFirstItem();
	    }
	  }, [open, highlightFirstItem]);

	  const createHandleKeyDown = otherHandlers => e => {
	    var _otherHandlers$onKeyD;

	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);

	    if (e.defaultPrevented) {
	      return;
	    }

	    if (e.key === 'Escape' && open) {
	      onClose == null ? void 0 : onClose();
	    }
	  };

	  const createHandleBlur = otherHandlers => e => {
	    var _otherHandlers$onBlur, _listboxRef$current;

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, e);

	    if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {
	      onClose == null ? void 0 : onClose();
	    }
	  };

	  react.exports.useEffect(() => {
	    var _listboxRef$current2;

	    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)
	    if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
	      var _menuItems$highlighte, _menuItems$highlighte2;

	      menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();
	    }
	  }, [highlightedOption, menuItems]);

	  const getListboxProps = (otherHandlers = {}) => {
	    const rootProps = getRootProps(_extends({}, otherHandlers, {
	      onBlur: createHandleBlur(otherHandlers),
	      onKeyDown: createHandleKeyDown(otherHandlers)
	    }));
	    return _extends({}, otherHandlers, rootProps, {
	      role: 'menu'
	    });
	  };

	  const getItemState = id => {
	    const {
	      disabled,
	      highlighted
	    } = getOptionState(id);
	    return {
	      disabled,
	      highlighted
	    };
	  };

	  react.exports.useDebugValue({
	    menuItems,
	    highlightedOption
	  });
	  return {
	    registerItem,
	    unregisterItem,
	    menuItems,
	    getListboxProps,
	    getItemState,
	    getItemProps: getOptionProps,
	    highlightedOption,
	    highlightFirstItem,
	    highlightLastItem
	  };
	}

	var top = 'top';
	var bottom = 'bottom';
	var right = 'right';
	var left = 'left';
	var auto = 'auto';
	var basePlacements = [top, bottom, right, left];
	var start = 'start';
	var end = 'end';
	var clippingParents = 'clippingParents';
	var viewport = 'viewport';
	var popper = 'popper';
	var reference = 'reference';
	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
	  return acc.concat([placement + "-" + start, placement + "-" + end]);
	}, []);
	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
	}, []); // modifiers that need to read the DOM

	var beforeRead = 'beforeRead';
	var read = 'read';
	var afterRead = 'afterRead'; // pure-logic modifiers

	var beforeMain = 'beforeMain';
	var main = 'main';
	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

	var beforeWrite = 'beforeWrite';
	var write = 'write';
	var afterWrite = 'afterWrite';
	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

	function getNodeName(element) {
	  return element ? (element.nodeName || '').toLowerCase() : null;
	}

	function getWindow(node) {
	  if (node == null) {
	    return window;
	  }

	  if (node.toString() !== '[object Window]') {
	    var ownerDocument = node.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView || window : window;
	  }

	  return node;
	}

	function isElement(node) {
	  var OwnElement = getWindow(node).Element;
	  return node instanceof OwnElement || node instanceof Element;
	}

	function isHTMLElement(node) {
	  var OwnElement = getWindow(node).HTMLElement;
	  return node instanceof OwnElement || node instanceof HTMLElement;
	}

	function isShadowRoot(node) {
	  // IE 11 has no ShadowRoot
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }

	  var OwnElement = getWindow(node).ShadowRoot;
	  return node instanceof OwnElement || node instanceof ShadowRoot;
	}

	// and applies them to the HTMLElements such as popper and arrow

	function applyStyles(_ref) {
	  var state = _ref.state;
	  Object.keys(state.elements).forEach(function (name) {
	    var style = state.styles[name] || {};
	    var attributes = state.attributes[name] || {};
	    var element = state.elements[name]; // arrow is optional + virtual elements

	    if (!isHTMLElement(element) || !getNodeName(element)) {
	      return;
	    } // Flow doesn't support to extend this property, but it's the most
	    // effective way to apply styles to an HTMLElement
	    // $FlowFixMe[cannot-write]


	    Object.assign(element.style, style);
	    Object.keys(attributes).forEach(function (name) {
	      var value = attributes[name];

	      if (value === false) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, value === true ? '' : value);
	      }
	    });
	  });
	}

	function effect$2(_ref2) {
	  var state = _ref2.state;
	  var initialStyles = {
	    popper: {
	      position: state.options.strategy,
	      left: '0',
	      top: '0',
	      margin: '0'
	    },
	    arrow: {
	      position: 'absolute'
	    },
	    reference: {}
	  };
	  Object.assign(state.elements.popper.style, initialStyles.popper);
	  state.styles = initialStyles;

	  if (state.elements.arrow) {
	    Object.assign(state.elements.arrow.style, initialStyles.arrow);
	  }

	  return function () {
	    Object.keys(state.elements).forEach(function (name) {
	      var element = state.elements[name];
	      var attributes = state.attributes[name] || {};
	      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

	      var style = styleProperties.reduce(function (style, property) {
	        style[property] = '';
	        return style;
	      }, {}); // arrow is optional + virtual elements

	      if (!isHTMLElement(element) || !getNodeName(element)) {
	        return;
	      }

	      Object.assign(element.style, style);
	      Object.keys(attributes).forEach(function (attribute) {
	        element.removeAttribute(attribute);
	      });
	    });
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var applyStyles$1 = {
	  name: 'applyStyles',
	  enabled: true,
	  phase: 'write',
	  fn: applyStyles,
	  effect: effect$2,
	  requires: ['computeStyles']
	};

	function getBasePlacement(placement) {
	  return placement.split('-')[0];
	}

	var max = Math.max;
	var min = Math.min;
	var round$2 = Math.round;

	function getBoundingClientRect(element, includeScale) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }

	  var rect = element.getBoundingClientRect();
	  var scaleX = 1;
	  var scaleY = 1;

	  if (isHTMLElement(element) && includeScale) {
	    var offsetHeight = element.offsetHeight;
	    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
	    // Fallback to 1 in case both values are `0`

	    if (offsetWidth > 0) {
	      scaleX = round$2(rect.width) / offsetWidth || 1;
	    }

	    if (offsetHeight > 0) {
	      scaleY = round$2(rect.height) / offsetHeight || 1;
	    }
	  }

	  return {
	    width: rect.width / scaleX,
	    height: rect.height / scaleY,
	    top: rect.top / scaleY,
	    right: rect.right / scaleX,
	    bottom: rect.bottom / scaleY,
	    left: rect.left / scaleX,
	    x: rect.left / scaleX,
	    y: rect.top / scaleY
	  };
	}

	// means it doesn't take into account transforms.

	function getLayoutRect(element) {
	  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
	  // Fixes https://github.com/popperjs/popper-core/issues/1223

	  var width = element.offsetWidth;
	  var height = element.offsetHeight;

	  if (Math.abs(clientRect.width - width) <= 1) {
	    width = clientRect.width;
	  }

	  if (Math.abs(clientRect.height - height) <= 1) {
	    height = clientRect.height;
	  }

	  return {
	    x: element.offsetLeft,
	    y: element.offsetTop,
	    width: width,
	    height: height
	  };
	}

	function contains(parent, child) {
	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

	  if (parent.contains(child)) {
	    return true;
	  } // then fallback to custom implementation with Shadow DOM support
	  else if (rootNode && isShadowRoot(rootNode)) {
	      var next = child;

	      do {
	        if (next && parent.isSameNode(next)) {
	          return true;
	        } // $FlowFixMe[prop-missing]: need a better way to handle this...


	        next = next.parentNode || next.host;
	      } while (next);
	    } // Give up, the result is false


	  return false;
	}

	function getComputedStyle(element) {
	  return getWindow(element).getComputedStyle(element);
	}

	function isTableElement(element) {
	  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
	}

	function getDocumentElement(element) {
	  // $FlowFixMe[incompatible-return]: assume body is always available
	  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
	  element.document) || window.document).documentElement;
	}

	function getParentNode(element) {
	  if (getNodeName(element) === 'html') {
	    return element;
	  }

	  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
	    // $FlowFixMe[incompatible-return]
	    // $FlowFixMe[prop-missing]
	    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
	    element.parentNode || ( // DOM Element detected
	    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
	    getDocumentElement(element) // fallback

	  );
	}

	function getTrueOffsetParent(element) {
	  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
	  getComputedStyle(element).position === 'fixed') {
	    return null;
	  }

	  return element.offsetParent;
	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
	// return the containing block


	function getContainingBlock(element) {
	  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
	  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

	  if (isIE && isHTMLElement(element)) {
	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
	    var elementCss = getComputedStyle(element);

	    if (elementCss.position === 'fixed') {
	      return null;
	    }
	  }

	  var currentNode = getParentNode(element);

	  if (isShadowRoot(currentNode)) {
	    currentNode = currentNode.host;
	  }

	  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
	    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
	    // create a containing block.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
	      return currentNode;
	    } else {
	      currentNode = currentNode.parentNode;
	    }
	  }

	  return null;
	} // Gets the closest ancestor positioned element. Handles some edge cases,
	// such as table ancestors and cross browser bugs.


	function getOffsetParent(element) {
	  var window = getWindow(element);
	  var offsetParent = getTrueOffsetParent(element);

	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
	    offsetParent = getTrueOffsetParent(offsetParent);
	  }

	  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
	    return window;
	  }

	  return offsetParent || getContainingBlock(element) || window;
	}

	function getMainAxisFromPlacement(placement) {
	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
	}

	function within(min$1, value, max$1) {
	  return max(min$1, min(value, max$1));
	}
	function withinMaxClamp(min, value, max) {
	  var v = within(min, value, max);
	  return v > max ? max : v;
	}

	function getFreshSideObject() {
	  return {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	}

	function mergePaddingObject(paddingObject) {
	  return Object.assign({}, getFreshSideObject(), paddingObject);
	}

	function expandToHashMap(value, keys) {
	  return keys.reduce(function (hashMap, key) {
	    hashMap[key] = value;
	    return hashMap;
	  }, {});
	}

	var toPaddingObject = function toPaddingObject(padding, state) {
	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : padding;
	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	};

	function arrow(_ref) {
	  var _state$modifiersData$;

	  var state = _ref.state,
	      name = _ref.name,
	      options = _ref.options;
	  var arrowElement = state.elements.arrow;
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var basePlacement = getBasePlacement(state.placement);
	  var axis = getMainAxisFromPlacement(basePlacement);
	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
	  var len = isVertical ? 'height' : 'width';

	  if (!arrowElement || !popperOffsets) {
	    return;
	  }

	  var paddingObject = toPaddingObject(options.padding, state);
	  var arrowRect = getLayoutRect(arrowElement);
	  var minProp = axis === 'y' ? top : left;
	  var maxProp = axis === 'y' ? bottom : right;
	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
	  var arrowOffsetParent = getOffsetParent(arrowElement);
	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
	  // outside of the popper bounds

	  var min = paddingObject[minProp];
	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

	  var axisProp = axis;
	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
	}

	function effect$1(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options;
	  var _options$element = options.element,
	      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

	  if (arrowElement == null) {
	    return;
	  } // CSS selector


	  if (typeof arrowElement === 'string') {
	    arrowElement = state.elements.popper.querySelector(arrowElement);

	    if (!arrowElement) {
	      return;
	    }
	  }

	  {
	    if (!isHTMLElement(arrowElement)) {
	      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
	    }
	  }

	  if (!contains(state.elements.popper, arrowElement)) {
	    {
	      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
	    }

	    return;
	  }

	  state.elements.arrow = arrowElement;
	} // eslint-disable-next-line import/no-unused-modules


	var arrow$1 = {
	  name: 'arrow',
	  enabled: true,
	  phase: 'main',
	  fn: arrow,
	  effect: effect$1,
	  requires: ['popperOffsets'],
	  requiresIfExists: ['preventOverflow']
	};

	function getVariation(placement) {
	  return placement.split('-')[1];
	}

	var unsetSides = {
	  top: 'auto',
	  right: 'auto',
	  bottom: 'auto',
	  left: 'auto'
	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
	// Zooming can change the DPR, but it seems to report a value that will
	// cleanly divide the values into the appropriate subpixels.

	function roundOffsetsByDPR(_ref) {
	  var x = _ref.x,
	      y = _ref.y;
	  var win = window;
	  var dpr = win.devicePixelRatio || 1;
	  return {
	    x: round$2(x * dpr) / dpr || 0,
	    y: round$2(y * dpr) / dpr || 0
	  };
	}

	function mapToStyles(_ref2) {
	  var _Object$assign2;

	  var popper = _ref2.popper,
	      popperRect = _ref2.popperRect,
	      placement = _ref2.placement,
	      variation = _ref2.variation,
	      offsets = _ref2.offsets,
	      position = _ref2.position,
	      gpuAcceleration = _ref2.gpuAcceleration,
	      adaptive = _ref2.adaptive,
	      roundOffsets = _ref2.roundOffsets,
	      isFixed = _ref2.isFixed;
	  var _offsets$x = offsets.x,
	      x = _offsets$x === void 0 ? 0 : _offsets$x,
	      _offsets$y = offsets.y,
	      y = _offsets$y === void 0 ? 0 : _offsets$y;

	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref3.x;
	  y = _ref3.y;
	  var hasX = offsets.hasOwnProperty('x');
	  var hasY = offsets.hasOwnProperty('y');
	  var sideX = left;
	  var sideY = top;
	  var win = window;

	  if (adaptive) {
	    var offsetParent = getOffsetParent(popper);
	    var heightProp = 'clientHeight';
	    var widthProp = 'clientWidth';

	    if (offsetParent === getWindow(popper)) {
	      offsetParent = getDocumentElement(popper);

	      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
	        heightProp = 'scrollHeight';
	        widthProp = 'scrollWidth';
	      }
	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


	    offsetParent = offsetParent;

	    if (placement === top || (placement === left || placement === right) && variation === end) {
	      sideY = bottom;
	      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
	      offsetParent[heightProp];
	      y -= offsetY - popperRect.height;
	      y *= gpuAcceleration ? 1 : -1;
	    }

	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
	      sideX = right;
	      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
	      offsetParent[widthProp];
	      x -= offsetX - popperRect.width;
	      x *= gpuAcceleration ? 1 : -1;
	    }
	  }

	  var commonStyles = Object.assign({
	    position: position
	  }, adaptive && unsetSides);

	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref4.x;
	  y = _ref4.y;

	  if (gpuAcceleration) {
	    var _Object$assign;

	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
	  }

	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
	}

	function computeStyles(_ref5) {
	  var state = _ref5.state,
	      options = _ref5.options;
	  var _options$gpuAccelerat = options.gpuAcceleration,
	      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
	      _options$adaptive = options.adaptive,
	      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
	      _options$roundOffsets = options.roundOffsets,
	      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

	  {
	    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

	    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
	      return transitionProperty.indexOf(property) >= 0;
	    })) {
	      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
	    }
	  }

	  var commonStyles = {
	    placement: getBasePlacement(state.placement),
	    variation: getVariation(state.placement),
	    popper: state.elements.popper,
	    popperRect: state.rects.popper,
	    gpuAcceleration: gpuAcceleration,
	    isFixed: state.options.strategy === 'fixed'
	  };

	  if (state.modifiersData.popperOffsets != null) {
	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.popperOffsets,
	      position: state.options.strategy,
	      adaptive: adaptive,
	      roundOffsets: roundOffsets
	    })));
	  }

	  if (state.modifiersData.arrow != null) {
	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.arrow,
	      position: 'absolute',
	      adaptive: false,
	      roundOffsets: roundOffsets
	    })));
	  }

	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-placement': state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var computeStyles$1 = {
	  name: 'computeStyles',
	  enabled: true,
	  phase: 'beforeWrite',
	  fn: computeStyles,
	  data: {}
	};

	var passive = {
	  passive: true
	};

	function effect(_ref) {
	  var state = _ref.state,
	      instance = _ref.instance,
	      options = _ref.options;
	  var _options$scroll = options.scroll,
	      scroll = _options$scroll === void 0 ? true : _options$scroll,
	      _options$resize = options.resize,
	      resize = _options$resize === void 0 ? true : _options$resize;
	  var window = getWindow(state.elements.popper);
	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

	  if (scroll) {
	    scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', instance.update, passive);
	    });
	  }

	  if (resize) {
	    window.addEventListener('resize', instance.update, passive);
	  }

	  return function () {
	    if (scroll) {
	      scrollParents.forEach(function (scrollParent) {
	        scrollParent.removeEventListener('scroll', instance.update, passive);
	      });
	    }

	    if (resize) {
	      window.removeEventListener('resize', instance.update, passive);
	    }
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var eventListeners = {
	  name: 'eventListeners',
	  enabled: true,
	  phase: 'write',
	  fn: function fn() {},
	  effect: effect,
	  data: {}
	};

	var hash$1 = {
	  left: 'right',
	  right: 'left',
	  bottom: 'top',
	  top: 'bottom'
	};
	function getOppositePlacement(placement) {
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash$1[matched];
	  });
	}

	var hash = {
	  start: 'end',
	  end: 'start'
	};
	function getOppositeVariationPlacement(placement) {
	  return placement.replace(/start|end/g, function (matched) {
	    return hash[matched];
	  });
	}

	function getWindowScroll(node) {
	  var win = getWindow(node);
	  var scrollLeft = win.pageXOffset;
	  var scrollTop = win.pageYOffset;
	  return {
	    scrollLeft: scrollLeft,
	    scrollTop: scrollTop
	  };
	}

	function getWindowScrollBarX(element) {
	  // If <html> has a CSS width greater than the viewport, then this will be
	  // incorrect for RTL.
	  // Popper 1 is broken in this case and never had a bug report so let's assume
	  // it's not an issue. I don't think anyone ever specifies width on <html>
	  // anyway.
	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
	  // this (e.g. Edge 2019, IE11, Safari)
	  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
	}

	function getViewportRect(element) {
	  var win = getWindow(element);
	  var html = getDocumentElement(element);
	  var visualViewport = win.visualViewport;
	  var width = html.clientWidth;
	  var height = html.clientHeight;
	  var x = 0;
	  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
	  // can be obscured underneath it.
	  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
	  // if it isn't open, so if this isn't available, the popper will be detected
	  // to overflow the bottom of the screen too early.

	  if (visualViewport) {
	    width = visualViewport.width;
	    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
	    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
	    // errors due to floating point numbers, so we need to check precision.
	    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
	    // Feature detection fails in mobile emulation mode in Chrome.
	    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
	    // 0.001
	    // Fallback here: "Not Safari" userAgent

	    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
	      x = visualViewport.offsetLeft;
	      y = visualViewport.offsetTop;
	    }
	  }

	  return {
	    width: width,
	    height: height,
	    x: x + getWindowScrollBarX(element),
	    y: y
	  };
	}

	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

	function getDocumentRect(element) {
	  var _element$ownerDocumen;

	  var html = getDocumentElement(element);
	  var winScroll = getWindowScroll(element);
	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
	  var y = -winScroll.scrollTop;

	  if (getComputedStyle(body || html).direction === 'rtl') {
	    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
	  }

	  return {
	    width: width,
	    height: height,
	    x: x,
	    y: y
	  };
	}

	function isScrollParent(element) {
	  // Firefox wants us to check `-x` and `-y` variations as well
	  var _getComputedStyle = getComputedStyle(element),
	      overflow = _getComputedStyle.overflow,
	      overflowX = _getComputedStyle.overflowX,
	      overflowY = _getComputedStyle.overflowY;

	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
	}

	function getScrollParent(node) {
	  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
	    // $FlowFixMe[incompatible-return]: assume body is always available
	    return node.ownerDocument.body;
	  }

	  if (isHTMLElement(node) && isScrollParent(node)) {
	    return node;
	  }

	  return getScrollParent(getParentNode(node));
	}

	/*
	given a DOM element, return the list of all scroll parents, up the list of ancesors
	until we get to the top window object. This list is what we attach scroll listeners
	to, because if any of these parent elements scroll, we'll need to re-calculate the
	reference element's position.
	*/

	function listScrollParents(element, list) {
	  var _element$ownerDocumen;

	  if (list === void 0) {
	    list = [];
	  }

	  var scrollParent = getScrollParent(element);
	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
	  var win = getWindow(scrollParent);
	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
	  var updatedList = list.concat(target);
	  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
	  updatedList.concat(listScrollParents(getParentNode(target)));
	}

	function rectToClientRect(rect) {
	  return Object.assign({}, rect, {
	    left: rect.x,
	    top: rect.y,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  });
	}

	function getInnerBoundingClientRect(element) {
	  var rect = getBoundingClientRect(element);
	  rect.top = rect.top + element.clientTop;
	  rect.left = rect.left + element.clientLeft;
	  rect.bottom = rect.top + element.clientHeight;
	  rect.right = rect.left + element.clientWidth;
	  rect.width = element.clientWidth;
	  rect.height = element.clientHeight;
	  rect.x = rect.left;
	  rect.y = rect.top;
	  return rect;
	}

	function getClientRectFromMixedType(element, clippingParent) {
	  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
	} // A "clipping parent" is an overflowable container with the characteristic of
	// clipping (or hiding) overflowing elements with a position different from
	// `initial`


	function getClippingParents(element) {
	  var clippingParents = listScrollParents(getParentNode(element));
	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
	  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

	  if (!isElement(clipperElement)) {
	    return [];
	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


	  return clippingParents.filter(function (clippingParent) {
	    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
	  });
	} // Gets the maximum area that the element is visible in due to any number of
	// clipping parents


	function getClippingRect(element, boundary, rootBoundary) {
	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
	  var firstClippingParent = clippingParents[0];
	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
	    var rect = getClientRectFromMixedType(element, clippingParent);
	    accRect.top = max(rect.top, accRect.top);
	    accRect.right = min(rect.right, accRect.right);
	    accRect.bottom = min(rect.bottom, accRect.bottom);
	    accRect.left = max(rect.left, accRect.left);
	    return accRect;
	  }, getClientRectFromMixedType(element, firstClippingParent));
	  clippingRect.width = clippingRect.right - clippingRect.left;
	  clippingRect.height = clippingRect.bottom - clippingRect.top;
	  clippingRect.x = clippingRect.left;
	  clippingRect.y = clippingRect.top;
	  return clippingRect;
	}

	function computeOffsets(_ref) {
	  var reference = _ref.reference,
	      element = _ref.element,
	      placement = _ref.placement;
	  var basePlacement = placement ? getBasePlacement(placement) : null;
	  var variation = placement ? getVariation(placement) : null;
	  var commonX = reference.x + reference.width / 2 - element.width / 2;
	  var commonY = reference.y + reference.height / 2 - element.height / 2;
	  var offsets;

	  switch (basePlacement) {
	    case top:
	      offsets = {
	        x: commonX,
	        y: reference.y - element.height
	      };
	      break;

	    case bottom:
	      offsets = {
	        x: commonX,
	        y: reference.y + reference.height
	      };
	      break;

	    case right:
	      offsets = {
	        x: reference.x + reference.width,
	        y: commonY
	      };
	      break;

	    case left:
	      offsets = {
	        x: reference.x - element.width,
	        y: commonY
	      };
	      break;

	    default:
	      offsets = {
	        x: reference.x,
	        y: reference.y
	      };
	  }

	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

	  if (mainAxis != null) {
	    var len = mainAxis === 'y' ? 'height' : 'width';

	    switch (variation) {
	      case start:
	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
	        break;

	      case end:
	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
	        break;
	    }
	  }

	  return offsets;
	}

	function detectOverflow(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$placement = _options.placement,
	      placement = _options$placement === void 0 ? state.placement : _options$placement,
	      _options$boundary = _options.boundary,
	      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
	      _options$rootBoundary = _options.rootBoundary,
	      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
	      _options$elementConte = _options.elementContext,
	      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
	      _options$altBoundary = _options.altBoundary,
	      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
	      _options$padding = _options.padding,
	      padding = _options$padding === void 0 ? 0 : _options$padding;
	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	  var altContext = elementContext === popper ? reference : popper;
	  var popperRect = state.rects.popper;
	  var element = state.elements[altBoundary ? altContext : elementContext];
	  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
	  var referenceClientRect = getBoundingClientRect(state.elements.reference);
	  var popperOffsets = computeOffsets({
	    reference: referenceClientRect,
	    element: popperRect,
	    strategy: 'absolute',
	    placement: placement
	  });
	  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
	  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
	  // 0 or negative = within the clipping rect

	  var overflowOffsets = {
	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
	  };
	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

	  if (elementContext === popper && offsetData) {
	    var offset = offsetData[placement];
	    Object.keys(overflowOffsets).forEach(function (key) {
	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
	      overflowOffsets[key] += offset[axis] * multiply;
	    });
	  }

	  return overflowOffsets;
	}

	function computeAutoPlacement(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      placement = _options.placement,
	      boundary = _options.boundary,
	      rootBoundary = _options.rootBoundary,
	      padding = _options.padding,
	      flipVariations = _options.flipVariations,
	      _options$allowedAutoP = _options.allowedAutoPlacements,
	      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
	  var variation = getVariation(placement);
	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
	    return getVariation(placement) === variation;
	  }) : basePlacements;
	  var allowedPlacements = placements$1.filter(function (placement) {
	    return allowedAutoPlacements.indexOf(placement) >= 0;
	  });

	  if (allowedPlacements.length === 0) {
	    allowedPlacements = placements$1;

	    {
	      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
	    }
	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


	  var overflows = allowedPlacements.reduce(function (acc, placement) {
	    acc[placement] = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding
	    })[getBasePlacement(placement)];
	    return acc;
	  }, {});
	  return Object.keys(overflows).sort(function (a, b) {
	    return overflows[a] - overflows[b];
	  });
	}

	function getExpandedFallbackPlacements(placement) {
	  if (getBasePlacement(placement) === auto) {
	    return [];
	  }

	  var oppositePlacement = getOppositePlacement(placement);
	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
	}

	function flip(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;

	  if (state.modifiersData[name]._skip) {
	    return;
	  }

	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
	      specifiedFallbackPlacements = options.fallbackPlacements,
	      padding = options.padding,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      _options$flipVariatio = options.flipVariations,
	      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
	      allowedAutoPlacements = options.allowedAutoPlacements;
	  var preferredPlacement = state.options.placement;
	  var basePlacement = getBasePlacement(preferredPlacement);
	  var isBasePlacement = basePlacement === preferredPlacement;
	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding,
	      flipVariations: flipVariations,
	      allowedAutoPlacements: allowedAutoPlacements
	    }) : placement);
	  }, []);
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var checksMap = new Map();
	  var makeFallbackChecks = true;
	  var firstFittingPlacement = placements[0];

	  for (var i = 0; i < placements.length; i++) {
	    var placement = placements[i];

	    var _basePlacement = getBasePlacement(placement);

	    var isStartVariation = getVariation(placement) === start;
	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
	    var len = isVertical ? 'width' : 'height';
	    var overflow = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      altBoundary: altBoundary,
	      padding: padding
	    });
	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

	    if (referenceRect[len] > popperRect[len]) {
	      mainVariationSide = getOppositePlacement(mainVariationSide);
	    }

	    var altVariationSide = getOppositePlacement(mainVariationSide);
	    var checks = [];

	    if (checkMainAxis) {
	      checks.push(overflow[_basePlacement] <= 0);
	    }

	    if (checkAltAxis) {
	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
	    }

	    if (checks.every(function (check) {
	      return check;
	    })) {
	      firstFittingPlacement = placement;
	      makeFallbackChecks = false;
	      break;
	    }

	    checksMap.set(placement, checks);
	  }

	  if (makeFallbackChecks) {
	    // `2` may be desired in some cases – research later
	    var numberOfChecks = flipVariations ? 3 : 1;

	    var _loop = function _loop(_i) {
	      var fittingPlacement = placements.find(function (placement) {
	        var checks = checksMap.get(placement);

	        if (checks) {
	          return checks.slice(0, _i).every(function (check) {
	            return check;
	          });
	        }
	      });

	      if (fittingPlacement) {
	        firstFittingPlacement = fittingPlacement;
	        return "break";
	      }
	    };

	    for (var _i = numberOfChecks; _i > 0; _i--) {
	      var _ret = _loop(_i);

	      if (_ret === "break") break;
	    }
	  }

	  if (state.placement !== firstFittingPlacement) {
	    state.modifiersData[name]._skip = true;
	    state.placement = firstFittingPlacement;
	    state.reset = true;
	  }
	} // eslint-disable-next-line import/no-unused-modules


	var flip$1 = {
	  name: 'flip',
	  enabled: true,
	  phase: 'main',
	  fn: flip,
	  requiresIfExists: ['offset'],
	  data: {
	    _skip: false
	  }
	};

	function getSideOffsets(overflow, rect, preventedOffsets) {
	  if (preventedOffsets === void 0) {
	    preventedOffsets = {
	      x: 0,
	      y: 0
	    };
	  }

	  return {
	    top: overflow.top - rect.height - preventedOffsets.y,
	    right: overflow.right - rect.width + preventedOffsets.x,
	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
	    left: overflow.left - rect.width - preventedOffsets.x
	  };
	}

	function isAnySideFullyClipped(overflow) {
	  return [top, right, bottom, left].some(function (side) {
	    return overflow[side] >= 0;
	  });
	}

	function hide(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var preventedOffsets = state.modifiersData.preventOverflow;
	  var referenceOverflow = detectOverflow(state, {
	    elementContext: 'reference'
	  });
	  var popperAltOverflow = detectOverflow(state, {
	    altBoundary: true
	  });
	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
	  state.modifiersData[name] = {
	    referenceClippingOffsets: referenceClippingOffsets,
	    popperEscapeOffsets: popperEscapeOffsets,
	    isReferenceHidden: isReferenceHidden,
	    hasPopperEscaped: hasPopperEscaped
	  };
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-reference-hidden': isReferenceHidden,
	    'data-popper-escaped': hasPopperEscaped
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var hide$1 = {
	  name: 'hide',
	  enabled: true,
	  phase: 'main',
	  requiresIfExists: ['preventOverflow'],
	  fn: hide
	};

	function distanceAndSkiddingToXY(placement, rects, offset) {
	  var basePlacement = getBasePlacement(placement);
	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
	    placement: placement
	  })) : offset,
	      skidding = _ref[0],
	      distance = _ref[1];

	  skidding = skidding || 0;
	  distance = (distance || 0) * invertDistance;
	  return [left, right].indexOf(basePlacement) >= 0 ? {
	    x: distance,
	    y: skidding
	  } : {
	    x: skidding,
	    y: distance
	  };
	}

	function offset(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options,
	      name = _ref2.name;
	  var _options$offset = options.offset,
	      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
	  var data = placements.reduce(function (acc, placement) {
	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
	    return acc;
	  }, {});
	  var _data$state$placement = data[state.placement],
	      x = _data$state$placement.x,
	      y = _data$state$placement.y;

	  if (state.modifiersData.popperOffsets != null) {
	    state.modifiersData.popperOffsets.x += x;
	    state.modifiersData.popperOffsets.y += y;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var offset$1 = {
	  name: 'offset',
	  enabled: true,
	  phase: 'main',
	  requires: ['popperOffsets'],
	  fn: offset
	};

	function popperOffsets(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  // Offsets are the actual position the popper needs to have to be
	  // properly positioned near its reference element
	  // This is the most basic placement, and will be adjusted by
	  // the modifiers in the next step
	  state.modifiersData[name] = computeOffsets({
	    reference: state.rects.reference,
	    element: state.rects.popper,
	    strategy: 'absolute',
	    placement: state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var popperOffsets$1 = {
	  name: 'popperOffsets',
	  enabled: true,
	  phase: 'read',
	  fn: popperOffsets,
	  data: {}
	};

	function getAltAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	function preventOverflow(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;
	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      padding = options.padding,
	      _options$tether = options.tether,
	      tether = _options$tether === void 0 ? true : _options$tether,
	      _options$tetherOffset = options.tetherOffset,
	      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
	  var overflow = detectOverflow(state, {
	    boundary: boundary,
	    rootBoundary: rootBoundary,
	    padding: padding,
	    altBoundary: altBoundary
	  });
	  var basePlacement = getBasePlacement(state.placement);
	  var variation = getVariation(state.placement);
	  var isBasePlacement = !variation;
	  var mainAxis = getMainAxisFromPlacement(basePlacement);
	  var altAxis = getAltAxis(mainAxis);
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : tetherOffset;
	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
	    mainAxis: tetherOffsetValue,
	    altAxis: tetherOffsetValue
	  } : Object.assign({
	    mainAxis: 0,
	    altAxis: 0
	  }, tetherOffsetValue);
	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
	  var data = {
	    x: 0,
	    y: 0
	  };

	  if (!popperOffsets) {
	    return;
	  }

	  if (checkMainAxis) {
	    var _offsetModifierState$;

	    var mainSide = mainAxis === 'y' ? top : left;
	    var altSide = mainAxis === 'y' ? bottom : right;
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    var offset = popperOffsets[mainAxis];
	    var min$1 = offset + overflow[mainSide];
	    var max$1 = offset - overflow[altSide];
	    var additive = tether ? -popperRect[len] / 2 : 0;
	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
	    // outside the reference bounds

	    var arrowElement = state.elements.arrow;
	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
	      width: 0,
	      height: 0
	    };
	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
	    var arrowPaddingMin = arrowPaddingObject[mainSide];
	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
	    // to include its full size in the calculation. If the reference is small
	    // and near the edge of a boundary, the popper can overflow even if the
	    // reference is not overflowing as well (e.g. virtual elements with no
	    // width or height)

	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
	    var tetherMax = offset + maxOffset - offsetModifierValue;
	    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
	    popperOffsets[mainAxis] = preventedOffset;
	    data[mainAxis] = preventedOffset - offset;
	  }

	  if (checkAltAxis) {
	    var _offsetModifierState$2;

	    var _mainSide = mainAxis === 'x' ? top : left;

	    var _altSide = mainAxis === 'x' ? bottom : right;

	    var _offset = popperOffsets[altAxis];

	    var _len = altAxis === 'y' ? 'height' : 'width';

	    var _min = _offset + overflow[_mainSide];

	    var _max = _offset - overflow[_altSide];

	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

	    popperOffsets[altAxis] = _preventedOffset;
	    data[altAxis] = _preventedOffset - _offset;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var preventOverflow$1 = {
	  name: 'preventOverflow',
	  enabled: true,
	  phase: 'main',
	  fn: preventOverflow,
	  requiresIfExists: ['offset']
	};

	function getHTMLElementScroll(element) {
	  return {
	    scrollLeft: element.scrollLeft,
	    scrollTop: element.scrollTop
	  };
	}

	function getNodeScroll(node) {
	  if (node === getWindow(node) || !isHTMLElement(node)) {
	    return getWindowScroll(node);
	  } else {
	    return getHTMLElementScroll(node);
	  }
	}

	function isElementScaled(element) {
	  var rect = element.getBoundingClientRect();
	  var scaleX = round$2(rect.width) / element.offsetWidth || 1;
	  var scaleY = round$2(rect.height) / element.offsetHeight || 1;
	  return scaleX !== 1 || scaleY !== 1;
	} // Returns the composite rect of an element relative to its offsetParent.
	// Composite means it takes into account transforms as well as layout.


	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }

	  var isOffsetParentAnElement = isHTMLElement(offsetParent);
	  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
	  var documentElement = getDocumentElement(offsetParent);
	  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
	  var scroll = {
	    scrollLeft: 0,
	    scrollTop: 0
	  };
	  var offsets = {
	    x: 0,
	    y: 0
	  };

	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
	    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
	    isScrollParent(documentElement)) {
	      scroll = getNodeScroll(offsetParent);
	    }

	    if (isHTMLElement(offsetParent)) {
	      offsets = getBoundingClientRect(offsetParent, true);
	      offsets.x += offsetParent.clientLeft;
	      offsets.y += offsetParent.clientTop;
	    } else if (documentElement) {
	      offsets.x = getWindowScrollBarX(documentElement);
	    }
	  }

	  return {
	    x: rect.left + scroll.scrollLeft - offsets.x,
	    y: rect.top + scroll.scrollTop - offsets.y,
	    width: rect.width,
	    height: rect.height
	  };
	}

	function order(modifiers) {
	  var map = new Map();
	  var visited = new Set();
	  var result = [];
	  modifiers.forEach(function (modifier) {
	    map.set(modifier.name, modifier);
	  }); // On visiting object, check for its dependencies and visit them recursively

	  function sort(modifier) {
	    visited.add(modifier.name);
	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
	    requires.forEach(function (dep) {
	      if (!visited.has(dep)) {
	        var depModifier = map.get(dep);

	        if (depModifier) {
	          sort(depModifier);
	        }
	      }
	    });
	    result.push(modifier);
	  }

	  modifiers.forEach(function (modifier) {
	    if (!visited.has(modifier.name)) {
	      // check for visited object
	      sort(modifier);
	    }
	  });
	  return result;
	}

	function orderModifiers(modifiers) {
	  // order based on dependencies
	  var orderedModifiers = order(modifiers); // order based on phase

	  return modifierPhases.reduce(function (acc, phase) {
	    return acc.concat(orderedModifiers.filter(function (modifier) {
	      return modifier.phase === phase;
	    }));
	  }, []);
	}

	function debounce(fn) {
	  var pending;
	  return function () {
	    if (!pending) {
	      pending = new Promise(function (resolve) {
	        Promise.resolve().then(function () {
	          pending = undefined;
	          resolve(fn());
	        });
	      });
	    }

	    return pending;
	  };
	}

	function format(str) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return [].concat(args).reduce(function (p, c) {
	    return p.replace(/%s/, c);
	  }, str);
	}

	var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
	var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
	var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
	function validateModifiers(modifiers) {
	  modifiers.forEach(function (modifier) {
	    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
	    .filter(function (value, index, self) {
	      return self.indexOf(value) === index;
	    }).forEach(function (key) {
	      switch (key) {
	        case 'name':
	          if (typeof modifier.name !== 'string') {
	            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
	          }

	          break;

	        case 'enabled':
	          if (typeof modifier.enabled !== 'boolean') {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
	          }

	          break;

	        case 'phase':
	          if (modifierPhases.indexOf(modifier.phase) < 0) {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
	          }

	          break;

	        case 'fn':
	          if (typeof modifier.fn !== 'function') {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
	          }

	          break;

	        case 'effect':
	          if (modifier.effect != null && typeof modifier.effect !== 'function') {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
	          }

	          break;

	        case 'requires':
	          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
	          }

	          break;

	        case 'requiresIfExists':
	          if (!Array.isArray(modifier.requiresIfExists)) {
	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
	          }

	          break;

	        case 'options':
	        case 'data':
	          break;

	        default:
	          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
	            return "\"" + s + "\"";
	          }).join(', ') + "; but \"" + key + "\" was provided.");
	      }

	      modifier.requires && modifier.requires.forEach(function (requirement) {
	        if (modifiers.find(function (mod) {
	          return mod.name === requirement;
	        }) == null) {
	          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
	        }
	      });
	    });
	  });
	}

	function uniqueBy(arr, fn) {
	  var identifiers = new Set();
	  return arr.filter(function (item) {
	    var identifier = fn(item);

	    if (!identifiers.has(identifier)) {
	      identifiers.add(identifier);
	      return true;
	    }
	  });
	}

	function mergeByName(modifiers) {
	  var merged = modifiers.reduce(function (merged, current) {
	    var existing = merged[current.name];
	    merged[current.name] = existing ? Object.assign({}, existing, current, {
	      options: Object.assign({}, existing.options, current.options),
	      data: Object.assign({}, existing.data, current.data)
	    }) : current;
	    return merged;
	  }, {}); // IE11 does not support Object.values

	  return Object.keys(merged).map(function (key) {
	    return merged[key];
	  });
	}

	var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
	var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
	var DEFAULT_OPTIONS = {
	  placement: 'bottom',
	  modifiers: [],
	  strategy: 'absolute'
	};

	function areValidElements() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return !args.some(function (element) {
	    return !(element && typeof element.getBoundingClientRect === 'function');
	  });
	}

	function popperGenerator(generatorOptions) {
	  if (generatorOptions === void 0) {
	    generatorOptions = {};
	  }

	  var _generatorOptions = generatorOptions,
	      _generatorOptions$def = _generatorOptions.defaultModifiers,
	      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
	      _generatorOptions$def2 = _generatorOptions.defaultOptions,
	      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
	  return function createPopper(reference, popper, options) {
	    if (options === void 0) {
	      options = defaultOptions;
	    }

	    var state = {
	      placement: 'bottom',
	      orderedModifiers: [],
	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
	      modifiersData: {},
	      elements: {
	        reference: reference,
	        popper: popper
	      },
	      attributes: {},
	      styles: {}
	    };
	    var effectCleanupFns = [];
	    var isDestroyed = false;
	    var instance = {
	      state: state,
	      setOptions: function setOptions(setOptionsAction) {
	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
	        cleanupModifierEffects();
	        state.options = Object.assign({}, defaultOptions, state.options, options);
	        state.scrollParents = {
	          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
	          popper: listScrollParents(popper)
	        }; // Orders the modifiers based on their dependencies and `phase`
	        // properties

	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

	        state.orderedModifiers = orderedModifiers.filter(function (m) {
	          return m.enabled;
	        }); // Validate the provided modifiers so that the consumer will get warned
	        // if one of the modifiers is invalid for any reason

	        {
	          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
	            var name = _ref.name;
	            return name;
	          });
	          validateModifiers(modifiers);

	          if (getBasePlacement(state.options.placement) === auto) {
	            var flipModifier = state.orderedModifiers.find(function (_ref2) {
	              var name = _ref2.name;
	              return name === 'flip';
	            });

	            if (!flipModifier) {
	              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
	            }
	          }

	          var _getComputedStyle = getComputedStyle(popper),
	              marginTop = _getComputedStyle.marginTop,
	              marginRight = _getComputedStyle.marginRight,
	              marginBottom = _getComputedStyle.marginBottom,
	              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
	          // cause bugs with positioning, so we'll warn the consumer


	          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
	            return parseFloat(margin);
	          })) {
	            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
	          }
	        }

	        runModifierEffects();
	        return instance.update();
	      },
	      // Sync update – it will always be executed, even if not necessary. This
	      // is useful for low frequency updates where sync behavior simplifies the
	      // logic.
	      // For high frequency updates (e.g. `resize` and `scroll` events), always
	      // prefer the async Popper#update method
	      forceUpdate: function forceUpdate() {
	        if (isDestroyed) {
	          return;
	        }

	        var _state$elements = state.elements,
	            reference = _state$elements.reference,
	            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
	        // anymore

	        if (!areValidElements(reference, popper)) {
	          {
	            console.error(INVALID_ELEMENT_ERROR);
	          }

	          return;
	        } // Store the reference and popper rects to be read by modifiers


	        state.rects = {
	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
	          popper: getLayoutRect(popper)
	        }; // Modifiers have the ability to reset the current update cycle. The
	        // most common use case for this is the `flip` modifier changing the
	        // placement, which then needs to re-run all the modifiers, because the
	        // logic was previously ran for the previous placement and is therefore
	        // stale/incorrect

	        state.reset = false;
	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
	        // is filled with the initial data specified by the modifier. This means
	        // it doesn't persist and is fresh on each update.
	        // To ensure persistent data, use `${name}#persistent`

	        state.orderedModifiers.forEach(function (modifier) {
	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
	        });
	        var __debug_loops__ = 0;

	        for (var index = 0; index < state.orderedModifiers.length; index++) {
	          {
	            __debug_loops__ += 1;

	            if (__debug_loops__ > 100) {
	              console.error(INFINITE_LOOP_ERROR);
	              break;
	            }
	          }

	          if (state.reset === true) {
	            state.reset = false;
	            index = -1;
	            continue;
	          }

	          var _state$orderedModifie = state.orderedModifiers[index],
	              fn = _state$orderedModifie.fn,
	              _state$orderedModifie2 = _state$orderedModifie.options,
	              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
	              name = _state$orderedModifie.name;

	          if (typeof fn === 'function') {
	            state = fn({
	              state: state,
	              options: _options,
	              name: name,
	              instance: instance
	            }) || state;
	          }
	        }
	      },
	      // Async and optimistically optimized update – it will not be executed if
	      // not necessary (debounced to run at most once-per-tick)
	      update: debounce(function () {
	        return new Promise(function (resolve) {
	          instance.forceUpdate();
	          resolve(state);
	        });
	      }),
	      destroy: function destroy() {
	        cleanupModifierEffects();
	        isDestroyed = true;
	      }
	    };

	    if (!areValidElements(reference, popper)) {
	      {
	        console.error(INVALID_ELEMENT_ERROR);
	      }

	      return instance;
	    }

	    instance.setOptions(options).then(function (state) {
	      if (!isDestroyed && options.onFirstUpdate) {
	        options.onFirstUpdate(state);
	      }
	    }); // Modifiers have the ability to execute arbitrary code before the first
	    // update cycle runs. They will be executed in the same order as the update
	    // cycle. This is useful when a modifier adds some persistent data that
	    // other modifiers need to use, but the modifier is run after the dependent
	    // one.

	    function runModifierEffects() {
	      state.orderedModifiers.forEach(function (_ref3) {
	        var name = _ref3.name,
	            _ref3$options = _ref3.options,
	            options = _ref3$options === void 0 ? {} : _ref3$options,
	            effect = _ref3.effect;

	        if (typeof effect === 'function') {
	          var cleanupFn = effect({
	            state: state,
	            name: name,
	            instance: instance,
	            options: options
	          });

	          var noopFn = function noopFn() {};

	          effectCleanupFns.push(cleanupFn || noopFn);
	        }
	      });
	    }

	    function cleanupModifierEffects() {
	      effectCleanupFns.forEach(function (fn) {
	        return fn();
	      });
	      effectCleanupFns = [];
	    }

	    return instance;
	  };
	}

	var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
	var createPopper = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers
	}); // eslint-disable-next-line import/no-unused-modules

	function getContainer$1(container) {
	  return typeof container === 'function' ? container() : container;
	}
	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 */


	const Portal = /*#__PURE__*/react.exports.forwardRef(function Portal(props, ref) {
	  const {
	    children,
	    container,
	    disablePortal = false
	  } = props;
	  const [mountNode, setMountNode] = react.exports.useState(null);
	  const handleRef = useForkRef( /*#__PURE__*/react.exports.isValidElement(children) ? children.ref : null, ref);
	  useEnhancedEffect(() => {
	    if (!disablePortal) {
	      setMountNode(getContainer$1(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  useEnhancedEffect(() => {
	    if (mountNode && !disablePortal) {
	      setRef(ref, mountNode);
	      return () => {
	        setRef(ref, null);
	      };
	    }

	    return undefined;
	  }, [ref, mountNode, disablePortal]);

	  if (disablePortal) {
	    if ( /*#__PURE__*/react.exports.isValidElement(children)) {
	      return /*#__PURE__*/react.exports.cloneElement(children, {
	        ref: handleRef
	      });
	    }

	    return children;
	  }

	  return mountNode ? /*#__PURE__*/reactDom.exports.createPortal(children, mountNode) : mountNode;
	});
	Portal.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The children to render into the `container`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool
	} ;

	{
	  // eslint-disable-next-line
	  Portal['propTypes' + ''] = exactProp(Portal.propTypes);
	}

	const _excluded$2k = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"],
	      _excluded2$a = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];

	function flipPlacement(placement, direction) {
	  if (direction === 'ltr') {
	    return placement;
	  }

	  switch (placement) {
	    case 'bottom-end':
	      return 'bottom-start';

	    case 'bottom-start':
	      return 'bottom-end';

	    case 'top-end':
	      return 'top-start';

	    case 'top-start':
	      return 'top-end';

	    default:
	      return placement;
	  }
	}

	function resolveAnchorEl$1(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	const defaultPopperOptions = {};
	/* eslint-disable react/prop-types */

	const PopperTooltip = /*#__PURE__*/react.exports.forwardRef(function PopperTooltip(props, ref) {
	  const {
	    anchorEl,
	    children,
	    direction,
	    disablePortal,
	    modifiers,
	    open,
	    placement: initialPlacement,
	    popperOptions,
	    popperRef: popperRefProp,
	    TransitionProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2k);

	  const tooltipRef = react.exports.useRef(null);
	  const ownRef = useForkRef(tooltipRef, ref);
	  const popperRef = react.exports.useRef(null);
	  const handlePopperRef = useForkRef(popperRef, popperRefProp);
	  const handlePopperRefRef = react.exports.useRef(handlePopperRef);
	  useEnhancedEffect(() => {
	    handlePopperRefRef.current = handlePopperRef;
	  }, [handlePopperRef]);
	  react.exports.useImperativeHandle(popperRefProp, () => popperRef.current, []);
	  const rtlPlacement = flipPlacement(initialPlacement, direction);
	  /**
	   * placement initialized from prop but can change during lifetime if modifiers.flip.
	   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
	   */

	  const [placement, setPlacement] = react.exports.useState(rtlPlacement);
	  react.exports.useEffect(() => {
	    if (popperRef.current) {
	      popperRef.current.forceUpdate();
	    }
	  });
	  useEnhancedEffect(() => {
	    if (!anchorEl || !open) {
	      return undefined;
	    }

	    const handlePopperUpdate = data => {
	      setPlacement(data.placement);
	    };

	    const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);

	    {
	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      }
	    }

	    let popperModifiers = [{
	      name: 'preventOverflow',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'flip',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'onUpdate',
	      enabled: true,
	      phase: 'afterWrite',
	      fn: ({
	        state
	      }) => {
	        handlePopperUpdate(state);
	      }
	    }];

	    if (modifiers != null) {
	      popperModifiers = popperModifiers.concat(modifiers);
	    }

	    if (popperOptions && popperOptions.modifiers != null) {
	      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
	    }

	    const popper = createPopper(resolveAnchorEl$1(anchorEl), tooltipRef.current, _extends({
	      placement: rtlPlacement
	    }, popperOptions, {
	      modifiers: popperModifiers
	    }));
	    handlePopperRefRef.current(popper);
	    return () => {
	      popper.destroy();
	      handlePopperRefRef.current(null);
	    };
	  }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
	  const childProps = {
	    placement
	  };

	  if (TransitionProps !== null) {
	    childProps.TransitionProps = TransitionProps;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    ref: ownRef,
	    role: "tooltip"
	  }, other, {
	    children: typeof children === 'function' ? children(childProps) : children
	  }));
	});
	/* eslint-enable react/prop-types */

	/**
	 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
	 */

	const PopperUnstyled = /*#__PURE__*/react.exports.forwardRef(function PopperUnstyled(props, ref) {
	  const {
	    anchorEl,
	    children,
	    container: containerProp,
	    direction = 'ltr',
	    disablePortal = false,
	    keepMounted = false,
	    modifiers,
	    open,
	    placement = 'bottom',
	    popperOptions = defaultPopperOptions,
	    popperRef,
	    style,
	    transition = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded2$a);

	  const [exited, setExited] = react.exports.useState(true);

	  const handleEnter = () => {
	    setExited(false);
	  };

	  const handleExited = () => {
	    setExited(true);
	  };

	  if (!keepMounted && !open && (!transition || exited)) {
	    return null;
	  } // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container


	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl$1(anchorEl)).body : undefined);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Portal, {
	    disablePortal: disablePortal,
	    container: container,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(PopperTooltip, _extends({
	      anchorEl: anchorEl,
	      direction: direction,
	      disablePortal: disablePortal,
	      modifiers: modifiers,
	      ref: ref,
	      open: transition ? !exited : open,
	      placement: placement,
	      popperOptions: popperOptions,
	      popperRef: popperRef
	    }, other, {
	      style: _extends({
	        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
	        position: 'fixed',
	        // Fix Popper.js display issue
	        top: 0,
	        left: 0,
	        display: !open && keepMounted && (!transition || exited) ? 'none' : null
	      }, style),
	      TransitionProps: transition ? {
	        in: open,
	        onEnter: handleEnter,
	        onExited: handleExited
	      } : null,
	      children: children
	    }))
	  });
	});
	PopperUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
	   * or a function that returns either.
	   * It's used to set the position of the popper.
	   * The return value will passed as the reference object of the Popper instance.
	   */
	  anchorEl: chainPropTypes(propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.object, propTypes.exports.func]), props => {
	    if (props.open) {
	      const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);

	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a virtualElement ', '(https://popper.js.org/docs/v2/virtual-elements/).'].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * Popper render function or node.
	   */
	  children: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.node, propTypes.exports.func]),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * Direction of the text.
	   * @default 'ltr'
	   */
	  direction: propTypes.exports.oneOf(['ltr', 'rtl']),

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Popper.
	   * @default false
	   */
	  keepMounted: propTypes.exports.bool,

	  /**
	   * Popper.js is based on a "plugin-like" architecture,
	   * most of its features are fully encapsulated "modifiers".
	   *
	   * A modifier is a function that is called each time Popper.js needs to
	   * compute the position of the popper.
	   * For this reason, modifiers should be very performant to avoid bottlenecks.
	   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
	   */
	  modifiers: propTypes.exports.arrayOf(propTypes.exports.shape({
	    data: propTypes.exports.object,
	    effect: propTypes.exports.func,
	    enabled: propTypes.exports.bool,
	    fn: propTypes.exports.func,
	    name: propTypes.exports.any,
	    options: propTypes.exports.object,
	    phase: propTypes.exports.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
	    requires: propTypes.exports.arrayOf(propTypes.exports.string),
	    requiresIfExists: propTypes.exports.arrayOf(propTypes.exports.string)
	  })),

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * Popper placement.
	   * @default 'bottom'
	   */
	  placement: propTypes.exports.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

	  /**
	   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
	   * @default {}
	   */
	  popperOptions: propTypes.exports.shape({
	    modifiers: propTypes.exports.array,
	    onFirstUpdate: propTypes.exports.func,
	    placement: propTypes.exports.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
	    strategy: propTypes.exports.oneOf(['absolute', 'fixed'])
	  }),

	  /**
	   * A ref that points to the used popper instance.
	   */
	  popperRef: refType,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * Help supporting a react-transition-group/Transition component.
	   * @default false
	   */
	  transition: propTypes.exports.bool
	} ;

	const _excluded$2j = ["actions", "anchorEl", "children", "component", "components", "componentsProps", "keepMounted", "listboxId", "onClose", "open"];

	function getUtilityClasses$1(ownerState) {
	  const {
	    open
	  } = ownerState;
	  const slots = {
	    root: ['root', open && 'expanded'],
	    listbox: ['listbox', open && 'expanded']
	  };
	  return composeClasses(slots, getMenuUnstyledUtilityClass, {});
	}
	/**
	 *
	 * Demos:
	 *
	 * - [Menu](https://mui.com/base/react-menu/)
	 *
	 * API:
	 *
	 * - [MenuUnstyled API](https://mui.com/base/api/menu-unstyled/)
	 */


	const MenuUnstyled = /*#__PURE__*/react.exports.forwardRef(function MenuUnstyled(props, forwardedRef) {
	  var _ref, _components$Listbox;

	  const {
	    actions,
	    anchorEl,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    keepMounted = false,
	    listboxId,
	    onClose,
	    open = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2j);

	  const {
	    registerItem,
	    unregisterItem,
	    getListboxProps,
	    getItemProps,
	    getItemState,
	    highlightFirstItem,
	    highlightLastItem
	  } = useMenu({
	    open,
	    onClose,
	    listboxId
	  });
	  react.exports.useImperativeHandle(actions, () => ({
	    highlightFirstItem,
	    highlightLastItem
	  }), [highlightFirstItem, highlightLastItem]);

	  const ownerState = _extends({}, props, {
	    open
	  });

	  const classes = getUtilityClasses$1(ownerState);
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : PopperUnstyled;
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalForwardedProps: other,
	    externalSlotProps: componentsProps.root,
	    additionalProps: {
	      anchorEl,
	      open,
	      keepMounted,
	      role: undefined,
	      ref: forwardedRef
	    },
	    className: classes.root,
	    ownerState
	  });
	  const Listbox = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
	  const listboxProps = useSlotProps({
	    elementType: Listbox,
	    getSlotProps: getListboxProps,
	    externalSlotProps: componentsProps.listbox,
	    ownerState,
	    className: classes.listbox
	  });
	  const contextValue = {
	    registerItem,
	    unregisterItem,
	    getItemState,
	    getItemProps,
	    open
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(Listbox, _extends({}, listboxProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuUnstyledContext.Provider, {
	        value: contextValue,
	        children: children
	      })
	    }))
	  }));
	});
	MenuUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref with imperative actions.
	   * It allows to select the first or last menu item.
	   */
	  actions: refType,

	  /**
	   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
	   * or a function that returns either.
	   * It's used to set the position of the popper.
	   */
	  anchorEl: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.object, propTypes.exports.func]),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * @ignore
	   */
	  components: propTypes.exports.shape({
	    Listbox: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * @ignore
	   */
	  componentsProps: propTypes.exports.shape({
	    listbox: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * Always keep the menu in the DOM.
	   * This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Menu.
	   *
	   * @default false
	   */
	  keepMounted: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  listboxId: propTypes.exports.string,

	  /**
	   * Triggered when focus leaves the menu and the menu should close.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * Controls whether the menu is displayed.
	   * @default false
	   */
	  open: propTypes.exports.bool
	} ;

	function getMenuItemUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuItemUnstyled', slot);
	}
	generateUtilityClasses('MuiMenuItemUnstyled', ['root', 'disabled', 'focusVisible']);

	function useMenuItem(props) {
	  var _itemState$disabled;

	  const {
	    disabled = false,
	    ref,
	    label
	  } = props;
	  const id = useId();
	  const menuContext = react.exports.useContext(MenuUnstyledContext);
	  const itemRef = react.exports.useRef(null);
	  const handleRef = useForkRef(itemRef, ref);

	  if (menuContext === null) {
	    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');
	  }

	  const {
	    registerItem,
	    unregisterItem,
	    open
	  } = menuContext;
	  react.exports.useEffect(() => {
	    if (id === undefined) {
	      return undefined;
	    }

	    registerItem(id, {
	      disabled,
	      id,
	      ref: itemRef,
	      label
	    });
	    return () => unregisterItem(id);
	  }, [id, registerItem, unregisterItem, disabled, ref, label]);
	  const {
	    getRootProps: getButtonProps,
	    focusVisible
	  } = useButton({
	    disabled,
	    focusableWhenDisabled: true,
	    ref: handleRef
	  }); // Ensure the menu item is focused when highlighted

	  const [focusRequested, requestFocus] = react.exports.useState(false);
	  const focusIfRequested = react.exports.useCallback(() => {
	    if (focusRequested && itemRef.current != null) {
	      itemRef.current.focus();
	      requestFocus(false);
	    }
	  }, [focusRequested]);
	  react.exports.useEffect(() => {
	    focusIfRequested();
	  });
	  react.exports.useDebugValue({
	    id,
	    disabled,
	    label
	  });
	  const itemState = menuContext.getItemState(id != null ? id : '');
	  const {
	    highlighted
	  } = itemState != null ? itemState : {
	    highlighted: false
	  };
	  react.exports.useEffect(() => {
	    requestFocus(highlighted && open);
	  }, [highlighted, open]);

	  if (id === undefined) {
	    return {
	      getRootProps: other => _extends({}, other, getButtonProps(other), {
	        role: 'menuitem'
	      }),
	      disabled: false,
	      focusVisible
	    };
	  }

	  return {
	    getRootProps: other => {
	      const optionProps = menuContext.getItemProps(id, other);
	      return _extends({}, other, getButtonProps(other), {
	        tabIndex: optionProps.tabIndex,
	        id: optionProps.id,
	        role: 'menuitem'
	      });
	    },
	    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
	    focusVisible
	  };
	}

	const _excluded$2i = ["children", "disabled", "component", "components", "componentsProps", "label"];

	function getUtilityClasses(ownerState) {
	  const {
	    disabled,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  return composeClasses(slots, getMenuItemUnstyledUtilityClass, {});
	}
	/**
	 *
	 * Demos:
	 *
	 * - [Menu](https://mui.com/base/react-menu/)
	 *
	 * API:
	 *
	 * - [MenuItemUnstyled API](https://mui.com/base/api/menu-item-unstyled/)
	 */


	const MenuItemUnstyled = /*#__PURE__*/react.exports.forwardRef(function MenuItemUnstyled(props, ref) {
	  var _ref;

	  const {
	    children,
	    disabled: disabledProp = false,
	    component,
	    components = {},
	    componentsProps = {},
	    label
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2i);

	  const {
	    getRootProps,
	    disabled,
	    focusVisible
	  } = useMenuItem({
	    disabled: disabledProp,
	    ref,
	    label
	  });

	  const ownerState = _extends({}, props, {
	    disabled,
	    focusVisible
	  });

	  const classes = getUtilityClasses(ownerState);
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'li';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    className: classes.root,
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
	    children: children
	  }));
	});
	MenuItemUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * @ignore
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * @ignore
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the menu item will be disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * A text representation of the menu item's content.
	   * Used for keyboard text navigation matching.
	   */
	  label: propTypes.exports.string
	} ;

	// Is a vertical scrollbar displayed?
	function isOverflowing(container) {
	  const doc = ownerDocument(container);

	  if (doc.body === container) {
	    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
	  }

	  return container.scrollHeight > container.clientHeight;
	}

	function ariaHidden(element, show) {
	  if (show) {
	    element.setAttribute('aria-hidden', 'true');
	  } else {
	    element.removeAttribute('aria-hidden');
	  }
	}

	function getPaddingRight(element) {
	  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
	}

	function isAriaHiddenForbiddenOnElement(element) {
	  // The forbidden HTML tags are the ones from ARIA specification that
	  // can be children of body and can't have aria-hidden attribute.
	  // cf. https://www.w3.org/TR/html-aria/#docconformance
	  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
	  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
	  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
	  return isForbiddenTagName || isInputHidden;
	}

	function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
	  const blacklist = [mountElement, currentElement, ...elementsToExclude];
	  [].forEach.call(container.children, element => {
	    const isNotExcludedElement = blacklist.indexOf(element) === -1;
	    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);

	    if (isNotExcludedElement && isNotForbiddenElement) {
	      ariaHidden(element, show);
	    }
	  });
	}

	function findIndexOf(items, callback) {
	  let idx = -1;
	  items.some((item, index) => {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }

	    return false;
	  });
	  return idx;
	}

	function handleContainer(containerInfo, props) {
	  const restoreStyle = [];
	  const container = containerInfo.container;

	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      const scrollbarSize = getScrollbarSize(ownerDocument(container));
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        property: 'padding-right',
	        el: container
	      }); // Use computed style, here to get the real padding to add our scrollbar width.

	      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`; // .mui-fixed is a global helper.

	      const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedElements, element => {
	        restoreStyle.push({
	          value: element.style.paddingRight,
	          property: 'padding-right',
	          el: element
	        });
	        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
	      });
	    }

	    let scrollContainer;

	    if (container.parentNode instanceof DocumentFragment) {
	      scrollContainer = ownerDocument(container).body;
	    } else {
	      // Improve Gatsby support
	      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
	      const parent = container.parentElement;
	      const containerWindow = ownerWindow(container);
	      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
	    } // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.


	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      property: 'overflow',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowX,
	      property: 'overflow-x',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowY,
	      property: 'overflow-y',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }

	  const restore = () => {
	    restoreStyle.forEach(({
	      value,
	      el,
	      property
	    }) => {
	      if (value) {
	        el.style.setProperty(property, value);
	      } else {
	        el.style.removeProperty(property);
	      }
	    });
	  };

	  return restore;
	}

	function getHiddenSiblings(container) {
	  const hiddenSiblings = [];
	  [].forEach.call(container.children, element => {
	    if (element.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(element);
	    }
	  });
	  return hiddenSiblings;
	}

	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */
	class ModalManager {
	  constructor() {
	    this.containers = void 0;
	    this.modals = void 0;
	    this.modals = [];
	    this.containers = [];
	  }

	  add(modal, container) {
	    let modalIndex = this.modals.indexOf(modal);

	    if (modalIndex !== -1) {
	      return modalIndex;
	    }

	    modalIndex = this.modals.length;
	    this.modals.push(modal); // If the modal we are adding is already in the DOM.

	    if (modal.modalRef) {
	      ariaHidden(modal.modalRef, false);
	    }

	    const hiddenSiblings = getHiddenSiblings(container);
	    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
	    const containerIndex = findIndexOf(this.containers, item => item.container === container);

	    if (containerIndex !== -1) {
	      this.containers[containerIndex].modals.push(modal);
	      return modalIndex;
	    }

	    this.containers.push({
	      modals: [modal],
	      container,
	      restore: null,
	      hiddenSiblings
	    });
	    return modalIndex;
	  }

	  mount(modal, props) {
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];

	    if (!containerInfo.restore) {
	      containerInfo.restore = handleContainer(containerInfo, props);
	    }
	  }

	  remove(modal, ariaHiddenState = true) {
	    const modalIndex = this.modals.indexOf(modal);

	    if (modalIndex === -1) {
	      return modalIndex;
	    }

	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	    this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

	    if (containerInfo.modals.length === 0) {
	      // The modal might be closed before it had the chance to be mounted in the DOM.
	      if (containerInfo.restore) {
	        containerInfo.restore();
	      }

	      if (modal.modalRef) {
	        // In case the modal wasn't in the DOM yet.
	        ariaHidden(modal.modalRef, ariaHiddenState);
	      }

	      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
	      this.containers.splice(containerIndex, 1);
	    } else {
	      // Otherwise make sure the next top modal is visible to a screen reader.
	      const nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
	      // aria-hidden because the dom element doesn't exist either
	      // when modal was unmounted before modalRef gets null

	      if (nextTop.modalRef) {
	        ariaHidden(nextTop.modalRef, false);
	      }
	    }

	    return modalIndex;
	  }

	  isTopModal(modal) {
	    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	  }

	}

	/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */
	const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');

	function getTabIndex(node) {
	  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);

	  if (!Number.isNaN(tabindexAttr)) {
	    return tabindexAttr;
	  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
	  // so if they don't have a tabindex attribute specifically set, assume it's 0.
	  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
	  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
	  //  yet they are still part of the regular tab order; in FF, they get a default
	  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
	  //  order, consider their tab index to be 0.


	  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
	    return 0;
	  }

	  return node.tabIndex;
	}

	function isNonTabbableRadio(node) {
	  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
	    return false;
	  }

	  if (!node.name) {
	    return false;
	  }

	  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);

	  let roving = getRadio(`[name="${node.name}"]:checked`);

	  if (!roving) {
	    roving = getRadio(`[name="${node.name}"]`);
	  }

	  return roving !== node;
	}

	function isNodeMatchingSelectorFocusable(node) {
	  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
	    return false;
	  }

	  return true;
	}

	function defaultGetTabbable(root) {
	  const regularTabNodes = [];
	  const orderedTabNodes = [];
	  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
	    const nodeTabIndex = getTabIndex(node);

	    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
	      return;
	    }

	    if (nodeTabIndex === 0) {
	      regularTabNodes.push(node);
	    } else {
	      orderedTabNodes.push({
	        documentOrder: i,
	        tabIndex: nodeTabIndex,
	        node
	      });
	    }
	  });
	  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
	}

	function defaultIsEnabled() {
	  return true;
	}
	/**
	 * Utility component that locks focus inside the component.
	 */


	function TrapFocus(props) {
	  const {
	    children,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableRestoreFocus = false,
	    getTabbable = defaultGetTabbable,
	    isEnabled = defaultIsEnabled,
	    open
	  } = props;
	  const ignoreNextEnforceFocus = react.exports.useRef();
	  const sentinelStart = react.exports.useRef(null);
	  const sentinelEnd = react.exports.useRef(null);
	  const nodeToRestore = react.exports.useRef(null);
	  const reactFocusEventTarget = react.exports.useRef(null); // This variable is useful when disableAutoFocus is true.
	  // It waits for the active element to move into the component to activate.

	  const activated = react.exports.useRef(false);
	  const rootRef = react.exports.useRef(null);
	  const handleRef = useForkRef(children.ref, rootRef);
	  const lastKeydown = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    activated.current = !disableAutoFocus;
	  }, [disableAutoFocus, open]);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    const doc = ownerDocument(rootRef.current);

	    if (!rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        {
	          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
	        }

	        rootRef.current.setAttribute('tabIndex', -1);
	      }

	      if (activated.current) {
	        rootRef.current.focus();
	      }
	    }

	    return () => {
	      // restoreLastFocus()
	      if (!disableRestoreFocus) {
	        // In IE11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE11 have a focus method.
	        // Once IE11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          ignoreNextEnforceFocus.current = true;
	          nodeToRestore.current.focus();
	        }

	        nodeToRestore.current = null;
	      }
	    }; // Missing `disableRestoreFocus` which is fine.
	    // We don't support changing that prop on an open TrapFocus
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [open]);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    const doc = ownerDocument(rootRef.current);

	    const contain = nativeEvent => {
	      const {
	        current: rootElement
	      } = rootRef; // Cleanup functions are executed lazily in React 17.
	      // Contain can be called between the component being unmounted and its cleanup function being run.

	      if (rootElement === null) {
	        return;
	      }

	      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }

	      if (!rootElement.contains(doc.activeElement)) {
	        // if the focus event is not coming from inside the children's react tree, reset the refs
	        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
	          reactFocusEventTarget.current = null;
	        } else if (reactFocusEventTarget.current !== null) {
	          return;
	        }

	        if (!activated.current) {
	          return;
	        }

	        let tabbable = [];

	        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
	          tabbable = getTabbable(rootRef.current);
	        }

	        if (tabbable.length > 0) {
	          var _lastKeydown$current, _lastKeydown$current2;

	          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
	          const focusNext = tabbable[0];
	          const focusPrevious = tabbable[tabbable.length - 1];

	          if (isShiftTab) {
	            focusPrevious.focus();
	          } else {
	            focusNext.focus();
	          }
	        } else {
	          rootElement.focus();
	        }
	      }
	    };

	    const loopFocus = nativeEvent => {
	      lastKeydown.current = nativeEvent;

	      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
	        return;
	      } // Make sure the next tab starts from the right place.
	      // doc.activeElement referes to the origin.


	      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;
	        sentinelEnd.current.focus();
	      }
	    };

	    doc.addEventListener('focusin', contain);
	    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    // Instead, we can look if the active element was restored on the BODY element.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

	    const interval = setInterval(() => {
	      if (doc.activeElement.tagName === 'BODY') {
	        contain();
	      }
	    }, 50);
	    return () => {
	      clearInterval(interval);
	      doc.removeEventListener('focusin', contain);
	      doc.removeEventListener('keydown', loopFocus, true);
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);

	  const onFocus = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }

	    activated.current = true;
	    reactFocusEventTarget.current = event.target;
	    const childrenPropsHandler = children.props.onFocus;

	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };

	  const handleFocusSentinel = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }

	    activated.current = true;
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx("div", {
	      tabIndex: 0,
	      onFocus: handleFocusSentinel,
	      ref: sentinelStart,
	      "data-test": "sentinelStart"
	    }), /*#__PURE__*/react.exports.cloneElement(children, {
	      ref: handleRef,
	      onFocus
	    }), /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	      tabIndex: 0,
	      onFocus: handleFocusSentinel,
	      ref: sentinelEnd,
	      "data-test": "sentinelEnd"
	    })]
	  });
	}

	TrapFocus.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef,

	  /**
	   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the trap focus will not restore focus to previously focused element once
	   * trap focus is hidden or unmounted.
	   * @default false
	   */
	  disableRestoreFocus: propTypes.exports.bool,

	  /**
	   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
	   * For instance, you can provide the "tabbable" npm dependency.
	   * @param {HTMLElement} root
	   */
	  getTabbable: propTypes.exports.func,

	  /**
	   * This prop extends the `open` prop.
	   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
	   * This prop should be memoized.
	   * It can be used to support multiple trap focus mounted at the same time.
	   * @default function defaultIsEnabled() {
	   *   return true;
	   * }
	   */
	  isEnabled: propTypes.exports.func,

	  /**
	   * If `true`, focus is locked.
	   */
	  open: propTypes.exports.bool.isRequired
	} ;

	{
	  // eslint-disable-next-line
	  TrapFocus['propTypes' + ''] = exactProp(TrapFocus.propTypes);
	}

	function getModalUtilityClass(slot) {
	  return generateUtilityClass('MuiModal', slot);
	}
	generateUtilityClasses('MuiModal', ['root', 'hidden']);

	const _excluded$2h = ["children", "classes", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited"];

	const useUtilityClasses$1V = ownerState => {
	  const {
	    open,
	    exited,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', !open && exited && 'hidden']
	  };
	  return composeClasses(slots, getModalUtilityClass, classes);
	};

	function getContainer(container) {
	  return typeof container === 'function' ? container() : container;
	}

	function getHasTransition(props) {
	  return props.children ? props.children.props.hasOwnProperty('in') : false;
	} // A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.


	const defaultManager = new ModalManager();
	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */

	const ModalUnstyled = /*#__PURE__*/react.exports.forwardRef(function ModalUnstyled(props, ref) {
	  var _props$ariaHidden;

	  const {
	    children,
	    classes: classesProp,
	    closeAfterTransition = false,
	    component = 'div',
	    components = {},
	    componentsProps = {},
	    container,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableEscapeKeyDown = false,
	    disablePortal = false,
	    disableRestoreFocus = false,
	    disableScrollLock = false,
	    hideBackdrop = false,
	    keepMounted = false,
	    // private
	    // eslint-disable-next-line react/prop-types
	    manager = defaultManager,
	    onBackdropClick,
	    onClose,
	    onKeyDown,
	    open,

	    /* eslint-disable react/prop-types */
	    onTransitionEnter,
	    onTransitionExited
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2h);

	  const [exited, setExited] = react.exports.useState(true);
	  const modal = react.exports.useRef({});
	  const mountNodeRef = react.exports.useRef(null);
	  const modalRef = react.exports.useRef(null);
	  const handleRef = useForkRef(modalRef, ref);
	  const hasTransition = getHasTransition(props);
	  const ariaHiddenProp = (_props$ariaHidden = props['aria-hidden']) != null ? _props$ariaHidden : true;

	  const getDoc = () => ownerDocument(mountNodeRef.current);

	  const getModal = () => {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mountNode = mountNodeRef.current;
	    return modal.current;
	  };

	  const handleMounted = () => {
	    manager.mount(getModal(), {
	      disableScrollLock
	    }); // Fix a bug on Chrome where the scroll isn't initially 0.

	    modalRef.current.scrollTop = 0;
	  };

	  const handleOpen = useEventCallback(() => {
	    const resolvedContainer = getContainer(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer); // The element was already mounted.

	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  const isTopModal = react.exports.useCallback(() => manager.isTopModal(getModal()), [manager]);
	  const handlePortalRef = useEventCallback(node => {
	    mountNodeRef.current = node;

	    if (!node) {
	      return;
	    }

	    if (open && isTopModal()) {
	      handleMounted();
	    } else {
	      ariaHidden(modalRef.current, ariaHiddenProp);
	    }
	  });
	  const handleClose = react.exports.useCallback(() => {
	    manager.remove(getModal(), ariaHiddenProp);
	  }, [manager, ariaHiddenProp]);
	  react.exports.useEffect(() => {
	    return () => {
	      handleClose();
	    };
	  }, [handleClose]);
	  react.exports.useEffect(() => {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

	  const ownerState = _extends({}, props, {
	    classes: classesProp,
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    exited,
	    hideBackdrop,
	    keepMounted
	  });

	  const classes = useUtilityClasses$1V(ownerState);

	  const handleEnter = () => {
	    setExited(false);

	    if (onTransitionEnter) {
	      onTransitionEnter();
	    }
	  };

	  const handleExited = () => {
	    setExited(true);

	    if (onTransitionExited) {
	      onTransitionExited();
	    }

	    if (closeAfterTransition) {
	      handleClose();
	    }
	  };

	  const handleBackdropClick = event => {
	    if (event.target !== event.currentTarget) {
	      return;
	    }

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  const handleKeyDown = event => {
	    if (onKeyDown) {
	      onKeyDown(event);
	    } // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviors like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.


	    if (event.key !== 'Escape' || !isTopModal()) {
	      return;
	    }

	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();

	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };

	  const childProps = {};

	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = '-1';
	  } // It's a Transition like component


	  if (hasTransition) {
	    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
	    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
	  }

	  const Root = components.Root || component;
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref: handleRef,
	      role: 'presentation',
	      onKeyDown: handleKeyDown
	    },
	    className: classes.root,
	    ownerState
	  });
	  const BackdropComponent = components.Backdrop;
	  const backdropProps = useSlotProps({
	    elementType: BackdropComponent,
	    externalSlotProps: componentsProps.backdrop,
	    additionalProps: {
	      'aria-hidden': true,
	      onClick: handleBackdropClick,
	      open
	    },
	    ownerState
	  });

	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(Portal, {
	    ref: handlePortalRef,
	    container: container,
	    disablePortal: disablePortal,
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(BackdropComponent, _extends({}, backdropProps)) : null, /*#__PURE__*/jsxRuntime.exports.jsx(TrapFocus, {
	        disableEnforceFocus: disableEnforceFocus,
	        disableAutoFocus: disableAutoFocus,
	        disableRestoreFocus: disableRestoreFocus,
	        isEnabled: isTopModal,
	        open: open,
	        children: /*#__PURE__*/react.exports.cloneElement(children, childProps)
	      })]
	    }))
	  });
	});
	ModalUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   * @default false
	   */
	  closeAfterTransition: propTypes.exports.bool,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Modal.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Backdrop: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Modal.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    backdrop: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: propTypes.exports.bool,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: propTypes.exports.bool,

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool,

	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden or unmounted.
	   * @default false
	   */
	  disableRestoreFocus: propTypes.exports.bool,

	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: propTypes.exports.bool,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: propTypes.exports.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   * @default false
	   */
	  keepMounted: propTypes.exports.bool,

	  /**
	   * Callback fired when the backdrop is clicked.
	   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
	   */
	  onBackdropClick: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired
	} ;

	function isOptionGroup(child) {
	  return !!child.options;
	}

	function getOptionsFromChildren(children) {
	  if (children == null) {
	    return [];
	  }

	  const selectChildren = [];
	  React.Children.forEach(children, node => {
	    var _props, _props2, _element$props$disabl2;

	    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;

	    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {
	      if (nodeChildren != null) {
	        var _element$props$disabl;

	        const element = node;
	        const group = {
	          options: getOptionsFromChildren(nodeChildren),
	          label: element.props.label,
	          disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false
	        };
	        selectChildren.push(group);
	      }

	      return;
	    }

	    const element = node;
	    const option = {
	      value: element.props.value,
	      label: element.props.label || element.props.children,
	      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
	    };
	    selectChildren.push(option);
	  });
	  return selectChildren != null ? selectChildren : [];
	}
	function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
	  let flatOptions = [];
	  groupedOptions.forEach(optionOrGroup => {
	    if (isOptionGroup(optionOrGroup)) {
	      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
	    } else {
	      flatOptions.push(_extends({}, optionOrGroup, {
	        disabled: isGroupDisabled || optionOrGroup.disabled
	      }));
	    }
	  });
	  return flatOptions;
	}

	const defaultOptionStringifier = option => {
	  const {
	    label,
	    value
	  } = option;

	  if (typeof label === 'string') {
	    return label;
	  }

	  if (typeof value === 'string') {
	    return value;
	  } // Fall back string representation


	  return String(option);
	};

	function useSelect(props) {
	  const {
	    buttonRef: buttonRefProp,
	    defaultValue,
	    disabled = false,
	    listboxId,
	    listboxRef: listboxRefProp,
	    multiple = false,
	    onChange,
	    onOpenChange,
	    open = false,
	    options,
	    optionStringifier = defaultOptionStringifier,
	    value: valueProp
	  } = props;
	  const buttonRef = react.exports.useRef(null);
	  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);
	  const listboxRef = react.exports.useRef(null);
	  const [value, setValue] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'SelectUnstyled',
	    state: 'value'
	  }); // prevents closing the listbox on keyUp right after opening it

	  const ignoreEnterKeyUp = react.exports.useRef(false); // prevents reopening the listbox when button is clicked
	  // (listbox closes on lost focus, then immediately reopens on click)

	  const ignoreClick = react.exports.useRef(false); // Ensure the listbox is focused after opening

	  const [listboxFocusRequested, requestListboxFocus] = react.exports.useState(false);
	  const focusListboxIfRequested = react.exports.useCallback(() => {
	    if (listboxFocusRequested && listboxRef.current != null) {
	      listboxRef.current.focus();
	      requestListboxFocus(false);
	    }
	  }, [listboxFocusRequested]);

	  const updateListboxRef = listboxElement => {
	    listboxRef.current = listboxElement;
	    focusListboxIfRequested();
	  };

	  const handleListboxRef = useForkRef(useForkRef(listboxRefProp, listboxRef), updateListboxRef);
	  react.exports.useEffect(() => {
	    focusListboxIfRequested();
	  }, [focusListboxIfRequested]);
	  react.exports.useEffect(() => {
	    requestListboxFocus(open);
	  }, [open]);

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);

	    if (!event.defaultPrevented && open) {
	      ignoreClick.current = true;
	    }
	  };

	  const createHandleButtonClick = otherHandlers => event => {
	    var _otherHandlers$onClic;

	    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);

	    if (!event.defaultPrevented && !ignoreClick.current) {
	      onOpenChange == null ? void 0 : onOpenChange(!open);
	    }

	    ignoreClick.current = false;
	  };

	  const createHandleButtonKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (event.key === 'Enter') {
	      ignoreEnterKeyUp.current = true;
	    }

	    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
	      event.preventDefault();
	      onOpenChange == null ? void 0 : onOpenChange(true);
	    }
	  };

	  const createHandleListboxKeyUp = otherHandlers => event => {
	    var _otherHandlers$onKeyU;

	    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];

	    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
	      var _buttonRef$current;

	      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
	    }

	    ignoreEnterKeyUp.current = false;
	  };

	  const createHandleListboxItemClick = otherHandlers => event => {
	    var _otherHandlers$onClic2;

	    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (!multiple) {
	      onOpenChange == null ? void 0 : onOpenChange(false);
	    }
	  };

	  const createHandleListboxBlur = otherHandlers => event => {
	    var _otherHandlers$blur;

	    otherHandlers == null ? void 0 : (_otherHandlers$blur = otherHandlers.blur) == null ? void 0 : _otherHandlers$blur.call(otherHandlers, event);

	    if (!event.defaultPrevented) {
	      onOpenChange == null ? void 0 : onOpenChange(false);
	    }
	  };

	  const listboxReducer = (state, action) => {
	    const newState = defaultListboxReducer(state, action); // change selection when listbox is closed

	    if (action.type === ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {
	      return _extends({}, newState, {
	        selectedValue: newState.highlightedValue
	      });
	    }

	    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {
	      return _extends({}, newState, {
	        highlightedValue: newState.selectedValue
	      });
	    }

	    return newState;
	  };

	  const {
	    getRootProps: getButtonRootProps,
	    active: buttonActive,
	    focusVisible: buttonFocusVisible
	  } = useButton({
	    disabled,
	    ref: handleButtonRef
	  });
	  const selectedOption = react.exports.useMemo(() => {
	    var _props$options$find;

	    return props.multiple ? props.options.filter(o => value.includes(o.value)) : (_props$options$find = props.options.find(o => o.value === value)) != null ? _props$options$find : null;
	  }, [props.multiple, props.options, value]);
	  let useListboxParameters;

	  if (props.multiple) {
	    useListboxParameters = {
	      id: listboxId,
	      isOptionDisabled: o => {
	        var _o$disabled;

	        return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
	      },
	      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
	      listboxRef: handleListboxRef,
	      multiple: true,
	      onChange: newOptions => {
	        const newValues = newOptions.map(o => o.value);
	        setValue(newValues);
	        onChange == null ? void 0 : onChange(newValues);
	      },
	      options,
	      optionStringifier,
	      value: selectedOption
	    };
	  } else {
	    useListboxParameters = {
	      id: listboxId,
	      isOptionDisabled: o => {
	        var _o$disabled2;

	        return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
	      },
	      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
	      listboxRef: handleListboxRef,
	      multiple: false,
	      onChange: option => {
	        var _option$value, _option$value2;

	        setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
	        onChange == null ? void 0 : onChange((_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
	      },
	      options,
	      optionStringifier,
	      stateReducer: listboxReducer,
	      value: selectedOption
	    };
	  }

	  const {
	    getRootProps: getListboxRootProps,
	    getOptionProps: getListboxOptionProps,
	    getOptionState,
	    highlightedOption,
	    selectedOption: listboxSelectedOption
	  } = useListbox(useListboxParameters);

	  const getButtonProps = (otherHandlers = {}) => {
	    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {
	      onClick: createHandleButtonClick(otherHandlers),
	      onMouseDown: createHandleMouseDown(otherHandlers),
	      onKeyDown: createHandleButtonKeyDown(otherHandlers)
	    })), {
	      'aria-expanded': open,
	      'aria-haspopup': 'listbox'
	    });
	  };

	  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {
	    onBlur: createHandleListboxBlur(otherHandlers),
	    onKeyUp: createHandleListboxKeyUp(otherHandlers)
	  }));

	  const getOptionProps = (option, otherHandlers = {}) => {
	    return getListboxOptionProps(option, _extends({}, otherHandlers, {
	      onClick: createHandleListboxItemClick(otherHandlers)
	    }));
	  };

	  react.exports.useDebugValue({
	    selectedOption: listboxSelectedOption,
	    highlightedOption,
	    open
	  });
	  return {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps,
	    getListboxProps,
	    getOptionProps,
	    getOptionState,
	    open,
	    value
	  };
	}

	const SelectUnstyledContext = /*#__PURE__*/react.exports.createContext(undefined);

	function getSelectUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiSelectUnstyled', slot);
	}
	generateUtilityClasses('MuiSelectUnstyled', ['root', 'button', 'listbox', 'popper', 'active', 'expanded', 'disabled', 'focusVisible']);

	const _excluded$2g = ["autoFocus", "children", "component", "components", "componentsProps", "defaultListboxOpen", "defaultValue", "disabled", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "value"];

	function defaultRenderMultipleValues(selectedOptions) {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: selectedOptions.map(o => o.label).join(', ')
	  });
	}

	function useUtilityClasses$1U(ownerState) {
	  const {
	    active,
	    disabled,
	    open,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
	    listbox: ['listbox', disabled && 'disabled'],
	    popper: ['popper']
	  };
	  return composeClasses(slots, getSelectUnstyledUtilityClass, {});
	}
	/**
	 * The foundation for building custom-styled multi-selection select components.
	 */


	const MultiSelectUnstyled = /*#__PURE__*/react.exports.forwardRef(function MultiSelectUnstyled(props, ref) {
	  var _props$renderValue, _ref, _components$Listbox, _components$Popper;

	  const {
	    autoFocus,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultListboxOpen = false,
	    defaultValue = [],
	    disabled: disabledProp,
	    listboxId,
	    listboxOpen: listboxOpenProp,
	    onChange,
	    onListboxOpenChange,
	    value: valueProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2g);

	  const renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;
	  const [groupedOptions, setGroupedOptions] = react.exports.useState([]);
	  const options = react.exports.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
	  const [listboxOpen, setListboxOpen] = useControlled({
	    controlled: listboxOpenProp,
	    default: defaultListboxOpen,
	    name: 'MultiSelectUnstyled',
	    state: 'listboxOpen'
	  });
	  react.exports.useEffect(() => {
	    setGroupedOptions(getOptionsFromChildren(children));
	  }, [children]);
	  const [buttonDefined, setButtonDefined] = react.exports.useState(false);
	  const buttonRef = react.exports.useRef(null);
	  const listboxRef = react.exports.useRef(null);
	  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
	  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled;

	  const handleButtonRefChange = element => {
	    buttonRef.current = element;

	    if (element != null) {
	      setButtonDefined(true);
	    }
	  };

	  const handleButtonRef = useForkRef(ref, handleButtonRefChange);
	  react.exports.useEffect(() => {
	    if (autoFocus) {
	      buttonRef.current.focus();
	    }
	  }, [autoFocus]);

	  const handleOpenChange = isOpen => {
	    setListboxOpen(isOpen);
	    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
	  };

	  const {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps,
	    getListboxProps,
	    getOptionProps,
	    getOptionState,
	    value
	  } = useSelect({
	    buttonRef: handleButtonRef,
	    defaultValue,
	    disabled: disabledProp,
	    listboxId,
	    multiple: true,
	    onChange,
	    onOpenChange: handleOpenChange,
	    open: listboxOpen,
	    options,
	    value: valueProp
	  });

	  const ownerState = _extends({}, props, {
	    active: buttonActive,
	    defaultListboxOpen,
	    disabled,
	    focusVisible: buttonFocusVisible,
	    open: listboxOpen,
	    renderValue,
	    value
	  });

	  const classes = useUtilityClasses$1U(ownerState);
	  const selectedOptions = react.exports.useMemo(() => {
	    if (value == null) {
	      return [];
	    }

	    return options.filter(o => value.includes(o.value));
	  }, [options, value]);
	  const buttonProps = useSlotProps({
	    elementType: Button,
	    getSlotProps: getButtonProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    ownerState,
	    className: classes.root
	  });
	  const listboxProps = useSlotProps({
	    elementType: ListboxRoot,
	    getSlotProps: getListboxProps,
	    externalSlotProps: componentsProps.listbox,
	    additionalProps: {
	      ref: listboxRef
	    },
	    ownerState,
	    className: classes.listbox
	  });
	  const popperProps = useSlotProps({
	    elementType: Popper,
	    externalSlotProps: componentsProps.popper,
	    additionalProps: {
	      anchorEl: buttonRef.current,
	      disablePortal: true,
	      open: listboxOpen,
	      placement: 'bottom-start',
	      role: undefined
	    },
	    ownerState,
	    className: classes.popper
	  });
	  const context = {
	    getOptionProps,
	    getOptionState,
	    listboxRef
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Button, _extends({}, buttonProps, {
	      children: renderValue(selectedOptions)
	    })), buttonDefined && /*#__PURE__*/jsxRuntime.exports.jsx(Popper, _extends({}, popperProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(ListboxRoot, _extends({}, listboxProps, {
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(SelectUnstyledContext.Provider, {
	          value: context,
	          children: children
	        })
	      }))
	    }))]
	  });
	});
	MultiSelectUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the select element is focused during the first mount
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Select.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    Listbox: propTypes.exports.elementType,
	    Popper: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    listbox: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    popper: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the select will be initially open.
	   * @default false
	   */
	  defaultListboxOpen: propTypes.exports.bool,

	  /**
	   * The default selected values. Use when the component is not controlled.
	   * @default []
	   */
	  defaultValue: propTypes.exports.array,

	  /**
	   * If `true`, the select is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * `id` attribute of the listbox element.
	   * Also used to derive the `id` attributes of options.
	   */
	  listboxId: propTypes.exports.string,

	  /**
	   * Controls the open state of the select's listbox.
	   * @default undefined
	   */
	  listboxOpen: propTypes.exports.bool,

	  /**
	   * Callback fired when an option is selected.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see listboxOpen).
	   */
	  onListboxOpenChange: propTypes.exports.func,

	  /**
	   * Function that customizes the rendering of the selected values.
	   */
	  renderValue: propTypes.exports.func,

	  /**
	   * The selected values.
	   * Set to an empty array to deselect all options.
	   */
	  value: propTypes.exports.array
	} ;

	function NoSsr(props) {
	  const {
	    children,
	    defer = false,
	    fallback = null
	  } = props;
	  const [mountedState, setMountedState] = react.exports.useState(false);
	  useEnhancedEffect(() => {
	    if (!defer) {
	      setMountedState(true);
	    }
	  }, [defer]);
	  react.exports.useEffect(() => {
	    if (defer) {
	      setMountedState(true);
	    }
	  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.

	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: mountedState ? children : fallback
	  });
	}

	NoSsr.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * You can wrap a node.
	   */
	  children: propTypes.exports.node,

	  /**
	   * If `true`, the component will not only prevent server-side rendering.
	   * It will also defer the rendering of the children into a different screen frame.
	   * @default false
	   */
	  defer: propTypes.exports.bool,

	  /**
	   * The fallback content to display.
	   * @default null
	   */
	  fallback: propTypes.exports.node
	} ;

	{
	  // eslint-disable-next-line
	  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);
	}

	function getOptionGroupUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiOptionGroupUnstyled', slot);
	}
	generateUtilityClasses('MuiOptionGroupUnstyled', ['root', 'label', 'list']);

	const _excluded$2f = ["component", "components", "disabled", "componentsProps"];

	function useUtilityClasses$1T(disabled) {
	  const slots = {
	    root: ['root', disabled && 'disabled'],
	    label: ['label'],
	    list: ['list']
	  };
	  return composeClasses(slots, getOptionGroupUnstyledUtilityClass, {});
	}
	/**
	 * An unstyled option group to be used within a SelectUnstyled.
	 *
	 * Demos:
	 *
	 * - [Select](https://mui.com/base/react-select/)
	 *
	 * API:
	 *
	 * - [OptionGroupUnstyled API](https://mui.com/base/api/option-group-unstyled/)
	 */


	const OptionGroupUnstyled = /*#__PURE__*/React.forwardRef(function OptionGroupUnstyled(props, ref) {
	  const {
	    component,
	    components = {},
	    disabled = false,
	    componentsProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2f);

	  const Root = component || (components == null ? void 0 : components.Root) || 'li';
	  const Label = (components == null ? void 0 : components.Label) || 'span';
	  const List = (components == null ? void 0 : components.List) || 'ul';
	  const classes = useUtilityClasses$1T(disabled);
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState: props,
	    className: classes.root
	  });
	  const labelProps = useSlotProps({
	    elementType: Label,
	    externalSlotProps: componentsProps.label,
	    ownerState: props,
	    className: classes.label
	  });
	  const listProps = useSlotProps({
	    elementType: List,
	    externalSlotProps: componentsProps.list,
	    ownerState: props,
	    className: classes.list
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Label, _extends({}, labelProps, {
	      children: props.label
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(List, _extends({}, listProps, {
	      children: props.children
	    }))]
	  }));
	});
	OptionGroupUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to components.Root.
	   * If both are provided, the component is used.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the OptionGroupUnstyled.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Label: propTypes.exports.elementType,
	    List: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    label: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    list: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true` all the options in the group will be disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * The human-readable description of the group.
	   */
	  label: propTypes.exports.node
	} ;

	function getOptionUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiOptionUnstyled', slot);
	}
	generateUtilityClasses('MuiOptionUnstyled', ['root', 'disabled', 'selected', 'highlighted']);

	const _excluded$2e = ["children", "component", "components", "componentsProps", "disabled", "value", "label"];

	function useUtilityClasses$1S(ownerState) {
	  const {
	    disabled,
	    highlighted,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']
	  };
	  return composeClasses(slots, getOptionUnstyledUtilityClass, {});
	}
	/**
	 * An unstyled option to be used within a SelectUnstyled.
	 */


	const OptionUnstyled = /*#__PURE__*/React.forwardRef(function OptionUnstyled(props, ref) {
	  const {
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    disabled,
	    value,
	    label
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2e);

	  const selectContext = React.useContext(SelectUnstyledContext);

	  if (!selectContext) {
	    throw new Error('OptionUnstyled must be used within a SelectUnstyled');
	  }

	  const Root = component || components.Root || 'li';
	  const selectOption = {
	    value,
	    label: label || children,
	    disabled
	  };
	  const optionState = selectContext.getOptionState(selectOption);
	  const optionProps = selectContext.getOptionProps(selectOption);
	  const listboxRef = selectContext.listboxRef;

	  const ownerState = _extends({}, props, optionState);

	  const optionRef = React.useRef(null);
	  const handleRef = useForkRef(ref, optionRef);
	  React.useEffect(() => {
	    // Scroll to the currently highlighted option
	    if (optionState.highlighted) {
	      if (!listboxRef.current || !optionRef.current) {
	        return;
	      }

	      const listboxClientRect = listboxRef.current.getBoundingClientRect();
	      const optionClientRect = optionRef.current.getBoundingClientRect();

	      if (optionClientRect.top < listboxClientRect.top) {
	        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
	      } else if (optionClientRect.bottom > listboxClientRect.bottom) {
	        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
	      }
	    }
	  }, [optionState.highlighted, listboxRef]);
	  const classes = useUtilityClasses$1S(ownerState);
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: _extends({}, optionProps, {
	      ref: handleRef
	    }),
	    className: classes.root,
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
	    children: children
	  }));
	});
	OptionUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to components.Root.
	   * If both are provided, the component is used.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the OptionUnstyled.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the option will be disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * A text representation of the option's content.
	   * Used for keyboard text navigation matching.
	   */
	  label: propTypes.exports.string,

	  /**
	   * The value of the option.
	   */
	  value: propTypes.exports.any.isRequired
	} ;

	const _excluded$2d = ["autoFocus", "children", "component", "components", "componentsProps", "defaultValue", "defaultListboxOpen", "disabled", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "renderValue", "value"];

	function defaultRenderSingleValue(selectedOption) {
	  var _selectedOption$label;

	  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';
	}

	function useUtilityClasses$1R(ownerState) {
	  const {
	    active,
	    disabled,
	    open,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
	    listbox: ['listbox', disabled && 'disabled'],
	    popper: ['popper']
	  };
	  return composeClasses(slots, getSelectUnstyledUtilityClass, {});
	}
	/**
	 * The foundation for building custom-styled select components.
	 */


	const SelectUnstyled = /*#__PURE__*/react.exports.forwardRef(function SelectUnstyled(props, ref) {
	  var _ref, _components$Listbox, _components$Popper;

	  const {
	    autoFocus,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    defaultListboxOpen = false,
	    disabled: disabledProp,
	    listboxId,
	    listboxOpen: listboxOpenProp,
	    onChange,
	    onListboxOpenChange,
	    renderValue: renderValueProp,
	    value: valueProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2d);

	  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
	  const [groupedOptions, setGroupedOptions] = react.exports.useState([]);
	  const options = react.exports.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
	  const [listboxOpen, setListboxOpen] = useControlled({
	    controlled: listboxOpenProp,
	    default: defaultListboxOpen,
	    name: 'SelectUnstyled',
	    state: 'listboxOpen'
	  });
	  react.exports.useEffect(() => {
	    setGroupedOptions(getOptionsFromChildren(children));
	  }, [children]);
	  const [buttonDefined, setButtonDefined] = react.exports.useState(false);
	  const buttonRef = react.exports.useRef(null);
	  const listboxRef = react.exports.useRef(null);
	  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
	  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled;

	  const handleButtonRefChange = element => {
	    buttonRef.current = element;

	    if (element != null) {
	      setButtonDefined(true);
	    }
	  };

	  const handleButtonRef = useForkRef(ref, handleButtonRefChange);
	  react.exports.useEffect(() => {
	    if (autoFocus) {
	      buttonRef.current.focus();
	    }
	  }, [autoFocus]);

	  const handleOpenChange = isOpen => {
	    setListboxOpen(isOpen);
	    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
	  };

	  const {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps,
	    getListboxProps,
	    getOptionProps,
	    getOptionState,
	    value
	  } = useSelect({
	    buttonRef: handleButtonRef,
	    defaultValue,
	    disabled: disabledProp,
	    listboxId,
	    multiple: false,
	    onChange,
	    onOpenChange: handleOpenChange,
	    open: listboxOpen,
	    options,
	    value: valueProp
	  });

	  const ownerState = _extends({}, props, {
	    active: buttonActive,
	    defaultListboxOpen,
	    disabled,
	    focusVisible: buttonFocusVisible,
	    open: listboxOpen,
	    renderValue,
	    value
	  });

	  const classes = useUtilityClasses$1R(ownerState);
	  const selectedOptions = react.exports.useMemo(() => {
	    return options.find(o => value === o.value);
	  }, [options, value]);
	  const buttonProps = useSlotProps({
	    elementType: Button,
	    getSlotProps: getButtonProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    ownerState,
	    className: classes.root
	  });
	  const listboxProps = useSlotProps({
	    elementType: ListboxRoot,
	    getSlotProps: getListboxProps,
	    externalSlotProps: componentsProps.listbox,
	    additionalProps: {
	      ref: listboxRef
	    },
	    ownerState,
	    className: classes.listbox
	  });
	  const popperProps = useSlotProps({
	    elementType: Popper,
	    externalSlotProps: componentsProps.popper,
	    additionalProps: {
	      anchorEl: buttonRef.current,
	      disablePortal: true,
	      open: listboxOpen,
	      placement: 'bottom-start',
	      role: undefined
	    },
	    ownerState,
	    className: classes.popper
	  });
	  const context = {
	    getOptionProps,
	    getOptionState,
	    listboxRef
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Button, _extends({}, buttonProps, {
	      children: renderValue(selectedOptions)
	    })), buttonDefined && /*#__PURE__*/jsxRuntime.exports.jsx(Popper, _extends({}, popperProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(ListboxRoot, _extends({}, listboxProps, {
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(SelectUnstyledContext.Provider, {
	          value: context,
	          children: children
	        })
	      }))
	    }))]
	  });
	});
	SelectUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the select element is focused during the first mount
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Select.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    Listbox: propTypes.exports.elementType,
	    Popper: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    listbox: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    popper: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the select will be initially open.
	   * @default false
	   */
	  defaultListboxOpen: propTypes.exports.bool,

	  /**
	   * The default selected value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .any,

	  /**
	   * If `true`, the select is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * `id` attribute of the listbox element.
	   * Also used to derive the `id` attributes of options.
	   */
	  listboxId: propTypes.exports.string,

	  /**
	   * Controls the open state of the select's listbox.
	   * @default undefined
	   */
	  listboxOpen: propTypes.exports.bool,

	  /**
	   * Callback fired when an option is selected.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see listboxOpen).
	   */
	  onListboxOpenChange: propTypes.exports.func,

	  /**
	   * Function that customizes the rendering of the selected value.
	   */
	  renderValue: propTypes.exports.func,

	  /**
	   * The selected value.
	   * Set to `null` to deselect all options.
	   */
	  value: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .any
	} ;

	function getSliderUtilityClass(slot) {
	  return generateUtilityClass('MuiSlider', slot);
	}
	const sliderUnstyledClasses = generateUtilityClasses('MuiSlider', ['root', 'active', 'focusVisible', 'disabled', 'dragging', 'marked', 'vertical', 'trackInverted', 'trackFalse', 'rail', 'track', 'mark', 'markActive', 'markLabel', 'markLabelActive', 'thumb', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel']);

	const useValueLabelClasses = props => {
	  const {
	    open
	  } = props;
	  const utilityClasses = {
	    offset: clsx(open && sliderUnstyledClasses.valueLabelOpen),
	    circle: sliderUnstyledClasses.valueLabelCircle,
	    label: sliderUnstyledClasses.valueLabelLabel
	  };
	  return utilityClasses;
	};
	/**
	 * @ignore - internal component.
	 */


	function SliderValueLabelUnstyled(props) {
	  const {
	    children,
	    className,
	    value,
	    theme
	  } = props;
	  const classes = useValueLabelClasses(props);
	  return /*#__PURE__*/react.exports.cloneElement(children, {
	    className: clsx(children.props.className)
	  }, /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [children.props.children, /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: clsx(classes.offset, className),
	      theme: theme,
	      "aria-hidden": true,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: classes.circle,
	        children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	          className: classes.label,
	          children: value
	        })
	      })
	    })]
	  }));
	}
	SliderValueLabelUnstyled.propTypes = {
	  children: propTypes.exports.element.isRequired,
	  className: propTypes.exports.string,
	  theme: propTypes.exports.any,
	  value: propTypes.exports.node
	} ;

	const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;

	function asc(a, b) {
	  return a - b;
	}

	function clamp$2(value, min, max) {
	  if (value == null) {
	    return min;
	  }

	  return Math.min(Math.max(min, value), max);
	}

	function findClosest(values, currentValue) {
	  var _values$reduce;

	  const {
	    index: closestIndex
	  } = (_values$reduce = values.reduce((acc, value, index) => {
	    const distance = Math.abs(currentValue - value);

	    if (acc === null || distance < acc.distance || distance === acc.distance) {
	      return {
	        distance,
	        index
	      };
	    }

	    return acc;
	  }, null)) != null ? _values$reduce : {};
	  return closestIndex;
	}

	function trackFinger(event, touchId) {
	  // The event is TouchEvent
	  if (touchId.current !== undefined && event.changedTouches) {
	    const touchEvent = event;

	    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
	      const touch = touchEvent.changedTouches[i];

	      if (touch.identifier === touchId.current) {
	        return {
	          x: touch.clientX,
	          y: touch.clientY
	        };
	      }
	    }

	    return false;
	  } // The event is MouseEvent


	  return {
	    x: event.clientX,
	    y: event.clientY
	  };
	}

	function valueToPercent(value, min, max) {
	  return (value - min) * 100 / (max - min);
	}

	function percentToValue(percent, min, max) {
	  return (max - min) * percent + min;
	}

	function getDecimalPrecision$1(num) {
	  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
	  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
	  if (Math.abs(num) < 1) {
	    const parts = num.toExponential().split('e-');
	    const matissaDecimalPart = parts[0].split('.')[1];
	    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
	  }

	  const decimalPart = num.toString().split('.')[1];
	  return decimalPart ? decimalPart.length : 0;
	}

	function roundValueToStep(value, step, min) {
	  const nearest = Math.round((value - min) / step) * step + min;
	  return Number(nearest.toFixed(getDecimalPrecision$1(step)));
	}

	function setValueIndex({
	  values,
	  newValue,
	  index
	}) {
	  const output = values.slice();
	  output[index] = newValue;
	  return output.sort(asc);
	}

	function focusThumb({
	  sliderRef,
	  activeIndex,
	  setActive
	}) {
	  var _sliderRef$current, _doc$activeElement;

	  const doc = ownerDocument(sliderRef.current);

	  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
	    var _sliderRef$current2;

	    (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
	  }

	  if (setActive) {
	    setActive(activeIndex);
	  }
	}

	const axisProps = {
	  horizontal: {
	    offset: percent => ({
	      left: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  'horizontal-reverse': {
	    offset: percent => ({
	      right: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  vertical: {
	    offset: percent => ({
	      bottom: `${percent}%`
	    }),
	    leap: percent => ({
	      height: `${percent}%`
	    })
	  }
	};
	const Identity$1 = x => x; // TODO: remove support for Safari < 13.
	// https://caniuse.com/#search=touch-action
	//
	// Safari, on iOS, supports touch action since v13.
	// Over 80% of the iOS phones are compatible
	// in August 2020.
	// Utilizing the CSS.supports method to check if touch-action is supported.
	// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
	// is supported on both Edge@12 and IE if CSS.supports is not available that means that
	// touch-action will be supported

	let cachedSupportsTouchActionNone;

	function doesSupportTouchActionNone() {
	  if (cachedSupportsTouchActionNone === undefined) {
	    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
	      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
	    } else {
	      cachedSupportsTouchActionNone = true;
	    }
	  }

	  return cachedSupportsTouchActionNone;
	}

	function useSlider(parameters) {
	  const {
	    'aria-labelledby': ariaLabelledby,
	    defaultValue,
	    disabled = false,
	    disableSwap = false,
	    isRtl = false,
	    marks: marksProp = false,
	    max = 100,
	    min = 0,
	    name,
	    onChange,
	    onChangeCommitted,
	    orientation = 'horizontal',
	    ref,
	    scale = Identity$1,
	    step = 1,
	    tabIndex,
	    value: valueProp
	  } = parameters;
	  const touchId = react.exports.useRef(); // We can't use the :active browser pseudo-classes.
	  // - The active state isn't triggered when clicking on the rail.
	  // - The active state isn't transferred when inversing a range slider.

	  const [active, setActive] = react.exports.useState(-1);
	  const [open, setOpen] = react.exports.useState(-1);
	  const [dragging, setDragging] = react.exports.useState(false);
	  const moveCount = react.exports.useRef(0);
	  const [valueDerived, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue != null ? defaultValue : min,
	    name: 'Slider'
	  });

	  const handleChange = onChange && ((event, value, thumbIndex) => {
	    // Redefine target to allow name and value to be read.
	    // This allows seamless integration with the most popular form libraries.
	    // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
	    // Clone the event to not override `target` of the original event.
	    const nativeEvent = event.nativeEvent || event; // @ts-ignore The nativeEvent is function, not object

	    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	    Object.defineProperty(clonedEvent, 'target', {
	      writable: true,
	      value: {
	        value,
	        name
	      }
	    });
	    onChange(clonedEvent, value, thumbIndex);
	  });

	  const range = Array.isArray(valueDerived);
	  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
	  values = values.map(value => clamp$2(value, min, max));
	  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
	    value: min + step * index
	  })) : marksProp || [];
	  const marksValues = marks.map(mark => mark.value);
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusedThumbIndex, setFocusedThumbIndex] = react.exports.useState(-1);
	  const sliderRef = react.exports.useRef();
	  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
	  const handleRef = useForkRef(ref, handleFocusRef);

	  const createHandleHiddenInputFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;

	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusedThumbIndex(index);
	    }

	    setOpen(index);
	    otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
	  };

	  const createHandleHiddenInputBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusedThumbIndex(-1);
	    }

	    setOpen(-1);
	    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
	  };

	  useEnhancedEffect(() => {
	    if (disabled && sliderRef.current.contains(document.activeElement)) {
	      var _document$activeEleme;

	      // This is necessary because Firefox and Safari will keep focus
	      // on a disabled element:
	      // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
	      // @ts-ignore
	      (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
	    }
	  }, [disabled]);

	  if (disabled && active !== -1) {
	    setActive(-1);
	  }

	  if (disabled && focusedThumbIndex !== -1) {
	    setFocusedThumbIndex(-1);
	  }

	  const createHandleHiddenInputChange = otherHandlers => event => {
	    var _otherHandlers$onChan;

	    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    const value = values[index];
	    const marksIndex = marksValues.indexOf(value); // @ts-ignore

	    let newValue = event.target.valueAsNumber;

	    if (marks && step == null) {
	      newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
	    }

	    newValue = clamp$2(newValue, min, max);

	    if (marks && step == null) {
	      const currentMarkIndex = marksValues.indexOf(values[index]);
	      newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
	    }

	    if (range) {
	      // Bound the new value to the thumb's neighbours.
	      if (disableSwap) {
	        newValue = clamp$2(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
	      }

	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values,
	        newValue,
	        index
	      });
	      let activeIndex = index; // Potentially swap the index if needed.

	      if (!disableSwap) {
	        activeIndex = newValue.indexOf(previousValue);
	      }

	      focusThumb({
	        sliderRef,
	        activeIndex
	      });
	    }

	    setValueState(newValue);
	    setFocusedThumbIndex(index);

	    if (handleChange) {
	      handleChange(event, newValue, index);
	    }

	    if (onChangeCommitted) {
	      onChangeCommitted(event, newValue);
	    }
	  };

	  const previousIndex = react.exports.useRef();
	  let axis = orientation;

	  if (isRtl && orientation === 'horizontal') {
	    axis += '-reverse';
	  }

	  const getFingerNewValue = ({
	    finger,
	    move = false,
	    values: values2
	  }) => {
	    const {
	      current: slider
	    } = sliderRef;
	    const {
	      width,
	      height,
	      bottom,
	      left
	    } = slider.getBoundingClientRect();
	    let percent;

	    if (axis.indexOf('vertical') === 0) {
	      percent = (bottom - finger.y) / height;
	    } else {
	      percent = (finger.x - left) / width;
	    }

	    if (axis.indexOf('-reverse') !== -1) {
	      percent = 1 - percent;
	    }

	    let newValue;
	    newValue = percentToValue(percent, min, max);

	    if (step) {
	      newValue = roundValueToStep(newValue, step, min);
	    } else {
	      const closestIndex = findClosest(marksValues, newValue);
	      newValue = marksValues[closestIndex];
	    }

	    newValue = clamp$2(newValue, min, max);
	    let activeIndex = 0;

	    if (range) {
	      if (!move) {
	        activeIndex = findClosest(values2, newValue);
	      } else {
	        activeIndex = previousIndex.current;
	      } // Bound the new value to the thumb's neighbours.


	      if (disableSwap) {
	        newValue = clamp$2(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
	      }

	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values: values2,
	        newValue,
	        index: activeIndex
	      }); // Potentially swap the index if needed.

	      if (!(disableSwap && move)) {
	        activeIndex = newValue.indexOf(previousValue);
	        previousIndex.current = activeIndex;
	      }
	    }

	    return {
	      newValue,
	      activeIndex
	    };
	  };

	  const handleTouchMove = useEventCallback(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);

	    if (!finger) {
	      return;
	    }

	    moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.
	    // @ts-ignore buttons doesn't not exists on touch event

	    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
	      // eslint-disable-next-line @typescript-eslint/no-use-before-define
	      handleTouchEnd(nativeEvent);
	      return;
	    }

	    const {
	      newValue,
	      activeIndex
	    } = getFingerNewValue({
	      finger,
	      move: true,
	      values
	    });
	    focusThumb({
	      sliderRef,
	      activeIndex,
	      setActive
	    });
	    setValueState(newValue);

	    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
	      setDragging(true);
	    }

	    if (handleChange) {
	      handleChange(nativeEvent, newValue, activeIndex);
	    }
	  });
	  const handleTouchEnd = useEventCallback(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);
	    setDragging(false);

	    if (!finger) {
	      return;
	    }

	    const {
	      newValue
	    } = getFingerNewValue({
	      finger,
	      move: true,
	      values
	    });
	    setActive(-1);

	    if (nativeEvent.type === 'touchend') {
	      setOpen(-1);
	    }

	    if (onChangeCommitted) {
	      onChangeCommitted(nativeEvent, newValue);
	    }

	    touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define

	    stopListening();
	  });
	  const handleTouchStart = useEventCallback(nativeEvent => {
	    if (disabled) {
	      return;
	    } // If touch-action: none; is not supported we need to prevent the scroll manually.


	    if (!doesSupportTouchActionNone()) {
	      nativeEvent.preventDefault();
	    }

	    const touch = nativeEvent.changedTouches[0];

	    if (touch != null) {
	      // A number that uniquely identifies the current finger in the touch session.
	      touchId.current = touch.identifier;
	    }

	    const finger = trackFinger(nativeEvent, touchId);

	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger,
	        values
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);

	      if (handleChange) {
	        handleChange(nativeEvent, newValue, activeIndex);
	      }
	    }

	    moveCount.current = 0;
	    const doc = ownerDocument(sliderRef.current);
	    doc.addEventListener('touchmove', handleTouchMove);
	    doc.addEventListener('touchend', handleTouchEnd);
	  });
	  const stopListening = react.exports.useCallback(() => {
	    const doc = ownerDocument(sliderRef.current);
	    doc.removeEventListener('mousemove', handleTouchMove);
	    doc.removeEventListener('mouseup', handleTouchEnd);
	    doc.removeEventListener('touchmove', handleTouchMove);
	    doc.removeEventListener('touchend', handleTouchEnd);
	  }, [handleTouchEnd, handleTouchMove]);
	  react.exports.useEffect(() => {
	    const {
	      current: slider
	    } = sliderRef;
	    slider.addEventListener('touchstart', handleTouchStart, {
	      passive: doesSupportTouchActionNone()
	    });
	    return () => {
	      // @ts-ignore
	      slider.removeEventListener('touchstart', handleTouchStart, {
	        passive: doesSupportTouchActionNone()
	      });
	      stopListening();
	    };
	  }, [stopListening, handleTouchStart]);
	  react.exports.useEffect(() => {
	    if (disabled) {
	      stopListening();
	    }
	  }, [disabled, stopListening]);

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);

	    if (disabled) {
	      return;
	    }

	    if (event.defaultPrevented) {
	      return;
	    } // Only handle left clicks


	    if (event.button !== 0) {
	      return;
	    } // Avoid text selection


	    event.preventDefault();
	    const finger = trackFinger(event, touchId);

	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger,
	        values
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);

	      if (handleChange) {
	        handleChange(event, newValue, activeIndex);
	      }
	    }

	    moveCount.current = 0;
	    const doc = ownerDocument(sliderRef.current);
	    doc.addEventListener('mousemove', handleTouchMove);
	    doc.addEventListener('mouseup', handleTouchEnd);
	  };

	  const trackOffset = valueToPercent(range ? values[0] : min, min, max);
	  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;

	  const getRootProps = (otherHandlers = {}) => {
	    const ownEventHandlers = {
	      onMouseDown: createHandleMouseDown(otherHandlers || {})
	    };

	    const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);

	    return _extends({
	      ref: handleRef
	    }, mergedEventHandlers);
	  };

	  const createHandleMouseOver = otherHandlers => event => {
	    var _otherHandlers$onMous2;

	    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    setOpen(index);
	  };

	  const createHandleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous3;

	    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
	    setOpen(-1);
	  };

	  const getThumbProps = (otherHandlers = {}) => {
	    const ownEventHandlers = {
	      onMouseOver: createHandleMouseOver(otherHandlers || {}),
	      onMouseLeave: createHandleMouseLeave(otherHandlers || {})
	    };
	    return _extends({}, otherHandlers, ownEventHandlers);
	  };

	  const getHiddenInputProps = (otherHandlers = {}) => {
	    var _parameters$step;

	    const ownEventHandlers = {
	      onChange: createHandleHiddenInputChange(otherHandlers || {}),
	      onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
	      onBlur: createHandleHiddenInputBlur(otherHandlers || {})
	    };

	    const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);

	    return _extends({
	      tabIndex,
	      'aria-labelledby': ariaLabelledby,
	      'aria-orientation': orientation,
	      'aria-valuemax': scale(max),
	      'aria-valuemin': scale(min),
	      name,
	      type: 'range',
	      min: parameters.min,
	      max: parameters.max,
	      step: (_parameters$step = parameters.step) != null ? _parameters$step : undefined,
	      disabled
	    }, mergedEventHandlers, {
	      style: _extends({}, visuallyHidden, {
	        direction: isRtl ? 'rtl' : 'ltr',
	        // So that VoiceOver's focus indicator matches the thumb's dimensions
	        width: '100%',
	        height: '100%'
	      })
	    });
	  };

	  return {
	    active,
	    axis: axis,
	    axisProps,
	    dragging,
	    focusedThumbIndex,
	    getHiddenInputProps,
	    getRootProps,
	    getThumbProps,
	    marks: marks,
	    open,
	    range,
	    trackLeap,
	    trackOffset,
	    values
	  };
	}

	const _excluded$2c = ["aria-label", "aria-valuetext", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];

	const Identity = x => x;

	const useUtilityClasses$1Q = ownerState => {
	  const {
	    disabled,
	    dragging,
	    marked,
	    orientation,
	    track,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],
	    rail: ['rail'],
	    track: ['track'],
	    mark: ['mark'],
	    markActive: ['markActive'],
	    markLabel: ['markLabel'],
	    markLabelActive: ['markLabelActive'],
	    valueLabel: ['valueLabel'],
	    thumb: ['thumb', disabled && 'disabled'],
	    active: ['active'],
	    disabled: ['disabled'],
	    focusVisible: ['focusVisible']
	  };
	  return composeClasses(slots, getSliderUtilityClass, classes);
	};

	const Forward = ({
	  children
	}) => children;

	const SliderUnstyled = /*#__PURE__*/react.exports.forwardRef(function SliderUnstyled(props, ref) {
	  var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;

	  const {
	    'aria-label': ariaLabel,
	    'aria-valuetext': ariaValuetext,
	    className,
	    component,
	    classes: classesProp,
	    disableSwap = false,
	    disabled = false,
	    getAriaLabel,
	    getAriaValueText,
	    marks: marksProp = false,
	    max = 100,
	    min = 0,
	    orientation = 'horizontal',
	    scale = Identity,
	    step = 1,
	    track = 'normal',
	    valueLabelDisplay = 'off',
	    valueLabelFormat = Identity,
	    isRtl = false,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2c); // all props with defaults
	  // consider extracting to hook an reusing the lint rule for the varints


	  const ownerState = _extends({}, props, {
	    marks: marksProp,
	    classes: classesProp,
	    disabled,
	    isRtl,
	    max,
	    min,
	    orientation,
	    scale,
	    step,
	    track,
	    valueLabelDisplay,
	    valueLabelFormat
	  });

	  const {
	    axisProps,
	    getRootProps,
	    getHiddenInputProps,
	    getThumbProps,
	    open,
	    active,
	    axis,
	    range,
	    focusedThumbIndex,
	    dragging,
	    marks,
	    values,
	    trackOffset,
	    trackLeap
	  } = useSlider(_extends({}, ownerState, {
	    ref
	  }));
	  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);
	  ownerState.dragging = dragging;
	  ownerState.focusedThumbIndex = focusedThumbIndex;
	  const classes = useUtilityClasses$1Q(ownerState);
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    ownerState,
	    className: [classes.root, className]
	  });
	  const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : 'span';
	  const railProps = useSlotProps({
	    elementType: Rail,
	    externalSlotProps: componentsProps.rail,
	    ownerState,
	    className: classes.rail
	  });
	  const Track = (_components$Track = components.Track) != null ? _components$Track : 'span';
	  const trackProps = useSlotProps({
	    elementType: Track,
	    externalSlotProps: componentsProps.track,
	    additionalProps: {
	      style: _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
	    },
	    ownerState,
	    className: classes.track
	  });
	  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
	  const thumbProps = useSlotProps({
	    elementType: Thumb,
	    getSlotProps: getThumbProps,
	    externalSlotProps: componentsProps.thumb,
	    ownerState
	  });
	  const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : SliderValueLabelUnstyled;
	  const valueLabelProps = useSlotProps({
	    elementType: ValueLabel,
	    externalSlotProps: componentsProps.valueLabel,
	    ownerState
	  });
	  const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : 'span';
	  const markProps = useSlotProps({
	    elementType: Mark,
	    externalSlotProps: componentsProps.mark,
	    ownerState,
	    className: classes.mark
	  });
	  const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : 'span';
	  const markLabelProps = useSlotProps({
	    elementType: MarkLabel,
	    externalSlotProps: componentsProps.markLabel,
	    ownerState
	  });
	  const Input = components.Input || 'input';
	  const inputProps = useSlotProps({
	    elementType: Input,
	    getSlotProps: getHiddenInputProps,
	    externalSlotProps: componentsProps.input,
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Rail, _extends({}, railProps)), /*#__PURE__*/jsxRuntime.exports.jsx(Track, _extends({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {
	      const percent = valueToPercent(mark.value, min, max);
	      const style = axisProps[axis].offset(percent);
	      let markActive;

	      if (track === false) {
	        markActive = values.indexOf(mark.value) !== -1;
	      } else {
	        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
	      }

	      return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	        children: [/*#__PURE__*/jsxRuntime.exports.jsx(Mark, _extends({
	          "data-index": index
	        }, markProps, !isHostComponent(Mark) && {
	          markActive
	        }, {
	          style: _extends({}, style, markProps.style),
	          className: clsx(markProps.className, markActive && classes.markActive)
	        })), mark.label != null ? /*#__PURE__*/jsxRuntime.exports.jsx(MarkLabel, _extends({
	          "aria-hidden": true,
	          "data-index": index
	        }, markLabelProps, !isHostComponent(MarkLabel) && {
	          markLabelActive: markActive
	        }, {
	          style: _extends({}, style, markLabelProps.style),
	          className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
	          children: mark.label
	        })) : null]
	      }, mark.value);
	    }), values.map((value, index) => {
	      const percent = valueToPercent(value, min, max);
	      const style = axisProps[axis].offset(percent);
	      const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
	      return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
	          valueLabelFormat,
	          valueLabelDisplay,
	          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
	          index,
	          open: open === index || active === index || valueLabelDisplay === 'on',
	          disabled
	        }, valueLabelProps, {
	          className: clsx(classes.valueLabel, valueLabelProps.className),
	          children: /*#__PURE__*/jsxRuntime.exports.jsx(Thumb, _extends({
	            "data-index": index,
	            "data-focusvisible": focusedThumbIndex === index
	          }, thumbProps, {
	            className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
	            style: _extends({}, style, {
	              pointerEvents: disableSwap && active !== index ? 'none' : undefined
	            }, thumbProps.style),
	            children: /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({
	              "data-index": index,
	              "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
	              "aria-valuenow": scale(value),
	              "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
	              value: values[index]
	            }, inputProps))
	          }))
	        }))
	      }, index);
	    })]
	  }));
	});
	SliderUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The label of the slider.
	   */
	  'aria-label': chainPropTypes(propTypes.exports.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-label'] != null) {
	      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * The id of the element containing a label for the slider.
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * A string value that provides a user-friendly name for the current value of the slider.
	   */
	  'aria-valuetext': chainPropTypes(propTypes.exports.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-valuetext'] != null) {
	      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Slider.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Mark: propTypes.exports.elementType,
	    MarkLabel: propTypes.exports.elementType,
	    Rail: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType,
	    Thumb: propTypes.exports.elementType,
	    Track: propTypes.exports.elementType,
	    ValueLabel: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Slider.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    mark: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    markLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    rail: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    thumb: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    track: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    valueLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
	      children: propTypes.exports.element,
	      className: propTypes.exports.string,
	      components: propTypes.exports.shape({
	        Root: propTypes.exports.elementType
	      }),
	      open: propTypes.exports.bool,
	      style: propTypes.exports.object,
	      value: propTypes.exports.number,
	      valueLabelDisplay: propTypes.exports.oneOf(['auto', 'off', 'on'])
	    })])
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
	   * @default false
	   */
	  disableSwap: propTypes.exports.bool,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
	   * This is important for screen reader users.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaLabel: propTypes.exports.func,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
	   * This is important for screen reader users.
	   * @param {number} value The thumb label's value to format.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaValueText: propTypes.exports.func,

	  /**
	   * Indicates whether the theme context has rtl direction. It is set automatically.
	   * @default false
	   */
	  isRtl: propTypes.exports.bool,

	  /**
	   * Marks indicate predetermined values to which the user can move the slider.
	   * If `true` the marks are spaced according the value of the `step` prop.
	   * If an array, it should contain objects with `value` and an optional `label` keys.
	   * @default false
	   */
	  marks: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.shape({
	    label: propTypes.exports.node,
	    value: propTypes.exports.number.isRequired
	  })), propTypes.exports.bool]),

	  /**
	   * The maximum allowed value of the slider.
	   * Should not be equal to min.
	   * @default 100
	   */
	  max: propTypes.exports.number,

	  /**
	   * The minimum allowed value of the slider.
	   * Should not be equal to max.
	   * @default 0
	   */
	  min: propTypes.exports.number,

	  /**
	   * Name attribute of the hidden `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback function that is fired when the slider's value changed.
	   *
	   * @param {Event} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   * @param {number} activeThumb Index of the currently moved thumb.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback function that is fired when the `mouseup` is triggered.
	   *
	   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   */
	  onChangeCommitted: propTypes.exports.func,

	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * A transformation function, to change the scale of the slider.
	   * @default (x) => x
	   */
	  scale: propTypes.exports.func,

	  /**
	   * The granularity with which the slider can step through values. (A "discrete" slider.)
	   * The `min` prop serves as the origin for the valid values.
	   * We recommend (max - min) to be evenly divisible by the step.
	   *
	   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
	   * @default 1
	   */
	  step: propTypes.exports.number,

	  /**
	   * Tab index attribute of the hidden `input` element.
	   */
	  tabIndex: propTypes.exports.number,

	  /**
	   * The track presentation:
	   *
	   * - `normal` the track will render a bar representing the slider value.
	   * - `inverted` the track will render a bar representing the remaining slider value.
	   * - `false` the track will render without a bar.
	   * @default 'normal'
	   */
	  track: propTypes.exports.oneOf(['inverted', 'normal', false]),

	  /**
	   * The value of the slider.
	   * For ranged sliders, provide an array with two values.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),

	  /**
	   * Controls when the value label is displayed:
	   *
	   * - `auto` the value label will display when the thumb is hovered or focused.
	   * - `on` will display persistently.
	   * - `off` will never display.
	   * @default 'off'
	   */
	  valueLabelDisplay: propTypes.exports.oneOf(['auto', 'off', 'on']),

	  /**
	   * The format function the value label's value.
	   *
	   * When a function is provided, it should have the following signature:
	   *
	   * - {number} value The value label's value to format
	   * - {number} index The value label's index to format
	   * @default (x) => x
	   */
	  valueLabelFormat: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.string])
	} ;

	/**
	 * The basic building block for creating custom switches.
	 *
	 * Demos:
	 *
	 * - [Switches](https://mui.com/components/switches/)
	 */
	function useSwitch(props) {
	  const {
	    checked: checkedProp,
	    defaultChecked,
	    disabled,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly,
	    required
	  } = props;
	  const [checked, setCheckedState] = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'Switch',
	    state: 'checked'
	  });

	  const createHandleInputChange = otherProps => event => {
	    var _otherProps$onChange;

	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }

	    setCheckedState(event.target.checked);
	    onChange == null ? void 0 : onChange(event);
	    (_otherProps$onChange = otherProps.onChange) == null ? void 0 : _otherProps$onChange.call(otherProps, event);
	  };

	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  react.exports.useEffect(() => {
	    isFocusVisibleRef.current = focusVisible;
	  }, [focusVisible, isFocusVisibleRef]);
	  const inputRef = react.exports.useRef(null);

	  const createHandleFocus = otherProps => event => {
	    var _otherProps$onFocus;

	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!inputRef.current) {
	      inputRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	      onFocusVisible == null ? void 0 : onFocusVisible(event);
	    }

	    onFocus == null ? void 0 : onFocus(event);
	    (_otherProps$onFocus = otherProps.onFocus) == null ? void 0 : _otherProps$onFocus.call(otherProps, event);
	  };

	  const createHandleBlur = otherProps => event => {
	    var _otherProps$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    onBlur == null ? void 0 : onBlur(event);
	    (_otherProps$onBlur = otherProps.onBlur) == null ? void 0 : _otherProps$onBlur.call(otherProps, event);
	  };

	  const handleRefChange = useForkRef(focusVisibleRef, inputRef);

	  const getInputProps = (otherProps = {}) => _extends({
	    checked: checkedProp,
	    defaultChecked,
	    disabled,
	    readOnly,
	    ref: handleRefChange,
	    required,
	    type: 'checkbox'
	  }, otherProps, {
	    onChange: createHandleInputChange(otherProps),
	    onFocus: createHandleFocus(otherProps),
	    onBlur: createHandleBlur(otherProps)
	  });

	  return {
	    checked,
	    disabled: Boolean(disabled),
	    focusVisible,
	    getInputProps,
	    readOnly: Boolean(readOnly)
	  };
	}

	function getSwitchUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiSwitch', slot);
	}
	generateUtilityClasses('MuiSwitch', ['root', 'input', 'track', 'thumb', 'checked', 'disabled', 'focusVisible', 'readOnly']);

	const _excluded$2b = ["checked", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];

	const useUtilityClasses$1P = ownerState => {
	  const {
	    checked,
	    disabled,
	    focusVisible,
	    readOnly
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],
	    thumb: ['thumb'],
	    input: ['input'],
	    track: ['track']
	  };
	  return composeClasses(slots, getSwitchUnstyledUtilityClass, {});
	};
	/**
	 * The foundation for building custom-styled switches.
	 *
	 * Demos:
	 *
	 * - [Switch](https://mui.com/base/react-switch/)
	 *
	 * API:
	 *
	 * - [SwitchUnstyled API](https://mui.com/base/api/switch-unstyled/)
	 */


	const SwitchUnstyled = /*#__PURE__*/react.exports.forwardRef(function SwitchUnstyled(props, ref) {
	  var _ref, _components$Thumb, _components$Input, _components$Track;

	  const {
	    checked: checkedProp,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultChecked,
	    disabled: disabledProp,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly: readOnlyProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2b);

	  const useSwitchProps = {
	    checked: checkedProp,
	    defaultChecked,
	    disabled: disabledProp,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly: readOnlyProp
	  };
	  const {
	    getInputProps,
	    checked,
	    disabled,
	    focusVisible,
	    readOnly
	  } = useSwitch(useSwitchProps);

	  const ownerState = _extends({}, props, {
	    checked,
	    disabled,
	    focusVisible,
	    readOnly
	  });

	  const classes = useUtilityClasses$1P(ownerState);
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
	  const thumbProps = useSlotProps({
	    elementType: Thumb,
	    externalSlotProps: componentsProps.thumb,
	    ownerState,
	    className: classes.thumb
	  });
	  const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
	  const inputProps = useSlotProps({
	    elementType: Input,
	    getSlotProps: getInputProps,
	    externalSlotProps: componentsProps.input,
	    ownerState,
	    className: classes.input
	  });
	  const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : 'span';
	  const trackProps = useSlotProps({
	    elementType: Track,
	    externalSlotProps: componentsProps.track,
	    ownerState,
	    className: classes.track
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Track, _extends({}, trackProps)), /*#__PURE__*/jsxRuntime.exports.jsx(Thumb, _extends({}, thumbProps)), /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({}, inputProps))]
	  }));
	});
	SwitchUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Switch.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType,
	    Thumb: propTypes.exports.elementType,
	    Track: propTypes.exports.oneOfType([propTypes.exports.elementType, propTypes.exports.oneOf([null])])
	  }),

	  /**
	   * The props used for each slot inside the Switch.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    thumb: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    track: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * The default checked state. Use when the component is not controlled.
	   */
	  defaultChecked: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocusVisible: propTypes.exports.func,

	  /**
	   * If `true`, the component is read only.
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: propTypes.exports.bool
	} ;

	function getTabPanelUnstyledUtilityClass(slot) {
	  return generateUtilityClass('TabPanelUnstyled', slot);
	}
	generateUtilityClasses('TabPanelUnstyled', ['root', 'hidden']);

	function getTabsUnstyledUtilityClass(slot) {
	  return generateUtilityClass('TabsUnstyled', slot);
	}
	generateUtilityClasses('TabsUnstyled', ['root', 'horizontal', 'vertical']);

	const useTabs = parameters => {
	  const {
	    value: valueProp,
	    defaultValue,
	    onChange,
	    orientation,
	    direction,
	    selectionFollowsFocus
	  } = parameters;
	  const [value, setValue] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Tabs',
	    state: 'value'
	  });
	  const idPrefix = useId();
	  const onSelected = react.exports.useCallback((e, newValue) => {
	    setValue(newValue);

	    if (onChange) {
	      onChange(e, newValue);
	    }
	  }, [onChange, setValue]);
	  const tabsContextValue = react.exports.useMemo(() => {
	    return {
	      idPrefix,
	      value,
	      onSelected,
	      orientation,
	      direction,
	      selectionFollowsFocus
	    };
	  }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
	  return {
	    tabsContextValue
	  };
	};

	/**
	 * @ignore - internal component.
	 */
	const Context = /*#__PURE__*/react.exports.createContext(null);

	{
	  Context.displayName = 'TabsContext';
	}
	/**
	 * @returns {unknown}
	 */


	function useTabContext() {
	  return react.exports.useContext(Context);
	}
	function getPanelId(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-P-${value}`;
	}
	function getTabId(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-T-${value}`;
	}

	const _excluded$2a = ["children", "value", "defaultValue", "orientation", "direction", "component", "components", "componentsProps", "onChange", "selectionFollowsFocus"];

	const useUtilityClasses$1O = ownerState => {
	  const {
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation]
	  };
	  return composeClasses(slots, getTabsUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/base/react-tabs/)
	 *
	 * API:
	 *
	 * - [TabsUnstyled API](https://mui.com/base/api/tabs-unstyled/)
	 */


	const TabsUnstyled = /*#__PURE__*/react.exports.forwardRef((props, ref) => {
	  var _ref;

	  const {
	    children,
	    orientation = 'horizontal',
	    direction = 'ltr',
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2a);

	  const {
	    tabsContextValue
	  } = useTabs(props);

	  const ownerState = _extends({}, props, {
	    orientation,
	    direction
	  });

	  const classes = useUtilityClasses$1O(ownerState);
	  const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabsRootProps = useSlotProps({
	    elementType: TabsRoot,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TabsRoot, _extends({}, tabsRootProps, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(Context.Provider, {
	      value: tabsContextValue,
	      children: children
	    })
	  }));
	});
	TabsUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Tabs.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Tabs.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.oneOfType([propTypes.exports.oneOf([false]), propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * The direction of the text.
	   * @default 'ltr'
	   */
	  direction: propTypes.exports.oneOf(['ltr', 'rtl']),

	  /**
	   * Callback invoked when new value is being set.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * If `true` the selected tab changes on focus. Otherwise it only
	   * changes on activation.
	   */
	  selectionFollowsFocus: propTypes.exports.bool,

	  /**
	   * The value of the currently selected `Tab`.
	   * If you don't want any selected `Tab`, you can set this prop to `false`.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.oneOf([false]), propTypes.exports.number, propTypes.exports.string])
	} ;

	const useTabPanel = parameters => {
	  const {
	    value
	  } = parameters;
	  const context = useTabContext();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const hidden = value !== context.value;
	  const id = getPanelId(context, value);
	  const tabId = getTabId(context, value);

	  const getRootProps = () => {
	    return {
	      'aria-labelledby': tabId != null ? tabId : undefined,
	      hidden,
	      id: id != null ? id : undefined
	    };
	  };

	  return {
	    hidden,
	    getRootProps
	  };
	};

	const _excluded$29 = ["children", "value", "components", "componentsProps", "component"];

	const useUtilityClasses$1N = ownerState => {
	  const {
	    hidden
	  } = ownerState;
	  const slots = {
	    root: ['root', hidden && 'hidden']
	  };
	  return composeClasses(slots, getTabPanelUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/base/react-tabs/)
	 *
	 * API:
	 *
	 * - [TabPanelUnstyled API](https://mui.com/base/api/tab-panel-unstyled/)
	 */


	const TabPanelUnstyled = /*#__PURE__*/react.exports.forwardRef(function TabPanelUnstyled(props, ref) {
	  var _ref;

	  const {
	    children,
	    components = {},
	    componentsProps = {},
	    component
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$29);

	  const {
	    hidden,
	    getRootProps
	  } = useTabPanel(props);

	  const ownerState = _extends({}, props, {
	    hidden
	  });

	  const classes = useUtilityClasses$1N(ownerState);
	  const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabPanelRootProps = useSlotProps({
	    elementType: TabPanelRoot,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      role: 'tabpanel',
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TabPanelRoot, _extends({}, tabPanelRootProps, {
	    children: !hidden && children
	  }));
	});
	TabPanelUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the TabPanel.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the TabPanel.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]).isRequired
	} ;

	function getTabsListUnstyledUtilityClass(slot) {
	  return generateUtilityClass('TabsListUnstyled', slot);
	}
	generateUtilityClasses('TabsListUnstyled', ['root', 'horizontal', 'vertical']);

	var reactIs$1 = {exports: {}};

	var reactIs_development$1 = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.SuspenseList = SuspenseList;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isSuspenseList = isSuspenseList;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}

	(function (module) {

		{
		  module.exports = reactIs_development$1;
		}
	} (reactIs$1));

	const nextItem$2 = (list, item) => {
	  if (!list) {
	    return null;
	  }

	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return list.firstChild;
	};

	const previousItem$2 = (list, item) => {
	  if (!list) {
	    return null;
	  }

	  if (list === item) {
	    return list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return list.lastChild;
	};

	const moveFocus$2 = (list, currentFocus, traversalFunction) => {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus);

	  while (list && nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	};

	const useTabsList = parameters => {
	  const {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy,
	    children,
	    ref
	  } = parameters;
	  const tabsListRef = /*#__PURE__*/react.exports.createRef();
	  const handleRef = useForkRef(tabsListRef, ref);
	  const context = useTabContext();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const {
	    value,
	    orientation = 'horizontal',
	    direction = 'ltr'
	  } = context;
	  const isRtl = direction === 'rtl';

	  const handleKeyDown = event => {
	    const list = tabsListRef.current;
	    const currentFocus = ownerDocument(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
	    // though we might warn in the future about nested, interactive elements
	    // as a a11y violation

	    const role = currentFocus == null ? void 0 : currentFocus.getAttribute('role');

	    if (role !== 'tab') {
	      return;
	    }

	    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
	    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';

	    if (orientation === 'horizontal' && isRtl) {
	      // swap previousItemKey with nextItemKey
	      previousItemKey = 'ArrowRight';
	      nextItemKey = 'ArrowLeft';
	    }

	    switch (event.key) {
	      case previousItemKey:
	        event.preventDefault();
	        moveFocus$2(list, currentFocus, previousItem$2);
	        break;

	      case nextItemKey:
	        event.preventDefault();
	        moveFocus$2(list, currentFocus, nextItem$2);
	        break;

	      case 'Home':
	        event.preventDefault();
	        moveFocus$2(list, null, nextItem$2);
	        break;

	      case 'End':
	        event.preventDefault();
	        moveFocus$2(list, null, previousItem$2);
	        break;
	    }
	  };

	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    handleKeyDown(event);
	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
	  };

	  const getRootProps = (otherHandlers = {}) => {
	    const propsEventHandlers = extractEventHandlers(parameters);

	    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);

	    const ownEventHandlers = {
	      onKeyDown: createHandleKeyDown(externalEventHandlers)
	    };

	    const mergedEventHandlers = _extends({}, externalEventHandlers, ownEventHandlers);

	    return _extends({
	      'aria-label': ariaLabel,
	      'aria-labelledby': ariaLabelledBy,
	      'aria-orientation': orientation === 'vertical' ? 'vertical' : undefined,
	      role: 'tablist',
	      ref: handleRef
	    }, mergedEventHandlers);
	  };

	  const processChildren = react.exports.useCallback(() => {
	    const valueToIndex = new Map();
	    let childIndex = 0;
	    const processedChildren = react.exports.Children.map(children, child => {
	      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	        return null;
	      }

	      {
	        if (reactIs$1.exports.isFragment(child)) {
	          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	        }
	      }

	      const childValue = child.props.value === undefined ? childIndex : child.props.value;
	      valueToIndex.set(childValue, childIndex);
	      childIndex += 1;
	      return /*#__PURE__*/react.exports.cloneElement(child, _extends({
	        value: childValue
	      }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
	        tabIndex: 0
	      } : {
	        tabIndex: -1
	      }));
	    });
	    return processedChildren;
	  }, [children, value]);
	  return {
	    isRtl,
	    orientation,
	    value,
	    processChildren,
	    getRootProps
	  };
	};

	const _excluded$28 = ["children", "component", "components", "componentsProps"];

	const useUtilityClasses$1M = ownerState => {
	  const {
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation]
	  };
	  return composeClasses(slots, getTabsListUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/base/react-tabs/)
	 *
	 * API:
	 *
	 * - [TabsListUnstyled API](https://mui.com/base/api/tabs-list-unstyled/)
	 */


	const TabsListUnstyled = /*#__PURE__*/react.exports.forwardRef((props, ref) => {
	  var _ref;

	  const {
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$28);

	  const {
	    isRtl,
	    orientation,
	    getRootProps,
	    processChildren
	  } = useTabsList(_extends({}, props, {
	    ref
	  }));

	  const ownerState = _extends({}, props, {
	    isRtl,
	    orientation
	  });

	  const classes = useUtilityClasses$1M(ownerState);
	  const TabsListRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabsListRootProps = useSlotProps({
	    elementType: TabsListRoot,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    ownerState,
	    className: classes.root
	  });
	  const processedChildren = processChildren();
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TabsListRoot, _extends({}, tabsListRootProps, {
	    children: processedChildren
	  }));
	});
	TabsListUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the TabsList.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the TabsList.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  })
	} ;

	function getTabUnstyledUtilityClass(slot) {
	  return generateUtilityClass('TabUnstyled', slot);
	}
	generateUtilityClasses('TabUnstyled', ['root', 'selected', 'disabled']);

	const _excluded$27 = ["getRootProps"];

	const useTab = parameters => {
	  var _getPanelId, _getTabId;

	  const {
	    value: valueProp,
	    onChange,
	    onClick,
	    onFocus
	  } = parameters;

	  const _useButton = useButton(parameters),
	        {
	    getRootProps: getRootPropsButton
	  } = _useButton,
	        otherButtonProps = _objectWithoutPropertiesLoose(_useButton, _excluded$27);

	  const context = useTabContext();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const value = valueProp != null ? valueProp : 0;
	  const selected = context.value === value;
	  const selectionFollowsFocus = context.selectionFollowsFocus;
	  const a11yAttributes = {
	    role: 'tab',
	    'aria-controls': (_getPanelId = getPanelId(context, value)) != null ? _getPanelId : undefined,
	    id: (_getTabId = getTabId(context, value)) != null ? _getTabId : undefined,
	    'aria-selected': selected,
	    disabled: otherButtonProps.disabled
	  };

	  const createHandleFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;

	    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (selectionFollowsFocus && !selected) {
	      if (onChange) {
	        onChange(event, value);
	      }

	      context.onSelected(event, value);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  const createHandleClick = otherHandlers => event => {
	    var _otherHandlers$onClic;

	    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (!selected) {
	      if (onChange) {
	        onChange(event, value);
	      }

	      context.onSelected(event, value);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const getRootProps = (otherHandlers = {}) => {
	    const buttonResolvedProps = getRootPropsButton(_extends({}, otherHandlers, {
	      onClick: createHandleClick(otherHandlers),
	      onFocus: createHandleFocus(otherHandlers)
	    }));
	    return _extends({}, buttonResolvedProps, a11yAttributes);
	  };

	  return _extends({
	    getRootProps
	  }, otherButtonProps, {
	    selected
	  });
	};

	const _excluded$26 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "components", "componentsProps"];

	const useUtilityClasses$1L = ownerState => {
	  const {
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', disabled && 'disabled']
	  };
	  return composeClasses(slots, getTabUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/base/react-tabs/)
	 *
	 * API:
	 *
	 * - [TabUnstyled API](https://mui.com/base/api/tab-unstyled/)
	 */


	const TabUnstyled = /*#__PURE__*/react.exports.forwardRef(function TabUnstyled(props, ref) {
	  var _ref;

	  const {
	    action,
	    children,
	    disabled = false,
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$26);

	  const tabRef = react.exports.useRef();
	  const handleRef = useForkRef(tabRef, ref);
	  const {
	    active,
	    focusVisible,
	    setFocusVisible,
	    selected,
	    getRootProps
	  } = useTab(_extends({}, props, {
	    ref: handleRef
	  }));
	  react.exports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      tabRef.current.focus();
	    }
	  }), [setFocusVisible]);

	  const ownerState = _extends({}, props, {
	    active,
	    focusVisible,
	    disabled,
	    selected
	  });

	  const classes = useUtilityClasses$1L(ownerState);
	  const TabRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const tabRootProps = useSlotProps({
	    elementType: TabRoot,
	    getSlotProps: getRootProps,
	    externalSlotProps: componentsProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TabRoot, _extends({}, tabRootProps, {
	    children: children
	  }));
	});
	TabUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions. It currently only supports `focusVisible()` action.
	   */
	  action: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
	    current: propTypes.exports.shape({
	      focusVisible: propTypes.exports.func.isRequired
	    })
	  })]),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Tab.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Tab.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * Callback invoked when new value is being set.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * You can provide your own value. Otherwise, we fall back to the child position index.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])
	} ;

	const _excluded$25 = ["onChange", "maxRows", "minRows", "style", "value"];

	function getStyleValue(computedStyle, property) {
	  return parseInt(computedStyle[property], 10) || 0;
	}

	const styles$5 = {
	  shadow: {
	    // Visibility needed to hide the extra text area on iPads
	    visibility: 'hidden',
	    // Remove from the content flow
	    position: 'absolute',
	    // Ignore the scrollbar width
	    overflow: 'hidden',
	    height: 0,
	    top: 0,
	    left: 0,
	    // Create a new layer, increase the isolation of the computed values
	    transform: 'translateZ(0)'
	  }
	};

	function isEmpty$1(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}

	const TextareaAutosize = /*#__PURE__*/react.exports.forwardRef(function TextareaAutosize(props, ref) {
	  const {
	    onChange,
	    maxRows,
	    minRows = 1,
	    style,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$25);

	  const {
	    current: isControlled
	  } = react.exports.useRef(value != null);
	  const inputRef = react.exports.useRef(null);
	  const handleRef = useForkRef(ref, inputRef);
	  const shadowRef = react.exports.useRef(null);
	  const renders = react.exports.useRef(0);
	  const [state, setState] = react.exports.useState({});
	  const getUpdatedState = react.exports.useCallback(() => {
	    const input = inputRef.current;
	    const containerWindow = ownerWindow(input);
	    const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.

	    if (computedStyle.width === '0px') {
	      return {};
	    }

	    const inputShallow = shadowRef.current;
	    inputShallow.style.width = computedStyle.width;
	    inputShallow.value = input.value || props.placeholder || 'x';

	    if (inputShallow.value.slice(-1) === '\n') {
	      // Certain fonts which overflow the line height will cause the textarea
	      // to report a different scrollHeight depending on whether the last line
	      // is empty. Make it non-empty to avoid this issue.
	      inputShallow.value += ' ';
	    }

	    const boxSizing = computedStyle['box-sizing'];
	    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
	    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

	    const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row

	    inputShallow.value = 'x';
	    const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content

	    let outerHeight = innerHeight;

	    if (minRows) {
	      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
	    }

	    if (maxRows) {
	      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
	    }

	    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

	    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
	    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
	    return {
	      outerHeightStyle,
	      overflow
	    };
	  }, [maxRows, minRows, props.placeholder]);

	  const updateState = (prevState, newState) => {
	    const {
	      outerHeightStyle,
	      overflow
	    } = newState; // Need a large enough difference to update the height.
	    // This prevents infinite rendering loop.

	    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
	      renders.current += 1;
	      return {
	        overflow,
	        outerHeightStyle
	      };
	    }

	    {
	      if (renders.current === 20) {
	        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
	      }
	    }

	    return prevState;
	  };

	  const syncHeight = react.exports.useCallback(() => {
	    const newState = getUpdatedState();

	    if (isEmpty$1(newState)) {
	      return;
	    }

	    setState(prevState => {
	      return updateState(prevState, newState);
	    });
	  }, [getUpdatedState]);

	  const syncHeightWithFlushSycn = () => {
	    const newState = getUpdatedState();

	    if (isEmpty$1(newState)) {
	      return;
	    } // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering
	    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen
	    // Related issue - https://github.com/facebook/react/issues/24331


	    reactDom.exports.flushSync(() => {
	      setState(prevState => {
	        return updateState(prevState, newState);
	      });
	    });
	  };

	  react.exports.useEffect(() => {
	    const handleResize = debounce$1(() => {
	      renders.current = 0; // If the TextareaAutosize component is replaced by Suspense with a fallback, the last
	      // ResizeObserver's handler that runs because of the change in the layout is trying to
	      // access a dom node that is no longer there (as the fallback component is being shown instead).
	      // See https://github.com/mui/material-ui/issues/32640
	      // TODO: Add tests that will ensure the component is not failing when
	      // replaced by Suspense with a fallback, once React is updated to version 18

	      if (inputRef.current) {
	        syncHeightWithFlushSycn();
	      }
	    });
	    const containerWindow = ownerWindow(inputRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    let resizeObserver;

	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      resizeObserver.observe(inputRef.current);
	    }

	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);

	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  });
	  useEnhancedEffect(() => {
	    syncHeight();
	  });
	  react.exports.useEffect(() => {
	    renders.current = 0;
	  }, [value]);

	  const handleChange = event => {
	    renders.current = 0;

	    if (!isControlled) {
	      syncHeight();
	    }

	    if (onChange) {
	      onChange(event);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx("textarea", _extends({
	      value: value,
	      onChange: handleChange,
	      ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
	      ,
	      rows: minRows,
	      style: _extends({
	        height: state.outerHeightStyle,
	        // Need a large enough difference to allow scrolling.
	        // This prevents infinite rendering loop.
	        overflow: state.overflow ? 'hidden' : null
	      }, style)
	    }, other)), /*#__PURE__*/jsxRuntime.exports.jsx("textarea", {
	      "aria-hidden": true,
	      className: props.className,
	      readOnly: true,
	      ref: shadowRef,
	      tabIndex: -1,
	      style: _extends({}, styles$5.shadow, style, {
	        padding: 0
	      })
	    })]
	  });
	});
	TextareaAutosize.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Maximum number of rows to display.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display.
	   * @default 1
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * @ignore
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.string), propTypes.exports.number, propTypes.exports.string])
	} ;

	function createMixins(breakpoints, mixins) {
	  return _extends({
	    toolbar: {
	      minHeight: 56,
	      [breakpoints.up('xs')]: {
	        '@media (orientation: landscape)': {
	          minHeight: 48
	        }
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	const common = {
	  black: '#000',
	  white: '#fff'
	};

	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};

	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};

	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};

	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};

	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};

	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};

	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};

	const _excluded$24 = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common.white,
	    default: common.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	const dark = {
	  text: {
	    primary: common.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: common.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}

	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: blue[200],
	      light: blue[50],
	      dark: blue[400]
	    };
	  }

	  return {
	    main: blue[700],
	    light: blue[400],
	    dark: blue[800]
	  };
	}

	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: purple[200],
	      light: purple[50],
	      dark: purple[400]
	    };
	  }

	  return {
	    main: purple[500],
	    light: purple[300],
	    dark: purple[700]
	  };
	}

	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: red[500],
	      light: red[300],
	      dark: red[700]
	    };
	  }

	  return {
	    main: red[700],
	    light: red[400],
	    dark: red[800]
	  };
	}

	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: lightBlue[400],
	      light: lightBlue[300],
	      dark: lightBlue[700]
	    };
	  }

	  return {
	    main: lightBlue[700],
	    light: lightBlue[500],
	    dark: lightBlue[900]
	  };
	}

	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: green[400],
	      light: green[300],
	      dark: green[700]
	    };
	  }

	  return {
	    main: green[800],
	    light: green[500],
	    dark: green[900]
	  };
	}

	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: orange[400],
	      light: orange[300],
	      dark: orange[700]
	    };
	  }

	  return {
	    main: '#ed6c02',
	    // closest to orange[800] that pass 3:1.
	    light: orange[500],
	    dark: orange[900]
	  };
	}

	function createPalette(palette) {
	  const {
	    mode = 'light',
	    contrastThreshold = 3,
	    tonalOffset = 0.2
	  } = palette,
	        other = _objectWithoutPropertiesLoose(palette, _excluded$24);

	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

	  function getContrastText(background) {
	    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    {
	      const contrast = getContrastRatio(background, contrastText);

	      if (contrast < 3) {
	        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	      }
	    }

	    return contrastText;
	  }

	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = _extends({}, color);

	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }

	    if (!color.hasOwnProperty('main')) {
	      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` );
	    }

	    if (typeof color.main !== 'string') {
	      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` );
	    }

	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);

	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }

	    return color;
	  };

	  const modes = {
	    dark,
	    light
	  };

	  {
	    if (!modes[mode]) {
	      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
	    }
	  }

	  const paletteOutput = deepmerge(_extends({
	    // A collection of common colors.
	    common: _extends({}, common),
	    // prevent mutable object.
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	const _excluded$23 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];

	function round$1(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
	/**
	 * @see @link{https://material.io/design/typography/the-type-system.html}
	 * @see @link{https://material.io/design/typography/understanding-typography.html}
	 */

	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	        {
	    fontFamily = defaultFontFamily,
	    // The default font size of the Material Specification.
	    fontSize = 14,
	    // px
	    fontWeightLight = 300,
	    fontWeightRegular = 400,
	    fontWeightMedium = 500,
	    fontWeightBold = 700,
	    // Tell MUI what's the font-size on the html element.
	    // 16px is the default font-size used by browsers.
	    htmlFontSize = 16,
	    // Apply the CSS properties to all the variants.
	    allVariants,
	    pxToRem: pxToRem2
	  } = _ref,
	        other = _objectWithoutPropertiesLoose(_ref, _excluded$23);

	  {
	    if (typeof fontSize !== 'number') {
	      console.error('MUI: `fontSize` is required to be a number.');
	    }

	    if (typeof htmlFontSize !== 'number') {
	      console.error('MUI: `htmlFontSize` is required to be a number.');
	    }
	  }

	  const coef = fontSize / 14;

	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);

	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round$1(letterSpacing / size)}em`
	  } : {}, casing, allVariants);

	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return deepmerge(_extends({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep

	  });
	}

	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;

	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

	const _excluded$22 = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};

	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}

	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }

	  const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}

	function createTransitions(inputTransitions) {
	  const mergedEasing = _extends({}, easing, inputTransitions.easing);

	  const mergedDuration = _extends({}, duration, inputTransitions.duration);

	  const create = (props = ['all'], options = {}) => {
	    const {
	      duration: durationOption = mergedDuration.standard,
	      easing: easingOption = mergedEasing.easeInOut,
	      delay = 0
	    } = options,
	          other = _objectWithoutPropertiesLoose(options, _excluded$22);

	    {
	      const isString = value => typeof value === 'string'; // IE11 support, replace with Number.isNaN
	      // eslint-disable-next-line no-restricted-globals


	      const isNumber = value => !isNaN(parseFloat(value));

	      if (!isString(props) && !Array.isArray(props)) {
	        console.error('MUI: Argument "props" must be a string or Array.');
	      }

	      if (!isNumber(durationOption) && !isString(durationOption)) {
	        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
	      }

	      if (!isString(easingOption)) {
	        console.error('MUI: Argument "easing" must be a string.');
	      }

	      if (!isNumber(delay) && !isString(delay)) {
	        console.error('MUI: Argument "delay" must be a number or a string.');
	      }

	      if (Object.keys(other).length !== 0) {
	        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
	      }
	    }

	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };

	  return _extends({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  fab: 1050,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};

	const _excluded$21 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];

	function createTheme(options = {}, ...args) {
	  const {
	    mixins: mixinsInput = {},
	    palette: paletteInput = {},
	    transitions: transitionsInput = {},
	    typography: typographyInput = {}
	  } = options,
	        other = _objectWithoutPropertiesLoose(options, _excluded$21);

	  const palette = createPalette(paletteInput);
	  const systemTheme = createTheme$1(options);
	  let muiTheme = deepmerge(systemTheme, {
	    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: shadows.slice(),
	    typography: createTypography(palette, typographyInput),
	    transitions: createTransitions(transitionsInput),
	    zIndex: _extends({}, zIndex)
	  });
	  muiTheme = deepmerge(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);

	  {
	    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];

	    const traverse = (node, component) => {
	      let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

	      for (key in node) {
	        const child = node[key];

	        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
	          {
	            const stateClass = generateUtilityClass('', key);
	            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
	              root: {
	                [`&.${stateClass}`]: child
	              }
	            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
	          } // Remove the style to prevent global conflicts.


	          node[key] = {};
	        }
	      }
	    };

	    Object.keys(muiTheme.components).forEach(component => {
	      const styleOverrides = muiTheme.components[component].styleOverrides;

	      if (styleOverrides && component.indexOf('Mui') === 0) {
	        traverse(styleOverrides, component);
	      }
	    });
	  }

	  return muiTheme;
	}

	const defaultTheme$2 = createTheme();

	function useThemeProps({
	  props,
	  name
	}) {
	  return useThemeProps$1({
	    props,
	    name,
	    defaultTheme: defaultTheme$2
	  });
	}

	function GlobalStyles(props) {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, _extends({}, props, {
	    defaultTheme: defaultTheme$2
	  }));
	}

	GlobalStyles.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The styles you want to apply globally.
	   */
	  styles: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.number, propTypes.exports.object, propTypes.exports.shape({
	    __emotion_styles: propTypes.exports.any.isRequired
	  }), propTypes.exports.string, propTypes.exports.bool])
	} ;

	const html = (theme, enableColorScheme) => _extends({
	  WebkitFontSmoothing: 'antialiased',
	  // Antialiasing.
	  MozOsxFontSmoothing: 'grayscale',
	  // Antialiasing.
	  // Change from `box-sizing: content-box` so that `width`
	  // is not affected by `padding` or `border`.
	  boxSizing: 'border-box',
	  // Fix font resize problem in iOS
	  WebkitTextSizeAdjust: '100%'
	}, enableColorScheme && {
	  colorScheme: theme.palette.mode
	});
	const body = theme => _extends({
	  color: (theme.vars || theme).palette.text.primary
	}, theme.typography.body1, {
	  backgroundColor: (theme.vars || theme).palette.background.default,
	  '@media print': {
	    // Save printer ink.
	    backgroundColor: (theme.vars || theme).palette.common.white
	  }
	});
	const styles$4 = (theme, enableColorScheme = false) => {
	  var _theme$components, _theme$components$Mui;

	  let defaultStyles = {
	    html: html(theme, enableColorScheme),
	    '*, *::before, *::after': {
	      boxSizing: 'inherit'
	    },
	    'strong, b': {
	      fontWeight: theme.typography.fontWeightBold
	    },
	    body: _extends({
	      margin: 0
	    }, body(theme), {
	      // Add support for document.body.requestFullScreen().
	      // Other elements, if background transparent, are not supported.
	      '&::backdrop': {
	        backgroundColor: (theme.vars || theme).palette.background.default
	      }
	    })
	  };
	  const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;

	  if (themeOverrides) {
	    defaultStyles = [defaultStyles, themeOverrides];
	  }

	  return defaultStyles;
	};
	/**
	 * Kickstart an elegant, consistent, and simple baseline to build upon.
	 */

	function CssBaseline(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCssBaseline'
	  });
	  const {
	    children,
	    enableColorScheme = false
	  } = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
	      styles: theme => styles$4(theme, enableColorScheme)
	    }), children]
	  });
	}

	CssBaseline.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * You can wrap a node.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
	   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
	   * For browser support, check out https://caniuse.com/?search=color-scheme
	   * @default false
	   */
	  enableColorScheme: propTypes.exports.bool
	} ;

	// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
	// Emulate the sass function "unit"

	function getUnit(input) {
	  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
	} // Emulate the sass function "unitless"

	function toUnitless(length) {
	  return parseFloat(length);
	} // Convert any CSS <length> or <percentage> value to any another.

	function useTheme() {
	  const theme = useTheme$1(defaultTheme$2);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useDebugValue(theme);
	  }

	  return theme;
	}

	const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
	const slotShouldForwardProp = shouldForwardProp;
	const styled = createStyled({
	  defaultTheme: defaultTheme$2,
	  rootShouldForwardProp
	});

	function getPaperUtilityClass(slot) {
	  return generateUtilityClass('MuiPaper', slot);
	}
	generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

	const _excluded$20 = ["className", "component", "elevation", "square", "variant"];
	const getOverlayAlpha = elevation => {
	  let alphaValue;

	  if (elevation < 1) {
	    alphaValue = 5.11916 * elevation ** 2;
	  } else {
	    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
	  }

	  return (alphaValue / 100).toFixed(2);
	};

	const useUtilityClasses$1K = ownerState => {
	  const {
	    square,
	    elevation,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
	  };
	  return composeClasses(slots, getPaperUtilityClass, classes);
	};

	const PaperRoot = styled('div', {
	  name: 'MuiPaper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$vars$overlays;

	  return _extends({
	    backgroundColor: (theme.vars || theme).palette.background.paper,
	    color: (theme.vars || theme).palette.text.primary,
	    transition: theme.transitions.create('box-shadow')
	  }, !ownerState.square && {
	    borderRadius: theme.shape.borderRadius
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${(theme.vars || theme).palette.divider}`
	  }, ownerState.variant === 'elevation' && _extends({
	    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
	  }, !theme.vars && theme.palette.mode === 'dark' && {
	    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha(ownerState.elevation))})`
	  }, theme.vars && {
	    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
	  }));
	});
	const Paper = /*#__PURE__*/react.exports.forwardRef(function Paper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaper'
	  });

	  const {
	    className,
	    component = 'div',
	    elevation = 1,
	    square = false,
	    variant = 'elevation'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$20);

	  const ownerState = _extends({}, props, {
	    component,
	    elevation,
	    square,
	    variant
	  });

	  const classes = useUtilityClasses$1K(ownerState);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const theme = useTheme();

	    if (theme.shadows[elevation] === undefined) {
	      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
	    }
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(PaperRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other));
	});
	Paper.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Shadow depth, corresponds to `dp` in the spec.
	   * It accepts values between 0 and 24 inclusive.
	   * @default 1
	   */
	  elevation: chainPropTypes(integerPropType, props => {
	    const {
	      elevation,
	      variant
	    } = props;

	    if (elevation > 0 && variant === 'outlined') {
	      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
	    }

	    return null;
	  }),

	  /**
	   * If `true`, rounded corners are disabled.
	   * @default false
	   */
	  square: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'elevation'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['elevation', 'outlined']), propTypes.exports.string])
	} ;

	const _excluded$1$ = ["colorSchemes", "cssVarPrefix"],
	      _excluded2$9 = ["palette"];
	const defaultDarkOverlays = [...Array(25)].map((_, index) => {
	  if (index === 0) {
	    return undefined;
	  }

	  const overlay = getOverlayAlpha(index);
	  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
	});

	function assignNode(obj, keys) {
	  keys.forEach(k => {
	    if (!obj[k]) {
	      obj[k] = {};
	    }
	  });
	}

	function setColor(obj, key, defaultValue) {
	  obj[key] = obj[key] || defaultValue;
	}

	const createGetCssVar = (cssVarPrefix = 'mui') => createGetCssVar$1(cssVarPrefix);
	function extendTheme(options = {}, ...args) {
	  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;

	  const {
	    colorSchemes: colorSchemesInput = {},
	    cssVarPrefix = 'mui'
	  } = options,
	        input = _objectWithoutPropertiesLoose(options, _excluded$1$);

	  const getCssVar = createGetCssVar(cssVarPrefix);

	  const _createThemeWithoutVa = createTheme(_extends({}, input, colorSchemesInput.light && {
	    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
	  })),
	        {
	    palette: lightPalette
	  } = _createThemeWithoutVa,
	        muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2$9);

	  const {
	    palette: darkPalette
	  } = createTheme({
	    palette: _extends({
	      mode: 'dark'
	    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
	  });

	  let theme = _extends({}, muiTheme, {
	    cssVarPrefix,
	    getCssVar,
	    colorSchemes: _extends({}, colorSchemesInput, {
	      light: _extends({}, colorSchemesInput.light, {
	        palette: lightPalette,
	        opacity: _extends({
	          inputPlaceholder: 0.42,
	          inputUnderline: 0.42,
	          switchTrackDisabled: 0.12,
	          switchTrack: 0.38
	        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
	        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
	      }),
	      dark: _extends({}, colorSchemesInput.dark, {
	        palette: darkPalette,
	        opacity: _extends({
	          inputPlaceholder: 0.5,
	          inputUnderline: 0.7,
	          switchTrackDisabled: 0.2,
	          switchTrack: 0.3
	        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
	        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
	      })
	    })
	  });

	  Object.keys(theme.colorSchemes).forEach(key => {
	    const palette = theme.colorSchemes[key].palette; // attach black & white channels to common node

	    if (key === 'light') {
	      setColor(palette.common, 'background', '#fff');
	      setColor(palette.common, 'onBackground', '#000');
	    } else {
	      setColor(palette.common, 'background', '#000');
	      setColor(palette.common, 'onBackground', '#fff');
	    } // assign component variables


	    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);

	    if (key === 'light') {
	      setColor(palette.Alert, 'errorColor', darken(palette.error.light, 0.6));
	      setColor(palette.Alert, 'infoColor', darken(palette.info.light, 0.6));
	      setColor(palette.Alert, 'successColor', darken(palette.success.light, 0.6));
	      setColor(palette.Alert, 'warningColor', darken(palette.warning.light, 0.6));
	      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));
	      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));
	      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));
	      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));
	      setColor(palette.Alert, 'errorFilledColor', lightPalette.getContrastText(palette.error.main));
	      setColor(palette.Alert, 'infoFilledColor', lightPalette.getContrastText(palette.info.main));
	      setColor(palette.Alert, 'successFilledColor', lightPalette.getContrastText(palette.success.main));
	      setColor(palette.Alert, 'warningFilledColor', lightPalette.getContrastText(palette.warning.main));
	      setColor(palette.Alert, 'errorStandardBg', lighten(palette.error.light, 0.9));
	      setColor(palette.Alert, 'infoStandardBg', lighten(palette.info.light, 0.9));
	      setColor(palette.Alert, 'successStandardBg', lighten(palette.success.light, 0.9));
	      setColor(palette.Alert, 'warningStandardBg', lighten(palette.warning.light, 0.9));
	      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-light'));
	      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-light'));
	      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-light'));
	      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-light'));
	      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));
	      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));
	      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));
	      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));
	      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));
	      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
	      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
	      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
	      setColor(palette.LinearProgress, 'primaryBg', lighten(palette.primary.main, 0.62));
	      setColor(palette.LinearProgress, 'secondaryBg', lighten(palette.secondary.main, 0.62));
	      setColor(palette.LinearProgress, 'errorBg', lighten(palette.error.main, 0.62));
	      setColor(palette.LinearProgress, 'infoBg', lighten(palette.info.main, 0.62));
	      setColor(palette.LinearProgress, 'successBg', lighten(palette.success.main, 0.62));
	      setColor(palette.LinearProgress, 'warningBg', lighten(palette.warning.main, 0.62));
	      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.11)`);
	      setColor(palette.Slider, 'primaryTrack', lighten(palette.primary.main, 0.62));
	      setColor(palette.Slider, 'secondaryTrack', lighten(palette.secondary.main, 0.62));
	      setColor(palette.Slider, 'errorTrack', lighten(palette.error.main, 0.62));
	      setColor(palette.Slider, 'infoTrack', lighten(palette.info.main, 0.62));
	      setColor(palette.Slider, 'successTrack', lighten(palette.success.main, 0.62));
	      setColor(palette.Slider, 'warningTrack', lighten(palette.warning.main, 0.62));
	      const snackbarContentBackground = emphasize(palette.background.default, 0.8);
	      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
	      setColor(palette.SnackbarContent, 'color', lightPalette.getContrastText(snackbarContentBackground));
	      setColor(palette.SpeedDialAction, 'fabHoverBg', emphasize(palette.background.paper, 0.15));
	      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));
	      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));
	      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));
	      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));
	      setColor(palette.Switch, 'primaryDisabledColor', lighten(palette.primary.main, 0.62));
	      setColor(palette.Switch, 'secondaryDisabledColor', lighten(palette.secondary.main, 0.62));
	      setColor(palette.Switch, 'errorDisabledColor', lighten(palette.error.main, 0.62));
	      setColor(palette.Switch, 'infoDisabledColor', lighten(palette.info.main, 0.62));
	      setColor(palette.Switch, 'successDisabledColor', lighten(palette.success.main, 0.62));
	      setColor(palette.Switch, 'warningDisabledColor', lighten(palette.warning.main, 0.62));
	      setColor(palette.TableCell, 'border', lighten(alpha(palette.divider, 1), 0.88));
	      setColor(palette.Tooltip, 'bg', alpha(palette.grey[700], 0.92));
	    } else {
	      setColor(palette.Alert, 'errorColor', lighten(palette.error.light, 0.6));
	      setColor(palette.Alert, 'infoColor', lighten(palette.info.light, 0.6));
	      setColor(palette.Alert, 'successColor', lighten(palette.success.light, 0.6));
	      setColor(palette.Alert, 'warningColor', lighten(palette.warning.light, 0.6));
	      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));
	      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));
	      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));
	      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));
	      setColor(palette.Alert, 'errorFilledColor', darkPalette.getContrastText(palette.error.dark));
	      setColor(palette.Alert, 'infoFilledColor', darkPalette.getContrastText(palette.info.dark));
	      setColor(palette.Alert, 'successFilledColor', darkPalette.getContrastText(palette.success.dark));
	      setColor(palette.Alert, 'warningFilledColor', darkPalette.getContrastText(palette.warning.dark));
	      setColor(palette.Alert, 'errorStandardBg', darken(palette.error.light, 0.9));
	      setColor(palette.Alert, 'infoStandardBg', darken(palette.info.light, 0.9));
	      setColor(palette.Alert, 'successStandardBg', darken(palette.success.light, 0.9));
	      setColor(palette.Alert, 'warningStandardBg', darken(palette.warning.light, 0.9));
	      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
	      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
	      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
	      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
	      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));
	      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode

	      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode

	      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));
	      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));
	      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));
	      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));
	      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
	      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
	      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
	      setColor(palette.LinearProgress, 'primaryBg', darken(palette.primary.main, 0.5));
	      setColor(palette.LinearProgress, 'secondaryBg', darken(palette.secondary.main, 0.5));
	      setColor(palette.LinearProgress, 'errorBg', darken(palette.error.main, 0.5));
	      setColor(palette.LinearProgress, 'infoBg', darken(palette.info.main, 0.5));
	      setColor(palette.LinearProgress, 'successBg', darken(palette.success.main, 0.5));
	      setColor(palette.LinearProgress, 'warningBg', darken(palette.warning.main, 0.5));
	      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.13)`);
	      setColor(palette.Slider, 'primaryTrack', darken(palette.primary.main, 0.5));
	      setColor(palette.Slider, 'secondaryTrack', darken(palette.secondary.main, 0.5));
	      setColor(palette.Slider, 'errorTrack', darken(palette.error.main, 0.5));
	      setColor(palette.Slider, 'infoTrack', darken(palette.info.main, 0.5));
	      setColor(palette.Slider, 'successTrack', darken(palette.success.main, 0.5));
	      setColor(palette.Slider, 'warningTrack', darken(palette.warning.main, 0.5));
	      const snackbarContentBackground = emphasize(palette.background.default, 0.98);
	      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
	      setColor(palette.SnackbarContent, 'color', darkPalette.getContrastText(snackbarContentBackground));
	      setColor(palette.SpeedDialAction, 'fabHoverBg', emphasize(palette.background.paper, 0.15));
	      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));
	      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));
	      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));
	      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));
	      setColor(palette.Switch, 'primaryDisabledColor', darken(palette.primary.main, 0.55));
	      setColor(palette.Switch, 'secondaryDisabledColor', darken(palette.secondary.main, 0.55));
	      setColor(palette.Switch, 'errorDisabledColor', darken(palette.error.main, 0.55));
	      setColor(palette.Switch, 'infoDisabledColor', darken(palette.info.main, 0.55));
	      setColor(palette.Switch, 'successDisabledColor', darken(palette.success.main, 0.55));
	      setColor(palette.Switch, 'warningDisabledColor', darken(palette.warning.main, 0.55));
	      setColor(palette.TableCell, 'border', darken(alpha(palette.divider, 1), 0.68));
	      setColor(palette.Tooltip, 'bg', alpha(palette.grey[700], 0.92));
	    }

	    palette.common.backgroundChannel = colorChannel(palette.common.background);
	    palette.common.onBackgroundChannel = colorChannel(palette.common.onBackground);
	    palette.dividerChannel = colorChannel(palette.divider);
	    Object.keys(palette).forEach(color => {
	      const colors = palette[color]; // Color palettes: primary, secondary, error, info, success, and warning

	      if (colors.main) {
	        palette[color].mainChannel = colorChannel(colors.main);
	      }

	      if (colors.light) {
	        palette[color].lightChannel = colorChannel(colors.light);
	      }

	      if (colors.dark) {
	        palette[color].darkChannel = colorChannel(colors.dark);
	      }

	      if (colors.contrastText) {
	        palette[color].contrastTextChannel = colorChannel(colors.contrastText);
	      } // Text colors: text.primary, text.secondary


	      if (colors.primary) {
	        palette[color].primaryChannel = colorChannel(colors.primary);
	      }

	      if (colors.secondary) {
	        palette[color].secondaryChannel = colorChannel(colors.secondary);
	      } // Action colors: action.active, action.selected


	      if (colors.active) {
	        palette[color].activeChannel = colorChannel(colors.active);
	      }

	      if (colors.selected) {
	        palette[color].selectedChannel = colorChannel(colors.selected);
	      }
	    });
	  });
	  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
	  return theme;
	}

	const shouldSkipGeneratingVar = keys => {
	  var _keys$;

	  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
	};

	const defaultTheme$1 = extendTheme();
	createCssVarsProvider({
	  theme: defaultTheme$1,
	  attribute: 'data-mui-color-scheme',
	  modeStorageKey: 'mui-mode',
	  colorSchemeStorageKey: 'mui-color-scheme',
	  defaultColorScheme: {
	    light: 'light',
	    dark: 'dark'
	  },
	  resolveTheme: theme => {
	    const newTheme = _extends({}, theme, {
	      typography: createTypography(theme.palette, theme.typography)
	    });

	    return newTheme;
	  },
	  shouldSkipGeneratingVar
	});

	const defaultTheme = createTheme();
	const Box = createBox({
	  defaultTheme,
	  defaultClassName: 'MuiBox-root',
	  generateClassName: ClassNameGenerator.generate
	});
	Box.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	/* eslint-disable material-ui/mui-name-matches-component-name */
	const Container = createContainer({
	  createStyledComponent: styled('div', {
	    name: 'MuiContainer',
	    slot: 'Root',
	    overridesResolver: (props, styles) => {
	      const {
	        ownerState
	      } = props;
	      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
	    }
	  }),
	  useThemeProps: inProps => useThemeProps({
	    props: inProps,
	    name: 'MuiContainer'
	  })
	});
	Container.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * Set the max-width to match the min-width of the current breakpoint.
	   * This is useful if you'd prefer to design for a fixed set of sizes
	   * instead of trying to accommodate a fully fluid viewport.
	   * It's fluid by default.
	   * @default false
	   */
	  fixed: propTypes.exports.bool,

	  /**
	   * Determine the max-width of the container.
	   * The container width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   * @default 'lg'
	   */
	  maxWidth: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	generateUtilityClasses('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);

	function getSvgIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSvgIcon', slot);
	}
	generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$1_ = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];

	const useUtilityClasses$1J = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getSvgIconUtilityClass, classes);
	};

	const SvgIconRoot = styled('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;

	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    fill: 'currentColor',
	    flexShrink: 0,
	    transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
	      duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
	      medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
	      large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875'
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
	      action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
	      disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon = /*#__PURE__*/react.exports.forwardRef(function SvgIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });

	  const {
	    children,
	    className,
	    color = 'inherit',
	    component = 'svg',
	    fontSize = 'medium',
	    htmlColor,
	    inheritViewBox = false,
	    titleAccess,
	    viewBox = '0 0 24 24'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1_);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    fontSize,
	    instanceFontSize: inProps.fontSize,
	    inheritViewBox,
	    viewBox
	  });

	  const more = {};

	  if (!inheritViewBox) {
	    more.viewBox = viewBox;
	  }

	  const classes = useUtilityClasses$1J(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SvgIconRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    focusable: "false",
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, more, other, {
	    children: [children, titleAccess ? /*#__PURE__*/jsxRuntime.exports.jsx("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	SvgIcon.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Node passed into the SVG element.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
	   * @default 'inherit'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
	   * @default 'medium'
	   */
	  fontSize: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'large', 'medium', 'small']), propTypes.exports.string]),

	  /**
	   * Applies a color attribute to the SVG element.
	   */
	  htmlColor: propTypes.exports.string,

	  /**
	   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
	   * prop will be ignored.
	   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
	   * `component`'s viewBox to the root node.
	   * @default false
	   */
	  inheritViewBox: propTypes.exports.bool,

	  /**
	   * The shape-rendering attribute. The behavior of the different options is described on the
	   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
	   * If you are having issues with blurry icons you should investigate this prop.
	   */
	  shapeRendering: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Provides a human-readable title for the element that contains it.
	   * https://www.w3.org/TR/SVG-access/#Equivalent
	   */
	  titleAccess: propTypes.exports.string,

	  /**
	   * Allows you to redefine what the coordinates without units mean inside an SVG element.
	   * For example, if the SVG element is 500 (width) by 200 (height),
	   * and you pass viewBox="0 0 50 20",
	   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
	   * to bottom right (50,20) and each unit will be worth 10px.
	   * @default '0 0 24 24'
	   */
	  viewBox: propTypes.exports.string
	} ;
	SvgIcon.muiName = 'SvgIcon';

	function createSvgIcon(path, displayName) {
	  const Component = (props, ref) => /*#__PURE__*/jsxRuntime.exports.jsx(SvgIcon, _extends({
	    "data-testid": `${displayName}Icon`,
	    ref: ref
	  }, props, {
	    children: path
	  }));

	  {
	    // Need to set `displayName` on the inner component for React.memo.
	    // React prior to 16.14 ignores `displayName` on the wrapper.
	    Component.displayName = `${displayName}Icon`;
	  }

	  Component.muiName = SvgIcon.muiName;
	  return /*#__PURE__*/react.exports.memo( /*#__PURE__*/react.exports.forwardRef(Component));
	}

	var reactIs = {exports: {}};

	var reactIs_development = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.SuspenseList = SuspenseList;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isSuspenseList = isSuspenseList;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}

	(function (module) {

		{
		  module.exports = reactIs_development;
		}
	} (reactIs));

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	/**
	 * Checks if a given element has a CSS class.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);
	  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	/**
	 * Adds a CSS class to a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}
	/**
	 * Removes a CSS class from a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */


	function removeClass$1(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	var config = {
	  disabled: false
	};

	var timeoutsShape = propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	  enter: propTypes.exports.number,
	  exit: propTypes.exports.number,
	  appear: propTypes.exports.number
	}).isRequired]) ;
	var classNamesShape = propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.shape({
	  enter: propTypes.exports.string,
	  exit: propTypes.exports.string,
	  active: propTypes.exports.string
	}), propTypes.exports.shape({
	  enter: propTypes.exports.string,
	  enterDone: propTypes.exports.string,
	  enterActive: propTypes.exports.string,
	  exit: propTypes.exports.string,
	  exitDone: propTypes.exports.string,
	  exitActive: propTypes.exports.string
	})]) ;

	var TransitionGroupContext = React.createContext(null);

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React.Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = {
	  /**
	   * A React reference to DOM element that need to transition:
	   * https://stackoverflow.com/a/51127130/4671932
	   *
	   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
	   *      (e.g. `onEnter`) because user already has direct access to the node.
	   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
	   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
	   *     (see
	   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
	   */
	  nodeRef: propTypes.exports.shape({
	    current: typeof Element === 'undefined' ? propTypes.exports.any : function (propValue, key, componentName, location, propFullName, secret) {
	      var value = propValue[key];
	      return propTypes.exports.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
	    }
	  }),

	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: propTypes.exports.oneOfType([propTypes.exports.func.isRequired, propTypes.exports.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: propTypes.exports.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: propTypes.exports.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: propTypes.exports.bool,

	  /**
	   * By default the child component does not perform the enter transition when
	   * it first mounts, regardless of the value of `in`. If you want this
	   * behavior, set both `appear` and `in` to `true`.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: propTypes.exports.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: propTypes.exports.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. Timeouts are still used as a fallback if provided.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: propTypes.exports.func
	} ; // Name the function so it is clearer in the documentation

	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;

	var _addClass = function addClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return addClass(node, c);
	  });
	};

	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return removeClass$1(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
	 * use it if you're using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**, so it's
	 * important to add `transition` declaration only to them, otherwise transitions
	 * might not behave as intended! This might not be obvious when the transitions
	 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
	 * the example above (minus `transition`), but it becomes apparent in more
	 * complex transitions.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */


	var CSSTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };

	    _this.onEnter = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument[0],
	          appearing = _this$resolveArgument[1];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntering = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument2[0],
	          appearing = _this$resolveArgument2[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.addClass(node, type, 'active');

	      if (_this.props.onEntering) {
	        _this.props.onEntering(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntered = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument3[0],
	          appearing = _this$resolveArgument3[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.removeClasses(node, type);

	      _this.addClass(node, type, 'done');

	      if (_this.props.onEntered) {
	        _this.props.onEntered(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onExit = function (maybeNode) {
	      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument4[0];

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      _this.addClass(node, 'exit', 'base');

	      if (_this.props.onExit) {
	        _this.props.onExit(maybeNode);
	      }
	    };

	    _this.onExiting = function (maybeNode) {
	      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument5[0];

	      _this.addClass(node, 'exit', 'active');

	      if (_this.props.onExiting) {
	        _this.props.onExiting(maybeNode);
	      }
	    };

	    _this.onExited = function (maybeNode) {
	      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument6[0];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, 'exit', 'done');

	      if (_this.props.onExited) {
	        _this.props.onExited(maybeNode);
	      }
	    };

	    _this.resolveArguments = function (maybeNode, maybeAppearing) {
	      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
	      : [maybeNode, maybeAppearing];
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];

	    var _this$getClassNames = this.getClassNames('enter'),
	        doneClassName = _this$getClassNames.doneClassName;

	    if (type === 'appear' && phase === 'done' && doneClassName) {
	      className += " " + doneClassName;
	    } // This is to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.


	    if (phase === 'active') {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	    }

	    if (className) {
	      this.appliedClasses[type][phase] = className;

	      _addClass(node, className);
	    }
	  };

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	        baseClassName = _this$appliedClasses$.base,
	        activeClassName = _this$appliedClasses$.active,
	        doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};

	    if (baseClassName) {
	      removeClass(node, baseClassName);
	    }

	    if (activeClassName) {
	      removeClass(node, activeClassName);
	    }

	    if (doneClassName) {
	      removeClass(node, doneClassName);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props;
	        _this$props.classNames;
	        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

	    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(React.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = _extends({}, Transition.propTypes, {
	  /**
	   * The animation classNames applied to the component as it appears, enters,
	   * exits or has finished the transition. A single name can be provided, which
	   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
	   *
	   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
	   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
	   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
	   *
	   * A few details to note about how these classes are applied:
	   *
	   * 1. They are _joined_ with the ones that are already defined on the child
	   *    component, so if you want to add some base styles, you can use
	   *    `className` without worrying that it will be overridden.
	   *
	   * 2. If the transition component mounts with `in={false}`, no classes are
	   *    applied yet. You might be expecting `*-exit-done`, but if you think
	   *    about it, a component cannot finish exiting if it hasn't entered yet.
	   *
	   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
	   *    allows you to define different behavior for when appearing is done and
	   *    when regular entering is done, using selectors like
	   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
	   *    an epic entrance animation when element first appears in the DOM using
	   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   *    simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: classNamesShape,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: propTypes.exports.func
	}) ;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.exports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return react.exports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!react.exports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = react.exports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React.Component);

	TransitionGroup.propTypes = {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: propTypes.exports.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: propTypes.exports.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: propTypes.exports.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: propTypes.exports.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: propTypes.exports.func
	} ;
	TransitionGroup.defaultProps = defaultProps;

	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */

	var ReplaceTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);

	  function ReplaceTransition() {
	    var _this;

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return _this.handleLifecycle('onEnter', 0, args);
	    };

	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      return _this.handleLifecycle('onEntering', 0, args);
	    };

	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      return _this.handleLifecycle('onEntered', 0, args);
	    };

	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }

	      return _this.handleLifecycle('onExit', 1, args);
	    };

	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      return _this.handleLifecycle('onExiting', 1, args);
	    };

	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }

	      return _this.handleLifecycle('onExited', 1, args);
	    };

	    return _this;
	  }

	  var _proto = ReplaceTransition.prototype;

	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;

	    var children = this.props.children;
	    var child = React.Children.toArray(children)[idx];
	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);

	    if (this.props[handler]) {
	      var maybeNode = child.props.nodeRef ? undefined : ReactDOM.findDOMNode(this);
	      this.props[handler](maybeNode);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

	    var _React$Children$toArr = React.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];

	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return /*#__PURE__*/React.createElement(TransitionGroup, props, inProp ? React.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : React.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };

	  return ReplaceTransition;
	}(React.Component);

	ReplaceTransition.propTypes = {
	  in: propTypes.exports.bool.isRequired,
	  children: function children(props, propName) {
	    if (React.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} ;

	var _leaveRenders, _enterRenders;

	function areChildrenDifferent(oldChildren, newChildren) {
	  if (oldChildren === newChildren) return false;

	  if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
	    return false;
	  }

	  return true;
	}
	/**
	 * Enum of modes for SwitchTransition component
	 * @enum { string }
	 */


	var modes = {
	  out: 'out-in',
	  in: 'in-out'
	};

	var callHook = function callHook(element, name, cb) {
	  return function () {
	    var _element$props;

	    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
	    cb();
	  };
	};

	var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
	  var current = _ref.current,
	      changeState = _ref.changeState;
	  return React.cloneElement(current, {
	    in: false,
	    onExited: callHook(current, 'onExited', function () {
	      changeState(ENTERING, null);
	    })
	  });
	}, _leaveRenders[modes.in] = function (_ref2) {
	  var current = _ref2.current,
	      changeState = _ref2.changeState,
	      children = _ref2.children;
	  return [current, React.cloneElement(children, {
	    in: true,
	    onEntered: callHook(children, 'onEntered', function () {
	      changeState(ENTERING);
	    })
	  })];
	}, _leaveRenders);
	var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
	  var children = _ref3.children,
	      changeState = _ref3.changeState;
	  return React.cloneElement(children, {
	    in: true,
	    onEntered: callHook(children, 'onEntered', function () {
	      changeState(ENTERED, React.cloneElement(children, {
	        in: true
	      }));
	    })
	  });
	}, _enterRenders[modes.in] = function (_ref4) {
	  var current = _ref4.current,
	      children = _ref4.children,
	      changeState = _ref4.changeState;
	  return [React.cloneElement(current, {
	    in: false,
	    onExited: callHook(current, 'onExited', function () {
	      changeState(ENTERED, React.cloneElement(children, {
	        in: true
	      }));
	    })
	  }), React.cloneElement(children, {
	    in: true
	  })];
	}, _enterRenders);
	/**
	 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
	 * You can use it when you want to control the render between state transitions.
	 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
	 *
	 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
	 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
	 *
	 * **Note**: If you want the animation to happen simultaneously
	 * (that is, to have the old child removed and a new child inserted **at the same time**),
	 * you should use
	 * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
	 * instead.
	 *
	 * ```jsx
	 * function App() {
	 *  const [state, setState] = useState(false);
	 *  return (
	 *    <SwitchTransition>
	 *      <CSSTransition
	 *        key={state ? "Goodbye, world!" : "Hello, world!"}
	 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
	 *        classNames='fade'
	 *      >
	 *        <button onClick={() => setState(state => !state)}>
	 *          {state ? "Goodbye, world!" : "Hello, world!"}
	 *        </button>
	 *      </CSSTransition>
	 *    </SwitchTransition>
	 *  );
	 * }
	 * ```
	 *
	 * ```css
	 * .fade-enter{
	 *    opacity: 0;
	 * }
	 * .fade-exit{
	 *    opacity: 1;
	 * }
	 * .fade-enter-active{
	 *    opacity: 1;
	 * }
	 * .fade-exit-active{
	 *    opacity: 0;
	 * }
	 * .fade-enter-active,
	 * .fade-exit-active{
	 *    transition: opacity 500ms;
	 * }
	 * ```
	 */

	var SwitchTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(SwitchTransition, _React$Component);

	  function SwitchTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.state = {
	      status: ENTERED,
	      current: null
	    };
	    _this.appeared = false;

	    _this.changeState = function (status, current) {
	      if (current === void 0) {
	        current = _this.state.current;
	      }

	      _this.setState({
	        status: status,
	        current: current
	      });
	    };

	    return _this;
	  }

	  var _proto = SwitchTransition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	  };

	  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
	    if (props.children == null) {
	      return {
	        current: null
	      };
	    }

	    if (state.status === ENTERING && props.mode === modes.in) {
	      return {
	        status: ENTERING
	      };
	    }

	    if (state.current && areChildrenDifferent(state.current, props.children)) {
	      return {
	        status: EXITING
	      };
	    }

	    return {
	      current: React.cloneElement(props.children, {
	        in: true
	      })
	    };
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        mode = _this$props.mode,
	        _this$state = this.state,
	        status = _this$state.status,
	        current = _this$state.current;
	    var data = {
	      children: children,
	      current: current,
	      changeState: this.changeState,
	      status: status
	    };
	    var component;

	    switch (status) {
	      case ENTERING:
	        component = enterRenders[mode](data);
	        break;

	      case EXITING:
	        component = leaveRenders[mode](data);
	        break;

	      case ENTERED:
	        component = current;
	    }

	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: {
	        isMounting: !this.appeared
	      }
	    }, component);
	  };

	  return SwitchTransition;
	}(React.Component);

	SwitchTransition.propTypes = {
	  /**
	   * Transition modes.
	   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
	   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
	   *
	   * @type {'out-in'|'in-out'}
	   */
	  mode: propTypes.exports.oneOf([modes.in, modes.out]),

	  /**
	   * Any `Transition` or `CSSTransition` component.
	   */
	  children: propTypes.exports.oneOfType([propTypes.exports.element.isRequired])
	} ;
	SwitchTransition.defaultProps = {
	  mode: modes.out
	};

	const reflow = node => node.scrollTop;
	function getTransitionProps(props, options) {
	  var _style$transitionDura, _style$transitionTimi;

	  const {
	    timeout,
	    easing,
	    style = {}
	  } = props;
	  return {
	    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
	    delay: style.transitionDelay
	  };
	}

	function getCollapseUtilityClass(slot) {
	  return generateUtilityClass('MuiCollapse', slot);
	}
	generateUtilityClasses('MuiCollapse', ['root', 'horizontal', 'vertical', 'entered', 'hidden', 'wrapper', 'wrapperInner']);

	const _excluded$1Z = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];

	const useUtilityClasses$1I = ownerState => {
	  const {
	    orientation,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `${orientation}`],
	    entered: ['entered'],
	    hidden: ['hidden'],
	    wrapper: ['wrapper', `${orientation}`],
	    wrapperInner: ['wrapperInner', `${orientation}`]
	  };
	  return composeClasses(slots, getCollapseUtilityClass, classes);
	};

	const CollapseRoot = styled('div', {
	  name: 'MuiCollapse',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  height: 0,
	  overflow: 'hidden',
	  transition: theme.transitions.create('height')
	}, ownerState.orientation === 'horizontal' && {
	  height: 'auto',
	  width: 0,
	  transition: theme.transitions.create('width')
	}, ownerState.state === 'entered' && _extends({
	  height: 'auto',
	  overflow: 'visible'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto'
	}), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {
	  visibility: 'hidden'
	}));
	const CollapseWrapper = styled('div', {
	  name: 'MuiCollapse',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => styles.wrapper
	})(({
	  ownerState
	}) => _extends({
	  // Hack to get children with a negative margin to not falsify the height computation.
	  display: 'flex',
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));
	const CollapseWrapperInner = styled('div', {
	  name: 'MuiCollapse',
	  slot: 'WrapperInner',
	  overridesResolver: (props, styles) => styles.wrapperInner
	})(({
	  ownerState
	}) => _extends({
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));
	/**
	 * The Collapse transition is used by the
	 * [Vertical Stepper](/material-ui/react-stepper/#vertical-stepper) StepContent component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Collapse = /*#__PURE__*/react.exports.forwardRef(function Collapse(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCollapse'
	  });

	  const {
	    addEndListener,
	    children,
	    className,
	    collapsedSize: collapsedSizeProp = '0px',
	    component,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    orientation = 'vertical',
	    style,
	    timeout = duration.standard,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Transition
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1Z);

	  const ownerState = _extends({}, props, {
	    orientation,
	    collapsedSize: collapsedSizeProp
	  });

	  const classes = useUtilityClasses$1I(ownerState);
	  const theme = useTheme();
	  const timer = react.exports.useRef();
	  const wrapperRef = react.exports.useRef(null);
	  const autoTransitionDuration = react.exports.useRef();
	  const collapsedSize = typeof collapsedSizeProp === 'number' ? `${collapsedSizeProp}px` : collapsedSizeProp;
	  const isHorizontal = orientation === 'horizontal';
	  const size = isHorizontal ? 'width' : 'height';
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  const nodeRef = react.exports.useRef(null);
	  const handleRef = useForkRef(ref, nodeRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;

	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    if (wrapperRef.current && isHorizontal) {
	      // Set absolute position to get the size of collapsed content
	      wrapperRef.current.style.position = 'absolute';
	    }

	    node.style[size] = collapsedSize;

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
	    const wrapperSize = getWrapperSize();

	    if (wrapperRef.current && isHorizontal) {
	      // After the size is read reset the position back to default
	      wrapperRef.current.style.position = '';
	    }

	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });

	    if (timeout === 'auto') {
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }

	    node.style[size] = `${wrapperSize}px`;
	    node.style.transitionTimingFunction = transitionTimingFunction;

	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
	    node.style[size] = 'auto';

	    if (onEntered) {
	      onEntered(node, isAppearing);
	    }
	  });
	  const handleExit = normalizedTransitionCallback(node => {
	    node.style[size] = `${getWrapperSize()}px`;

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleExiting = normalizedTransitionCallback(node => {
	    const wrapperSize = getWrapperSize();
	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });

	    if (timeout === 'auto') {
	      // TODO: rename getAutoHeightDuration to something more generic (width support)
	      // Actually it just calculates animation duration based on size
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }

	    node.style[size] = collapsedSize;
	    node.style.transitionTimingFunction = transitionTimingFunction;

	    if (onExiting) {
	      onExiting(node);
	    }
	  });

	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTransitionDuration.current || 0);
	    }

	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    in: inProp,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    nodeRef: nodeRef,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => /*#__PURE__*/jsxRuntime.exports.jsx(CollapseRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className, {
	        'entered': classes.entered,
	        'exited': !inProp && collapsedSize === '0px' && classes.hidden
	      }[state]),
	      style: _extends({
	        [isHorizontal ? 'minWidth' : 'minHeight']: collapsedSize
	      }, style),
	      ownerState: _extends({}, ownerState, {
	        state
	      }),
	      ref: handleRef
	    }, childProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(CollapseWrapper, {
	        ownerState: _extends({}, ownerState, {
	          state
	        }),
	        className: classes.wrapper,
	        ref: wrapperRef,
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(CollapseWrapperInner, {
	          ownerState: _extends({}, ownerState, {
	            state
	          }),
	          className: classes.wrapperInner,
	          children: children
	        })
	      })
	    }))
	  }));
	});
	Collapse.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * The content node to be collapsed.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The width (horizontal) or height (vertical) of the container when collapsed.
	   * @default '0px'
	   */
	  collapsedSize: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: propTypes.exports.oneOfType([propTypes.exports.shape({
	    enter: propTypes.exports.string,
	    exit: propTypes.exports.string
	  }), propTypes.exports.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * The transition orientation.
	   * @default 'vertical'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default duration.standard
	   */
	  timeout: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;
	Collapse.muiSupportAuto = true;

	/**
	 * @ignore - internal component.
	 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
	 */

	const AccordionContext = /*#__PURE__*/react.exports.createContext({});

	{
	  AccordionContext.displayName = 'AccordionContext';
	}

	function getAccordionUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordion', slot);
	}
	const accordionClasses = generateUtilityClasses('MuiAccordion', ['root', 'rounded', 'expanded', 'disabled', 'gutters', 'region']);

	const _excluded$1Y = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];

	const useUtilityClasses$1H = ownerState => {
	  const {
	    classes,
	    square,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', !square && 'rounded', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    region: ['region']
	  };
	  return composeClasses(slots, getAccordionUtilityClass, classes);
	};

	const AccordionRoot = styled(Paper, {
	  name: 'MuiAccordion',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${accordionClasses.region}`]: styles.region
	    }, styles.root, !ownerState.square && styles.rounded, !ownerState.disableGutters && styles.gutters];
	  }
	})(({
	  theme
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return {
	    position: 'relative',
	    transition: theme.transitions.create(['margin'], transition),
	    overflowAnchor: 'none',
	    // Keep the same scrolling position
	    '&:before': {
	      position: 'absolute',
	      left: 0,
	      top: -1,
	      right: 0,
	      height: 1,
	      content: '""',
	      opacity: 1,
	      backgroundColor: (theme.vars || theme).palette.divider,
	      transition: theme.transitions.create(['opacity', 'background-color'], transition)
	    },
	    '&:first-of-type': {
	      '&:before': {
	        display: 'none'
	      }
	    },
	    [`&.${accordionClasses.expanded}`]: {
	      '&:before': {
	        opacity: 0
	      },
	      '&:first-of-type': {
	        marginTop: 0
	      },
	      '&:last-of-type': {
	        marginBottom: 0
	      },
	      '& + &': {
	        '&:before': {
	          display: 'none'
	        }
	      }
	    },
	    [`&.${accordionClasses.disabled}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    }
	  };
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, !ownerState.square && {
	  borderRadius: 0,
	  '&:first-of-type': {
	    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderTopRightRadius: (theme.vars || theme).shape.borderRadius
	  },
	  '&:last-of-type': {
	    borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
	    // Fix a rendering issue on Edge
	    '@supports (-ms-ime-align: auto)': {
	      borderBottomLeftRadius: 0,
	      borderBottomRightRadius: 0
	    }
	  }
	}, !ownerState.disableGutters && {
	  [`&.${accordionClasses.expanded}`]: {
	    margin: '16px 0'
	  }
	}));
	const Accordion = /*#__PURE__*/react.exports.forwardRef(function Accordion(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordion'
	  });

	  const {
	    children: childrenProp,
	    className,
	    defaultExpanded = false,
	    disabled = false,
	    disableGutters = false,
	    expanded: expandedProp,
	    onChange,
	    square = false,
	    TransitionComponent = Collapse,
	    TransitionProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1Y);

	  const [expanded, setExpandedState] = useControlled({
	    controlled: expandedProp,
	    default: defaultExpanded,
	    name: 'Accordion',
	    state: 'expanded'
	  });
	  const handleChange = react.exports.useCallback(event => {
	    setExpandedState(!expanded);

	    if (onChange) {
	      onChange(event, !expanded);
	    }
	  }, [expanded, onChange, setExpandedState]);
	  const [summary, ...children] = react.exports.Children.toArray(childrenProp);
	  const contextValue = react.exports.useMemo(() => ({
	    expanded,
	    disabled,
	    disableGutters,
	    toggle: handleChange
	  }), [expanded, disabled, disableGutters, handleChange]);

	  const ownerState = _extends({}, props, {
	    square,
	    disabled,
	    disableGutters,
	    expanded
	  });

	  const classes = useUtilityClasses$1H(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(AccordionRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState,
	    square: square
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AccordionContext.Provider, {
	      value: contextValue,
	      children: summary
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	      in: expanded,
	      timeout: "auto"
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	        "aria-labelledby": summary.props.id,
	        id: summary.props['aria-controls'],
	        role: "region",
	        className: classes.region,
	        children: children
	      })
	    }))]
	  }));
	});
	Accordion.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: chainPropTypes(propTypes.exports.node.isRequired, props => {
	    const summary = react.exports.Children.toArray(props.children)[0];

	    if (reactIs.exports.isFragment(summary)) {
	      return new Error("MUI: The Accordion doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
	    }

	    if (! /*#__PURE__*/react.exports.isValidElement(summary)) {
	      return new Error('MUI: Expected the first child of Accordion to be a valid element.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, expands the accordion by default.
	   * @default false
	   */
	  defaultExpanded: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, it removes the margin between two expanded accordion items and the increase of height.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * If `true`, expands the accordion, otherwise collapse it.
	   * Setting this prop enables control over the accordion.
	   */
	  expanded: propTypes.exports.bool,

	  /**
	   * Callback fired when the expand/collapse state is changed.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {boolean} expanded The `expanded` state of the accordion.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, rounded corners are disabled.
	   * @default false
	   */
	  square: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Collapse
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getAccordionActionsUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordionActions', slot);
	}
	generateUtilityClasses('MuiAccordionActions', ['root', 'spacing']);

	const _excluded$1X = ["className", "disableSpacing"];

	const useUtilityClasses$1G = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return composeClasses(slots, getAccordionActionsUtilityClass, classes);
	};

	const AccordionActionsRoot = styled('div', {
	  name: 'MuiAccordionActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8,
	  justifyContent: 'flex-end'
	}, !ownerState.disableSpacing && {
	  '& > :not(:first-of-type)': {
	    marginLeft: 8
	  }
	}));
	const AccordionActions = /*#__PURE__*/react.exports.forwardRef(function AccordionActions(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordionActions'
	  });

	  const {
	    className,
	    disableSpacing = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1X);

	  const ownerState = _extends({}, props, {
	    disableSpacing
	  });

	  const classes = useUtilityClasses$1G(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(AccordionActionsRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	AccordionActions.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   * @default false
	   */
	  disableSpacing: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getAccordionDetailsUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordionDetails', slot);
	}
	generateUtilityClasses('MuiAccordionDetails', ['root']);

	const _excluded$1W = ["className"];

	const useUtilityClasses$1F = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getAccordionDetailsUtilityClass, classes);
	};

	const AccordionDetailsRoot = styled('div', {
	  name: 'MuiAccordionDetails',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(1, 2, 2)
	}));
	const AccordionDetails = /*#__PURE__*/react.exports.forwardRef(function AccordionDetails(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordionDetails'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1W);

	  const ownerState = props;
	  const classes = useUtilityClasses$1F(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(AccordionDetailsRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	AccordionDetails.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = react.exports.useState(false);
	  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);

	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }

	  react.exports.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }

	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: childClassName
	    })
	  });
	}

	Ripple.propTypes = {
	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object.isRequired,
	  className: propTypes.exports.string,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
	   */
	  pulsate: propTypes.exports.bool,

	  /**
	   * Diameter of the ripple.
	   */
	  rippleSize: propTypes.exports.number,

	  /**
	   * Horizontal position of the ripple center.
	   */
	  rippleX: propTypes.exports.number,

	  /**
	   * Vertical position of the ripple center.
	   */
	  rippleY: propTypes.exports.number,

	  /**
	   * exit delay
	   */
	  timeout: propTypes.exports.number.isRequired
	} ;

	const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);

	const _excluded$1V = ["center", "classes", "className"];

	let _$3 = t => t,
	    _t$3,
	    _t2$3,
	    _t3$3,
	    _t4$3;
	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	const enterKeyframe = keyframes(_t$3 || (_t$3 = _$3`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
	const exitKeyframe = keyframes(_t2$3 || (_t2$3 = _$3`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
	const pulsateKeyframe = keyframes(_t3$3 || (_t3$3 = _$3`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
	const TouchRippleRoot = styled('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root'
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	}); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.

	const TouchRippleRipple = styled(Ripple, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})(_t4$3 || (_t4$3 = _$3`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses.rippleVisible, enterKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses.ripplePulsate, ({
	  theme
	}) => theme.transitions.duration.shorter, touchRippleClasses.child, touchRippleClasses.childLeaving, exitKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses.childPulsate, pulsateKeyframe, ({
	  theme
	}) => theme.transitions.easing.easeInOut);
	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */

	const TouchRipple = /*#__PURE__*/react.exports.forwardRef(function TouchRipple(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });

	  const {
	    center: centerProp = false,
	    classes = {},
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1V);

	  const [ripples, setRipples] = react.exports.useState([]);
	  const nextKey = react.exports.useRef(0);
	  const rippleCallback = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]); // Used to filter out mouse emulated events on mobile.

	  const ignoringMouseDown = react.exports.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.

	  const startTimer = react.exports.useRef(null); // This is the hook called once the previous timeout is ready.

	  const startTimerCommit = react.exports.useRef(null);
	  const container = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(startTimer.current);
	    };
	  }, []);
	  const startCommit = react.exports.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRipple, {
	      classes: {
	        ripple: clsx(classes.ripple, touchRippleClasses.ripple),
	        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses.rippleVisible),
	        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses.ripplePulsate),
	        child: clsx(classes.child, touchRippleClasses.child),
	        childLeaving: clsx(classes.childLeaving, touchRippleClasses.childLeaving),
	        childPulsate: clsx(classes.childPulsate, touchRippleClasses.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = react.exports.useCallback((event = {}, options = {}, cb) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes

	    } = options;

	    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }

	    if ((event == null ? void 0 : event.type) === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }

	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    }; // Get the size of the ripple

	    let rippleX;
	    let rippleY;
	    let rippleSize;

	    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }

	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.

	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    } // Touche devices


	    if (event != null && event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        }; // Delay the execution of the ripple effect.


	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = react.exports.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = react.exports.useCallback((event, cb) => {
	    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.

	    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }

	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }

	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  react.exports.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRoot, _extends({
	    className: clsx(classes.root, touchRippleClasses.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionGroup, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	TouchRipple.propTypes = {
	  /**
	   * If `true`, the ripple starts at the center of the component
	   * rather than at the point of interaction.
	   */
	  center: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string
	} ;

	function getButtonBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonBase', slot);
	}
	const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);

	const _excluded$1U = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];

	const useUtilityClasses$1E = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);

	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }

	  return composedClasses;
	};

	const ButtonBaseRoot = styled('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.

	  },
	  [`&.${buttonBaseClasses.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});
	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */

	const ButtonBase = /*#__PURE__*/react.exports.forwardRef(function ButtonBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });

	  const {
	    action,
	    centerRipple = false,
	    children,
	    className,
	    component = 'button',
	    disabled = false,
	    disableRipple = false,
	    disableTouchRipple = false,
	    focusRipple = false,
	    LinkComponent = 'a',
	    onBlur,
	    onClick,
	    onContextMenu,
	    onDragLeave,
	    onFocus,
	    onFocusVisible,
	    onKeyDown,
	    onKeyUp,
	    onMouseDown,
	    onMouseLeave,
	    onMouseUp,
	    onTouchEnd,
	    onTouchMove,
	    onTouchStart,
	    tabIndex = 0,
	    TouchRippleProps,
	    touchRippleRef,
	    type
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1U);

	  const buttonRef = react.exports.useRef(null);
	  const rippleRef = react.exports.useRef(null);
	  const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  react.exports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), []);
	  const [mountedState, setMountedState] = react.exports.useState(false);
	  react.exports.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;
	  react.exports.useEffect(() => {
	    if (focusVisible && focusRipple && !disableRipple && mountedState) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible, mountedState]);

	  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
	    return useEventCallback(event => {
	      if (eventCallback) {
	        eventCallback(event);
	      }

	      const ignore = skipRippleAction;

	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }

	      return true;
	    });
	  }

	  const handleMouseDown = useRippleHandler('start', onMouseDown);
	  const handleContextMenu = useRippleHandler('stop', onContextMenu);
	  const handleDragLeave = useRippleHandler('stop', onDragLeave);
	  const handleMouseUp = useRippleHandler('stop', onMouseUp);
	  const handleMouseLeave = useRippleHandler('stop', event => {
	    if (focusVisible) {
	      event.preventDefault();
	    }

	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  const handleTouchStart = useRippleHandler('start', onTouchStart);
	  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  const handleTouchMove = useRippleHandler('stop', onTouchMove);
	  const handleBlur = useRippleHandler('stop', event => {
	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  const handleFocus = useEventCallback(event => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);

	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  });

	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };
	  /**
	   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */


	  const keydownRef = react.exports.useRef(false);
	  const handleKeyDown = useEventCallback(event => {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.start(event);
	      });
	    }

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    } // Keyboard accessibility for non interactive elements


	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();

	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  const handleKeyUp = useEventCallback(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.pulsate(event);
	      });
	    }

	    if (onKeyUp) {
	      onKeyUp(event);
	    } // Keyboard accessibility for non interactive elements


	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  let ComponentProp = component;

	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }

	  const buttonProps = {};

	  if (ComponentProp === 'button') {
	    buttonProps.type = type === undefined ? 'button' : type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (!other.href && !other.to) {
	      buttonProps.role = 'button';
	    }

	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }

	  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
	  const handleRef = useForkRef(ref, handleOwnRef);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useEffect(() => {
	      if (enableTouchRipple && !rippleRef.current) {
	        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
	      }
	    }, [enableTouchRipple]);
	  }

	  const ownerState = _extends({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });

	  const classes = useUtilityClasses$1E(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonBaseRoot, _extends({
	    as: ComponentProp,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    onBlur: handleBlur,
	    onClick: onClick,
	    onContextMenu: handleContextMenu,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex,
	    type: type
	  }, buttonProps, other, {
	    children: [children, enableTouchRipple ?
	    /*#__PURE__*/

	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    jsxRuntime.exports.jsx(TouchRipple, _extends({
	      ref: handleRippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	ButtonBase.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports `focusVisible()` action.
	   */
	  action: refType,

	  /**
	   * If `true`, the ripples are centered.
	   * They won't start at the cursor interaction position.
	   * @default false
	   */
	  centerRipple: propTypes.exports.bool,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the touch ripple effect is disabled.
	   * @default false
	   */
	  disableTouchRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the base button will have a keyboard focus ripple.
	   * @default false
	   */
	  focusRipple: propTypes.exports.bool,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  href: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .any,

	  /**
	   * The component used to render a link when the `href` prop is provided.
	   * @default 'a'
	   */
	  LinkComponent: propTypes.exports.elementType,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onContextMenu: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onDragLeave: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * Callback fired when the component is focused with a keyboard.
	   * We trigger a `onFocus` callback too.
	   */
	  onFocusVisible: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseUp: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onTouchEnd: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onTouchMove: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onTouchStart: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * @default 0
	   */
	  tabIndex: propTypes.exports.number,

	  /**
	   * Props applied to the `TouchRipple` element.
	   */
	  TouchRippleProps: propTypes.exports.object,

	  /**
	   * A ref that points to the `TouchRipple` element.
	   */
	  touchRippleRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
	    current: propTypes.exports.shape({
	      pulsate: propTypes.exports.func.isRequired,
	      start: propTypes.exports.func.isRequired,
	      stop: propTypes.exports.func.isRequired
	    })
	  })]),

	  /**
	   * @ignore
	   */
	  type: propTypes.exports.oneOfType([propTypes.exports.oneOf(['button', 'reset', 'submit']), propTypes.exports.string])
	} ;

	function getAccordionSummaryUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordionSummary', slot);
	}
	const accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);

	const _excluded$1T = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];

	const useUtilityClasses$1D = ownerState => {
	  const {
	    classes,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    focusVisible: ['focusVisible'],
	    content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],
	    expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']
	  };
	  return composeClasses(slots, getAccordionSummaryUtilityClass, classes);
	};

	const AccordionSummaryRoot = styled(ButtonBase, {
	  name: 'MuiAccordionSummary',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return _extends({
	    display: 'flex',
	    minHeight: 48,
	    padding: theme.spacing(0, 2),
	    transition: theme.transitions.create(['min-height', 'background-color'], transition),
	    [`&.${accordionSummaryClasses.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.focus
	    },
	    [`&.${accordionSummaryClasses.disabled}`]: {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity
	    },
	    [`&:hover:not(.${accordionSummaryClasses.disabled})`]: {
	      cursor: 'pointer'
	    }
	  }, !ownerState.disableGutters && {
	    [`&.${accordionSummaryClasses.expanded}`]: {
	      minHeight: 64
	    }
	  });
	});
	const AccordionSummaryContent = styled('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexGrow: 1,
	  margin: '12px 0'
	}, !ownerState.disableGutters && {
	  transition: theme.transitions.create(['margin'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${accordionSummaryClasses.expanded}`]: {
	    margin: '20px 0'
	  }
	}));
	const AccordionSummaryExpandIconWrapper = styled('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'ExpandIconWrapper',
	  overridesResolver: (props, styles) => styles.expandIconWrapper
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  color: (theme.vars || theme).palette.action.active,
	  transform: 'rotate(0deg)',
	  transition: theme.transitions.create('transform', {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${accordionSummaryClasses.expanded}`]: {
	    transform: 'rotate(180deg)'
	  }
	}));
	const AccordionSummary = /*#__PURE__*/react.exports.forwardRef(function AccordionSummary(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordionSummary'
	  });

	  const {
	    children,
	    className,
	    expandIcon,
	    focusVisibleClassName,
	    onClick
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1T);

	  const {
	    disabled = false,
	    disableGutters,
	    expanded,
	    toggle
	  } = react.exports.useContext(AccordionContext);

	  const handleChange = event => {
	    if (toggle) {
	      toggle(event);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const ownerState = _extends({}, props, {
	    expanded,
	    disabled,
	    disableGutters
	  });

	  const classes = useUtilityClasses$1D(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(AccordionSummaryRoot, _extends({
	    focusRipple: false,
	    disableRipple: true,
	    disabled: disabled,
	    component: "div",
	    "aria-expanded": expanded,
	    className: clsx(classes.root, className),
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    onClick: handleChange,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AccordionSummaryContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: children
	    }), expandIcon && /*#__PURE__*/jsxRuntime.exports.jsx(AccordionSummaryExpandIconWrapper, {
	      className: classes.expandIconWrapper,
	      ownerState: ownerState,
	      children: expandIcon
	    })]
	  }));
	});
	AccordionSummary.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon to display as the expand indicator.
	   */
	  expandIcon: propTypes.exports.node,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getAlertUtilityClass(slot) {
	  return generateUtilityClass('MuiAlert', slot);
	}
	const alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);

	function getIconButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiIconButton', slot);
	}
	const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);

	const _excluded$1S = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];

	const useUtilityClasses$1C = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getIconButtonUtilityClass, classes);
	};

	const IconButtonRoot = styled(ButtonBase, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: (theme.vars || theme).palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  })
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.active} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends({
	  color: (theme.vars || theme).palette[ownerState.color].main
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}), ownerState.size === 'small' && {
	  padding: 5,
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  padding: 12,
	  fontSize: theme.typography.pxToRem(28)
	}, {
	  [`&.${iconButtonClasses.disabled}`]: {
	    backgroundColor: 'transparent',
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));
	/**
	 * Refer to the [Icons](/material-ui/icons/) section of the documentation
	 * regarding the available icon options.
	 */

	const IconButton = /*#__PURE__*/react.exports.forwardRef(function IconButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIconButton'
	  });

	  const {
	    edge = false,
	    children,
	    className,
	    color = 'default',
	    disabled = false,
	    disableFocusRipple = false,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1S);

	  const ownerState = _extends({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });

	  const classes = useUtilityClasses$1C(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(IconButtonRoot, _extends({
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	IconButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The icon to display.
	   */
	  children: chainPropTypes(propTypes.exports.node, props => {
	    const found = react.exports.Children.toArray(props.children).some(child => /*#__PURE__*/react.exports.isValidElement(child) && child.props.onClick);

	    if (found) {
	      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'default'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: propTypes.exports.oneOf(['end', 'start', false]),

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	var SuccessOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
	}), 'SuccessOutlined');

	var ReportProblemOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
	}), 'ReportProblemOutlined');

	var ErrorOutlineIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	}), 'ErrorOutline');

	var InfoOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
	}), 'InfoOutlined');

	var ClearIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');

	var _CloseIcon;

	const _excluded$1R = ["action", "children", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"];

	const useUtilityClasses$1B = ownerState => {
	  const {
	    variant,
	    color,
	    severity,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],
	    icon: ['icon'],
	    message: ['message'],
	    action: ['action']
	  };
	  return composeClasses(slots, getAlertUtilityClass, classes);
	};

	const AlertRoot = styled(Paper, {
	  name: 'MuiAlert',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const getColor = theme.palette.mode === 'light' ? darken : lighten;
	  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;
	  const color = ownerState.color || ownerState.severity;
	  return _extends({}, theme.typography.body2, {
	    backgroundColor: 'transparent',
	    display: 'flex',
	    padding: '6px 16px'
	  }, color && ownerState.variant === 'standard' && {
	    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
	    backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),
	    [`& .${alertClasses.icon}`]: theme.vars ? {
	      color: theme.vars.palette.Alert[`${color}IconColor`]
	    } : {
	      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
	    }
	  }, color && ownerState.variant === 'outlined' && {
	    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
	    border: `1px solid ${(theme.vars || theme).palette[color].light}`,
	    [`& .${alertClasses.icon}`]: theme.vars ? {
	      color: theme.vars.palette.Alert[`${color}IconColor`]
	    } : {
	      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
	    }
	  }, color && ownerState.variant === 'filled' && _extends({
	    fontWeight: theme.typography.fontWeightMedium
	  }, theme.vars ? {
	    color: theme.vars.palette.Alert[`${color}FilledColor`],
	    backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]
	  } : {
	    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,
	    color: theme.palette.getContrastText(theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main)
	  }));
	});
	const AlertIcon = styled('div', {
	  name: 'MuiAlert',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => styles.icon
	})({
	  marginRight: 12,
	  padding: '7px 0',
	  display: 'flex',
	  fontSize: 22,
	  opacity: 0.9
	});
	const AlertMessage = styled('div', {
	  name: 'MuiAlert',
	  slot: 'Message',
	  overridesResolver: (props, styles) => styles.message
	})({
	  padding: '8px 0',
	  minWidth: 0,
	  overflow: 'auto'
	});
	const AlertAction = styled('div', {
	  name: 'MuiAlert',
	  slot: 'Action',
	  overridesResolver: (props, styles) => styles.action
	})({
	  display: 'flex',
	  alignItems: 'flex-start',
	  padding: '4px 0 0 16px',
	  marginLeft: 'auto',
	  marginRight: -8
	});
	const defaultIconMapping = {
	  success: /*#__PURE__*/jsxRuntime.exports.jsx(SuccessOutlinedIcon, {
	    fontSize: "inherit"
	  }),
	  warning: /*#__PURE__*/jsxRuntime.exports.jsx(ReportProblemOutlinedIcon, {
	    fontSize: "inherit"
	  }),
	  error: /*#__PURE__*/jsxRuntime.exports.jsx(ErrorOutlineIcon, {
	    fontSize: "inherit"
	  }),
	  info: /*#__PURE__*/jsxRuntime.exports.jsx(InfoOutlinedIcon, {
	    fontSize: "inherit"
	  })
	};
	const Alert = /*#__PURE__*/react.exports.forwardRef(function Alert(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAlert'
	  });

	  const {
	    action,
	    children,
	    className,
	    closeText = 'Close',
	    color,
	    icon,
	    iconMapping = defaultIconMapping,
	    onClose,
	    role = 'alert',
	    severity = 'success',
	    variant = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1R);

	  const ownerState = _extends({}, props, {
	    color,
	    severity,
	    variant
	  });

	  const classes = useUtilityClasses$1B(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(AlertRoot, _extends({
	    role: role,
	    elevation: 0,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [icon !== false ? /*#__PURE__*/jsxRuntime.exports.jsx(AlertIcon, {
	      ownerState: ownerState,
	      className: classes.icon,
	      children: icon || iconMapping[severity] || defaultIconMapping[severity]
	    }) : null, /*#__PURE__*/jsxRuntime.exports.jsx(AlertMessage, {
	      ownerState: ownerState,
	      className: classes.message,
	      children: children
	    }), action != null ? /*#__PURE__*/jsxRuntime.exports.jsx(AlertAction, {
	      ownerState: ownerState,
	      className: classes.action,
	      children: action
	    }) : null, action == null && onClose ? /*#__PURE__*/jsxRuntime.exports.jsx(AlertAction, {
	      ownerState: ownerState,
	      className: classes.action,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(IconButton, {
	        size: "small",
	        "aria-label": closeText,
	        title: closeText,
	        color: "inherit",
	        onClick: onClose,
	        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ClearIcon, {
	          fontSize: "small"
	        }))
	      })
	    }) : null]
	  }));
	});
	Alert.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The action to display. It renders after the message, at the end of the alert.
	   */
	  action: propTypes.exports.node,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Override the default label for the *close popup* icon button.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Close'
	   */
	  closeText: propTypes.exports.string,

	  /**
	   * The color of the component. Unless provided, the value is taken from the `severity` prop.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * Override the icon displayed before the children.
	   * Unless provided, the icon is mapped to the value of the `severity` prop.
	   * Set to `false` to remove the `icon`.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The component maps the `severity` prop to a range of different icons,
	   * for instance success to `<SuccessOutlined>`.
	   * If you wish to change this mapping, you can provide your own.
	   * Alternatively, you can use the `icon` prop to override the icon displayed.
	   */
	  iconMapping: propTypes.exports.shape({
	    error: propTypes.exports.node,
	    info: propTypes.exports.node,
	    success: propTypes.exports.node,
	    warning: propTypes.exports.node
	  }),

	  /**
	   * Callback fired when the component requests to be closed.
	   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * The ARIA role attribute of the element.
	   * @default 'alert'
	   */
	  role: propTypes.exports.string,

	  /**
	   * The severity of the alert. This defines the color and icon used.
	   * @default 'success'
	   */
	  severity: propTypes.exports.oneOf(['error', 'info', 'success', 'warning']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['filled', 'outlined', 'standard']), propTypes.exports.string])
	} ;

	function getTypographyUtilityClass(slot) {
	  return generateUtilityClass('MuiTypography', slot);
	}
	generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

	const _excluded$1Q = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];

	const useUtilityClasses$1A = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return composeClasses(slots, getTypographyUtilityClass, classes);
	};

	const TypographyRoot = styled('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 0
	}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6

	const colorTransformations$1 = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};

	const transformDeprecatedColors$1 = color => {
	  return colorTransformations$1[color] || color;
	};

	const Typography = /*#__PURE__*/react.exports.forwardRef(function Typography(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors$1(themeProps.color);
	  const props = extendSxProp(_extends({}, themeProps, {
	    color
	  }));

	  const {
	    align = 'inherit',
	    className,
	    component,
	    gutterBottom = false,
	    noWrap = false,
	    paragraph = false,
	    variant = 'body1',
	    variantMapping = defaultVariantMapping
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1Q);

	  const ownerState = _extends({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });

	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$1A(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TypographyRoot, _extends({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other));
	});
	Typography.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the text-align on the component.
	   * @default 'inherit'
	   */
	  align: propTypes.exports.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the text will have a bottom margin.
	   * @default false
	   */
	  gutterBottom: propTypes.exports.bool,

	  /**
	   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
	   *
	   * Note that text overflow can only happen with block or inline-block level elements
	   * (the element needs to have a width in order to overflow).
	   * @default false
	   */
	  noWrap: propTypes.exports.bool,

	  /**
	   * If `true`, the element will be a paragraph element.
	   * @default false
	   */
	  paragraph: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Applies the theme typography styles.
	   * @default 'body1'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), propTypes.exports.string]),

	  /**
	   * The component maps the variant prop to a range of different HTML element types.
	   * For instance, subtitle1 to `<h6>`.
	   * If you wish to change that mapping, you can provide your own.
	   * Alternatively, you can use the `component` prop.
	   * @default {
	   *   h1: 'h1',
	   *   h2: 'h2',
	   *   h3: 'h3',
	   *   h4: 'h4',
	   *   h5: 'h5',
	   *   h6: 'h6',
	   *   subtitle1: 'h6',
	   *   subtitle2: 'h6',
	   *   body1: 'p',
	   *   body2: 'p',
	   *   inherit: 'p',
	   * }
	   */
	  variantMapping: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .object
	} ;

	function getAlertTitleUtilityClass(slot) {
	  return generateUtilityClass('MuiAlertTitle', slot);
	}
	generateUtilityClasses('MuiAlertTitle', ['root']);

	const _excluded$1P = ["className"];

	const useUtilityClasses$1z = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getAlertTitleUtilityClass, classes);
	};

	const AlertTitleRoot = styled(Typography, {
	  name: 'MuiAlertTitle',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => {
	  return {
	    fontWeight: theme.typography.fontWeightMedium,
	    marginTop: -2
	  };
	});
	const AlertTitle = /*#__PURE__*/react.exports.forwardRef(function AlertTitle(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAlertTitle'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1P);

	  const ownerState = props;
	  const classes = useUtilityClasses$1z(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(AlertTitleRoot, _extends({
	    gutterBottom: true,
	    component: "div",
	    ownerState: ownerState,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});
	AlertTitle.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getAppBarUtilityClass(slot) {
	  return generateUtilityClass('MuiAppBar', slot);
	}
	generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent']);

	const _excluded$1O = ["className", "color", "enableColorOnDark", "position"];

	const useUtilityClasses$1y = ownerState => {
	  const {
	    color,
	    position,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, `position${capitalize(position)}`]
	  };
	  return composeClasses(slots, getAppBarUtilityClass, classes);
	}; // var2 is the fallback.
	// Ex. var1: 'var(--a)', var2: 'var(--b)'; return: 'var(--a, var(--b))'


	const joinVars = (var1, var2) => `${var1 == null ? void 0 : var1.replace(')', '')}, ${var2})`;

	const AppBarRoot = styled(Paper, {
	  name: 'MuiAppBar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
	  return _extends({
	    display: 'flex',
	    flexDirection: 'column',
	    width: '100%',
	    boxSizing: 'border-box',
	    // Prevent padding issue with the Modal and fixed positioned AppBar.
	    flexShrink: 0
	  }, ownerState.position === 'fixed' && {
	    position: 'fixed',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0,
	    '@media print': {
	      // Prevent the app bar to be visible on each printed page.
	      position: 'absolute'
	    }
	  }, ownerState.position === 'absolute' && {
	    position: 'absolute',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'sticky' && {
	    // ⚠️ sticky is not supported by IE11.
	    position: 'sticky',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'static' && {
	    position: 'static'
	  }, ownerState.position === 'relative' && {
	    position: 'relative'
	  }, !theme.vars && _extends({}, ownerState.color === 'default' && {
	    backgroundColor: backgroundColorDefault,
	    color: theme.palette.getContrastText(backgroundColorDefault)
	  }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
	    backgroundColor: theme.palette[ownerState.color].main,
	    color: theme.palette[ownerState.color].contrastText
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
	    backgroundColor: null,
	    color: null
	  }, ownerState.color === 'transparent' && _extends({
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && {
	    backgroundImage: 'none'
	  })), theme.vars && _extends({}, ownerState.color === 'default' && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
	  }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
	  }, {
	    backgroundColor: 'var(--AppBar-background)',
	    color: ownerState.color === 'inherit' ? 'inherit' : 'var(--AppBar-color)'
	  }, ownerState.color === 'transparent' && {
	    backgroundImage: 'none',
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }));
	});
	const AppBar = /*#__PURE__*/react.exports.forwardRef(function AppBar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAppBar'
	  });

	  const {
	    className,
	    color = 'primary',
	    enableColorOnDark = false,
	    position = 'fixed'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1O);

	  const ownerState = _extends({}, props, {
	    color,
	    position,
	    enableColorOnDark
	  });

	  const classes = useUtilityClasses$1y(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(AppBarRoot, _extends({
	    square: true,
	    component: "header",
	    ownerState: ownerState,
	    elevation: 4,
	    className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
	    ref: ref
	  }, other));
	});
	AppBar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']), propTypes.exports.string]),

	  /**
	   * If true, the `color` prop is applied in dark mode.
	   * @default false
	   */
	  enableColorOnDark: propTypes.exports.bool,

	  /**
	   * The positioning type. The behavior of the different options is described
	   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
	   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
	   * @default 'fixed'
	   */
	  position: propTypes.exports.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const PopperRoot = styled(PopperUnstyled, {
	  name: 'MuiPopper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	/**
	 *
	 * Demos:
	 *
	 * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
	 * - [Menus](https://mui.com/material-ui/react-menu/)
	 * - [Popper](https://mui.com/material-ui/react-popper/)
	 *
	 * API:
	 *
	 * - [Popper API](https://mui.com/material-ui/api/popper/)
	 */

	const Popper = /*#__PURE__*/react.exports.forwardRef(function Popper(inProps, ref) {
	  const theme = useTheme$2();
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopper'
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PopperRoot, _extends({
	    direction: theme == null ? void 0 : theme.direction
	  }, props, {
	    ref: ref
	  }));
	});
	Popper.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
	   * or a function that returns either.
	   * It's used to set the position of the popper.
	   * The return value will passed as the reference object of the Popper instance.
	   */
	  anchorEl: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.object, propTypes.exports.func]),

	  /**
	   * Popper render function or node.
	   */
	  children: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.node, propTypes.exports.func]),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Popper.
	   * @default false
	   */
	  keepMounted: propTypes.exports.bool,

	  /**
	   * Popper.js is based on a "plugin-like" architecture,
	   * most of its features are fully encapsulated "modifiers".
	   *
	   * A modifier is a function that is called each time Popper.js needs to
	   * compute the position of the popper.
	   * For this reason, modifiers should be very performant to avoid bottlenecks.
	   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
	   */
	  modifiers: propTypes.exports.arrayOf(propTypes.exports.shape({
	    data: propTypes.exports.object,
	    effect: propTypes.exports.func,
	    enabled: propTypes.exports.bool,
	    fn: propTypes.exports.func,
	    name: propTypes.exports.any,
	    options: propTypes.exports.object,
	    phase: propTypes.exports.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
	    requires: propTypes.exports.arrayOf(propTypes.exports.string),
	    requiresIfExists: propTypes.exports.arrayOf(propTypes.exports.string)
	  })),

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * Popper placement.
	   * @default 'bottom'
	   */
	  placement: propTypes.exports.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

	  /**
	   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
	   * @default {}
	   */
	  popperOptions: propTypes.exports.shape({
	    modifiers: propTypes.exports.array,
	    onFirstUpdate: propTypes.exports.func,
	    placement: propTypes.exports.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
	    strategy: propTypes.exports.oneOf(['absolute', 'fixed'])
	  }),

	  /**
	   * A ref that points to the used popper instance.
	   */
	  popperRef: refType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Help supporting a react-transition-group/Transition component.
	   * @default false
	   */
	  transition: propTypes.exports.bool
	} ;

	function getListSubheaderUtilityClass(slot) {
	  return generateUtilityClass('MuiListSubheader', slot);
	}
	generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);

	const _excluded$1N = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];

	const useUtilityClasses$1x = ownerState => {
	  const {
	    classes,
	    color,
	    disableGutters,
	    inset,
	    disableSticky
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
	  };
	  return composeClasses(slots, getListSubheaderUtilityClass, classes);
	};

	const ListSubheaderRoot = styled('li', {
	  name: 'MuiListSubheader',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  boxSizing: 'border-box',
	  lineHeight: '48px',
	  listStyle: 'none',
	  color: (theme.vars || theme).palette.text.secondary,
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(14)
	}, ownerState.color === 'primary' && {
	  color: (theme.vars || theme).palette.primary.main
	}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.inset && {
	  paddingLeft: 72
	}, !ownerState.disableSticky && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 1,
	  backgroundColor: (theme.vars || theme).palette.background.paper
	}));
	const ListSubheader = /*#__PURE__*/react.exports.forwardRef(function ListSubheader(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListSubheader'
	  });

	  const {
	    className,
	    color = 'default',
	    component = 'li',
	    disableGutters = false,
	    disableSticky = false,
	    inset = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1N);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disableGutters,
	    disableSticky,
	    inset
	  });

	  const classes = useUtilityClasses$1x(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListSubheaderRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	ListSubheader.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'default'
	   */
	  color: propTypes.exports.oneOf(['default', 'inherit', 'primary']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the List Subheader will not have gutters.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * If `true`, the List Subheader will not stick to the top during scroll.
	   * @default false
	   */
	  disableSticky: propTypes.exports.bool,

	  /**
	   * If `true`, the List Subheader is indented.
	   * @default false
	   */
	  inset: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	var CancelIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
	}), 'Cancel');

	function getChipUtilityClass(slot) {
	  return generateUtilityClass('MuiChip', slot);
	}
	const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorPrimary', 'colorSecondary', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'focusVisible']);

	const _excluded$1M = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"];

	const useUtilityClasses$1w = ownerState => {
	  const {
	    classes,
	    disabled,
	    size,
	    color,
	    onDelete,
	    clickable,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
	    label: ['label', `label${capitalize(size)}`],
	    avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
	    icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(color)}`],
	    deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIconOutlinedColor${capitalize(color)}`]
	  };
	  return composeClasses(slots, getChipUtilityClass, classes);
	};

	const ChipRoot = styled('div', {
	  name: 'MuiChip',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      color,
	      clickable,
	      onDelete,
	      size,
	      variant
	    } = ownerState;
	    return [{
	      [`& .${chipClasses.avatar}`]: styles.avatar
	    }, {
	      [`& .${chipClasses.avatar}`]: styles[`avatar${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses.avatar}`]: styles[`avatarColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses.icon}`]: styles.icon
	    }, {
	      [`& .${chipClasses.icon}`]: styles[`icon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses.icon}`]: styles[`iconColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses.deleteIcon}`]: styles.deleteIcon
	    }, {
	      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIconOutlinedColor${capitalize(color)}`]
	    }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], variant === 'outlined' && styles[`outlined${capitalize(color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
	  const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
	  return _extends({
	    maxWidth: '100%',
	    fontFamily: theme.typography.fontFamily,
	    fontSize: theme.typography.pxToRem(13),
	    display: 'inline-flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    height: 32,
	    color: (theme.vars || theme).palette.text.primary,
	    backgroundColor: (theme.vars || theme).palette.action.selected,
	    borderRadius: 32 / 2,
	    whiteSpace: 'nowrap',
	    transition: theme.transitions.create(['background-color', 'box-shadow']),
	    // label will inherit this from root, then `clickable` class overrides this for both
	    cursor: 'default',
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    textDecoration: 'none',
	    border: 0,
	    // Remove `button` border
	    padding: 0,
	    // Remove `button` padding
	    verticalAlign: 'middle',
	    boxSizing: 'border-box',
	    [`&.${chipClasses.disabled}`]: {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`& .${chipClasses.avatar}`]: {
	      marginLeft: 5,
	      marginRight: -6,
	      width: 24,
	      height: 24,
	      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
	      fontSize: theme.typography.pxToRem(12)
	    },
	    [`& .${chipClasses.avatarColorPrimary}`]: {
	      color: (theme.vars || theme).palette.primary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    },
	    [`& .${chipClasses.avatarColorSecondary}`]: {
	      color: (theme.vars || theme).palette.secondary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.secondary.dark
	    },
	    [`& .${chipClasses.avatarSmall}`]: {
	      marginLeft: 4,
	      marginRight: -4,
	      width: 18,
	      height: 18,
	      fontSize: theme.typography.pxToRem(10)
	    },
	    [`& .${chipClasses.icon}`]: _extends({
	      color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor,
	      marginLeft: 5,
	      marginRight: -6
	    }, ownerState.size === 'small' && {
	      fontSize: 18,
	      marginLeft: 4,
	      marginRight: -4
	    }, ownerState.color !== 'default' && {
	      color: 'inherit'
	    }),
	    [`& .${chipClasses.deleteIcon}`]: _extends({
	      WebkitTapHighlightColor: 'transparent',
	      color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : deleteIconColor,
	      fontSize: 22,
	      cursor: 'pointer',
	      margin: '0 5px 0 -6px',
	      '&:hover': {
	        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(deleteIconColor, 0.4)
	      }
	    }, ownerState.size === 'small' && {
	      fontSize: 16,
	      marginRight: 4,
	      marginLeft: -4
	    }, ownerState.color !== 'default' && {
	      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
	      '&:hover, &:active': {
	        color: (theme.vars || theme).palette[ownerState.color].contrastText
	      }
	    })
	  }, ownerState.size === 'small' && {
	    height: 24
	  }, ownerState.color !== 'default' && {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	    color: (theme.vars || theme).palette[ownerState.color].contrastText
	  }, ownerState.onDelete && {
	    [`&.${chipClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  }, ownerState.onDelete && ownerState.color !== 'default' && {
	    [`&.${chipClasses.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	    }
	  });
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.clickable && {
	  userSelect: 'none',
	  WebkitTapHighlightColor: 'transparent',
	  cursor: 'pointer',
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	  },
	  '&:active': {
	    boxShadow: (theme.vars || theme).shadows[1]
	  }
	}, ownerState.clickable && ownerState.color !== 'default' && {
	  [`&:hover, &.${chipClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.variant === 'outlined' && {
	  backgroundColor: 'transparent',
	  border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
	  [`&.${chipClasses.clickable}:hover`]: {
	    backgroundColor: (theme.vars || theme).palette.action.hover
	  },
	  [`&.${chipClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`& .${chipClasses.avatar}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses.avatarSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses.icon}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses.iconSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses.deleteIcon}`]: {
	    marginRight: 5
	  },
	  [`& .${chipClasses.deleteIconSmall}`]: {
	    marginRight: 3
	  }
	}, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
	  color: (theme.vars || theme).palette[ownerState.color].main,
	  border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
	  [`&.${chipClasses.clickable}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
	  },
	  [`& .${chipClasses.deleteIcon}`]: {
	    color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
	    '&:hover, &:active': {
	      color: (theme.vars || theme).palette[ownerState.color].main
	    }
	  }
	}));
	const ChipLabel = styled('span', {
	  name: 'MuiChip',
	  slot: 'Label',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      size
	    } = ownerState;
	    return [styles.label, styles[`label${capitalize(size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  paddingLeft: 12,
	  paddingRight: 12,
	  whiteSpace: 'nowrap'
	}, ownerState.size === 'small' && {
	  paddingLeft: 8,
	  paddingRight: 8
	}));

	function isDeleteKeyboardEvent(keyboardEvent) {
	  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
	}
	/**
	 * Chips represent complex entities in small blocks, such as a contact.
	 */


	const Chip = /*#__PURE__*/react.exports.forwardRef(function Chip(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiChip'
	  });

	  const {
	    avatar: avatarProp,
	    className,
	    clickable: clickableProp,
	    color = 'default',
	    component: ComponentProp,
	    deleteIcon: deleteIconProp,
	    disabled = false,
	    icon: iconProp,
	    label,
	    onClick,
	    onDelete,
	    onKeyDown,
	    onKeyUp,
	    size = 'medium',
	    variant = 'filled'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1M);

	  const chipRef = react.exports.useRef(null);
	  const handleRef = useForkRef(chipRef, ref);

	  const handleDeleteIconClick = event => {
	    // Stop the event from bubbling up to the `Chip`
	    event.stopPropagation();

	    if (onDelete) {
	      onDelete(event);
	    }
	  };

	  const handleKeyDown = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
	      // Will be handled in keyUp, otherwise some browsers
	      // might init navigation
	      event.preventDefault();
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };

	  const handleKeyUp = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target) {
	      if (onDelete && isDeleteKeyboardEvent(event)) {
	        onDelete(event);
	      } else if (event.key === 'Escape' && chipRef.current) {
	        chipRef.current.blur();
	      }
	    }

	    if (onKeyUp) {
	      onKeyUp(event);
	    }
	  };

	  const clickable = clickableProp !== false && onClick ? true : clickableProp;
	  const small = size === 'small';
	  const component = clickable || onDelete ? ButtonBase : ComponentProp || 'div';

	  const ownerState = _extends({}, props, {
	    component,
	    disabled,
	    size,
	    color,
	    onDelete: !!onDelete,
	    clickable,
	    variant
	  });

	  const classes = useUtilityClasses$1w(ownerState);
	  const moreProps = component === ButtonBase ? _extends({
	    component: ComponentProp || 'div',
	    focusVisibleClassName: classes.focusVisible
	  }, onDelete && {
	    disableRipple: true
	  }) : {};
	  let deleteIcon = null;

	  if (onDelete) {
	    const customClasses = clsx(color !== 'default' && (variant === 'outlined' ? classes[`deleteIconOutlinedColor${capitalize(color)}`] : classes[`deleteIconColor${capitalize(color)}`]), small && classes.deleteIconSmall);
	    deleteIcon = deleteIconProp && /*#__PURE__*/react.exports.isValidElement(deleteIconProp) ? /*#__PURE__*/react.exports.cloneElement(deleteIconProp, {
	      className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),
	      onClick: handleDeleteIconClick
	    }) : /*#__PURE__*/jsxRuntime.exports.jsx(CancelIcon, {
	      className: clsx(classes.deleteIcon, customClasses),
	      onClick: handleDeleteIconClick
	    });
	  }

	  let avatar = null;

	  if (avatarProp && /*#__PURE__*/react.exports.isValidElement(avatarProp)) {
	    avatar = /*#__PURE__*/react.exports.cloneElement(avatarProp, {
	      className: clsx(classes.avatar, avatarProp.props.className)
	    });
	  }

	  let icon = null;

	  if (iconProp && /*#__PURE__*/react.exports.isValidElement(iconProp)) {
	    icon = /*#__PURE__*/react.exports.cloneElement(iconProp, {
	      className: clsx(classes.icon, iconProp.props.className)
	    });
	  }

	  {
	    if (avatar && icon) {
	      console.error('MUI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
	    }
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ChipRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    disabled: clickable && disabled ? true : undefined,
	    onClick: onClick,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    ref: handleRef,
	    ownerState: ownerState
	  }, moreProps, other, {
	    children: [avatar || icon, /*#__PURE__*/jsxRuntime.exports.jsx(ChipLabel, {
	      className: clsx(classes.label),
	      ownerState: ownerState,
	      children: label
	    }), deleteIcon]
	  }));
	});
	Chip.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The Avatar element to display.
	   */
	  avatar: propTypes.exports.element,

	  /**
	   * This prop isn't supported.
	   * Use the `component` prop if you need to change the children structure.
	   */
	  children: unsupportedProp,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the chip will appear clickable, and will raise when pressed,
	   * even if the onClick prop is not defined.
	   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
	   * This can be used, for example,
	   * along with the component prop to indicate an anchor Chip is clickable.
	   * Note: this controls the UI and does not affect the onClick event.
	   */
	  clickable: propTypes.exports.bool,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'default'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Override the default delete icon element. Shown only if `onDelete` is set.
	   */
	  deleteIcon: propTypes.exports.element,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * Icon element.
	   */
	  icon: propTypes.exports.element,

	  /**
	   * The content of the component.
	   */
	  label: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * Callback fired when the delete icon is clicked.
	   * If set, the delete icon will be shown.
	   */
	  onDelete: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.exports.func,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'filled'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['filled', 'outlined']), propTypes.exports.string])
	} ;

	function formControlState({
	  props,
	  states,
	  muiFormControl
	}) {
	  return states.reduce((acc, state) => {
	    acc[state] = props[state];

	    if (muiFormControl) {
	      if (typeof props[state] === 'undefined') {
	        acc[state] = muiFormControl[state];
	      }
	    }

	    return acc;
	  }, {});
	}

	/**
	 * @ignore - internal component.
	 */

	const FormControlContext = /*#__PURE__*/react.exports.createContext();

	{
	  FormControlContext.displayName = 'FormControlContext';
	}

	function useFormControl() {
	  return react.exports.useContext(FormControlContext);
	}

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	} // Determine if field is empty or filled.
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.

	function isFilled(obj, SSR = false) {
	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	} // Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.

	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	function getInputBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiInputBase', slot);
	}
	const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);

	const _excluded$1L = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "startAdornment", "type", "value"];
	const rootOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
	};
	const inputOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
	};

	const useUtilityClasses$1v = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    error,
	    endAdornment,
	    focused,
	    formControl,
	    fullWidth,
	    hiddenLabel,
	    multiline,
	    size,
	    startAdornment,
	    type
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size === 'small' && 'sizeSmall', multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel'],
	    input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd']
	  };
	  return composeClasses(slots, getInputBaseUtilityClass, classes);
	};

	const InputBaseRoot = styled('div', {
	  name: 'MuiInputBase',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: '1.4375em',
	  // 23px
	  boxSizing: 'border-box',
	  // Prevent padding issue with fullWidth.
	  position: 'relative',
	  cursor: 'text',
	  display: 'inline-flex',
	  alignItems: 'center',
	  [`&.${inputBaseClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled,
	    cursor: 'default'
	  }
	}, ownerState.multiline && _extends({
	  padding: '4px 0 5px'
	}, ownerState.size === 'small' && {
	  paddingTop: 1
	}), ownerState.fullWidth && {
	  width: '100%'
	}));
	const InputBaseComponent = styled('input', {
	  name: 'MuiInputBase',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';

	  const placeholder = _extends({
	    color: 'currentColor'
	  }, theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  }, {
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  });

	  const placeholderHidden = {
	    opacity: '0 !important'
	  };
	  const placeholderVisible = theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  };
	  return _extends({
	    font: 'inherit',
	    letterSpacing: 'inherit',
	    color: 'currentColor',
	    padding: '4px 0 5px',
	    border: 0,
	    boxSizing: 'content-box',
	    background: 'none',
	    height: '1.4375em',
	    // Reset 23pxthe native input line-height
	    margin: 0,
	    // Reset for Safari
	    WebkitTapHighlightColor: 'transparent',
	    display: 'block',
	    // Make the flex item shrink with Firefox
	    minWidth: 0,
	    width: '100%',
	    // Fix IE11 width issue
	    animationName: 'mui-auto-fill-cancel',
	    animationDuration: '10ms',
	    '&::-webkit-input-placeholder': placeholder,
	    '&::-moz-placeholder': placeholder,
	    // Firefox 19+
	    '&:-ms-input-placeholder': placeholder,
	    // IE11
	    '&::-ms-input-placeholder': placeholder,
	    // Edge
	    '&:focus': {
	      outline: 0
	    },
	    // Reset Firefox invalid required input style
	    '&:invalid': {
	      boxShadow: 'none'
	    },
	    '&::-webkit-search-decoration': {
	      // Remove the padding when type=search.
	      WebkitAppearance: 'none'
	    },
	    // Show and hide the placeholder logic
	    [`label[data-shrink=false] + .${inputBaseClasses.formControl} &`]: {
	      '&::-webkit-input-placeholder': placeholderHidden,
	      '&::-moz-placeholder': placeholderHidden,
	      // Firefox 19+
	      '&:-ms-input-placeholder': placeholderHidden,
	      // IE11
	      '&::-ms-input-placeholder': placeholderHidden,
	      // Edge
	      '&:focus::-webkit-input-placeholder': placeholderVisible,
	      '&:focus::-moz-placeholder': placeholderVisible,
	      // Firefox 19+
	      '&:focus:-ms-input-placeholder': placeholderVisible,
	      // IE11
	      '&:focus::-ms-input-placeholder': placeholderVisible // Edge

	    },
	    [`&.${inputBaseClasses.disabled}`]: {
	      opacity: 1,
	      // Reset iOS opacity
	      WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug

	    },
	    '&:-webkit-autofill': {
	      animationDuration: '5000s',
	      animationName: 'mui-auto-fill'
	    }
	  }, ownerState.size === 'small' && {
	    paddingTop: 1
	  }, ownerState.multiline && {
	    height: 'auto',
	    resize: 'none',
	    padding: 0,
	    paddingTop: 0
	  }, ownerState.type === 'search' && {
	    // Improve type search style.
	    MozAppearance: 'textfield'
	  });
	});

	const inputGlobalStyles = /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
	  styles: {
	    '@keyframes mui-auto-fill': {
	      from: {
	        display: 'block'
	      }
	    },
	    '@keyframes mui-auto-fill-cancel': {
	      from: {
	        display: 'block'
	      }
	    }
	  }
	});
	/**
	 * `InputBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating an input.
	 * It contains a load of style reset and some state logic.
	 */


	const InputBase = /*#__PURE__*/react.exports.forwardRef(function InputBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInputBase'
	  });

	  const {
	    'aria-describedby': ariaDescribedby,
	    autoComplete,
	    autoFocus,
	    className,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    disabled,
	    disableInjectingGlobalStyles,
	    endAdornment,
	    fullWidth = false,
	    id,
	    inputComponent = 'input',
	    inputProps: inputPropsProp = {},
	    inputRef: inputRefProp,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onBlur,
	    onChange,
	    onClick,
	    onFocus,
	    onKeyDown,
	    onKeyUp,
	    placeholder,
	    readOnly,
	    renderSuffix,
	    rows,
	    startAdornment,
	    type = 'text',
	    value: valueProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1L);

	  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
	  const {
	    current: isControlled
	  } = react.exports.useRef(value != null);
	  const inputRef = react.exports.useRef();
	  const handleInputRefWarning = react.exports.useCallback(instance => {
	    {
	      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
	        console.error(['MUI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
	      }
	    }
	  }, []);
	  const handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
	  const handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
	  const handleInputRef = useForkRef(inputRef, handleInputRefProp);
	  const [focused, setFocused] = react.exports.useState(false);
	  const muiFormControl = useFormControl();

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useEffect(() => {
	      if (muiFormControl) {
	        return muiFormControl.registerEffect();
	      }

	      return undefined;
	    }, [muiFormControl]);
	  }

	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
	  });
	  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.

	  react.exports.useEffect(() => {
	    if (!muiFormControl && disabled && focused) {
	      setFocused(false);

	      if (onBlur) {
	        onBlur();
	      }
	    }
	  }, [muiFormControl, disabled, focused, onBlur]);
	  const onFilled = muiFormControl && muiFormControl.onFilled;
	  const onEmpty = muiFormControl && muiFormControl.onEmpty;
	  const checkDirty = react.exports.useCallback(obj => {
	    if (isFilled(obj)) {
	      if (onFilled) {
	        onFilled();
	      }
	    } else if (onEmpty) {
	      onEmpty();
	    }
	  }, [onFilled, onEmpty]);
	  useEnhancedEffect(() => {
	    if (isControlled) {
	      checkDirty({
	        value
	      });
	    }
	  }, [value, checkDirty, isControlled]);

	  const handleFocus = event => {
	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (fcs.disabled) {
	      event.stopPropagation();
	      return;
	    }

	    if (onFocus) {
	      onFocus(event);
	    }

	    if (inputPropsProp.onFocus) {
	      inputPropsProp.onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    } else {
	      setFocused(true);
	    }
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (inputPropsProp.onBlur) {
	      inputPropsProp.onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    } else {
	      setFocused(false);
	    }
	  };

	  const handleChange = (event, ...args) => {
	    if (!isControlled) {
	      const element = event.target || inputRef.current;

	      if (element == null) {
	        throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
	      }

	      checkDirty({
	        value: element.value
	      });
	    }

	    if (inputPropsProp.onChange) {
	      inputPropsProp.onChange(event, ...args);
	    } // Perform in the willUpdate


	    if (onChange) {
	      onChange(event, ...args);
	    }
	  }; // Check the input state on mount, in case it was filled by the user
	  // or auto filled by the browser before the hydration (for SSR).


	  react.exports.useEffect(() => {
	    checkDirty(inputRef.current); // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);

	  const handleClick = event => {
	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  let InputComponent = inputComponent;
	  let inputProps = inputPropsProp;

	  if (multiline && InputComponent === 'input') {
	    if (rows) {
	      {
	        if (minRows || maxRows) {
	          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
	        }
	      }

	      inputProps = _extends({
	        type: undefined,
	        minRows: rows,
	        maxRows: rows
	      }, inputProps);
	    } else {
	      inputProps = _extends({
	        type: undefined,
	        maxRows,
	        minRows
	      }, inputProps);
	    }

	    InputComponent = TextareaAutosize;
	  }

	  const handleAutoFill = event => {
	    // Provide a fake value as Chrome might not let you access it for security reasons.
	    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
	      value: 'x'
	    });
	  };

	  react.exports.useEffect(() => {
	    if (muiFormControl) {
	      muiFormControl.setAdornedStart(Boolean(startAdornment));
	    }
	  }, [muiFormControl, startAdornment]);

	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    endAdornment,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    startAdornment,
	    type
	  });

	  const classes = useUtilityClasses$1v(ownerState);
	  const Root = components.Root || InputBaseRoot;
	  const rootProps = componentsProps.root || {};
	  const Input = components.Input || InputBaseComponent;
	  inputProps = _extends({}, inputProps, componentsProps.input);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
	      ownerState: _extends({}, ownerState, rootProps.ownerState)
	    }, {
	      ref: ref,
	      onClick: handleClick
	    }, other, {
	      className: clsx(classes.root, rootProps.className, className),
	      children: [startAdornment, /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext.Provider, {
	        value: null,
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({
	          ownerState: ownerState,
	          "aria-invalid": fcs.error,
	          "aria-describedby": ariaDescribedby,
	          autoComplete: autoComplete,
	          autoFocus: autoFocus,
	          defaultValue: defaultValue,
	          disabled: fcs.disabled,
	          id: id,
	          onAnimationStart: handleAutoFill,
	          name: name,
	          placeholder: placeholder,
	          readOnly: readOnly,
	          required: fcs.required,
	          rows: rows,
	          value: value,
	          onKeyDown: onKeyDown,
	          onKeyUp: onKeyUp,
	          type: type
	        }, inputProps, !isHostComponent(Input) && {
	          as: InputComponent,
	          ownerState: _extends({}, ownerState, inputProps.ownerState)
	        }, {
	          ref: handleInputRef,
	          className: clsx(classes.input, inputProps.className),
	          onBlur: handleBlur,
	          onChange: handleChange,
	          onFocus: handleFocus
	        }))
	      }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
	        startAdornment
	      })) : null]
	    }))]
	  });
	});
	InputBase.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  'aria-describedby': propTypes.exports.string,

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.object,
	    root: propTypes.exports.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
	   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
	   * @default false
	   */
	  disableInjectingGlobalStyles: propTypes.exports.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.exports.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: elementTypeAcceptingRef$1,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the `input` is blurred.
	   *
	   * Notice that the first argument (event) might be undefined.
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  renderSuffix: propTypes.exports.func,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * The size of the component.
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: propTypes.exports.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any
	} ;

	function getInputUtilityClass(slot) {
	  return generateUtilityClass('MuiInput', slot);
	}

	const inputClasses = _extends({}, inputBaseClasses, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));

	function getOutlinedInputUtilityClass(slot) {
	  return generateUtilityClass('MuiOutlinedInput', slot);
	}

	const outlinedInputClasses = _extends({}, inputBaseClasses, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));

	function getFilledInputUtilityClass(slot) {
	  return generateUtilityClass('MuiFilledInput', slot);
	}

	const filledInputClasses = _extends({}, inputBaseClasses, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));

	var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	function getAutocompleteUtilityClass(slot) {
	  return generateUtilityClass('MuiAutocomplete', slot);
	}
	const autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);

	var _ClearIcon, _ArrowDropDownIcon;

	const _excluded$1K = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "value"];

	const useUtilityClasses$1u = ownerState => {
	  const {
	    classes,
	    disablePortal,
	    focused,
	    fullWidth,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused,
	    popupOpen,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],
	    inputRoot: ['inputRoot'],
	    input: ['input', inputFocused && 'inputFocused'],
	    tag: ['tag', `tagSize${capitalize(size)}`],
	    endAdornment: ['endAdornment'],
	    clearIndicator: ['clearIndicator'],
	    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],
	    popper: ['popper', disablePortal && 'popperDisablePortal'],
	    paper: ['paper'],
	    listbox: ['listbox'],
	    loading: ['loading'],
	    noOptions: ['noOptions'],
	    option: ['option'],
	    groupLabel: ['groupLabel'],
	    groupUl: ['groupUl']
	  };
	  return composeClasses(slots, getAutocompleteUtilityClass, classes);
	};

	const AutocompleteRoot = styled('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      fullWidth,
	      hasClearIcon,
	      hasPopupIcon,
	      inputFocused,
	      size
	    } = ownerState;
	    return [{
	      [`& .${autocompleteClasses.tag}`]: styles.tag
	    }, {
	      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]
	    }, {
	      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot
	    }, {
	      [`& .${autocompleteClasses.input}`]: styles.input
	    }, {
	      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused
	    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
	  }
	})(({
	  ownerState
	}) => _extends({
	  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {
	    visibility: 'visible'
	  },

	  /* Avoid double tap issue on iOS */
	  '@media (pointer: fine)': {
	    [`&:hover .${autocompleteClasses.clearIndicator}`]: {
	      visibility: 'visible'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: '100%'
	}, {
	  [`& .${autocompleteClasses.tag}`]: _extends({
	    margin: 3,
	    maxWidth: 'calc(100% - 6px)'
	  }, ownerState.size === 'small' && {
	    margin: 2,
	    maxWidth: 'calc(100% - 4px)'
	  }),
	  [`& .${autocompleteClasses.inputRoot}`]: {
	    flexWrap: 'wrap',
	    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 26 + 4
	    },
	    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 52 + 4
	    },
	    [`& .${autocompleteClasses.input}`]: {
	      width: 0,
	      minWidth: 30
	    }
	  },
	  [`& .${inputClasses.root}`]: {
	    paddingBottom: 1,
	    '& .MuiInput-input': {
	      padding: '4px 4px 4px 0px'
	    }
	  },
	  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {
	    [`& .${inputClasses.input}`]: {
	      padding: '2px 4px 3px 0'
	    }
	  },
	  [`& .${outlinedInputClasses.root}`]: {
	    padding: 9,
	    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${autocompleteClasses.input}`]: {
	      padding: '7.5px 4px 7.5px 6px'
	    },
	    [`& .${autocompleteClasses.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {
	    padding: 6,
	    [`& .${autocompleteClasses.input}`]: {
	      padding: '2.5px 4px 2.5px 6px'
	    }
	  },
	  [`& .${filledInputClasses.root}`]: {
	    paddingTop: 19,
	    paddingLeft: 8,
	    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${filledInputClasses.input}`]: {
	      padding: '7px 4px'
	    },
	    [`& .${autocompleteClasses.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {
	    paddingBottom: 1,
	    [`& .${filledInputClasses.input}`]: {
	      padding: '2.5px 4px'
	    }
	  },
	  [`& .${inputBaseClasses.hiddenLabel}`]: {
	    paddingTop: 8
	  },
	  [`& .${autocompleteClasses.input}`]: _extends({
	    flexGrow: 1,
	    textOverflow: 'ellipsis',
	    opacity: 0
	  }, ownerState.inputFocused && {
	    opacity: 1
	  })
	}));
	const AutocompleteEndAdornment = styled('div', {
	  name: 'MuiAutocomplete',
	  slot: 'EndAdornment',
	  overridesResolver: (props, styles) => styles.endAdornment
	})({
	  // We use a position absolute to support wrapping tags.
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - 14px)' // Center vertically

	});
	const AutocompleteClearIndicator = styled(IconButton, {
	  name: 'MuiAutocomplete',
	  slot: 'ClearIndicator',
	  overridesResolver: (props, styles) => styles.clearIndicator
	})({
	  marginRight: -2,
	  padding: 4,
	  visibility: 'hidden'
	});
	const AutocompletePopupIndicator = styled(IconButton, {
	  name: 'MuiAutocomplete',
	  slot: 'PopupIndicator',
	  overridesResolver: ({
	    ownerState
	  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)
	})(({
	  ownerState
	}) => _extends({
	  padding: 2,
	  marginRight: -2
	}, ownerState.popupOpen && {
	  transform: 'rotate(180deg)'
	}));
	const AutocompletePopper = styled(Popper, {
	  name: 'MuiAutocomplete',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${autocompleteClasses.option}`]: styles.option
	    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.modal
	}, ownerState.disablePortal && {
	  position: 'absolute'
	}));
	const AutocompletePaper = styled(Paper, {
	  name: 'MuiAutocomplete',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})(({
	  theme
	}) => _extends({}, theme.typography.body1, {
	  overflow: 'auto'
	}));
	const AutocompleteLoading = styled('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Loading',
	  overridesResolver: (props, styles) => styles.loading
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteNoOptions = styled('div', {
	  name: 'MuiAutocomplete',
	  slot: 'NoOptions',
	  overridesResolver: (props, styles) => styles.noOptions
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteListbox = styled('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Listbox',
	  overridesResolver: (props, styles) => styles.listbox
	})(({
	  theme
	}) => ({
	  listStyle: 'none',
	  margin: 0,
	  padding: '8px 0',
	  maxHeight: '40vh',
	  overflow: 'auto',
	  [`& .${autocompleteClasses.option}`]: {
	    minHeight: 48,
	    display: 'flex',
	    overflow: 'hidden',
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    cursor: 'pointer',
	    paddingTop: 6,
	    boxSizing: 'border-box',
	    outline: '0',
	    WebkitTapHighlightColor: 'transparent',
	    paddingBottom: 6,
	    paddingLeft: 16,
	    paddingRight: 16,
	    [theme.breakpoints.up('sm')]: {
	      minHeight: 'auto'
	    },
	    [`&.${autocompleteClasses.focused}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.hover,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    '&[aria-disabled="true"]': {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`&.${autocompleteClasses.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.focus
	    },
	    '&[aria-selected="true"]': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	      [`&.${autocompleteClasses.focused}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: (theme.vars || theme).palette.action.selected
	        }
	      },
	      [`&.${autocompleteClasses.focusVisible}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	      }
	    }
	  }
	}));
	const AutocompleteGroupLabel = styled(ListSubheader, {
	  name: 'MuiAutocomplete',
	  slot: 'GroupLabel',
	  overridesResolver: (props, styles) => styles.groupLabel
	})(({
	  theme
	}) => ({
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  top: -8
	}));
	const AutocompleteGroupUl = styled('ul', {
	  name: 'MuiAutocomplete',
	  slot: 'GroupUl',
	  overridesResolver: (props, styles) => styles.groupUl
	})({
	  padding: 0,
	  [`& .${autocompleteClasses.option}`]: {
	    paddingLeft: 24
	  }
	});
	const Autocomplete = /*#__PURE__*/react.exports.forwardRef(function Autocomplete(inProps, ref) {
	  var _componentsProps$clea, _componentsProps$popu, _componentsProps$popp, _componentsProps$pape;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAutocomplete'
	  });
	  /* eslint-disable @typescript-eslint/no-unused-vars */

	  const {
	    autoComplete = false,
	    autoHighlight = false,
	    autoSelect = false,
	    blurOnSelect = false,
	    ChipProps,
	    className,
	    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ClearIcon, {
	      fontSize: "small"
	    })),
	    clearOnBlur = !props.freeSolo,
	    clearOnEscape = false,
	    clearText = 'Clear',
	    closeText = 'Close',
	    componentsProps = {},
	    defaultValue = props.multiple ? [] : null,
	    disableClearable = false,
	    disableCloseOnSelect = false,
	    disabled = false,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    disablePortal = false,
	    filterSelectedOptions = false,
	    forcePopupIcon = 'auto',
	    freeSolo = false,
	    fullWidth = false,
	    getLimitTagsText = more => `+${more}`,
	    getOptionLabel = option => {
	      var _option$label;

	      return (_option$label = option.label) != null ? _option$label : option;
	    },
	    groupBy,
	    handleHomeEndKeys = !props.freeSolo,
	    includeInputInList = false,
	    limitTags = -1,
	    ListboxComponent = 'ul',
	    ListboxProps,
	    loading = false,
	    loadingText = 'Loading…',
	    multiple = false,
	    noOptionsText = 'No options',
	    openOnFocus = false,
	    openText = 'Open',
	    PaperComponent = Paper,
	    PopperComponent = Popper,
	    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ArrowDropDownIcon, {})),
	    readOnly = false,
	    renderGroup: renderGroupProp,
	    renderInput,
	    renderOption: renderOptionProp,
	    renderTags,
	    selectOnFocus = !props.freeSolo,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1K);
	  /* eslint-enable @typescript-eslint/no-unused-vars */


	  const {
	    getRootProps,
	    getInputProps,
	    getInputLabelProps,
	    getPopupIndicatorProps,
	    getClearProps,
	    getTagProps,
	    getListboxProps,
	    getOptionProps,
	    value,
	    dirty,
	    id,
	    popupOpen,
	    focused,
	    focusedTag,
	    anchorEl,
	    setAnchorEl,
	    inputValue,
	    groupedOptions
	  } = useAutocomplete(_extends({}, props, {
	    componentName: 'Autocomplete'
	  }));
	  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
	  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false; // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.

	  const ownerState = _extends({}, props, {
	    disablePortal,
	    focused,
	    fullWidth,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused: focusedTag === -1,
	    popupOpen,
	    size
	  });

	  const classes = useUtilityClasses$1u(ownerState);
	  let startAdornment;

	  if (multiple && value.length > 0) {
	    const getCustomizedTagProps = params => _extends({
	      className: classes.tag,
	      disabled
	    }, getTagProps(params));

	    if (renderTags) {
	      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
	    } else {
	      startAdornment = value.map((option, index) => /*#__PURE__*/jsxRuntime.exports.jsx(Chip, _extends({
	        label: getOptionLabel(option),
	        size: size
	      }, getCustomizedTagProps({
	        index
	      }), ChipProps)));
	    }
	  }

	  if (limitTags > -1 && Array.isArray(startAdornment)) {
	    const more = startAdornment.length - limitTags;

	    if (!focused && more > 0) {
	      startAdornment = startAdornment.splice(0, limitTags);
	      startAdornment.push( /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: classes.tag,
	        children: getLimitTagsText(more)
	      }, startAdornment.length));
	    }
	  }

	  const defaultRenderGroup = params => /*#__PURE__*/jsxRuntime.exports.jsxs("li", {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupLabel, {
	      className: classes.groupLabel,
	      ownerState: ownerState,
	      component: "div",
	      children: params.group
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupUl, {
	      className: classes.groupUl,
	      ownerState: ownerState,
	      children: params.children
	    })]
	  }, params.key);

	  const renderGroup = renderGroupProp || defaultRenderGroup;

	  const defaultRenderOption = (props2, option) => /*#__PURE__*/jsxRuntime.exports.jsx("li", _extends({}, props2, {
	    children: getOptionLabel(option)
	  }));

	  const renderOption = renderOptionProp || defaultRenderOption;

	  const renderListOption = (option, index) => {
	    const optionProps = getOptionProps({
	      option,
	      index
	    });
	    return renderOption(_extends({}, optionProps, {
	      className: classes.option
	    }), option, {
	      selected: optionProps['aria-selected'],
	      inputValue
	    });
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteRoot, _extends({
	      ref: ref,
	      className: clsx(classes.root, className),
	      ownerState: ownerState
	    }, getRootProps(other), {
	      children: renderInput({
	        id,
	        disabled,
	        fullWidth: true,
	        size: size === 'small' ? 'small' : undefined,
	        InputLabelProps: getInputLabelProps(),
	        InputProps: _extends({
	          ref: setAnchorEl,
	          className: classes.inputRoot,
	          startAdornment
	        }, (hasClearIcon || hasPopupIcon) && {
	          endAdornment: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompleteEndAdornment, {
	            className: classes.endAdornment,
	            ownerState: ownerState,
	            children: [hasClearIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {
	              "aria-label": clearText,
	              title: clearText,
	              ownerState: ownerState
	            }, componentsProps.clearIndicator, {
	              className: clsx(classes.clearIndicator, (_componentsProps$clea = componentsProps.clearIndicator) == null ? void 0 : _componentsProps$clea.className),
	              children: clearIcon
	            })) : null, hasPopupIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
	              disabled: disabled,
	              "aria-label": popupOpen ? closeText : openText,
	              title: popupOpen ? closeText : openText,
	              ownerState: ownerState
	            }, componentsProps.popupIndicator, {
	              className: clsx(classes.popupIndicator, (_componentsProps$popu = componentsProps.popupIndicator) == null ? void 0 : _componentsProps$popu.className),
	              children: popupIcon
	            })) : null]
	          })
	        }),
	        inputProps: _extends({
	          className: classes.input,
	          disabled,
	          readOnly
	        }, getInputProps())
	      })
	    })), popupOpen && anchorEl ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopper, _extends({
	      as: PopperComponent,
	      disablePortal: disablePortal,
	      style: {
	        width: anchorEl ? anchorEl.clientWidth : null
	      },
	      ownerState: ownerState,
	      role: "presentation",
	      anchorEl: anchorEl,
	      open: true
	    }, componentsProps.popper, {
	      className: clsx(classes.popper, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
	      children: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompletePaper, _extends({
	        ownerState: ownerState,
	        as: PaperComponent
	      }, componentsProps.paper, {
	        className: clsx(classes.paper, (_componentsProps$pape = componentsProps.paper) == null ? void 0 : _componentsProps$pape.className),
	        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteLoading, {
	          className: classes.loading,
	          ownerState: ownerState,
	          children: loadingText
	        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteNoOptions, {
	          className: classes.noOptions,
	          ownerState: ownerState,
	          role: "presentation",
	          onMouseDown: event => {
	            // Prevent input blur when interacting with the "no options" content
	            event.preventDefault();
	          },
	          children: noOptionsText
	        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteListbox, _extends({
	          as: ListboxComponent,
	          className: classes.listbox,
	          ownerState: ownerState
	        }, getListboxProps(), ListboxProps, {
	          children: groupedOptions.map((option, index) => {
	            if (groupBy) {
	              return renderGroup({
	                key: option.key,
	                group: option.group,
	                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
	              });
	            }

	            return renderListOption(option, index);
	          })
	        })) : null]
	      }))
	    })) : null]
	  });
	});
	Autocomplete.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the portion of the selected suggestion that has not been typed by the user,
	   * known as the completion string, appears inline after the input cursor in the textbox.
	   * The inline completion string is visually highlighted and has a selected state.
	   * @default false
	   */
	  autoComplete: propTypes.exports.bool,

	  /**
	   * If `true`, the first option is automatically highlighted.
	   * @default false
	   */
	  autoHighlight: propTypes.exports.bool,

	  /**
	   * If `true`, the selected option becomes the value of the input
	   * when the Autocomplete loses focus unless the user chooses
	   * a different option or changes the character string in the input.
	   * @default false
	   */
	  autoSelect: propTypes.exports.bool,

	  /**
	   * Control if the input should be blurred when an option is selected:
	   *
	   * - `false` the input is not blurred.
	   * - `true` the input is always blurred.
	   * - `touch` the input is blurred after a touch event.
	   * - `mouse` the input is blurred after a mouse event.
	   * @default false
	   */
	  blurOnSelect: propTypes.exports.oneOfType([propTypes.exports.oneOf(['mouse', 'touch']), propTypes.exports.bool]),

	  /**
	   * Props applied to the [`Chip`](/material-ui/api/chip/) element.
	   */
	  ChipProps: propTypes.exports.object,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon to display in place of the default clear icon.
	   * @default <ClearIcon fontSize="small" />
	   */
	  clearIcon: propTypes.exports.node,

	  /**
	   * If `true`, the input's text is cleared on blur if no value is selected.
	   *
	   * Set to `true` if you want to help the user enter a new value.
	   * Set to `false` if you want to help the user resume their search.
	   * @default !props.freeSolo
	   */
	  clearOnBlur: propTypes.exports.bool,

	  /**
	   * If `true`, clear all values when the user presses escape and the popup is closed.
	   * @default false
	   */
	  clearOnEscape: propTypes.exports.bool,

	  /**
	   * Override the default text for the *clear* icon button.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Clear'
	   */
	  clearText: propTypes.exports.string,

	  /**
	   * Override the default text for the *close popup* icon button.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Close'
	   */
	  closeText: propTypes.exports.string,

	  /**
	   * The props used for each slot inside.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    clearIndicator: propTypes.exports.object,
	    paper: propTypes.exports.object,
	    popper: propTypes.exports.object,
	    popupIndicator: propTypes.exports.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   * @default props.multiple ? [] : null
	   */
	  defaultValue: chainPropTypes(propTypes.exports.any, props => {
	    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {
	      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * If `true`, the input can't be cleared.
	   * @default false
	   */
	  disableClearable: propTypes.exports.bool,

	  /**
	   * If `true`, the popup won't close when a value is selected.
	   * @default false
	   */
	  disableCloseOnSelect: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, will allow focus on disabled items.
	   * @default false
	   */
	  disabledItemsFocusable: propTypes.exports.bool,

	  /**
	   * If `true`, the list box in the popup will not wrap focus.
	   * @default false
	   */
	  disableListWrap: propTypes.exports.bool,

	  /**
	   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool,

	  /**
	   * A function that determines the filtered options to be rendered on search.
	   *
	   * @param {T[]} options The options to render.
	   * @param {object} state The state of the component.
	   * @returns {T[]}
	   */
	  filterOptions: propTypes.exports.func,

	  /**
	   * If `true`, hide the selected options from the list box.
	   * @default false
	   */
	  filterSelectedOptions: propTypes.exports.bool,

	  /**
	   * Force the visibility display of the popup icon.
	   * @default 'auto'
	   */
	  forcePopupIcon: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.bool]),

	  /**
	   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
	   * @default false
	   */
	  freeSolo: propTypes.exports.bool,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The label to display when the tags are truncated (`limitTags`).
	   *
	   * @param {number} more The number of truncated tags.
	   * @returns {ReactNode}
	   * @default (more) => `+${more}`
	   */
	  getLimitTagsText: propTypes.exports.func,

	  /**
	   * Used to determine the disabled state for a given option.
	   *
	   * @param {T} option The option to test.
	   * @returns {boolean}
	   */
	  getOptionDisabled: propTypes.exports.func,

	  /**
	   * Used to determine the string value for a given option.
	   * It's used to fill the input (and the list box options if `renderOption` is not provided).
	   *
	   * If used in free solo mode, it must accept both the type of the options and a string.
	   *
	   * @param {T} option
	   * @returns {string}
	   * @default (option) => option.label ?? option
	   */
	  getOptionLabel: propTypes.exports.func,

	  /**
	   * If provided, the options will be grouped under the returned string.
	   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
	   *
	   * @param {T} options The options to group.
	   * @returns {string}
	   */
	  groupBy: propTypes.exports.func,

	  /**
	   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
	   * It should move focus to the first option and last option, respectively.
	   * @default !props.freeSolo
	   */
	  handleHomeEndKeys: propTypes.exports.bool,

	  /**
	   * This prop is used to help implement the accessibility logic.
	   * If you don't provide an id it will fall back to a randomly generated one.
	   */
	  id: propTypes.exports.string,

	  /**
	   * If `true`, the highlight can move to the input.
	   * @default false
	   */
	  includeInputInList: propTypes.exports.bool,

	  /**
	   * The input value.
	   */
	  inputValue: propTypes.exports.string,

	  /**
	   * Used to determine if the option represents the given value.
	   * Uses strict equality by default.
	   * ⚠️ Both arguments need to be handled, an option can only match with one value.
	   *
	   * @param {T} option The option to test.
	   * @param {T} value The value to test against.
	   * @returns {boolean}
	   */
	  isOptionEqualToValue: propTypes.exports.func,

	  /**
	   * The maximum number of tags that will be visible when not focused.
	   * Set `-1` to disable the limit.
	   * @default -1
	   */
	  limitTags: integerPropType,

	  /**
	   * The component used to render the listbox.
	   * @default 'ul'
	   */
	  ListboxComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the Listbox element.
	   */
	  ListboxProps: propTypes.exports.object,

	  /**
	   * If `true`, the component is in a loading state.
	   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
	   * @default false
	   */
	  loading: propTypes.exports.bool,

	  /**
	   * Text to display when in a loading state.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Loading…'
	   */
	  loadingText: propTypes.exports.node,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   * @default false
	   */
	  multiple: propTypes.exports.bool,

	  /**
	   * Text to display when there are no options.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'No options'
	   */
	  noOptionsText: propTypes.exports.node,

	  /**
	   * Callback fired when the value changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {T|T[]} value The new value of the component.
	   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
	   * @param {string} [details]
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * Callback fired when the highlight option changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {T} option The highlighted option.
	   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`.
	   */
	  onHighlightChange: propTypes.exports.func,

	  /**
	   * Callback fired when the input value changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {string} value The new value of the text input.
	   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
	   */
	  onInputChange: propTypes.exports.func,

	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   */
	  onOpen: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * If `true`, the popup will open on input focus.
	   * @default false
	   */
	  openOnFocus: propTypes.exports.bool,

	  /**
	   * Override the default text for the *open popup* icon button.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Open'
	   */
	  openText: propTypes.exports.string,

	  /**
	   * Array of options.
	   */
	  options: propTypes.exports.array.isRequired,

	  /**
	   * The component used to render the body of the popup.
	   * @default Paper
	   */
	  PaperComponent: propTypes.exports.elementType,

	  /**
	   * The component used to position the popup.
	   * @default Popper
	   */
	  PopperComponent: propTypes.exports.elementType,

	  /**
	   * The icon to display in place of the default popup icon.
	   * @default <ArrowDropDownIcon />
	   */
	  popupIcon: propTypes.exports.node,

	  /**
	   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
	   * @default false
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * Render the group.
	   *
	   * @param {AutocompleteRenderGroupParams} params The group to render.
	   * @returns {ReactNode}
	   */
	  renderGroup: propTypes.exports.func,

	  /**
	   * Render the input.
	   *
	   * @param {object} params
	   * @returns {ReactNode}
	   */
	  renderInput: propTypes.exports.func.isRequired,

	  /**
	   * Render the option, use `getOptionLabel` by default.
	   *
	   * @param {object} props The props to apply on the li element.
	   * @param {T} option The option to render.
	   * @param {object} state The state of the component.
	   * @returns {ReactNode}
	   */
	  renderOption: propTypes.exports.func,

	  /**
	   * Render the selected value.
	   *
	   * @param {T[]} value The `value` provided to the component.
	   * @param {function} getTagProps A tag props getter.
	   * @param {object} ownerState The state of the Autocomplete component.
	   * @returns {ReactNode}
	   */
	  renderTags: propTypes.exports.func,

	  /**
	   * If `true`, the input's text is selected on focus.
	   * It helps the user clear the selected value.
	   * @default !props.freeSolo
	   */
	  selectOnFocus: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the autocomplete.
	   *
	   * The value must have reference equality with the option in order to be selected.
	   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
	   */
	  value: chainPropTypes(propTypes.exports.any, props => {
	    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {
	      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\n'));
	    }

	    return null;
	  })
	} ;

	var Person = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
	}), 'Person');

	function getAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiAvatar', slot);
	}
	const avatarClasses = generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);

	const _excluded$1J = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];

	const useUtilityClasses$1t = ownerState => {
	  const {
	    classes,
	    variant,
	    colorDefault
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, colorDefault && 'colorDefault'],
	    img: ['img'],
	    fallback: ['fallback']
	  };
	  return composeClasses(slots, getAvatarUtilityClass, classes);
	};

	const AvatarRoot = styled('div', {
	  name: 'MuiAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  flexShrink: 0,
	  width: 40,
	  height: 40,
	  fontFamily: theme.typography.fontFamily,
	  fontSize: theme.typography.pxToRem(20),
	  lineHeight: 1,
	  borderRadius: '50%',
	  overflow: 'hidden',
	  userSelect: 'none'
	}, ownerState.variant === 'rounded' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}, ownerState.variant === 'square' && {
	  borderRadius: 0
	}, ownerState.colorDefault && _extends({
	  color: (theme.vars || theme).palette.background.default
	}, theme.vars ? {
	  backgroundColor: theme.vars.palette.Avatar.defaultBg
	} : {
	  backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
	})));
	const AvatarImg = styled('img', {
	  name: 'MuiAvatar',
	  slot: 'Img',
	  overridesResolver: (props, styles) => styles.img
	})({
	  width: '100%',
	  height: '100%',
	  textAlign: 'center',
	  // Handle non-square image. The property isn't supported by IE11.
	  objectFit: 'cover',
	  // Hide alt text.
	  color: 'transparent',
	  // Hide the image broken icon, only works on Chrome.
	  textIndent: 10000
	});
	const AvatarFallback = styled(Person, {
	  name: 'MuiAvatar',
	  slot: 'Fallback',
	  overridesResolver: (props, styles) => styles.fallback
	})({
	  width: '75%',
	  height: '75%'
	});

	function useLoaded({
	  crossOrigin,
	  referrerPolicy,
	  src,
	  srcSet
	}) {
	  const [loaded, setLoaded] = react.exports.useState(false);
	  react.exports.useEffect(() => {
	    if (!src && !srcSet) {
	      return undefined;
	    }

	    setLoaded(false);
	    let active = true;
	    const image = new Image();

	    image.onload = () => {
	      if (!active) {
	        return;
	      }

	      setLoaded('loaded');
	    };

	    image.onerror = () => {
	      if (!active) {
	        return;
	      }

	      setLoaded('error');
	    };

	    image.crossOrigin = crossOrigin;
	    image.referrerPolicy = referrerPolicy;
	    image.src = src;

	    if (srcSet) {
	      image.srcset = srcSet;
	    }

	    return () => {
	      active = false;
	    };
	  }, [crossOrigin, referrerPolicy, src, srcSet]);
	  return loaded;
	}

	const Avatar = /*#__PURE__*/react.exports.forwardRef(function Avatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAvatar'
	  });

	  const {
	    alt,
	    children: childrenProp,
	    className,
	    component = 'div',
	    imgProps,
	    sizes,
	    src,
	    srcSet,
	    variant = 'circular'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1J);

	  let children = null; // Use a hook instead of onError on the img element to support server-side rendering.

	  const loaded = useLoaded(_extends({}, imgProps, {
	    src,
	    srcSet
	  }));
	  const hasImg = src || srcSet;
	  const hasImgNotFailing = hasImg && loaded !== 'error';

	  const ownerState = _extends({}, props, {
	    colorDefault: !hasImgNotFailing,
	    component,
	    variant
	  });

	  const classes = useUtilityClasses$1t(ownerState);

	  if (hasImgNotFailing) {
	    children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarImg, _extends({
	      alt: alt,
	      src: src,
	      srcSet: srcSet,
	      sizes: sizes,
	      ownerState: ownerState,
	      className: classes.img
	    }, imgProps));
	  } else if (childrenProp != null) {
	    children = childrenProp;
	  } else if (hasImg && alt) {
	    children = alt[0];
	  } else {
	    children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarFallback, {
	      className: classes.fallback
	    });
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(AvatarRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children
	  }));
	});
	Avatar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Used in combination with `src` or `srcSet` to
	   * provide an alt attribute for the rendered `img` element.
	   */
	  alt: propTypes.exports.string,

	  /**
	   * Used to render icon or text elements inside the Avatar if `src` is not set.
	   * This can be an element, or just a string.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
	   * It can be used to listen for the loading error event.
	   */
	  imgProps: propTypes.exports.object,

	  /**
	   * The `sizes` attribute for the `img` element.
	   */
	  sizes: propTypes.exports.string,

	  /**
	   * The `src` attribute for the `img` element.
	   */
	  src: propTypes.exports.string,

	  /**
	   * The `srcSet` attribute for the `img` element.
	   * Use this attribute for responsive image display.
	   */
	  srcSet: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The shape of the avatar.
	   * @default 'circular'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['circular', 'rounded', 'square']), propTypes.exports.string])
	} ;

	function getAvatarGroupUtilityClass(slot) {
	  return generateUtilityClass('MuiAvatarGroup', slot);
	}
	const avatarGroupClasses = generateUtilityClasses('MuiAvatarGroup', ['root', 'avatar']);

	const _excluded$1I = ["children", "className", "componentsProps", "max", "spacing", "total", "variant"];
	const SPACINGS$2 = {
	  small: -16,
	  medium: null
	};

	const useUtilityClasses$1s = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    avatar: ['avatar']
	  };
	  return composeClasses(slots, getAvatarGroupUtilityClass, classes);
	};

	const AvatarGroupRoot = styled('div', {
	  name: 'MuiAvatarGroup',
	  slot: 'Root',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${avatarGroupClasses.avatar}`]: styles.avatar
	  }, styles.root)
	})(({
	  theme
	}) => ({
	  [`& .${avatarClasses.root}`]: {
	    border: `2px solid ${(theme.vars || theme).palette.background.default}`,
	    boxSizing: 'content-box',
	    marginLeft: -8,
	    '&:last-child': {
	      marginLeft: 0
	    }
	  },
	  display: 'flex',
	  flexDirection: 'row-reverse'
	}));
	const AvatarGroupAvatar = styled(Avatar, {
	  name: 'MuiAvatarGroup',
	  slot: 'Avatar',
	  overridesResolver: (props, styles) => styles.avatar
	})(({
	  theme
	}) => ({
	  border: `2px solid ${(theme.vars || theme).palette.background.default}`,
	  boxSizing: 'content-box',
	  marginLeft: -8,
	  '&:last-child': {
	    marginLeft: 0
	  }
	}));
	const AvatarGroup = /*#__PURE__*/react.exports.forwardRef(function AvatarGroup(inProps, ref) {
	  var _componentsProps$addi, _componentsProps$addi2;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAvatarGroup'
	  });

	  const {
	    children: childrenProp,
	    className,
	    componentsProps = {},
	    max = 5,
	    spacing = 'medium',
	    total,
	    variant = 'circular'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1I);

	  let clampedMax = max < 2 ? 2 : max;

	  const ownerState = _extends({}, props, {
	    max,
	    spacing,
	    variant
	  });

	  const classes = useUtilityClasses$1s(ownerState);
	  const children = react.exports.Children.toArray(childrenProp).filter(child => {
	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    return /*#__PURE__*/react.exports.isValidElement(child);
	  });
	  const totalAvatars = total || children.length;

	  if (totalAvatars === clampedMax) {
	    clampedMax += 1;
	  }

	  clampedMax = Math.min(totalAvatars + 1, clampedMax);
	  const maxAvatars = Math.min(children.length, clampedMax - 1);
	  const extraAvatars = Math.max(totalAvatars - clampedMax, totalAvatars - maxAvatars, 0);
	  const marginLeft = spacing && SPACINGS$2[spacing] !== undefined ? SPACINGS$2[spacing] : -spacing;
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(AvatarGroupRoot, _extends({
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [extraAvatars ? /*#__PURE__*/jsxRuntime.exports.jsxs(AvatarGroupAvatar, _extends({
	      ownerState: ownerState,
	      variant: variant
	    }, componentsProps.additionalAvatar, {
	      className: clsx(classes.avatar, (_componentsProps$addi = componentsProps.additionalAvatar) == null ? void 0 : _componentsProps$addi.className),
	      style: _extends({
	        marginLeft
	      }, (_componentsProps$addi2 = componentsProps.additionalAvatar) == null ? void 0 : _componentsProps$addi2.style),
	      children: ["+", extraAvatars]
	    })) : null, children.slice(0, maxAvatars).reverse().map((child, index) => {
	      return /*#__PURE__*/react.exports.cloneElement(child, {
	        className: clsx(child.props.className, classes.avatar),
	        style: _extends({
	          // Consistent with "&:last-child" styling for the default spacing,
	          // we do not apply custom marginLeft spacing on the last child
	          marginLeft: index === maxAvatars - 1 ? undefined : marginLeft
	        }, child.props.style),
	        variant: child.props.variant || variant
	      });
	    })]
	  }));
	});
	AvatarGroup.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The avatars to stack.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The props used for each slot inside the AvatarGroup.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    additionalAvatar: propTypes.exports.object
	  }),

	  /**
	   * Max avatars to show before +x.
	   * @default 5
	   */
	  max: chainPropTypes(propTypes.exports.number, props => {
	    if (props.max < 2) {
	      return new Error(['MUI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * Spacing between avatars.
	   * @default 'medium'
	   */
	  spacing: propTypes.exports.oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.number]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The total number of avatars. Used for calculating the number of extra avatars.
	   * @default children.length
	   */
	  total: propTypes.exports.number,

	  /**
	   * The variant to use.
	   * @default 'circular'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['circular', 'rounded', 'square']), propTypes.exports.string])
	} ;

	const _excluded$1H = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	const styles$3 = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};
	/**
	 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Fade = /*#__PURE__*/react.exports.forwardRef(function Fade(props, ref) {
	  const theme = useTheme();
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    addEndListener,
	    appear = true,
	    children,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = defaultTimeout,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Transition
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1H);
	  const nodeRef = react.exports.useRef(null);
	  const foreignRef = useForkRef(children.ref, ref);
	  const handleRef = useForkRef(nodeRef, foreignRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);

	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef ,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$3[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Fade.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: propTypes.exports.oneOfType([propTypes.exports.shape({
	    enter: propTypes.exports.string,
	    exit: propTypes.exports.string
	  }), propTypes.exports.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  timeout: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;

	function getBackdropUtilityClass(slot) {
	  return generateUtilityClass('MuiBackdrop', slot);
	}
	generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

	const _excluded$1G = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];

	const useUtilityClasses$1r = ownerState => {
	  const {
	    classes,
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBackdropUtilityClass, classes);
	};

	const BackdropRoot = styled('div', {
	  name: 'MuiBackdrop',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.invisible && styles.invisible];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0,
	  backgroundColor: 'rgba(0, 0, 0, 0.5)',
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.invisible && {
	  backgroundColor: 'transparent'
	}));
	const Backdrop = /*#__PURE__*/react.exports.forwardRef(function Backdrop(inProps, ref) {
	  var _components$Root, _componentsProps$root;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBackdrop'
	  });

	  const {
	    children,
	    component = 'div',
	    components = {},
	    componentsProps = {},
	    className,
	    invisible = false,
	    open,
	    transitionDuration,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Fade
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1G);

	  const ownerState = _extends({}, props, {
	    component,
	    invisible
	  });

	  const classes = useUtilityClasses$1r(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    in: open,
	    timeout: transitionDuration
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(BackdropRoot, {
	      "aria-hidden": true,
	      as: (_components$Root = components.Root) != null ? _components$Root : component,
	      className: clsx(classes.root, className),
	      ownerState: _extends({}, ownerState, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState),
	      classes: classes,
	      ref: ref,
	      children: children
	    })
	  }));
	});
	Backdrop.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Backdrop.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Backdrop.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.object
	  }),

	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   * @default false
	   */
	  invisible: propTypes.exports.bool,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;

	const shouldSpreadAdditionalProps = Slot => {
	  return !Slot || !isHostComponent(Slot);
	};

	function getBadgeUtilityClass(slot) {
	  return generateUtilityClass('MuiBadge', slot);
	}
	const badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft', 'invisible', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular', // TODO: v6 remove the overlap value from these class keys
	'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']);

	const _excluded$1F = ["anchorOrigin", "className", "component", "components", "componentsProps", "overlap", "color", "invisible", "max", "badgeContent", "showZero", "variant"];
	const RADIUS_STANDARD = 10;
	const RADIUS_DOT = 4;

	const useUtilityClasses$1q = ownerState => {
	  const {
	    color,
	    anchorOrigin,
	    invisible,
	    overlap,
	    variant,
	    classes = {}
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getBadgeUtilityClass, classes);
	};

	const BadgeRoot = styled('span', {
	  name: 'MuiBadge',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  position: 'relative',
	  display: 'inline-flex',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  flexShrink: 0
	});
	const BadgeBadge = styled('span', {
	  name: 'MuiBadge',
	  slot: 'Badge',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'row',
	  flexWrap: 'wrap',
	  justifyContent: 'center',
	  alignContent: 'center',
	  alignItems: 'center',
	  position: 'absolute',
	  boxSizing: 'border-box',
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(12),
	  minWidth: RADIUS_STANDARD * 2,
	  lineHeight: 1,
	  padding: '0 6px',
	  height: RADIUS_STANDARD * 2,
	  borderRadius: RADIUS_STANDARD,
	  zIndex: 1,
	  // Render the badge on top of potential ripples.
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.enteringScreen
	  })
	}, ownerState.color !== 'default' && {
	  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	  color: (theme.vars || theme).palette[ownerState.color].contrastText
	}, ownerState.variant === 'dot' && {
	  borderRadius: RADIUS_DOT,
	  height: RADIUS_DOT * 2,
	  minWidth: RADIUS_DOT * 2,
	  padding: 0
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.invisible && {
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.leavingScreen
	  })
	}));
	const Badge = /*#__PURE__*/react.exports.forwardRef(function Badge(inProps, ref) {
	  var _componentsProps$root, _componentsProps$root2, _componentsProps$badg, _componentsProps$badg2;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBadge'
	  });

	  const {
	    anchorOrigin: anchorOriginProp = {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    className,
	    component = 'span',
	    components = {},
	    componentsProps = {},
	    overlap: overlapProp = 'rectangular',
	    color: colorProp = 'default',
	    invisible: invisibleProp = false,
	    max,
	    badgeContent: badgeContentProp,
	    showZero = false,
	    variant: variantProp = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1F);

	  const prevProps = usePreviousProps({
	    anchorOrigin: anchorOriginProp,
	    color: colorProp,
	    overlap: overlapProp,
	    variant: variantProp
	  });
	  let invisible = invisibleProp;

	  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
	    invisible = true;
	  }

	  const {
	    color = colorProp,
	    overlap = overlapProp,
	    anchorOrigin = anchorOriginProp,
	    variant = variantProp
	  } = invisible ? prevProps : props;

	  const ownerState = _extends({}, props, {
	    anchorOrigin,
	    invisible,
	    color,
	    overlap,
	    variant
	  });

	  const classes = useUtilityClasses$1q(ownerState);
	  let displayValue;

	  if (variant !== 'dot') {
	    displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(BadgeUnstyled, _extends({
	    invisible: invisibleProp,
	    badgeContent: displayValue,
	    showZero: showZero,
	    max: max
	  }, other, {
	    components: _extends({
	      Root: BadgeRoot,
	      Badge: BadgeBadge
	    }, components),
	    className: clsx(className, classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className),
	    componentsProps: {
	      root: _extends({}, componentsProps.root, shouldSpreadAdditionalProps(components.Root) && {
	        as: component,
	        ownerState: _extends({}, (_componentsProps$root2 = componentsProps.root) == null ? void 0 : _componentsProps$root2.ownerState, {
	          anchorOrigin,
	          color,
	          overlap,
	          variant
	        })
	      }),
	      badge: _extends({}, componentsProps.badge, {
	        className: clsx(classes.badge, (_componentsProps$badg = componentsProps.badge) == null ? void 0 : _componentsProps$badg.className)
	      }, shouldSpreadAdditionalProps(components.Badge) && {
	        ownerState: _extends({}, (_componentsProps$badg2 = componentsProps.badge) == null ? void 0 : _componentsProps$badg2.ownerState, {
	          anchorOrigin,
	          color,
	          overlap,
	          variant
	        })
	      })
	    },
	    ref: ref
	  }));
	});
	Badge.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The anchor of the badge.
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'right',
	   * }
	   */
	  anchorOrigin: propTypes.exports.shape({
	    horizontal: propTypes.exports.oneOf(['left', 'right']).isRequired,
	    vertical: propTypes.exports.oneOf(['bottom', 'top']).isRequired
	  }),

	  /**
	   * The content rendered within the badge.
	   */
	  badgeContent: propTypes.exports.node,

	  /**
	   * The badge will be added relative to this node.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'default'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Badge.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Badge: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Badge.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    badge: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * If `true`, the badge is invisible.
	   * @default false
	   */
	  invisible: propTypes.exports.bool,

	  /**
	   * Max count to show.
	   * @default 99
	   */
	  max: propTypes.exports.number,

	  /**
	   * Wrapped shape the badge should overlap.
	   * @default 'rectangular'
	   */
	  overlap: propTypes.exports.oneOf(['circular', 'rectangular']),

	  /**
	   * Controls whether the badge is hidden when `badgeContent` is zero.
	   * @default false
	   */
	  showZero: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['dot', 'standard']), propTypes.exports.string])
	} ;

	function getBottomNavigationUtilityClass(slot) {
	  return generateUtilityClass('MuiBottomNavigation', slot);
	}
	generateUtilityClasses('MuiBottomNavigation', ['root']);

	const _excluded$1E = ["children", "className", "component", "onChange", "showLabels", "value"];

	const useUtilityClasses$1p = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getBottomNavigationUtilityClass, classes);
	};

	const BottomNavigationRoot = styled('div', {
	  name: 'MuiBottomNavigation',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  justifyContent: 'center',
	  height: 56,
	  backgroundColor: (theme.vars || theme).palette.background.paper
	}));
	const BottomNavigation = /*#__PURE__*/react.exports.forwardRef(function BottomNavigation(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBottomNavigation'
	  });

	  const {
	    children,
	    className,
	    component = 'div',
	    onChange,
	    showLabels = false,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1E);

	  const ownerState = _extends({}, props, {
	    component,
	    showLabels
	  });

	  const classes = useUtilityClasses$1p(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(BottomNavigationRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: react.exports.Children.map(children, (child, childIndex) => {
	      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	        return null;
	      }

	      {
	        if (reactIs.exports.isFragment(child)) {
	          console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	        }
	      }

	      const childValue = child.props.value === undefined ? childIndex : child.props.value;
	      return /*#__PURE__*/react.exports.cloneElement(child, {
	        selected: childValue === value,
	        showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
	        value: childValue,
	        onChange
	      });
	    })
	  }));
	});
	BottomNavigation.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Callback fired when the value changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {any} value We default to the index of the child.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, all `BottomNavigationAction`s will show their labels.
	   * By default, only the selected `BottomNavigationAction` will show its label.
	   * @default false
	   */
	  showLabels: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the currently selected `BottomNavigationAction`.
	   */
	  value: propTypes.exports.any
	} ;

	function getBottomNavigationActionUtilityClass(slot) {
	  return generateUtilityClass('MuiBottomNavigationAction', slot);
	}
	const bottomNavigationActionClasses = generateUtilityClasses('MuiBottomNavigationAction', ['root', 'iconOnly', 'selected', 'label']);

	const _excluded$1D = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];

	const useUtilityClasses$1o = ownerState => {
	  const {
	    classes,
	    showLabel,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', !showLabel && !selected && 'iconOnly', selected && 'selected'],
	    label: ['label', !showLabel && !selected && 'iconOnly', selected && 'selected']
	  };
	  return composeClasses(slots, getBottomNavigationActionUtilityClass, classes);
	};

	const BottomNavigationActionRoot = styled(ButtonBase, {
	  name: 'MuiBottomNavigationAction',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.showLabel && !ownerState.selected && styles.iconOnly];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  transition: theme.transitions.create(['color', 'padding-top'], {
	    duration: theme.transitions.duration.short
	  }),
	  padding: '0px 12px',
	  minWidth: 80,
	  maxWidth: 168,
	  color: (theme.vars || theme).palette.text.secondary,
	  flexDirection: 'column',
	  flex: '1'
	}, !ownerState.showLabel && !ownerState.selected && {
	  paddingTop: 14
	}, !ownerState.showLabel && !ownerState.selected && !ownerState.label && {
	  paddingTop: 0
	}, {
	  [`&.${bottomNavigationActionClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  }
	}));
	const BottomNavigationActionLabel = styled('span', {
	  name: 'MuiBottomNavigationAction',
	  slot: 'Label',
	  overridesResolver: (props, styles) => styles.label
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  fontFamily: theme.typography.fontFamily,
	  fontSize: theme.typography.pxToRem(12),
	  opacity: 1,
	  transition: 'font-size 0.2s, opacity 0.2s',
	  transitionDelay: '0.1s'
	}, !ownerState.showLabel && !ownerState.selected && {
	  opacity: 0,
	  transitionDelay: '0s'
	}, {
	  [`&.${bottomNavigationActionClasses.selected}`]: {
	    fontSize: theme.typography.pxToRem(14)
	  }
	}));
	const BottomNavigationAction = /*#__PURE__*/react.exports.forwardRef(function BottomNavigationAction(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBottomNavigationAction'
	  });

	  const {
	    className,
	    icon,
	    label,
	    onChange,
	    onClick,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1D);

	  const ownerState = props;
	  const classes = useUtilityClasses$1o(ownerState);

	  const handleChange = event => {
	    if (onChange) {
	      onChange(event, value);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(BottomNavigationActionRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    focusRipple: true,
	    onClick: handleChange,
	    ownerState: ownerState
	  }, other, {
	    children: [icon, /*#__PURE__*/jsxRuntime.exports.jsx(BottomNavigationActionLabel, {
	      className: classes.label,
	      ownerState: ownerState,
	      children: label
	    })]
	  }));
	});
	BottomNavigationAction.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop isn't supported.
	   * Use the `component` prop if you need to change the children structure.
	   */
	  children: unsupportedProp,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon to display.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The label element.
	   */
	  label: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * If `true`, the `BottomNavigationAction` will show its label.
	   * By default, only the selected `BottomNavigationAction`
	   * inside `BottomNavigation` will show its label.
	   *
	   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
	   */
	  showLabel: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * You can provide your own value. Otherwise, we fallback to the child position index.
	   */
	  value: propTypes.exports.any
	} ;

	var MoreHorizIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
	}), 'MoreHoriz');

	const BreadcrumbCollapsedButton = styled(ButtonBase)(({
	  theme
	}) => _extends({
	  display: 'flex',
	  marginLeft: `calc(${theme.spacing(1)} * 0.5)`,
	  marginRight: `calc(${theme.spacing(1)} * 0.5)`
	}, theme.palette.mode === 'light' ? {
	  backgroundColor: theme.palette.grey[100],
	  color: theme.palette.grey[700]
	} : {
	  backgroundColor: theme.palette.grey[700],
	  color: theme.palette.grey[100]
	}, {
	  borderRadius: 2,
	  '&:hover, &:focus': _extends({}, theme.palette.mode === 'light' ? {
	    backgroundColor: theme.palette.grey[200]
	  } : {
	    backgroundColor: theme.palette.grey[600]
	  }),
	  '&:active': _extends({
	    boxShadow: theme.shadows[0]
	  }, theme.palette.mode === 'light' ? {
	    backgroundColor: emphasize(theme.palette.grey[200], 0.12)
	  } : {
	    backgroundColor: emphasize(theme.palette.grey[600], 0.12)
	  })
	}));
	const BreadcrumbCollapsedIcon = styled(MoreHorizIcon)({
	  width: 24,
	  height: 16
	});
	/**
	 * @ignore - internal component.
	 */

	function BreadcrumbCollapsed(props) {
	  const ownerState = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsx("li", {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbCollapsedButton, _extends({
	      focusRipple: true
	    }, props, {
	      ownerState: ownerState,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbCollapsedIcon, {
	        ownerState: ownerState
	      })
	    }))
	  });
	}

	BreadcrumbCollapsed.propTypes = {
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.object
	} ;

	function getBreadcrumbsUtilityClass(slot) {
	  return generateUtilityClass('MuiBreadcrumbs', slot);
	}
	const breadcrumbsClasses = generateUtilityClasses('MuiBreadcrumbs', ['root', 'ol', 'li', 'separator']);

	const _excluded$1C = ["children", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"];

	const useUtilityClasses$1n = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    li: ['li'],
	    ol: ['ol'],
	    separator: ['separator']
	  };
	  return composeClasses(slots, getBreadcrumbsUtilityClass, classes);
	};

	const BreadcrumbsRoot = styled(Typography, {
	  name: 'MuiBreadcrumbs',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    return [{
	      [`& .${breadcrumbsClasses.li}`]: styles.li
	    }, styles.root];
	  }
	})({});
	const BreadcrumbsOl = styled('ol', {
	  name: 'MuiBreadcrumbs',
	  slot: 'Ol',
	  overridesResolver: (props, styles) => styles.ol
	})({
	  display: 'flex',
	  flexWrap: 'wrap',
	  alignItems: 'center',
	  padding: 0,
	  margin: 0,
	  listStyle: 'none'
	});
	const BreadcrumbsSeparator = styled('li', {
	  name: 'MuiBreadcrumbs',
	  slot: 'Separator',
	  overridesResolver: (props, styles) => styles.separator
	})({
	  display: 'flex',
	  userSelect: 'none',
	  marginLeft: 8,
	  marginRight: 8
	});

	function insertSeparators(items, className, separator, ownerState) {
	  return items.reduce((acc, current, index) => {
	    if (index < items.length - 1) {
	      acc = acc.concat(current, /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbsSeparator, {
	        "aria-hidden": true,
	        className: className,
	        ownerState: ownerState,
	        children: separator
	      }, `separator-${index}`));
	    } else {
	      acc.push(current);
	    }

	    return acc;
	  }, []);
	}

	const Breadcrumbs = /*#__PURE__*/react.exports.forwardRef(function Breadcrumbs(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBreadcrumbs'
	  });

	  const {
	    children,
	    className,
	    component = 'nav',
	    expandText = 'Show path',
	    itemsAfterCollapse = 1,
	    itemsBeforeCollapse = 1,
	    maxItems = 8,
	    separator = '/'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1C);

	  const [expanded, setExpanded] = react.exports.useState(false);

	  const ownerState = _extends({}, props, {
	    component,
	    expanded,
	    expandText,
	    itemsAfterCollapse,
	    itemsBeforeCollapse,
	    maxItems,
	    separator
	  });

	  const classes = useUtilityClasses$1n(ownerState);
	  const listRef = react.exports.useRef(null);

	  const renderItemsBeforeAndAfter = allItems => {
	    const handleClickExpand = () => {
	      setExpanded(true); // The clicked element received the focus but gets removed from the DOM.
	      // Let's keep the focus in the component after expanding.
	      // Moving it to the <ol> or <nav> does not cause any announcement in NVDA.
	      // By moving it to some link/button at least we have some announcement.

	      const focusable = listRef.current.querySelector('a[href],button,[tabindex]');

	      if (focusable) {
	        focusable.focus();
	      }
	    }; // This defends against someone passing weird input, to ensure that if all
	    // items would be shown anyway, we just show all items without the EllipsisItem


	    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
	      {
	        console.error(['MUI: You have provided an invalid combination of props to the Breadcrumbs.', `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join('\n'));
	      }

	      return allItems;
	    }

	    return [...allItems.slice(0, itemsBeforeCollapse), /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbCollapsed, {
	      "aria-label": expandText,
	      onClick: handleClickExpand
	    }, "ellipsis"), ...allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)];
	  };

	  const allItems = react.exports.Children.toArray(children).filter(child => {
	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    return /*#__PURE__*/react.exports.isValidElement(child);
	  }).map((child, index) => /*#__PURE__*/jsxRuntime.exports.jsx("li", {
	    className: classes.li,
	    children: child
	  }, `child-${index}`));
	  return /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbsRoot, _extends({
	    ref: ref,
	    component: component,
	    color: "text.secondary",
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(BreadcrumbsOl, {
	      className: classes.ol,
	      ref: listRef,
	      ownerState: ownerState,
	      children: insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator, ownerState)
	    })
	  }));
	});
	Breadcrumbs.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Override the default label for the expand button.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Show path'
	   */
	  expandText: propTypes.exports.string,

	  /**
	   * If max items is exceeded, the number of items to show after the ellipsis.
	   * @default 1
	   */
	  itemsAfterCollapse: integerPropType,

	  /**
	   * If max items is exceeded, the number of items to show before the ellipsis.
	   * @default 1
	   */
	  itemsBeforeCollapse: integerPropType,

	  /**
	   * Specifies the maximum number of breadcrumbs to display. When there are more
	   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
	   * will be shown, with an ellipsis in between.
	   * @default 8
	   */
	  maxItems: integerPropType,

	  /**
	   * Custom separator node.
	   * @default '/'
	   */
	  separator: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiButton', slot);
	}
	const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);

	/**
	 * @ignore - internal component.
	 */
	const ButtonGroupContext = /*#__PURE__*/react.exports.createContext({});

	{
	  ButtonGroupContext.displayName = 'ButtonGroupContext';
	}

	const _excluded$1B = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];

	const useUtilityClasses$1m = ownerState => {
	  const {
	    color,
	    disableElevation,
	    fullWidth,
	    size,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
	    label: ['label'],
	    startIcon: ['startIcon', `iconSize${capitalize(size)}`],
	    endIcon: ['endIcon', `iconSize${capitalize(size)}`]
	  };
	  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 18
	  }
	}, ownerState.size === 'medium' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 20
	  }
	}, ownerState.size === 'large' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 22
	  }
	});

	const ButtonRoot = styled(ButtonBase, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$getCon, _theme$palette;

	  return _extends({}, theme.typography.button, {
	    minWidth: 64,
	    padding: '6px 16px',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
	      duration: theme.transitions.duration.short
	    }),
	    '&:hover': _extends({
	      textDecoration: 'none',
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'contained' && {
	      backgroundColor: (theme.vars || theme).palette.grey.A100,
	      boxShadow: (theme.vars || theme).shadows[4],
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        boxShadow: (theme.vars || theme).shadows[2],
	        backgroundColor: (theme.vars || theme).palette.grey[300]
	      }
	    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	      }
	    }),
	    '&:active': _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[8]
	    }),
	    [`&.${buttonClasses.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[6]
	    }),
	    [`&.${buttonClasses.disabled}`]: _extends({
	      color: (theme.vars || theme).palette.action.disabled
	    }, ownerState.variant === 'outlined' && {
	      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
	    }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
	      border: `1px solid ${(theme.vars || theme).palette.action.disabled}`
	    }, ownerState.variant === 'contained' && {
	      color: (theme.vars || theme).palette.action.disabled,
	      boxShadow: (theme.vars || theme).shadows[0],
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    })
	  }, ownerState.variant === 'text' && {
	    padding: '6px 8px'
	  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.variant === 'outlined' && {
	    padding: '5px 15px',
	    border: '1px solid currentColor'
	  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
	  }, ownerState.variant === 'contained' && {
	    color: theme.vars ? // this is safe because grey does not change between default light/dark mode
	    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
	    backgroundColor: (theme.vars || theme).palette.grey[300],
	    boxShadow: (theme.vars || theme).shadows[2]
	  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].contrastText,
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit',
	    borderColor: 'currentColor'
	  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
	    padding: '4px 5px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
	    padding: '8px 11px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	    padding: '3px 9px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
	    padding: '7px 21px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
	    padding: '4px 10px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
	    padding: '8px 22px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.fullWidth && {
	    width: '100%'
	  });
	}, ({
	  ownerState
	}) => ownerState.disableElevation && {
	  boxShadow: 'none',
	  '&:hover': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses.focusVisible}`]: {
	    boxShadow: 'none'
	  },
	  '&:active': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses.disabled}`]: {
	    boxShadow: 'none'
	  }
	});
	const ButtonStartIcon = styled('span', {
	  name: 'MuiButton',
	  slot: 'StartIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: 8,
	  marginLeft: -4
	}, ownerState.size === 'small' && {
	  marginLeft: -2
	}, commonIconStyles(ownerState)));
	const ButtonEndIcon = styled('span', {
	  name: 'MuiButton',
	  slot: 'EndIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: -4,
	  marginLeft: 8
	}, ownerState.size === 'small' && {
	  marginRight: -2
	}, commonIconStyles(ownerState)));
	const Button = /*#__PURE__*/react.exports.forwardRef(function Button(inProps, ref) {
	  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
	  const contextProps = react.exports.useContext(ButtonGroupContext);
	  const resolvedProps = resolveProps(contextProps, inProps);
	  const props = useThemeProps({
	    props: resolvedProps,
	    name: 'MuiButton'
	  });

	  const {
	    children,
	    color = 'primary',
	    component = 'button',
	    className,
	    disabled = false,
	    disableElevation = false,
	    disableFocusRipple = false,
	    endIcon: endIconProp,
	    focusVisibleClassName,
	    fullWidth = false,
	    size = 'medium',
	    startIcon: startIconProp,
	    type,
	    variant = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1B);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    fullWidth,
	    size,
	    type,
	    variant
	  });

	  const classes = useUtilityClasses$1m(ownerState);

	  const startIcon = startIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonStartIcon, {
	    className: classes.startIcon,
	    ownerState: ownerState,
	    children: startIconProp
	  });

	  const endIcon = endIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonEndIcon, {
	    className: classes.endIcon,
	    ownerState: ownerState,
	    children: endIconProp
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonRoot, _extends({
	    ownerState: ownerState,
	    className: clsx(className, contextProps.className),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes,
	    children: [startIcon, children, endIcon]
	  }));
	});
	Button.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, no elevation is used.
	   * @default false
	   */
	  disableElevation: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * Element placed after the children.
	   */
	  endIcon: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * If `true`, the button will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: propTypes.exports.string,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * Element placed before the children.
	   */
	  startIcon: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * @ignore
	   */
	  type: propTypes.exports.oneOfType([propTypes.exports.oneOf(['button', 'reset', 'submit']), propTypes.exports.string]),

	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['contained', 'outlined', 'text']), propTypes.exports.string])
	} ;

	function getButtonGroupUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonGroup', slot);
	}
	const buttonGroupClasses = generateUtilityClasses('MuiButtonGroup', ['root', 'contained', 'outlined', 'text', 'disableElevation', 'disabled', 'fullWidth', 'vertical', 'grouped', 'groupedHorizontal', 'groupedVertical', 'groupedText', 'groupedTextHorizontal', 'groupedTextVertical', 'groupedTextPrimary', 'groupedTextSecondary', 'groupedOutlined', 'groupedOutlinedHorizontal', 'groupedOutlinedVertical', 'groupedOutlinedPrimary', 'groupedOutlinedSecondary', 'groupedContained', 'groupedContainedHorizontal', 'groupedContainedVertical', 'groupedContainedPrimary', 'groupedContainedSecondary']);

	const _excluded$1A = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];

	const overridesResolver$6 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [{
	    [`& .${buttonGroupClasses.grouped}`]: styles.grouped
	  }, {
	    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]
	  }, {
	    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}`]
	  }, {
	    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]
	  }, {
	    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]
	  }, styles.root, styles[ownerState.variant], ownerState.disableElevation === true && styles.disableElevation, ownerState.fullWidth && styles.fullWidth, ownerState.orientation === 'vertical' && styles.vertical];
	};

	const useUtilityClasses$1l = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    disableElevation,
	    fullWidth,
	    orientation,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth', disableElevation && 'disableElevation'],
	    grouped: ['grouped', `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color)}`, disabled && 'disabled']
	  };
	  return composeClasses(slots, getButtonGroupUtilityClass, classes);
	};

	const ButtonGroupRoot = styled('div', {
	  name: 'MuiButtonGroup',
	  slot: 'Root',
	  overridesResolver: overridesResolver$6
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}, ownerState.variant === 'contained' && {
	  boxShadow: (theme.vars || theme).shadows[2]
	}, ownerState.disableElevation && {
	  boxShadow: 'none'
	}, ownerState.fullWidth && {
	  width: '100%'
	}, ownerState.orientation === 'vertical' && {
	  flexDirection: 'column'
	}, {
	  [`& .${buttonGroupClasses.grouped}`]: _extends({
	    minWidth: 40,
	    '&:not(:first-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {
	      borderTopLeftRadius: 0,
	      borderBottomLeftRadius: 0
	    }, ownerState.orientation === 'vertical' && {
	      borderTopRightRadius: 0,
	      borderTopLeftRadius: 0
	    }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
	      marginLeft: -1
	    }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
	      marginTop: -1
	    }),
	    '&:not(:last-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {
	      borderTopRightRadius: 0,
	      borderBottomRightRadius: 0
	    }, ownerState.orientation === 'vertical' && {
	      borderBottomRightRadius: 0,
	      borderBottomLeftRadius: 0
	    }, ownerState.variant === 'text' && ownerState.orientation === 'horizontal' && {
	      borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
	    }, ownerState.variant === 'text' && ownerState.orientation === 'vertical' && {
	      borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
	    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	      borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)
	    }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
	      borderRightColor: 'transparent'
	    }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
	      borderBottomColor: 'transparent'
	    }, ownerState.variant === 'contained' && ownerState.orientation === 'horizontal' && {
	      borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
	      [`&.${buttonGroupClasses.disabled}`]: {
	        borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
	      }
	    }, ownerState.variant === 'contained' && ownerState.orientation === 'vertical' && {
	      borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
	      [`&.${buttonGroupClasses.disabled}`]: {
	        borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
	      }
	    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	      borderColor: (theme.vars || theme).palette[ownerState.color].dark
	    }, {
	      '&:hover': _extends({}, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
	        borderRightColor: 'currentColor'
	      }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
	        borderBottomColor: 'currentColor'
	      })
	    }),
	    '&:hover': _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: 'none'
	    })
	  }, ownerState.variant === 'contained' && {
	    boxShadow: 'none'
	  })
	}));
	const ButtonGroup = /*#__PURE__*/react.exports.forwardRef(function ButtonGroup(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonGroup'
	  });

	  const {
	    children,
	    className,
	    color = 'primary',
	    component = 'div',
	    disabled = false,
	    disableElevation = false,
	    disableFocusRipple = false,
	    disableRipple = false,
	    fullWidth = false,
	    orientation = 'horizontal',
	    size = 'medium',
	    variant = 'outlined'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1A);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    disableRipple,
	    fullWidth,
	    orientation,
	    size,
	    variant
	  });

	  const classes = useUtilityClasses$1l(ownerState);
	  const context = react.exports.useMemo(() => ({
	    className: classes.grouped,
	    color,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    disableRipple,
	    fullWidth,
	    size,
	    variant
	  }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ButtonGroupRoot, _extends({
	    as: component,
	    role: "group",
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ButtonGroupContext.Provider, {
	      value: context,
	      children: children
	    })
	  }));
	});
	ButtonGroup.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, no elevation is used.
	   * @default false
	   */
	  disableElevation: propTypes.exports.bool,

	  /**
	   * If `true`, the button keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the button ripple effect is disabled.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the buttons will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['contained', 'outlined', 'text']), propTypes.exports.string])
	} ;

	function getCardUtilityClass(slot) {
	  return generateUtilityClass('MuiCard', slot);
	}
	generateUtilityClasses('MuiCard', ['root']);

	const _excluded$1z = ["className", "raised"];

	const useUtilityClasses$1k = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getCardUtilityClass, classes);
	};

	const CardRoot = styled(Paper, {
	  name: 'MuiCard',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    overflow: 'hidden'
	  };
	});
	const Card = /*#__PURE__*/react.exports.forwardRef(function Card(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCard'
	  });

	  const {
	    className,
	    raised = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1z);

	  const ownerState = _extends({}, props, {
	    raised
	  });

	  const classes = useUtilityClasses$1k(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CardRoot, _extends({
	    className: clsx(classes.root, className),
	    elevation: raised ? 8 : undefined,
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	Card.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the card will use raised styling.
	   * @default false
	   */
	  raised: chainPropTypes(propTypes.exports.bool, props => {
	    if (props.raised && props.variant === 'outlined') {
	      return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
	    }

	    return null;
	  }),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getCardActionAreaUtilityClass(slot) {
	  return generateUtilityClass('MuiCardActionArea', slot);
	}
	const cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);

	const _excluded$1y = ["children", "className", "focusVisibleClassName"];

	const useUtilityClasses$1j = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    focusHighlight: ['focusHighlight']
	  };
	  return composeClasses(slots, getCardActionAreaUtilityClass, classes);
	};

	const CardActionAreaRoot = styled(ButtonBase, {
	  name: 'MuiCardActionArea',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'block',
	  textAlign: 'inherit',
	  width: '100%',
	  [`&:hover .${cardActionAreaClasses.focusHighlight}`]: {
	    opacity: (theme.vars || theme).palette.action.hoverOpacity,
	    '@media (hover: none)': {
	      opacity: 0
	    }
	  },
	  [`&.${cardActionAreaClasses.focusVisible} .${cardActionAreaClasses.focusHighlight}`]: {
	    opacity: (theme.vars || theme).palette.action.focusOpacity
	  }
	}));
	const CardActionAreaFocusHighlight = styled('span', {
	  name: 'MuiCardActionArea',
	  slot: 'FocusHighlight',
	  overridesResolver: (props, styles) => styles.focusHighlight
	})(({
	  theme
	}) => ({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit',
	  opacity: 0,
	  backgroundColor: 'currentcolor',
	  transition: theme.transitions.create('opacity', {
	    duration: theme.transitions.duration.short
	  })
	}));
	const CardActionArea = /*#__PURE__*/react.exports.forwardRef(function CardActionArea(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardActionArea'
	  });

	  const {
	    children,
	    className,
	    focusVisibleClassName
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1y);

	  const ownerState = props;
	  const classes = useUtilityClasses$1j(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(CardActionAreaRoot, _extends({
	    className: clsx(classes.root, className),
	    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(CardActionAreaFocusHighlight, {
	      className: classes.focusHighlight,
	      ownerState: ownerState
	    })]
	  }));
	});
	CardActionArea.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getCardActionsUtilityClass(slot) {
	  return generateUtilityClass('MuiCardActions', slot);
	}
	generateUtilityClasses('MuiCardActions', ['root', 'spacing']);

	const _excluded$1x = ["disableSpacing", "className"];

	const useUtilityClasses$1i = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return composeClasses(slots, getCardActionsUtilityClass, classes);
	};

	const CardActionsRoot = styled('div', {
	  name: 'MuiCardActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8
	}, !ownerState.disableSpacing && {
	  '& > :not(:first-of-type)': {
	    marginLeft: 8
	  }
	}));
	const CardActions = /*#__PURE__*/react.exports.forwardRef(function CardActions(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardActions'
	  });

	  const {
	    disableSpacing = false,
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1x);

	  const ownerState = _extends({}, props, {
	    disableSpacing
	  });

	  const classes = useUtilityClasses$1i(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CardActionsRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	CardActions.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   * @default false
	   */
	  disableSpacing: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getCardContentUtilityClass(slot) {
	  return generateUtilityClass('MuiCardContent', slot);
	}
	generateUtilityClasses('MuiCardContent', ['root']);

	const _excluded$1w = ["className", "component"];

	const useUtilityClasses$1h = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getCardContentUtilityClass, classes);
	};

	const CardContentRoot = styled('div', {
	  name: 'MuiCardContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    padding: 16,
	    '&:last-child': {
	      paddingBottom: 24
	    }
	  };
	});
	const CardContent = /*#__PURE__*/react.exports.forwardRef(function CardContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardContent'
	  });

	  const {
	    className,
	    component = 'div'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1w);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$1h(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CardContentRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	CardContent.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getCardHeaderUtilityClass(slot) {
	  return generateUtilityClass('MuiCardHeader', slot);
	}
	const cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);

	const _excluded$1v = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];

	const useUtilityClasses$1g = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    avatar: ['avatar'],
	    action: ['action'],
	    content: ['content'],
	    title: ['title'],
	    subheader: ['subheader']
	  };
	  return composeClasses(slots, getCardHeaderUtilityClass, classes);
	};

	const CardHeaderRoot = styled('div', {
	  name: 'MuiCardHeader',
	  slot: 'Root',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${cardHeaderClasses.title}`]: styles.title,
	    [`& .${cardHeaderClasses.subheader}`]: styles.subheader
	  }, styles.root)
	})({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 16
	});
	const CardHeaderAvatar = styled('div', {
	  name: 'MuiCardHeader',
	  slot: 'Avatar',
	  overridesResolver: (props, styles) => styles.avatar
	})({
	  display: 'flex',
	  flex: '0 0 auto',
	  marginRight: 16
	});
	const CardHeaderAction = styled('div', {
	  name: 'MuiCardHeader',
	  slot: 'Action',
	  overridesResolver: (props, styles) => styles.action
	})({
	  flex: '0 0 auto',
	  alignSelf: 'flex-start',
	  marginTop: -4,
	  marginRight: -8,
	  marginBottom: -4
	});
	const CardHeaderContent = styled('div', {
	  name: 'MuiCardHeader',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})({
	  flex: '1 1 auto'
	});
	const CardHeader = /*#__PURE__*/react.exports.forwardRef(function CardHeader(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardHeader'
	  });

	  const {
	    action,
	    avatar,
	    className,
	    component = 'div',
	    disableTypography = false,
	    subheader: subheaderProp,
	    subheaderTypographyProps,
	    title: titleProp,
	    titleTypographyProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1v);

	  const ownerState = _extends({}, props, {
	    component,
	    disableTypography
	  });

	  const classes = useUtilityClasses$1g(ownerState);
	  let title = titleProp;

	  if (title != null && title.type !== Typography && !disableTypography) {
	    title = /*#__PURE__*/jsxRuntime.exports.jsx(Typography, _extends({
	      variant: avatar ? 'body2' : 'h5',
	      className: classes.title,
	      component: "span",
	      display: "block"
	    }, titleTypographyProps, {
	      children: title
	    }));
	  }

	  let subheader = subheaderProp;

	  if (subheader != null && subheader.type !== Typography && !disableTypography) {
	    subheader = /*#__PURE__*/jsxRuntime.exports.jsx(Typography, _extends({
	      variant: avatar ? 'body2' : 'body1',
	      className: classes.subheader,
	      color: "text.secondary",
	      component: "span",
	      display: "block"
	    }, subheaderTypographyProps, {
	      children: subheader
	    }));
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(CardHeaderRoot, _extends({
	    className: clsx(classes.root, className),
	    as: component,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [avatar && /*#__PURE__*/jsxRuntime.exports.jsx(CardHeaderAvatar, {
	      className: classes.avatar,
	      ownerState: ownerState,
	      children: avatar
	    }), /*#__PURE__*/jsxRuntime.exports.jsxs(CardHeaderContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: [title, subheader]
	    }), action && /*#__PURE__*/jsxRuntime.exports.jsx(CardHeaderAction, {
	      className: classes.action,
	      ownerState: ownerState,
	      children: action
	    })]
	  }));
	});
	CardHeader.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The action to display in the card header.
	   */
	  action: propTypes.exports.node,

	  /**
	   * The Avatar element to display.
	   */
	  avatar: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
	   * This can be useful to render an alternative Typography variant by wrapping
	   * the `title` text, and optional `subheader` text
	   * with the Typography component.
	   * @default false
	   */
	  disableTypography: propTypes.exports.bool,

	  /**
	   * The content of the component.
	   */
	  subheader: propTypes.exports.node,

	  /**
	   * These props will be forwarded to the subheader
	   * (as long as disableTypography is not `true`).
	   */
	  subheaderTypographyProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The content of the component.
	   */
	  title: propTypes.exports.node,

	  /**
	   * These props will be forwarded to the title
	   * (as long as disableTypography is not `true`).
	   */
	  titleTypographyProps: propTypes.exports.object
	} ;

	function getCardMediaUtilityClass(slot) {
	  return generateUtilityClass('MuiCardMedia', slot);
	}
	generateUtilityClasses('MuiCardMedia', ['root', 'media', 'img']);

	const _excluded$1u = ["children", "className", "component", "image", "src", "style"];

	const useUtilityClasses$1f = ownerState => {
	  const {
	    classes,
	    isMediaComponent,
	    isImageComponent
	  } = ownerState;
	  const slots = {
	    root: ['root', isMediaComponent && 'media', isImageComponent && 'img']
	  };
	  return composeClasses(slots, getCardMediaUtilityClass, classes);
	};

	const CardMediaRoot = styled('div', {
	  name: 'MuiCardMedia',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      isMediaComponent,
	      isImageComponent
	    } = ownerState;
	    return [styles.root, isMediaComponent && styles.media, isImageComponent && styles.img];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'block',
	  backgroundSize: 'cover',
	  backgroundRepeat: 'no-repeat',
	  backgroundPosition: 'center'
	}, ownerState.isMediaComponent && {
	  width: '100%'
	}, ownerState.isImageComponent && {
	  // ⚠️ object-fit is not supported by IE11.
	  objectFit: 'cover'
	}));
	const MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];
	const IMAGE_COMPONENTS = ['picture', 'img'];
	const CardMedia = /*#__PURE__*/react.exports.forwardRef(function CardMedia(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardMedia'
	  });

	  const {
	    children,
	    className,
	    component = 'div',
	    image,
	    src,
	    style
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1u);

	  const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
	  const composedStyle = !isMediaComponent && image ? _extends({
	    backgroundImage: `url("${image}")`
	  }, style) : style;

	  const ownerState = _extends({}, props, {
	    component,
	    isMediaComponent,
	    isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
	  });

	  const classes = useUtilityClasses$1f(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CardMediaRoot, _extends({
	    className: clsx(classes.root, className),
	    as: component,
	    role: !isMediaComponent && image ? 'img' : undefined,
	    ref: ref,
	    style: composedStyle,
	    ownerState: ownerState,
	    src: isMediaComponent ? image || src : undefined
	  }, other, {
	    children: children
	  }));
	});
	CardMedia.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: chainPropTypes(propTypes.exports.node, props => {
	    if (!props.children && !props.image && !props.src && !props.component) {
	      return new Error('MUI: Either `children`, `image`, `src` or `component` prop must be specified.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Image to be displayed as a background image.
	   * Either `image` or `src` prop must be specified.
	   * Note that caller must specify height otherwise the image will not be visible.
	   */
	  image: propTypes.exports.string,

	  /**
	   * An alias for `image` property.
	   * Available only with media components.
	   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
	   */
	  src: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getSwitchBaseUtilityClass(slot) {
	  return generateUtilityClass('PrivateSwitchBase', slot);
	}
	generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

	const _excluded$1t = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];

	const useUtilityClasses$1e = ownerState => {
	  const {
	    classes,
	    checked,
	    disabled,
	    edge
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
	    input: ['input']
	  };
	  return composeClasses(slots, getSwitchBaseUtilityClass, classes);
	};

	const SwitchBaseRoot = styled(ButtonBase)(({
	  ownerState
	}) => _extends({
	  padding: 9,
	  borderRadius: '50%'
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}));
	const SwitchBaseInput = styled('input')({
	  cursor: 'inherit',
	  position: 'absolute',
	  opacity: 0,
	  width: '100%',
	  height: '100%',
	  top: 0,
	  left: 0,
	  margin: 0,
	  padding: 0,
	  zIndex: 1
	});
	/**
	 * @ignore - internal component.
	 */

	const SwitchBase = /*#__PURE__*/react.exports.forwardRef(function SwitchBase(props, ref) {
	  const {
	    autoFocus,
	    checked: checkedProp,
	    checkedIcon,
	    className,
	    defaultChecked,
	    disabled: disabledProp,
	    disableFocusRipple = false,
	    edge = false,
	    icon,
	    id,
	    inputProps,
	    inputRef,
	    name,
	    onBlur,
	    onChange,
	    onFocus,
	    readOnly,
	    required,
	    tabIndex,
	    type,
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1t);

	  const [checked, setCheckedState] = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  });
	  const muiFormControl = useFormControl();

	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };

	  const handleInputChange = event => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }

	    const newChecked = event.target.checked;
	    setCheckedState(newChecked);

	    if (onChange) {
	      // TODO v6: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };

	  let disabled = disabledProp;

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }

	  const hasLabelFor = type === 'checkbox' || type === 'radio';

	  const ownerState = _extends({}, props, {
	    checked,
	    disabled,
	    disableFocusRipple,
	    edge
	  });

	  const classes = useUtilityClasses$1e(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchBaseRoot, _extends({
	    component: "span",
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchBaseInput, _extends({
	      autoFocus: autoFocus,
	      checked: checkedProp,
	      defaultChecked: defaultChecked,
	      className: classes.input,
	      disabled: disabled,
	      id: hasLabelFor && id,
	      name: name,
	      onChange: handleInputChange,
	      readOnly: readOnly,
	      ref: inputRef,
	      required: required,
	      ownerState: ownerState,
	      tabIndex: tabIndex,
	      type: type
	    }, type === 'checkbox' && value === undefined ? {} : {
	      value
	    }, inputProps)), checked ? checkedIcon : icon]
	  }));
	}); // NB: If changed, please update Checkbox, Switch and Radio
	// so that the API documentation is updated.

	SwitchBase.propTypes = {
	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: propTypes.exports.node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  defaultChecked: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: propTypes.exports.oneOf(['end', 'start', false]),

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: propTypes.exports.node.isRequired,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /*
	   * @ignore
	   */
	  name: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * The input component prop `type`.
	   */
	  type: propTypes.exports.string.isRequired,

	  /**
	   * The value of the component.
	   */
	  value: propTypes.exports.any
	} ;

	var CheckBoxOutlineBlankIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
	}), 'CheckBoxOutlineBlank');

	var CheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckBox');

	var IndeterminateCheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
	}), 'IndeterminateCheckBox');

	function getCheckboxUtilityClass(slot) {
	  return generateUtilityClass('MuiCheckbox', slot);
	}
	const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);

	const _excluded$1s = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];

	const useUtilityClasses$1d = ownerState => {
	  const {
	    classes,
	    indeterminate,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
	  };
	  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const CheckboxRoot = styled(SwitchBase, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiCheckbox',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${checkboxClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));

	const defaultCheckedIcon$1 = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxIcon, {});

	const defaultIcon$2 = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxOutlineBlankIcon, {});

	const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntime.exports.jsx(IndeterminateCheckBoxIcon, {});

	const Checkbox = /*#__PURE__*/react.exports.forwardRef(function Checkbox(inProps, ref) {
	  var _icon$props$fontSize, _indeterminateIcon$pr;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCheckbox'
	  });

	  const {
	    checkedIcon = defaultCheckedIcon$1,
	    color = 'primary',
	    icon: iconProp = defaultIcon$2,
	    indeterminate = false,
	    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
	    inputProps,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1s);

	  const icon = indeterminate ? indeterminateIconProp : iconProp;
	  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;

	  const ownerState = _extends({}, props, {
	    color,
	    indeterminate,
	    size
	  });

	  const classes = useUtilityClasses$1d(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CheckboxRoot, _extends({
	    type: "checkbox",
	    inputProps: _extends({
	      'data-indeterminate': indeterminate
	    }, inputProps),
	    icon: /*#__PURE__*/react.exports.cloneElement(icon, {
	      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
	    }),
	    checkedIcon: /*#__PURE__*/react.exports.cloneElement(indeterminateIcon, {
	      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
	    }),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    classes: classes
	  }));
	});
	Checkbox.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is checked.
	   * @default <CheckBoxIcon />
	   */
	  checkedIcon: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The default checked state. Use when the component is not controlled.
	   */
	  defaultChecked: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is unchecked.
	   * @default <CheckBoxOutlineBlankIcon />
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * If `true`, the component appears indeterminate.
	   * This does not set the native input element to indeterminate due
	   * to inconsistent behavior across browsers.
	   * However, we set a `data-indeterminate` attribute on the `input`.
	   * @default false
	   */
	  indeterminate: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is indeterminate.
	   * @default <IndeterminateCheckBoxIcon />
	   */
	  indeterminateIcon: propTypes.exports.node,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense checkbox styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   * The browser uses "on" as the default value.
	   */
	  value: propTypes.exports.any
	} ;

	function getCircularProgressUtilityClass(slot) {
	  return generateUtilityClass('MuiCircularProgress', slot);
	}
	generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);

	const _excluded$1r = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];

	let _$2 = t => t,
	    _t$2,
	    _t2$2,
	    _t3$2,
	    _t4$2;
	const SIZE = 44;
	const circularRotateKeyframe = keyframes(_t$2 || (_t$2 = _$2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
	const circularDashKeyframe = keyframes(_t2$2 || (_t2$2 = _$2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));

	const useUtilityClasses$1c = ownerState => {
	  const {
	    classes,
	    variant,
	    color,
	    disableShrink
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `color${capitalize(color)}`],
	    svg: ['svg'],
	    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']
	  };
	  return composeClasses(slots, getCircularProgressUtilityClass, classes);
	};

	const CircularProgressRoot = styled('span', {
	  name: 'MuiCircularProgress',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  display: 'inline-block'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('transform')
	}, ownerState.color !== 'inherit' && {
	  color: (theme.vars || theme).palette[ownerState.color].main
	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && css(_t3$2 || (_t3$2 = _$2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
	const CircularProgressSVG = styled('svg', {
	  name: 'MuiCircularProgress',
	  slot: 'Svg',
	  overridesResolver: (props, styles) => styles.svg
	})({
	  display: 'block' // Keeps the progress centered

	});
	const CircularProgressCircle = styled('circle', {
	  name: 'MuiCircularProgress',
	  slot: 'Circle',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  stroke: 'currentColor'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('stroke-dashoffset')
	}, ownerState.variant === 'indeterminate' && {
	  // Some default value that looks fine waiting for the animation to kicks in.
	  strokeDasharray: '80px, 200px',
	  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.

	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4$2 || (_t4$2 = _$2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
	/**
	 * ## ARIA
	 *
	 * If the progress bar is describing the loading progress of a particular region of a page,
	 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
	 * attribute to `true` on that region until it has finished loading.
	 */

	const CircularProgress = /*#__PURE__*/react.exports.forwardRef(function CircularProgress(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCircularProgress'
	  });

	  const {
	    className,
	    color = 'primary',
	    disableShrink = false,
	    size = 40,
	    style,
	    thickness = 3.6,
	    value = 0,
	    variant = 'indeterminate'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1r);

	  const ownerState = _extends({}, props, {
	    color,
	    disableShrink,
	    size,
	    thickness,
	    value,
	    variant
	  });

	  const classes = useUtilityClasses$1c(ownerState);
	  const circleStyle = {};
	  const rootStyle = {};
	  const rootProps = {};

	  if (variant === 'determinate') {
	    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
	    circleStyle.strokeDasharray = circumference.toFixed(3);
	    rootProps['aria-valuenow'] = Math.round(value);
	    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
	    rootStyle.transform = 'rotate(-90deg)';
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressRoot, _extends({
	    className: clsx(classes.root, className),
	    style: _extends({
	      width: size,
	      height: size
	    }, rootStyle, style),
	    ownerState: ownerState,
	    ref: ref,
	    role: "progressbar"
	  }, rootProps, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressSVG, {
	      className: classes.svg,
	      ownerState: ownerState,
	      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressCircle, {
	        className: classes.circle,
	        style: circleStyle,
	        ownerState: ownerState,
	        cx: SIZE,
	        cy: SIZE,
	        r: (SIZE - thickness) / 2,
	        fill: "none",
	        strokeWidth: thickness
	      })
	    })
	  }));
	});
	CircularProgress.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the shrink animation is disabled.
	   * This only works if variant is `indeterminate`.
	   * @default false
	   */
	  disableShrink: chainPropTypes(propTypes.exports.bool, props => {
	    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
	      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
	    }

	    return null;
	  }),

	  /**
	   * The size of the component.
	   * If using a number, the pixel unit is assumed.
	   * If using a string, you need to provide the CSS unit, e.g '3rem'.
	   * @default 40
	   */
	  size: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The thickness of the circle.
	   * @default 3.6
	   */
	  thickness: propTypes.exports.number,

	  /**
	   * The value of the progress indicator for the determinate variant.
	   * Value between 0 and 100.
	   * @default 0
	   */
	  value: propTypes.exports.number,

	  /**
	   * The variant to use.
	   * Use indeterminate when there is no progress value.
	   * @default 'indeterminate'
	   */
	  variant: propTypes.exports.oneOf(['determinate', 'indeterminate'])
	} ;

	const _excluded$1q = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "theme"];

	const extendUtilityClasses$1 = ownerState => {
	  return ownerState.classes;
	};

	const ModalRoot = styled('div', {
	  name: 'MuiModal',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  zIndex: (theme.vars || theme).zIndex.modal,
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0
	}, !ownerState.open && ownerState.exited && {
	  visibility: 'hidden'
	}));
	const ModalBackdrop = styled(Backdrop, {
	  name: 'MuiModal',
	  slot: 'Backdrop',
	  overridesResolver: (props, styles) => {
	    return styles.backdrop;
	  }
	})({
	  zIndex: -1
	});
	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */

	const Modal = /*#__PURE__*/react.exports.forwardRef(function Modal(inProps, ref) {
	  var _ref, _components$Root;

	  const props = useThemeProps({
	    name: 'MuiModal',
	    props: inProps
	  });

	  const {
	    BackdropComponent = ModalBackdrop,
	    BackdropProps,
	    closeAfterTransition = false,
	    children,
	    component,
	    components = {},
	    componentsProps = {},
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableEscapeKeyDown = false,
	    disablePortal = false,
	    disableRestoreFocus = false,
	    disableScrollLock = false,
	    hideBackdrop = false,
	    keepMounted = false,
	    // eslint-disable-next-line react/prop-types
	    theme
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1q);

	  const [exited, setExited] = react.exports.useState(true);
	  const commonProps = {
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    hideBackdrop,
	    keepMounted
	  };

	  const ownerState = _extends({}, props, commonProps, {
	    exited
	  });

	  const classes = extendUtilityClasses$1(ownerState);
	  const Root = (_ref = (_components$Root = components.Root) != null ? _components$Root : component) != null ? _ref : ModalRoot;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ModalUnstyled, _extends({
	    components: _extends({
	      Root,
	      Backdrop: BackdropComponent
	    }, components),
	    componentsProps: {
	      root: () => _extends({}, resolveComponentProps(componentsProps.root, ownerState), !isHostComponent(Root) && {
	        as: component,
	        theme
	      }),
	      backdrop: () => _extends({}, BackdropProps, resolveComponentProps(componentsProps.backdrop, ownerState))
	    },
	    onTransitionEnter: () => setExited(false),
	    onTransitionExited: () => setExited(true),
	    ref: ref
	  }, other, {
	    classes: classes
	  }, commonProps, {
	    children: children
	  }));
	});
	Modal.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   * @deprecated Use `components.Backdrop` instead.
	   * @default styled(Backdrop, {
	   *   name: 'MuiModal',
	   *   slot: 'Backdrop',
	   *   overridesResolver: (props, styles) => {
	   *     return styles.backdrop;
	   *   },
	   * })({
	   *   zIndex: -1,
	   * })
	   */
	  BackdropComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
	   * @deprecated Use `componentsProps.backdrop` instead.
	   */
	  BackdropProps: propTypes.exports.object,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   * @default false
	   */
	  closeAfterTransition: propTypes.exports.bool,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the Modal.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Backdrop: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Modal.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    backdrop: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
	  }),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: propTypes.exports.bool,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: propTypes.exports.bool,

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: propTypes.exports.bool,

	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden or unmounted.
	   * @default false
	   */
	  disableRestoreFocus: propTypes.exports.bool,

	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: propTypes.exports.bool,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: propTypes.exports.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   * @default false
	   */
	  keepMounted: propTypes.exports.bool,

	  /**
	   * Callback fired when the backdrop is clicked.
	   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
	   */
	  onBackdropClick: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getDialogUtilityClass(slot) {
	  return generateUtilityClass('MuiDialog', slot);
	}
	const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);

	const DialogContext = /*#__PURE__*/react.exports.createContext({});

	{
	  DialogContext.displayName = 'DialogContext';
	}

	const _excluded$1p = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
	const DialogBackdrop = styled(Backdrop, {
	  name: 'MuiDialog',
	  slot: 'Backdrop',
	  overrides: (props, styles) => styles.backdrop
	})({
	  // Improve scrollable dialog support.
	  zIndex: -1
	});

	const useUtilityClasses$1b = ownerState => {
	  const {
	    classes,
	    scroll,
	    maxWidth,
	    fullWidth,
	    fullScreen
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    container: ['container', `scroll${capitalize(scroll)}`],
	    paper: ['paper', `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
	  };
	  return composeClasses(slots, getDialogUtilityClass, classes);
	};

	const DialogRoot = styled(Modal, {
	  name: 'MuiDialog',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  '@media print': {
	    // Use !important to override the Modal inline-style.
	    position: 'absolute !important'
	  }
	});
	const DialogContainer = styled('div', {
	  name: 'MuiDialog',
	  slot: 'Container',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  height: '100%',
	  '@media print': {
	    height: 'auto'
	  },
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center'
	}, ownerState.scroll === 'body' && {
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  textAlign: 'center',
	  '&:after': {
	    content: '""',
	    display: 'inline-block',
	    verticalAlign: 'middle',
	    height: '100%',
	    width: '0'
	  }
	}));
	const DialogPaper = styled(Paper, {
	  name: 'MuiDialog',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 32,
	  position: 'relative',
	  overflowY: 'auto',
	  // Fix IE11 issue, to remove at some point.
	  '@media print': {
	    overflowY: 'visible',
	    boxShadow: 'none'
	  }
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  flexDirection: 'column',
	  maxHeight: 'calc(100% - 64px)'
	}, ownerState.scroll === 'body' && {
	  display: 'inline-block',
	  verticalAlign: 'middle',
	  textAlign: 'left' // 'initial' doesn't work on IE11

	}, !ownerState.maxWidth && {
	  maxWidth: 'calc(100% - 64px)'
	}, ownerState.maxWidth === 'xs' && {
	  maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
	  [`&.${dialogClasses.paperScrollBody}`]: {
	    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
	  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
	  [`&.${dialogClasses.paperScrollBody}`]: {
	    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: 'calc(100% - 64px)'
	}, ownerState.fullScreen && {
	  margin: 0,
	  width: '100%',
	  maxWidth: '100%',
	  height: '100%',
	  maxHeight: 'none',
	  borderRadius: 0,
	  [`&.${dialogClasses.paperScrollBody}`]: {
	    margin: 0,
	    maxWidth: '100%'
	  }
	}));
	/**
	 * Dialogs are overlaid modal paper based components with a backdrop.
	 */

	const Dialog = /*#__PURE__*/react.exports.forwardRef(function Dialog(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialog'
	  });
	  const theme = useTheme();
	  const defaultTransitionDuration = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-labelledby': ariaLabelledbyProp,
	    BackdropComponent,
	    BackdropProps,
	    children,
	    className,
	    disableEscapeKeyDown = false,
	    fullScreen = false,
	    fullWidth = false,
	    maxWidth = 'sm',
	    onBackdropClick,
	    onClose,
	    open,
	    PaperComponent = Paper,
	    PaperProps = {},
	    scroll = 'paper',
	    TransitionComponent = Fade,
	    transitionDuration = defaultTransitionDuration,
	    TransitionProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1p);

	  const ownerState = _extends({}, props, {
	    disableEscapeKeyDown,
	    fullScreen,
	    fullWidth,
	    maxWidth,
	    scroll
	  });

	  const classes = useUtilityClasses$1b(ownerState);
	  const backdropClick = react.exports.useRef();

	  const handleMouseDown = event => {
	    // We don't want to close the dialog when clicking the dialog content.
	    // Make sure the event starts and ends on the same DOM element.
	    backdropClick.current = event.target === event.currentTarget;
	  };

	  const handleBackdropClick = event => {
	    // Ignore the events not coming from the "backdrop".
	    if (!backdropClick.current) {
	      return;
	    }

	    backdropClick.current = null;

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  const ariaLabelledby = useId(ariaLabelledbyProp);
	  const dialogContextValue = react.exports.useMemo(() => {
	    return {
	      titleId: ariaLabelledby
	    };
	  }, [ariaLabelledby]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DialogRoot, _extends({
	    className: clsx(classes.root, className),
	    closeAfterTransition: true,
	    components: {
	      Backdrop: DialogBackdrop
	    },
	    componentsProps: {
	      backdrop: _extends({
	        transitionDuration,
	        as: BackdropComponent
	      }, BackdropProps)
	    },
	    disableEscapeKeyDown: disableEscapeKeyDown,
	    onClose: onClose,
	    open: open,
	    ref: ref,
	    onClick: handleBackdropClick,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	      appear: true,
	      in: open,
	      timeout: transitionDuration,
	      role: "presentation"
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogContainer, {
	        className: clsx(classes.container),
	        onMouseDown: handleMouseDown,
	        ownerState: ownerState,
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogPaper, _extends({
	          as: PaperComponent,
	          elevation: 24,
	          role: "dialog",
	          "aria-describedby": ariaDescribedby,
	          "aria-labelledby": ariaLabelledby
	        }, PaperProps, {
	          className: clsx(classes.paper, PaperProps.className),
	          ownerState: ownerState,
	          children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogContext.Provider, {
	            value: dialogContextValue,
	            children: children
	          })
	        }))
	      })
	    }))
	  }));
	});
	Dialog.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The id(s) of the element(s) that describe the dialog.
	   */
	  'aria-describedby': propTypes.exports.string,

	  /**
	   * The id(s) of the element(s) that label the dialog.
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   * @deprecated Use `components.Backdrop` instead.
	   * @default styled(Backdrop, {
	   *   name: 'MuiModal',
	   *   slot: 'Backdrop',
	   *   overridesResolver: (props, styles) => {
	   *     return styles.backdrop;
	   *   },
	   * })({
	   *   zIndex: -1,
	   * })
	   */
	  BackdropComponent: propTypes.exports.elementType,

	  /**
	   * @ignore
	   */
	  BackdropProps: propTypes.exports.object,

	  /**
	   * Dialog children, usually the included sub-components.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: propTypes.exports.bool,

	  /**
	   * If `true`, the dialog is full-screen.
	   * @default false
	   */
	  fullScreen: propTypes.exports.bool,

	  /**
	   * If `true`, the dialog stretches to `maxWidth`.
	   *
	   * Notice that the dialog width grow is limited by the default margin.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * Determine the max-width of the dialog.
	   * The dialog width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   * @default 'sm'
	   */
	  maxWidth: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.exports.string]),

	  /**
	   * Callback fired when the backdrop is clicked.
	   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
	   */
	  onBackdropClick: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * The component used to render the body of the dialog.
	   * @default Paper
	   */
	  PaperComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: propTypes.exports.object,

	  /**
	   * Determine the container for scrolling the dialog.
	   * @default 'paper'
	   */
	  scroll: propTypes.exports.oneOf(['body', 'paper']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Fade
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getDialogActionsUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogActions', slot);
	}
	generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);

	const _excluded$1o = ["className", "disableSpacing"];

	const useUtilityClasses$1a = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return composeClasses(slots, getDialogActionsUtilityClass, classes);
	};

	const DialogActionsRoot = styled('div', {
	  name: 'MuiDialogActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8,
	  justifyContent: 'flex-end',
	  flex: '0 0 auto'
	}, !ownerState.disableSpacing && {
	  '& > :not(:first-of-type)': {
	    marginLeft: 8
	  }
	}));
	const DialogActions = /*#__PURE__*/react.exports.forwardRef(function DialogActions(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogActions'
	  });

	  const {
	    className,
	    disableSpacing = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1o);

	  const ownerState = _extends({}, props, {
	    disableSpacing
	  });

	  const classes = useUtilityClasses$1a(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DialogActionsRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	DialogActions.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   * @default false
	   */
	  disableSpacing: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getDialogContentUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogContent', slot);
	}
	generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);

	function getDialogTitleUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogTitle', slot);
	}
	const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);

	const _excluded$1n = ["className", "dividers"];

	const useUtilityClasses$19 = ownerState => {
	  const {
	    classes,
	    dividers
	  } = ownerState;
	  const slots = {
	    root: ['root', dividers && 'dividers']
	  };
	  return composeClasses(slots, getDialogContentUtilityClass, classes);
	};

	const DialogContentRoot = styled('div', {
	  name: 'MuiDialogContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.dividers && styles.dividers];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  flex: '1 1 auto',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  overflowY: 'auto',
	  padding: '20px 24px'
	}, ownerState.dividers ? {
	  padding: '16px 24px',
	  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
	} : {
	  [`.${dialogTitleClasses.root} + &`]: {
	    paddingTop: 0
	  }
	}));
	const DialogContent = /*#__PURE__*/react.exports.forwardRef(function DialogContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogContent'
	  });

	  const {
	    className,
	    dividers = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1n);

	  const ownerState = _extends({}, props, {
	    dividers
	  });

	  const classes = useUtilityClasses$19(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DialogContentRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	DialogContent.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Display the top and bottom dividers.
	   * @default false
	   */
	  dividers: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getDialogContentTextUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogContentText', slot);
	}
	generateUtilityClasses('MuiDialogContentText', ['root']);

	const _excluded$1m = ["children"];

	const useUtilityClasses$18 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const DialogContentTextRoot = styled(Typography, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiDialogContentText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const DialogContentText = /*#__PURE__*/react.exports.forwardRef(function DialogContentText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogContentText'
	  });

	  const ownerState = _objectWithoutPropertiesLoose(props, _excluded$1m);

	  const classes = useUtilityClasses$18(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DialogContentTextRoot, _extends({
	    component: "p",
	    variant: "body1",
	    color: "text.secondary",
	    ref: ref,
	    ownerState: ownerState
	  }, props, {
	    classes: classes
	  }));
	});
	DialogContentText.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const _excluded$1l = ["className", "id"];

	const useUtilityClasses$17 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getDialogTitleUtilityClass, classes);
	};

	const DialogTitleRoot = styled(Typography, {
	  name: 'MuiDialogTitle',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  padding: '16px 24px',
	  flex: '0 0 auto'
	});
	const DialogTitle = /*#__PURE__*/react.exports.forwardRef(function DialogTitle(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogTitle'
	  });

	  const {
	    className,
	    id: idProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1l);

	  const ownerState = props;
	  const classes = useUtilityClasses$17(ownerState);
	  const {
	    titleId: id = idProp
	  } = react.exports.useContext(DialogContext);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DialogTitleRoot, _extends({
	    component: "h2",
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    variant: "h6",
	    id: id
	  }, other));
	});
	DialogTitle.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  id: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getDividerUtilityClass(slot) {
	  return generateUtilityClass('MuiDivider', slot);
	}
	const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);

	const _excluded$1k = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];

	const useUtilityClasses$16 = ownerState => {
	  const {
	    absolute,
	    children,
	    classes,
	    flexItem,
	    light,
	    orientation,
	    textAlign,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
	    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
	  };
	  return composeClasses(slots, getDividerUtilityClass, classes);
	};

	const DividerRoot = styled('div', {
	  name: 'MuiDivider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 0,
	  // Reset browser default style.
	  flexShrink: 0,
	  borderWidth: 0,
	  borderStyle: 'solid',
	  borderColor: (theme.vars || theme).palette.divider,
	  borderBottomWidth: 'thin'
	}, ownerState.absolute && {
	  position: 'absolute',
	  bottom: 0,
	  left: 0,
	  width: '100%'
	}, ownerState.light && {
	  borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
	}, ownerState.variant === 'inset' && {
	  marginLeft: 72
	}, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
	  marginLeft: theme.spacing(2),
	  marginRight: theme.spacing(2)
	}, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
	  marginTop: theme.spacing(1),
	  marginBottom: theme.spacing(1)
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  borderBottomWidth: 0,
	  borderRightWidth: 'thin'
	}, ownerState.flexItem && {
	  alignSelf: 'stretch',
	  height: 'auto'
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.children && {
	  display: 'flex',
	  whiteSpace: 'nowrap',
	  textAlign: 'center',
	  border: 0,
	  '&::before, &::after': {
	    position: 'relative',
	    width: '100%',
	    borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
	    top: '50%',
	    content: '""',
	    transform: 'translateY(50%)'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.children && ownerState.orientation === 'vertical' && {
	  flexDirection: 'column',
	  '&::before, &::after': {
	    height: '100%',
	    top: '0%',
	    left: '50%',
	    borderTop: 0,
	    borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
	    transform: 'translateX(0%)'
	  }
	}), ({
	  ownerState
	}) => _extends({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '90%'
	  },
	  '&::after': {
	    width: '10%'
	  }
	}, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '10%'
	  },
	  '&::after': {
	    width: '90%'
	  }
	}));
	const DividerWrapper = styled('span', {
	  name: 'MuiDivider',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-block',
	  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingRight: `calc(${theme.spacing(1)} * 1.2)`
	}, ownerState.orientation === 'vertical' && {
	  paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
	}));
	const Divider = /*#__PURE__*/react.exports.forwardRef(function Divider(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDivider'
	  });

	  const {
	    absolute = false,
	    children,
	    className,
	    component = children ? 'div' : 'hr',
	    flexItem = false,
	    light = false,
	    orientation = 'horizontal',
	    role = component !== 'hr' ? 'separator' : undefined,
	    textAlign = 'center',
	    variant = 'fullWidth'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1k);

	  const ownerState = _extends({}, props, {
	    absolute,
	    component,
	    flexItem,
	    light,
	    orientation,
	    role,
	    textAlign,
	    variant
	  });

	  const classes = useUtilityClasses$16(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(DividerRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    role: role,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children ? /*#__PURE__*/jsxRuntime.exports.jsx(DividerWrapper, {
	      className: classes.wrapper,
	      ownerState: ownerState,
	      children: children
	    }) : null
	  }));
	});
	Divider.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Absolutely position the element.
	   * @default false
	   */
	  absolute: propTypes.exports.bool,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, a vertical divider will have the correct height when used in flex container.
	   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
	   * @default false
	   */
	  flexItem: propTypes.exports.bool,

	  /**
	   * If `true`, the divider will have a lighter color.
	   * @default false
	   */
	  light: propTypes.exports.bool,

	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * @ignore
	   */
	  role: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The text alignment.
	   * @default 'center'
	   */
	  textAlign: propTypes.exports.oneOf(['center', 'left', 'right']),

	  /**
	   * The variant to use.
	   * @default 'fullWidth'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['fullWidth', 'inset', 'middle']), propTypes.exports.string])
	} ;

	const _excluded$1j = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

	function getTranslateValue(direction, node, resolvedContainer) {
	  const rect = node.getBoundingClientRect();
	  const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
	  const containerWindow = ownerWindow(node);
	  let transform;

	  if (node.fakeTransform) {
	    transform = node.fakeTransform;
	  } else {
	    const computedStyle = containerWindow.getComputedStyle(node);
	    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
	  }

	  let offsetX = 0;
	  let offsetY = 0;

	  if (transform && transform !== 'none' && typeof transform === 'string') {
	    const transformValues = transform.split('(')[1].split(')')[0].split(',');
	    offsetX = parseInt(transformValues[4], 10);
	    offsetY = parseInt(transformValues[5], 10);
	  }

	  if (direction === 'left') {
	    if (containerRect) {
	      return `translateX(${containerRect.right + offsetX - rect.left}px)`;
	    }

	    return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
	  }

	  if (direction === 'right') {
	    if (containerRect) {
	      return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
	    }

	    return `translateX(-${rect.left + rect.width - offsetX}px)`;
	  }

	  if (direction === 'up') {
	    if (containerRect) {
	      return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
	    }

	    return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
	  } // direction === 'down'


	  if (containerRect) {
	    return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
	  }

	  return `translateY(-${rect.top + rect.height - offsetY}px)`;
	}

	function resolveContainer(containerPropProp) {
	  return typeof containerPropProp === 'function' ? containerPropProp() : containerPropProp;
	}

	function setTranslateValue(direction, node, containerProp) {
	  const resolvedContainer = resolveContainer(containerProp);
	  const transform = getTranslateValue(direction, node, resolvedContainer);

	  if (transform) {
	    node.style.webkitTransform = transform;
	    node.style.transform = transform;
	  }
	}
	/**
	 * The Slide transition is used by the [Drawer](/material-ui/react-drawer/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Slide = /*#__PURE__*/react.exports.forwardRef(function Slide(props, ref) {
	  const theme = useTheme();
	  const defaultEasing = {
	    enter: theme.transitions.easing.easeOut,
	    exit: theme.transitions.easing.sharp
	  };
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    addEndListener,
	    appear = true,
	    children,
	    container: containerProp,
	    direction = 'down',
	    easing: easingProp = defaultEasing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = defaultTimeout,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Transition
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1j);

	  const childrenRef = react.exports.useRef(null);
	  const handleRefIntermediary = useForkRef(children.ref, childrenRef);
	  const handleRef = useForkRef(handleRefIntermediary, ref);

	  const normalizedTransitionCallback = callback => isAppearing => {
	    if (callback) {
	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (isAppearing === undefined) {
	        callback(childrenRef.current);
	      } else {
	        callback(childrenRef.current, isAppearing);
	      }
	    }
	  };

	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    setTranslateValue(direction, node, containerProp);
	    reflow(node);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
	    const transitionProps = getTransitionProps({
	      timeout,
	      style,
	      easing: easingProp
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps));
	    node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps));
	    node.style.webkitTransform = 'none';
	    node.style.transform = 'none';

	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      timeout,
	      style,
	      easing: easingProp
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('-webkit-transform', transitionProps);
	    node.style.transition = theme.transitions.create('transform', transitionProps);
	    setTranslateValue(direction, node, containerProp);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(node => {
	    // No need for transitions when the component is hidden
	    node.style.webkitTransition = '';
	    node.style.transition = '';

	    if (onExited) {
	      onExited(node);
	    }
	  });

	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(childrenRef.current, next);
	    }
	  };

	  const updatePosition = react.exports.useCallback(() => {
	    if (childrenRef.current) {
	      setTranslateValue(direction, childrenRef.current, containerProp);
	    }
	  }, [direction, containerProp]);
	  react.exports.useEffect(() => {
	    // Skip configuration where the position is screen size invariant.
	    if (inProp || direction === 'down' || direction === 'right') {
	      return undefined;
	    }

	    const handleResize = debounce$1(() => {
	      if (childrenRef.current) {
	        setTranslateValue(direction, childrenRef.current, containerProp);
	      }
	    });
	    const containerWindow = ownerWindow(childrenRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [direction, inProp, containerProp]);
	  react.exports.useEffect(() => {
	    if (!inProp) {
	      // We need to update the position of the drawer when the direction change and
	      // when it's hidden.
	      updatePosition();
	    }
	  }, [inProp, updatePosition]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    nodeRef: childrenRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    appear: appear,
	    in: inProp,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        ref: handleRef,
	        style: _extends({
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, style, children.props.style)
	      }, childProps));
	    }
	  }));
	});
	Slide.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the container the Slide is transitioning from.
	   */
	  container: chainPropTypes(propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]), props => {
	    if (props.open) {
	      const resolvedContainer = resolveContainer(props.container);

	      if (resolvedContainer && resolvedContainer.nodeType === 1) {
	        const box = resolvedContainer.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `container` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== 'function' || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
	        return new Error(['MUI: The `container` prop provided to the component is invalid.', 'It should be an HTML element instance.'].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * Direction the child node will enter from.
	   * @default 'down'
	   */
	  direction: propTypes.exports.oneOf(['down', 'left', 'right', 'up']),

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   * @default {
	   *   enter: theme.transitions.easing.easeOut,
	   *   exit: theme.transitions.easing.sharp,
	   * }
	   */
	  easing: propTypes.exports.oneOfType([propTypes.exports.shape({
	    enter: propTypes.exports.string,
	    exit: propTypes.exports.string
	  }), propTypes.exports.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  timeout: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;

	function getDrawerUtilityClass(slot) {
	  return generateUtilityClass('MuiDrawer', slot);
	}
	generateUtilityClasses('MuiDrawer', ['root', 'docked', 'paper', 'paperAnchorLeft', 'paperAnchorRight', 'paperAnchorTop', 'paperAnchorBottom', 'paperAnchorDockedLeft', 'paperAnchorDockedRight', 'paperAnchorDockedTop', 'paperAnchorDockedBottom', 'modal']);

	const _excluded$1i = ["BackdropProps"],
	      _excluded2$8 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];

	const overridesResolver$5 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, (ownerState.variant === 'permanent' || ownerState.variant === 'persistent') && styles.docked, styles.modal];
	};

	const useUtilityClasses$15 = ownerState => {
	  const {
	    classes,
	    anchor,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    docked: [(variant === 'permanent' || variant === 'persistent') && 'docked'],
	    modal: ['modal'],
	    paper: ['paper', `paperAnchor${capitalize(anchor)}`, variant !== 'temporary' && `paperAnchorDocked${capitalize(anchor)}`]
	  };
	  return composeClasses(slots, getDrawerUtilityClass, classes);
	};

	const DrawerRoot = styled(Modal, {
	  name: 'MuiDrawer',
	  slot: 'Root',
	  overridesResolver: overridesResolver$5
	})(({
	  theme
	}) => ({
	  zIndex: (theme.vars || theme).zIndex.drawer
	}));
	const DrawerDockedRoot = styled('div', {
	  shouldForwardProp: rootShouldForwardProp,
	  name: 'MuiDrawer',
	  slot: 'Docked',
	  skipVariantsResolver: false,
	  overridesResolver: overridesResolver$5
	})({
	  flex: '0 0 auto'
	});
	const DrawerPaper = styled(Paper, {
	  name: 'MuiDrawer',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.paper, styles[`paperAnchor${capitalize(ownerState.anchor)}`], ownerState.variant !== 'temporary' && styles[`paperAnchorDocked${capitalize(ownerState.anchor)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  overflowY: 'auto',
	  display: 'flex',
	  flexDirection: 'column',
	  height: '100%',
	  flex: '1 0 auto',
	  zIndex: (theme.vars || theme).zIndex.drawer,
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  // temporary style
	  position: 'fixed',
	  top: 0,
	  // We disable the focus ring for mouse, touch and keyboard users.
	  // At some point, it would be better to keep it for keyboard users.
	  // :focus-ring CSS pseudo-class will help.
	  outline: 0
	}, ownerState.anchor === 'left' && {
	  left: 0
	}, ownerState.anchor === 'top' && {
	  top: 0,
	  left: 0,
	  right: 0,
	  height: 'auto',
	  maxHeight: '100%'
	}, ownerState.anchor === 'right' && {
	  right: 0
	}, ownerState.anchor === 'bottom' && {
	  top: 'auto',
	  left: 0,
	  bottom: 0,
	  right: 0,
	  height: 'auto',
	  maxHeight: '100%'
	}, ownerState.anchor === 'left' && ownerState.variant !== 'temporary' && {
	  borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
	}, ownerState.anchor === 'top' && ownerState.variant !== 'temporary' && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
	}, ownerState.anchor === 'right' && ownerState.variant !== 'temporary' && {
	  borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
	}, ownerState.anchor === 'bottom' && ownerState.variant !== 'temporary' && {
	  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
	}));
	const oppositeDirection = {
	  left: 'right',
	  right: 'left',
	  top: 'down',
	  bottom: 'up'
	};
	function isHorizontal(anchor) {
	  return ['left', 'right'].indexOf(anchor) !== -1;
	}
	function getAnchor(theme, anchor) {
	  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
	}
	/**
	 * The props of the [Modal](/material-ui/api/modal/) component are available
	 * when `variant="temporary"` is set.
	 */

	const Drawer = /*#__PURE__*/react.exports.forwardRef(function Drawer(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDrawer'
	  });
	  const theme = useTheme();
	  const defaultTransitionDuration = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    anchor: anchorProp = 'left',
	    BackdropProps,
	    children,
	    className,
	    elevation = 16,
	    hideBackdrop = false,
	    ModalProps: {
	      BackdropProps: BackdropPropsProp
	    } = {},
	    onClose,
	    open = false,
	    PaperProps = {},
	    SlideProps,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Slide,
	    transitionDuration = defaultTransitionDuration,
	    variant = 'temporary'
	  } = props,
	        ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$1i),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$8); // Let's assume that the Drawer will always be rendered on user space.
	  // We use this state is order to skip the appear transition during the
	  // initial mount of the component.


	  const mounted = react.exports.useRef(false);
	  react.exports.useEffect(() => {
	    mounted.current = true;
	  }, []);
	  const anchorInvariant = getAnchor(theme, anchorProp);
	  const anchor = anchorProp;

	  const ownerState = _extends({}, props, {
	    anchor,
	    elevation,
	    open,
	    variant
	  }, other);

	  const classes = useUtilityClasses$15(ownerState);

	  const drawer = /*#__PURE__*/jsxRuntime.exports.jsx(DrawerPaper, _extends({
	    elevation: variant === 'temporary' ? elevation : 0,
	    square: true
	  }, PaperProps, {
	    className: clsx(classes.paper, PaperProps.className),
	    ownerState: ownerState,
	    children: children
	  }));

	  if (variant === 'permanent') {
	    return /*#__PURE__*/jsxRuntime.exports.jsx(DrawerDockedRoot, _extends({
	      className: clsx(classes.root, classes.docked, className),
	      ownerState: ownerState,
	      ref: ref
	    }, other, {
	      children: drawer
	    }));
	  }

	  const slidingDrawer = /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    in: open,
	    direction: oppositeDirection[anchorInvariant],
	    timeout: transitionDuration,
	    appear: mounted.current
	  }, SlideProps, {
	    children: drawer
	  }));

	  if (variant === 'persistent') {
	    return /*#__PURE__*/jsxRuntime.exports.jsx(DrawerDockedRoot, _extends({
	      className: clsx(classes.root, classes.docked, className),
	      ownerState: ownerState,
	      ref: ref
	    }, other, {
	      children: slidingDrawer
	    }));
	  } // variant === temporary


	  return /*#__PURE__*/jsxRuntime.exports.jsx(DrawerRoot, _extends({
	    BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
	      transitionDuration
	    }),
	    className: clsx(classes.root, classes.modal, className),
	    open: open,
	    ownerState: ownerState,
	    onClose: onClose,
	    hideBackdrop: hideBackdrop,
	    ref: ref
	  }, other, ModalProps, {
	    children: slidingDrawer
	  }));
	});
	Drawer.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Side from which the drawer will appear.
	   * @default 'left'
	   */
	  anchor: propTypes.exports.oneOf(['bottom', 'left', 'right', 'top']),

	  /**
	   * @ignore
	   */
	  BackdropProps: propTypes.exports.object,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The elevation of the drawer.
	   * @default 16
	   */
	  elevation: integerPropType,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: propTypes.exports.bool,

	  /**
	   * Props applied to the [`Modal`](/material-ui/api/modal/) element.
	   * @default {}
	   */
	  ModalProps: propTypes.exports.object,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   * @default false
	   */
	  open: propTypes.exports.bool,

	  /**
	   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: propTypes.exports.object,

	  /**
	   * Props applied to the [`Slide`](/material-ui/api/slide/) element.
	   */
	  SlideProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * The variant to use.
	   * @default 'temporary'
	   */
	  variant: propTypes.exports.oneOf(['permanent', 'persistent', 'temporary'])
	} ;

	function getFabUtilityClass(slot) {
	  return generateUtilityClass('MuiFab', slot);
	}
	const fabClasses = generateUtilityClasses('MuiFab', ['root', 'primary', 'secondary', 'extended', 'circular', 'focusVisible', 'disabled', 'colorInherit', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'info', 'error', 'warning', 'success']);

	const _excluded$1h = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];

	const useUtilityClasses$14 = ownerState => {
	  const {
	    color,
	    variant,
	    classes,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `size${capitalize(size)}`, color === 'inherit' ? 'colorInherit' : color]
	  };
	  return composeClasses(slots, getFabUtilityClass, classes);
	};

	const FabRoot = styled(ButtonBase, {
	  name: 'MuiFab',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, styles[capitalize(ownerState.size)], styles[ownerState.color]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$getCon, _theme$palette;

	  return _extends({}, theme.typography.button, {
	    minHeight: 36,
	    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {
	      duration: theme.transitions.duration.short
	    }),
	    borderRadius: '50%',
	    padding: 0,
	    minWidth: 0,
	    width: 56,
	    height: 56,
	    zIndex: (theme.vars || theme).zIndex.fab,
	    boxShadow: (theme.vars || theme).shadows[6],
	    '&:active': {
	      boxShadow: (theme.vars || theme).shadows[12]
	    },
	    color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
	    backgroundColor: (theme.vars || theme).palette.grey[300],
	    '&:hover': {
	      backgroundColor: (theme.vars || theme).palette.grey.A100,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette.grey[300]
	      },
	      textDecoration: 'none'
	    },
	    [`&.${fabClasses.focusVisible}`]: {
	      boxShadow: (theme.vars || theme).shadows[6]
	    },
	    [`&.${fabClasses.disabled}`]: {
	      color: (theme.vars || theme).palette.action.disabled,
	      boxShadow: (theme.vars || theme).shadows[0],
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    }
	  }, ownerState.size === 'small' && {
	    width: 40,
	    height: 40
	  }, ownerState.size === 'medium' && {
	    width: 48,
	    height: 48
	  }, ownerState.variant === 'extended' && {
	    borderRadius: 48 / 2,
	    padding: '0 16px',
	    width: 'auto',
	    minHeight: 'auto',
	    minWidth: 48,
	    height: 48
	  }, ownerState.variant === 'extended' && ownerState.size === 'small' && {
	    width: 'auto',
	    padding: '0 8px',
	    borderRadius: 34 / 2,
	    minWidth: 34,
	    height: 34
	  }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {
	    width: 'auto',
	    padding: '0 16px',
	    borderRadius: 40 / 2,
	    minWidth: 40,
	    height: 40
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  });
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && (theme.vars || theme).palette[ownerState.color] != null && {
	  color: (theme.vars || theme).palette[ownerState.color].contrastText,
	  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	    }
	  }
	}));
	const Fab = /*#__PURE__*/react.exports.forwardRef(function Fab(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFab'
	  });

	  const {
	    children,
	    className,
	    color = 'default',
	    component = 'button',
	    disabled = false,
	    disableFocusRipple = false,
	    focusVisibleClassName,
	    size = 'large',
	    variant = 'circular'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1h);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    disableFocusRipple,
	    size,
	    variant
	  });

	  const classes = useUtilityClasses$14(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FabRoot, _extends({
	    className: clsx(classes.root, className),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: children
	  }));
	});
	Fab.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'default'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'error', 'info', 'inherit', 'primary', 'secondary', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: propTypes.exports.string,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'large'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'circular'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['circular', 'extended']), propTypes.exports.string])
	} ;

	const _excluded$1g = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "type"];

	const useUtilityClasses$13 = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const FilledInputRoot = styled(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiFilledInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _palette;

	  const light = theme.palette.mode === 'light';
	  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
	  const hoverBackground = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)';
	  const disabledBackground = light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)';
	  return _extends({
	    position: 'relative',
	    backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
	    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create('background-color', {
	      duration: theme.transitions.duration.shorter,
	      easing: theme.transitions.easing.easeOut
	    }),
	    '&:hover': {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	      }
	    },
	    [`&.${filledInputClasses.focused}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	    },
	    [`&.${filledInputClasses.disabled}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || 'primary']) == null ? void 0 : _palette.main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&.${filledInputClasses.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${filledInputClasses.error}:after`]: {
	      borderBottomColor: (theme.vars || theme).palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red

	    },
	    '&:before': {
	      borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&:hover:not(.${filledInputClasses.disabled}):before`]: {
	      borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
	    },
	    [`&.${filledInputClasses.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 12
	  }, ownerState.endAdornment && {
	    paddingRight: 12
	  }, ownerState.multiline && _extends({
	    padding: '25px 12px 8px'
	  }, ownerState.size === 'small' && {
	    paddingTop: 21,
	    paddingBottom: 4
	  }, ownerState.hiddenLabel && {
	    paddingTop: 16,
	    paddingBottom: 17
	  }));
	});
	const FilledInputInput = styled(InputBaseComponent, {
	  name: 'MuiFilledInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  paddingTop: 25,
	  paddingRight: 12,
	  paddingBottom: 8,
	  paddingLeft: 12
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  paddingTop: 21,
	  paddingBottom: 4
	}, ownerState.hiddenLabel && {
	  paddingTop: 16,
	  paddingBottom: 17
	}, ownerState.multiline && {
	  paddingTop: 0,
	  paddingBottom: 0,
	  paddingLeft: 0,
	  paddingRight: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}, ownerState.hiddenLabel && ownerState.size === 'small' && {
	  paddingTop: 8,
	  paddingBottom: 9
	}));
	const FilledInput = /*#__PURE__*/react.exports.forwardRef(function FilledInput(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFilledInput'
	  });

	  const {
	    components = {},
	    componentsProps: componentsPropsProp,
	    fullWidth = false,
	    // declare here to prevent spreading to DOM
	    inputComponent = 'input',
	    multiline = false,
	    type = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1g);

	  const ownerState = _extends({}, props, {
	    fullWidth,
	    inputComponent,
	    multiline,
	    type
	  });

	  const classes = useUtilityClasses$13(props);
	  const filledInputComponentsProps = {
	    root: {
	      ownerState
	    },
	    input: {
	      ownerState
	    }
	  };
	  const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase, _extends({
	    components: _extends({
	      Root: FilledInputRoot,
	      Input: FilledInputInput
	    }, components),
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	FilledInput.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary']), propTypes.exports.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.object,
	    root: propTypes.exports.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the input will not have an underline.
	   */
	  disableUnderline: propTypes.exports.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.exports.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * If `true`, the label is hidden.
	   * This is used to increase density for a `FilledInput`.
	   * Be sure to add `aria-label` to the `input` element.
	   * @default false
	   */
	  hiddenLabel: propTypes.exports.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: propTypes.exports.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: propTypes.exports.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any
	} ;
	FilledInput.muiName = 'Input';

	function getFormControlUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControl', slot);
	}
	generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);

	const _excluded$1f = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];

	const useUtilityClasses$12 = ownerState => {
	  const {
	    classes,
	    margin,
	    fullWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
	  };
	  return composeClasses(slots, getFormControlUtilityClasses, classes);
	};

	const FormControlRoot = styled('div', {
	  name: 'MuiFormControl',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  flexDirection: 'column',
	  position: 'relative',
	  // Reset fieldset default style.
	  minWidth: 0,
	  padding: 0,
	  margin: 0,
	  border: 0,
	  verticalAlign: 'top'
	}, ownerState.margin === 'normal' && {
	  marginTop: 16,
	  marginBottom: 8
	}, ownerState.margin === 'dense' && {
	  marginTop: 8,
	  marginBottom: 4
	}, ownerState.fullWidth && {
	  width: '100%'
	}));
	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](/material-ui/react-text-field/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 */

	const FormControl = /*#__PURE__*/react.exports.forwardRef(function FormControl(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControl'
	  });

	  const {
	    children,
	    className,
	    color = 'primary',
	    component = 'div',
	    disabled = false,
	    error = false,
	    focused: visuallyFocused,
	    fullWidth = false,
	    hiddenLabel = false,
	    margin = 'none',
	    required = false,
	    size = 'medium',
	    variant = 'outlined'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1f);

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    error,
	    fullWidth,
	    hiddenLabel,
	    margin,
	    required,
	    size,
	    variant
	  });

	  const classes = useUtilityClasses$12(ownerState);
	  const [adornedStart, setAdornedStart] = react.exports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialAdornedStart = false;

	    if (children) {
	      react.exports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }

	        const input = isMuiElement(child, ['Select']) ? child.props.input : child;

	        if (input && isAdornedStart(input.props)) {
	          initialAdornedStart = true;
	        }
	      });
	    }

	    return initialAdornedStart;
	  });
	  const [filled, setFilled] = react.exports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialFilled = false;

	    if (children) {
	      react.exports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }

	        if (isFilled(child.props, true)) {
	          initialFilled = true;
	        }
	      });
	    }

	    return initialFilled;
	  });
	  const [focusedState, setFocused] = react.exports.useState(false);

	  if (disabled && focusedState) {
	    setFocused(false);
	  }

	  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
	  let registerEffect;

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const registeredInput = react.exports.useRef(false);

	    registerEffect = () => {
	      if (registeredInput.current) {
	        console.error(['MUI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\n'));
	      }

	      registeredInput.current = true;
	      return () => {
	        registeredInput.current = false;
	      };
	    };
	  }

	  const onFilled = react.exports.useCallback(() => {
	    setFilled(true);
	  }, []);
	  const onEmpty = react.exports.useCallback(() => {
	    setFilled(false);
	  }, []);
	  const childContext = {
	    adornedStart,
	    setAdornedStart,
	    color,
	    disabled,
	    error,
	    filled,
	    focused,
	    fullWidth,
	    hiddenLabel,
	    size,
	    onBlur: () => {
	      setFocused(false);
	    },
	    onEmpty,
	    onFilled,
	    onFocus: () => {
	      setFocused(true);
	    },
	    registerEffect,
	    required,
	    variant
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(FormControlRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: children
	    }))
	  });
	});
	FormControl.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the component is displayed in focused state.
	   */
	  focused: propTypes.exports.bool,

	  /**
	   * If `true`, the component will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * If `true`, the label is hidden.
	   * This is used to increase density for a `FilledInput`.
	   * Be sure to add `aria-label` to the `input` element.
	   * @default false
	   */
	  hiddenLabel: propTypes.exports.bool,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   * @default 'none'
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none', 'normal']),

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   * @default false
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;

	function getFormControlLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControlLabel', slot);
	}
	const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error']);

	const _excluded$1e = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "value"];

	const useUtilityClasses$11 = ownerState => {
	  const {
	    classes,
	    disabled,
	    labelPlacement,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error'],
	    label: ['label', disabled && 'disabled']
	  };
	  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
	};

	const FormControlLabelRoot = styled('label', {
	  name: 'MuiFormControlLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formControlLabelClasses.label}`]: styles.label
	    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  alignItems: 'center',
	  cursor: 'pointer',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  WebkitTapHighlightColor: 'transparent',
	  marginLeft: -11,
	  marginRight: 16,
	  // used for row presentation of radio/checkbox
	  [`&.${formControlLabelClasses.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.labelPlacement === 'start' && {
	  flexDirection: 'row-reverse',
	  marginLeft: 16,
	  // used for row presentation of radio/checkbox
	  marginRight: -11
	}, ownerState.labelPlacement === 'top' && {
	  flexDirection: 'column-reverse',
	  marginLeft: 16
	}, ownerState.labelPlacement === 'bottom' && {
	  flexDirection: 'column',
	  marginLeft: 16
	}, {
	  [`& .${formControlLabelClasses.label}`]: {
	    [`&.${formControlLabelClasses.disabled}`]: {
	      color: (theme.vars || theme).palette.text.disabled
	    }
	  }
	}));
	/**
	 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */

	const FormControlLabel = /*#__PURE__*/react.exports.forwardRef(function FormControlLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControlLabel'
	  });

	  const {
	    className,
	    componentsProps = {},
	    control,
	    disabled: disabledProp,
	    disableTypography,
	    label: labelProp,
	    labelPlacement = 'end'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1e);

	  const muiFormControl = useFormControl();
	  let disabled = disabledProp;

	  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
	    disabled = control.props.disabled;
	  }

	  if (typeof disabled === 'undefined' && muiFormControl) {
	    disabled = muiFormControl.disabled;
	  }

	  const controlProps = {
	    disabled
	  };
	  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
	    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
	      controlProps[key] = props[key];
	    }
	  });
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['error']
	  });

	  const ownerState = _extends({}, props, {
	    disabled,
	    labelPlacement,
	    error: fcs.error
	  });

	  const classes = useUtilityClasses$11(ownerState);
	  let label = labelProp;

	  if (label != null && label.type !== Typography && !disableTypography) {
	    label = /*#__PURE__*/jsxRuntime.exports.jsx(Typography, _extends({
	      component: "span",
	      className: classes.label
	    }, componentsProps.typography, {
	      children: label
	    }));
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(FormControlLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/react.exports.cloneElement(control, controlProps), label]
	  }));
	});
	FormControlLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component appears selected.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The props used for each slot inside.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    typography: propTypes.exports.object
	  }),

	  /**
	   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
	   */
	  control: propTypes.exports.element.isRequired,

	  /**
	   * If `true`, the control is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is rendered as it is passed without an additional typography node.
	   */
	  disableTypography: propTypes.exports.bool,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * A text or an element to be used in an enclosing label element.
	   */
	  label: propTypes.exports.node,

	  /**
	   * The position of the label.
	   * @default 'end'
	   */
	  labelPlacement: propTypes.exports.oneOf(['bottom', 'end', 'start', 'top']),

	  /**
	   * @ignore
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the component.
	   */
	  value: propTypes.exports.any
	} ;

	function getFormGroupUtilityClass(slot) {
	  return generateUtilityClass('MuiFormGroup', slot);
	}
	generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);

	const _excluded$1d = ["className", "row"];

	const useUtilityClasses$10 = ownerState => {
	  const {
	    classes,
	    row,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', row && 'row', error && 'error']
	  };
	  return composeClasses(slots, getFormGroupUtilityClass, classes);
	};

	const FormGroupRoot = styled('div', {
	  name: 'MuiFormGroup',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.row && styles.row];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'column',
	  flexWrap: 'wrap'
	}, ownerState.row && {
	  flexDirection: 'row'
	}));
	/**
	 * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
	 * It provides compact row layout.
	 * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
	 */

	const FormGroup = /*#__PURE__*/react.exports.forwardRef(function FormGroup(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormGroup'
	  });

	  const {
	    className,
	    row = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1d);

	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['error']
	  });

	  const ownerState = _extends({}, props, {
	    row,
	    error: fcs.error
	  });

	  const classes = useUtilityClasses$10(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormGroupRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	FormGroup.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Display group of elements in a compact row.
	   * @default false
	   */
	  row: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getFormHelperTextUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormHelperText', slot);
	}
	const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);

	var _span$3;

	const _excluded$1c = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];

	const useUtilityClasses$$ = ownerState => {
	  const {
	    classes,
	    contained,
	    size,
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
	  };
	  return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
	};

	const FormHelperTextRoot = styled('p', {
	  name: 'MuiFormHelperText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.caption, {
	  textAlign: 'left',
	  marginTop: 3,
	  marginRight: 0,
	  marginBottom: 0,
	  marginLeft: 0,
	  [`&.${formHelperTextClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formHelperTextClasses.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}, ownerState.size === 'small' && {
	  marginTop: 4
	}, ownerState.contained && {
	  marginLeft: 14,
	  marginRight: 14
	}));
	const FormHelperText = /*#__PURE__*/react.exports.forwardRef(function FormHelperText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormHelperText'
	  });

	  const {
	    children,
	    className,
	    component = 'p'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1c);

	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
	  });

	  const ownerState = _extends({}, props, {
	    component,
	    contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
	    variant: fcs.variant,
	    size: fcs.size,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });

	  const classes = useUtilityClasses$$(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperTextRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
	    _span$3 || (_span$3 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: "notranslate",
	      children: "\u200B"
	    })) : children
	  }));
	});
	FormHelperText.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   *
	   * If `' '` is provided, the component reserves one line height for displaying a future message.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the helper text should be displayed in a disabled state.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, helper text should be displayed in an error state.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the helper text should use filled classes key.
	   */
	  filled: propTypes.exports.bool,

	  /**
	   * If `true`, the helper text should use focused classes key.
	   */
	  focused: propTypes.exports.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.exports.oneOf(['dense']),

	  /**
	   * If `true`, the helper text should use required classes key.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;

	function getFormLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormLabel', slot);
	}
	const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);

	const _excluded$1b = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];

	const useUtilityClasses$_ = ownerState => {
	  const {
	    classes,
	    color,
	    focused,
	    disabled,
	    error,
	    filled,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
	    asterisk: ['asterisk', error && 'error']
	  };
	  return composeClasses(slots, getFormLabelUtilityClasses, classes);
	};

	const FormLabelRoot = styled('label', {
	  name: 'MuiFormLabel',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.body1, {
	  lineHeight: '1.4375em',
	  padding: 0,
	  position: 'relative',
	  [`&.${formLabelClasses.focused}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${formLabelClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formLabelClasses.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const AsteriskComponent = styled('span', {
	  name: 'MuiFormLabel',
	  slot: 'Asterisk',
	  overridesResolver: (props, styles) => styles.asterisk
	})(({
	  theme
	}) => ({
	  [`&.${formLabelClasses.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const FormLabel = /*#__PURE__*/react.exports.forwardRef(function FormLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormLabel'
	  });

	  const {
	    children,
	    className,
	    component = 'label'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1b);

	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
	  });

	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    component,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });

	  const classes = useUtilityClasses$_(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(FormLabelRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [children, fcs.required && /*#__PURE__*/jsxRuntime.exports.jsxs(AsteriskComponent, {
	      ownerState: ownerState,
	      "aria-hidden": true,
	      className: classes.asterisk,
	      children: ["\u2009", '*']
	    })]
	  }));
	});
	FormLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the label should be displayed in a disabled state.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the label should use filled classes key.
	   */
	  filled: propTypes.exports.bool,

	  /**
	   * If `true`, the input of this label is focused (used by `FormGroup` components).
	   */
	  focused: propTypes.exports.bool,

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	/**
	 * @ignore - internal component.
	 */

	const GridContext = /*#__PURE__*/react.exports.createContext();

	{
	  GridContext.displayName = 'GridContext';
	}

	function getGridUtilityClass(slot) {
	  return generateUtilityClass('MuiGrid', slot);
	}
	const SPACINGS$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	const DIRECTIONS$1 = ['column-reverse', 'column', 'row-reverse', 'row'];
	const WRAPS$1 = ['nowrap', 'wrap-reverse', 'wrap'];
	const GRID_SIZES$1 = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	const gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth', // spacings
	...SPACINGS$1.map(spacing => `spacing-xs-${spacing}`), // direction values
	...DIRECTIONS$1.map(direction => `direction-xs-${direction}`), // wrap values
	...WRAPS$1.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints
	...GRID_SIZES$1.map(size => `grid-xs-${size}`), ...GRID_SIZES$1.map(size => `grid-sm-${size}`), ...GRID_SIZES$1.map(size => `grid-md-${size}`), ...GRID_SIZES$1.map(size => `grid-lg-${size}`), ...GRID_SIZES$1.map(size => `grid-xl-${size}`)]);

	const _excluded$1a = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];

	function getOffset(val) {
	  const parse = parseFloat(val);
	  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
	}

	function generateGrid({
	  theme,
	  ownerState
	}) {
	  let size;
	  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
	    // Use side effect over immutability for better performance.
	    let styles = {};

	    if (ownerState[breakpoint]) {
	      size = ownerState[breakpoint];
	    }

	    if (!size) {
	      return globalStyles;
	    }

	    if (size === true) {
	      // For the auto layouting
	      styles = {
	        flexBasis: 0,
	        flexGrow: 1,
	        maxWidth: '100%'
	      };
	    } else if (size === 'auto') {
	      styles = {
	        flexBasis: 'auto',
	        flexGrow: 0,
	        flexShrink: 0,
	        maxWidth: 'none',
	        width: 'auto'
	      };
	    } else {
	      const columnsBreakpointValues = resolveBreakpointValues({
	        values: ownerState.columns,
	        breakpoints: theme.breakpoints.values
	      });
	      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;

	      if (columnValue === undefined || columnValue === null) {
	        return globalStyles;
	      } // Keep 7 significant numbers.


	      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;
	      let more = {};

	      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
	        const themeSpacing = theme.spacing(ownerState.columnSpacing);

	        if (themeSpacing !== '0px') {
	          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
	          more = {
	            flexBasis: fullWidth,
	            maxWidth: fullWidth
	          };
	        }
	      } // Close to the bootstrap implementation:
	      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41


	      styles = _extends({
	        flexBasis: width,
	        flexGrow: 0,
	        maxWidth: width
	      }, more);
	    } // No need for a media query for the first size.


	    if (theme.breakpoints.values[breakpoint] === 0) {
	      Object.assign(globalStyles, styles);
	    } else {
	      globalStyles[theme.breakpoints.up(breakpoint)] = styles;
	    }

	    return globalStyles;
	  }, {});
	}
	function generateDirection({
	  theme,
	  ownerState
	}) {
	  const directionValues = resolveBreakpointValues({
	    values: ownerState.direction,
	    breakpoints: theme.breakpoints.values
	  });
	  return handleBreakpoints({
	    theme
	  }, directionValues, propValue => {
	    const output = {
	      flexDirection: propValue
	    };

	    if (propValue.indexOf('column') === 0) {
	      output[`& > .${gridClasses.item}`] = {
	        maxWidth: 'none'
	      };
	    }

	    return output;
	  });
	}
	function generateRowGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    rowSpacing
	  } = ownerState;
	  let styles = {};

	  if (container && rowSpacing !== 0) {
	    const rowSpacingValues = resolveBreakpointValues({
	      values: rowSpacing,
	      breakpoints: theme.breakpoints.values
	    });
	    styles = handleBreakpoints({
	      theme
	    }, rowSpacingValues, propValue => {
	      const themeSpacing = theme.spacing(propValue);

	      if (themeSpacing !== '0px') {
	        return {
	          marginTop: `-${getOffset(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingTop: getOffset(themeSpacing)
	          }
	        };
	      }

	      return {};
	    });
	  }

	  return styles;
	}
	function generateColumnGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    columnSpacing
	  } = ownerState;
	  let styles = {};

	  if (container && columnSpacing !== 0) {
	    const columnSpacingValues = resolveBreakpointValues({
	      values: columnSpacing,
	      breakpoints: theme.breakpoints.values
	    });
	    styles = handleBreakpoints({
	      theme
	    }, columnSpacingValues, propValue => {
	      const themeSpacing = theme.spacing(propValue);

	      if (themeSpacing !== '0px') {
	        return {
	          width: `calc(100% + ${getOffset(themeSpacing)})`,
	          marginLeft: `-${getOffset(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingLeft: getOffset(themeSpacing)
	          }
	        };
	      }

	      return {};
	    });
	  }

	  return styles;
	}
	function resolveSpacingStyles(spacing, breakpoints, styles = {}) {
	  // undefined/null or `spacing` <= 0
	  if (!spacing || spacing <= 0) {
	    return [];
	  } // in case of string/number `spacing`


	  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
	    return [styles[`spacing-xs-${String(spacing)}`]];
	  } // in case of object `spacing`


	  const spacingStyles = [];
	  breakpoints.forEach(breakpoint => {
	    const value = spacing[breakpoint];

	    if (Number(value) > 0) {
	      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);
	    }
	  });
	  return spacingStyles;
	} // Default CSS values
	// flex: '0 1 auto',
	// flexDirection: 'row',
	// alignItems: 'flex-start',
	// flexWrap: 'nowrap',
	// justifyContent: 'flex-start',

	const GridRoot = styled('div', {
	  name: 'MuiGrid',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      container,
	      direction,
	      item,
	      spacing,
	      wrap,
	      zeroMinWidth,
	      breakpoints
	    } = ownerState;
	    let spacingStyles = []; // in case of grid item

	    if (container) {
	      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);
	    }

	    const breakpointsStyles = [];
	    breakpoints.forEach(breakpoint => {
	      const value = ownerState[breakpoint];

	      if (value) {
	        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);
	      }
	    });
	    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
	  }
	})(({
	  ownerState
	}) => _extends({
	  boxSizing: 'border-box'
	}, ownerState.container && {
	  display: 'flex',
	  flexWrap: 'wrap',
	  width: '100%'
	}, ownerState.item && {
	  margin: 0 // For instance, it's useful when used with a `figure` element.

	}, ownerState.zeroMinWidth && {
	  minWidth: 0
	}, ownerState.wrap !== 'wrap' && {
	  flexWrap: ownerState.wrap
	}), generateDirection, generateRowGap, generateColumnGap, generateGrid);
	function resolveSpacingClasses(spacing, breakpoints) {
	  // undefined/null or `spacing` <= 0
	  if (!spacing || spacing <= 0) {
	    return [];
	  } // in case of string/number `spacing`


	  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
	    return [`spacing-xs-${String(spacing)}`];
	  } // in case of object `spacing`


	  const classes = [];
	  breakpoints.forEach(breakpoint => {
	    const value = spacing[breakpoint];

	    if (Number(value) > 0) {
	      const className = `spacing-${breakpoint}-${String(value)}`;
	      classes.push(className);
	    }
	  });
	  return classes;
	}

	const useUtilityClasses$Z = ownerState => {
	  const {
	    classes,
	    container,
	    direction,
	    item,
	    spacing,
	    wrap,
	    zeroMinWidth,
	    breakpoints
	  } = ownerState;
	  let spacingClasses = []; // in case of grid item

	  if (container) {
	    spacingClasses = resolveSpacingClasses(spacing, breakpoints);
	  }

	  const breakpointsClasses = [];
	  breakpoints.forEach(breakpoint => {
	    const value = ownerState[breakpoint];

	    if (value) {
	      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
	    }
	  });
	  const slots = {
	    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
	  };
	  return composeClasses(slots, getGridUtilityClass, classes);
	};

	const Grid = /*#__PURE__*/react.exports.forwardRef(function Grid(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiGrid'
	  });
	  const {
	    breakpoints
	  } = useTheme();
	  const props = extendSxProp(themeProps);

	  const {
	    className,
	    columns: columnsProp,
	    columnSpacing: columnSpacingProp,
	    component = 'div',
	    container = false,
	    direction = 'row',
	    item = false,
	    rowSpacing: rowSpacingProp,
	    spacing = 0,
	    wrap = 'wrap',
	    zeroMinWidth = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1a);

	  const rowSpacing = rowSpacingProp || spacing;
	  const columnSpacing = columnSpacingProp || spacing;
	  const columnsContext = react.exports.useContext(GridContext); // columns set with default breakpoint unit of 12

	  const columns = container ? columnsProp || 12 : columnsContext;
	  const breakpointsValues = {};

	  const otherFiltered = _extends({}, other);

	  breakpoints.keys.forEach(breakpoint => {
	    if (other[breakpoint] != null) {
	      breakpointsValues[breakpoint] = other[breakpoint];
	      delete otherFiltered[breakpoint];
	    }
	  });

	  const ownerState = _extends({}, props, {
	    columns,
	    container,
	    direction,
	    item,
	    rowSpacing,
	    columnSpacing,
	    wrap,
	    zeroMinWidth,
	    spacing
	  }, breakpointsValues, {
	    breakpoints: breakpoints.keys
	  });

	  const classes = useUtilityClasses$Z(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridContext.Provider, {
	    value: columns,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      as: component,
	      ref: ref
	    }, otherFiltered))
	  });
	});
	Grid.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The number of columns.
	   * @default 12
	   */
	  columns: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number, propTypes.exports.object]),

	  /**
	   * Defines the horizontal space between the type `item` components.
	   * It overrides the value of the `spacing` prop.
	   */
	  columnSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the component will have the flex *container* behavior.
	   * You should be wrapping *items* with a *container*.
	   * @default false
	   */
	  container: propTypes.exports.bool,

	  /**
	   * Defines the `flex-direction` style property.
	   * It is applied for all screen sizes.
	   * @default 'row'
	   */
	  direction: propTypes.exports.oneOfType([propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.exports.object]),

	  /**
	   * If `true`, the component will have the flex *item* behavior.
	   * You should be wrapping *items* with a *container*.
	   * @default false
	   */
	  item: propTypes.exports.bool,

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  lg: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `md` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  md: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * Defines the vertical space between the type `item` components.
	   * It overrides the value of the `spacing` prop.
	   */
	  rowSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  sm: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * Defines the space between the type `item` components.
	   * It can only be used on a type `container` component.
	   * @default 0
	   */
	  spacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Defines the `flex-wrap` style property.
	   * It's applied for all screen sizes.
	   * @default 'wrap'
	   */
	  wrap: propTypes.exports.oneOf(['nowrap', 'wrap-reverse', 'wrap']),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
	   * @default false
	   */
	  xl: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If a number, it sets the number of columns the grid item uses.
	   * It can't be greater than the total number of columns of the container (12 by default).
	   * If 'auto', the grid item's width matches its content.
	   * If false, the prop is ignored.
	   * If true, the grid item's width grows to use the space available in the grid container.
	   * The value is applied for all the screen sizes with the lowest priority.
	   * @default false
	   */
	  xs: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.bool]),

	  /**
	   * If `true`, it sets `min-width: 0` on the item.
	   * Refer to the limitations section of the documentation to better understand the use case.
	   * @default false
	   */
	  zeroMinWidth: propTypes.exports.bool
	} ;

	{
	  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat

	  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {
	    direction: requireProp('container'),
	    lg: requireProp('item'),
	    md: requireProp('item'),
	    sm: requireProp('item'),
	    spacing: requireProp('container'),
	    wrap: requireProp('container'),
	    xs: requireProp('item'),
	    zeroMinWidth: requireProp('item')
	  });
	}

	const Grid2 = createGrid({
	  createStyledComponent: styled('div', {
	    name: 'MuiGrid2',
	    overridesResolver: (props, styles) => styles.root
	  }),
	  componentName: 'MuiGrid2',
	  // eslint-disable-next-line material-ui/mui-name-matches-component-name
	  useThemeProps: inProps => useThemeProps({
	    props: inProps,
	    name: 'MuiGrid2'
	  })
	});
	Grid2.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
	const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
	const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	generateUtilityClasses('MuiGrid2', ['root', 'container', 'item', 'zeroMinWidth', // spacings
	...SPACINGS.map(spacing => `spacing-xs-${spacing}`), // direction values
	...DIRECTIONS.map(direction => `direction-xs-${direction}`), // wrap values
	...WRAPS.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints
	...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);

	const _excluded$19 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

	function getScale(value) {
	  return `scale(${value}, ${value ** 2})`;
	}

	const styles$2 = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};
	/*
	 TODO v6: remove
	 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
	 */

	const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
	/**
	 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
	 * [Popover](/material-ui/react-popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Grow = /*#__PURE__*/react.exports.forwardRef(function Grow(props, ref) {
	  const {
	    addEndListener,
	    appear = true,
	    children,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = 'auto',
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Transition
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$19);

	  const timer = react.exports.useRef();
	  const autoTimeout = react.exports.useRef();
	  const theme = useTheme();
	  const nodeRef = react.exports.useRef(null);
	  const foreignRef = useForkRef(children.ref, ref);
	  const handleRef = useForkRef(nodeRef, foreignRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    let duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay,
	      easing: transitionTimingFunction
	    })].join(',');

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    let duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay: isWebKit154 ? delay : delay || duration * 0.333,
	      easing: transitionTimingFunction
	    })].join(',');
	    node.style.opacity = 0;
	    node.style.transform = getScale(0.75);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);

	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }

	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          transform: getScale(0.75),
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$2[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Grow.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: propTypes.exports.oneOfType([propTypes.exports.shape({
	    enter: propTypes.exports.string,
	    exit: propTypes.exports.string
	  }), propTypes.exports.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  timeout: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;
	Grow.muiSupportAuto = true;

	/**
	 * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
	 */

	function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
	  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
	  const [match, setMatch] = react.exports.useState(() => {
	    if (noSsr && supportMatchMedia) {
	      return matchMedia(query).matches;
	    }

	    if (ssrMatchMedia) {
	      return ssrMatchMedia(query).matches;
	    } // Once the component is mounted, we rely on the
	    // event listeners to return the correct matches value.


	    return defaultMatches;
	  });
	  useEnhancedEffect(() => {
	    let active = true;

	    if (!supportMatchMedia) {
	      return undefined;
	    }

	    const queryList = matchMedia(query);

	    const updateMatch = () => {
	      // Workaround Safari wrong implementation of matchMedia
	      // TODO can we remove it?
	      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
	      if (active) {
	        setMatch(queryList.matches);
	      }
	    };

	    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped

	    queryList.addListener(updateMatch);
	    return () => {
	      active = false;
	      queryList.removeListener(updateMatch);
	    };
	  }, [query, matchMedia, supportMatchMedia]);
	  return match;
	} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814


	const maybeReactUseSyncExternalStore = React$1['useSyncExternalStore' + ''];

	function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {
	  const getDefaultSnapshot = react.exports.useCallback(() => defaultMatches, [defaultMatches]);
	  const getServerSnapshot = react.exports.useMemo(() => {
	    if (ssrMatchMedia !== null) {
	      const {
	        matches
	      } = ssrMatchMedia(query);
	      return () => matches;
	    }

	    return getDefaultSnapshot;
	  }, [getDefaultSnapshot, query, ssrMatchMedia]);
	  const [getSnapshot, subscribe] = react.exports.useMemo(() => {
	    if (matchMedia === null) {
	      return [getDefaultSnapshot, () => () => {}];
	    }

	    const mediaQueryList = matchMedia(query);
	    return [() => mediaQueryList.matches, notify => {
	      // TODO: Use `addEventListener` once support for Safari < 14 is dropped
	      mediaQueryList.addListener(notify);
	      return () => {
	        mediaQueryList.removeListener(notify);
	      };
	    }];
	  }, [getDefaultSnapshot, matchMedia, query]);
	  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	  return match;
	}

	function useMediaQuery(queryInput, options = {}) {
	  const theme = useTheme$2(); // Wait for jsdom to support the match media feature.
	  // All the browsers MUI support have this built-in.
	  // This defensive check is here for simplicity.
	  // Most of the time, the match media logic isn't central to people tests.

	  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
	  const {
	    defaultMatches = false,
	    matchMedia = supportMatchMedia ? window.matchMedia : null,
	    ssrMatchMedia = null,
	    noSsr
	  } = getThemeProps({
	    name: 'MuiUseMediaQuery',
	    props: options,
	    theme
	  });

	  {
	    if (typeof queryInput === 'function' && theme === null) {
	      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
	    }
	  }

	  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
	  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable

	  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
	  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useDebugValue({
	      query,
	      match
	    });
	  }

	  return match;
	}

	const _excluded$18 = ["initialWidth", "width"];
	const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // By default, returns true if screen width is the same or greater than the given breakpoint.

	const isWidthUp = (breakpoint, width, inclusive = true) => {
	  if (inclusive) {
	    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
	  }

	  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
	}; // By default, returns true if screen width is the same or less than the given breakpoint.

	const isWidthDown = (breakpoint, width, inclusive = false) => {
	  if (inclusive) {
	    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
	  }

	  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
	};

	const withWidth = (options = {}) => Component => {
	  const {
	    withTheme: withThemeOption = false,
	    noSSR = false,
	    initialWidth: initialWidthOption
	  } = options;

	  function WithWidth(props) {
	    const contextTheme = useTheme();
	    const theme = props.theme || contextTheme;

	    const _getThemeProps = getThemeProps({
	      theme,
	      name: 'MuiWithWidth',
	      props
	    }),
	          {
	      initialWidth,
	      width
	    } = _getThemeProps,
	          other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded$18);

	    const [mountedState, setMountedState] = react.exports.useState(false);
	    useEnhancedEffect(() => {
	      setMountedState(true);
	    }, []);
	    /**
	     * innerWidth |xs      sm      md      lg      xl
	     *            |-------|-------|-------|-------|------>
	     * width      |  xs   |  sm   |  md   |  lg   |  xl
	     */

	    const keys = theme.breakpoints.keys.slice().reverse();
	    const widthComputed = keys.reduce((output, key) => {
	      // eslint-disable-next-line react-hooks/rules-of-hooks
	      const matches = useMediaQuery(theme.breakpoints.up(key));
	      return !output && matches ? key : output;
	    }, null);

	    const more = _extends({
	      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
	    }, withThemeOption ? {
	      theme
	    } : {}, other); // When rendering the component on the server,
	    // we have no idea about the client browser screen width.
	    // In order to prevent blinks and help the reconciliation of the React tree
	    // we are not rendering the child component.
	    //
	    // An alternative is to use the `initialWidth` property.


	    if (more.width === undefined) {
	      return null;
	    }

	    return /*#__PURE__*/jsxRuntime.exports.jsx(Component, _extends({}, more));
	  }

	  WithWidth.propTypes = {
	    /**
	     * As `window.innerWidth` is unavailable on the server,
	     * we default to rendering an empty component during the first mount.
	     * You might want to use a heuristic to approximate
	     * the screen width of the client browser screen width.
	     *
	     * For instance, you could be using the user-agent or the client-hints.
	     * https://caniuse.com/#search=client%20hint
	     */
	    initialWidth: propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

	    /**
	     * @ignore
	     */
	    theme: propTypes.exports.object,

	    /**
	     * Bypass the width calculation logic.
	     */
	    width: propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
	  } ;

	  {
	    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;
	  }

	  return WithWidth;
	};

	/**
	 * @ignore - internal component.
	 */

	function HiddenJs(props) {
	  const {
	    children,
	    only,
	    width
	  } = props;
	  const theme = useTheme();
	  let visible = true; // `only` check is faster to get out sooner if used.

	  if (only) {
	    if (Array.isArray(only)) {
	      for (let i = 0; i < only.length; i += 1) {
	        const breakpoint = only[i];

	        if (width === breakpoint) {
	          visible = false;
	          break;
	        }
	      }
	    } else if (only && width === only) {
	      visible = false;
	    }
	  } // Allow `only` to be combined with other props. If already hidden, no need to check others.


	  if (visible) {
	    // determine visibility based on the smallest size up
	    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
	      const breakpoint = theme.breakpoints.keys[i];
	      const breakpointUp = props[`${breakpoint}Up`];
	      const breakpointDown = props[`${breakpoint}Down`];

	      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
	        visible = false;
	        break;
	      }
	    }
	  }

	  if (!visible) {
	    return null;
	  }

	  return children;
	}

	HiddenJs.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Specify which implementation to use.  'js' is the default, 'css' works better for
	   * server-side rendering.
	   */
	  implementation: propTypes.exports.oneOf(['js', 'css']),

	  /**
	   * You can use this prop when choosing the `js` implementation with server-side rendering.
	   *
	   * As `window.innerWidth` is unavailable on the server,
	   * we default to rendering an empty component during the first mount.
	   * You might want to use a heuristic to approximate
	   * the screen width of the client browser screen width.
	   *
	   * For instance, you could be using the user-agent or the client-hints.
	   * https://caniuse.com/#search=client%20hint
	   */
	  initialWidth: propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  lgDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  lgUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  mdDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  mdUp: propTypes.exports.bool,

	  /**
	   * Hide the given breakpoint(s).
	   */
	  only: propTypes.exports.oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  smDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  smUp: propTypes.exports.bool,

	  /**
	   * @ignore
	   * width prop provided by withWidth decorator.
	   */
	  width: propTypes.exports.string.isRequired,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  xlDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  xlUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  xsDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  xsUp: propTypes.exports.bool
	};

	{
	  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);
	}

	withWidth()(HiddenJs);

	generateUtilityClasses('PrivateHiddenCss', ['root', 'xlDown', 'xlUp', 'onlyXl', 'lgDown', 'lgUp', 'onlyLg', 'mdDown', 'mdUp', 'onlyMd', 'smDown', 'smUp', 'onlySm', 'xsDown', 'xsUp', 'onlyXs']);

	styled('div', {
	  name: 'PrivateHiddenCss',
	  slot: 'Root'
	})(({
	  theme,
	  ownerState
	}) => {
	  const hidden = {
	    display: 'none'
	  };
	  return _extends({}, ownerState.breakpoints.map(({
	    breakpoint,
	    dir
	  }) => {
	    if (dir === 'only') {
	      return {
	        [theme.breakpoints.only(breakpoint)]: hidden
	      };
	    }

	    return dir === 'up' ? {
	      [theme.breakpoints.up(breakpoint)]: hidden
	    } : {
	      [theme.breakpoints.down(breakpoint)]: hidden
	    };
	  }).reduce((r, o) => {
	    Object.keys(o).forEach(k => {
	      r[k] = o[k];
	    });
	    return r;
	  }, {}));
	});

	({
	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Specify which implementation to use.  'js' is the default, 'css' works better for
	   * server-side rendering.
	   */
	  implementation: propTypes.exports.oneOf(['js', 'css']),

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  lgDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  lgUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  mdDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  mdUp: propTypes.exports.bool,

	  /**
	   * Hide the given breakpoint(s).
	   */
	  only: propTypes.exports.oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  smDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  smUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  xlDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  xlUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   */
	  xsDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   */
	  xsUp: propTypes.exports.bool
	}) ;

	({
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Specify which implementation to use.  'js' is the default, 'css' works better for
	   * server-side rendering.
	   * @default 'js'
	   */
	  implementation: propTypes.exports.oneOf(['css', 'js']),

	  /**
	   * You can use this prop when choosing the `js` implementation with server-side rendering.
	   *
	   * As `window.innerWidth` is unavailable on the server,
	   * we default to rendering an empty component during the first mount.
	   * You might want to use a heuristic to approximate
	   * the screen width of the client browser screen width.
	   *
	   * For instance, you could be using the user-agent or the client-hints.
	   * https://caniuse.com/#search=client%20hint
	   */
	  initialWidth: propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

	  /**
	   * If `true`, screens this size and down are hidden.
	   * @default false
	   */
	  lgDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   * @default false
	   */
	  lgUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   * @default false
	   */
	  mdDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   * @default false
	   */
	  mdUp: propTypes.exports.bool,

	  /**
	   * Hide the given breakpoint(s).
	   */
	  only: propTypes.exports.oneOfType([propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired)]),

	  /**
	   * If `true`, screens this size and down are hidden.
	   * @default false
	   */
	  smDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   * @default false
	   */
	  smUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   * @default false
	   */
	  xlDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   * @default false
	   */
	  xlUp: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and down are hidden.
	   * @default false
	   */
	  xsDown: propTypes.exports.bool,

	  /**
	   * If `true`, screens this size and up are hidden.
	   * @default false
	   */
	  xsUp: propTypes.exports.bool
	}) ;

	function getIconUtilityClass(slot) {
	  return generateUtilityClass('MuiIcon', slot);
	}
	generateUtilityClasses('MuiIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$17 = ["baseClassName", "className", "color", "component", "fontSize"];

	const useUtilityClasses$Y = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getIconUtilityClass, classes);
	};

	const IconRoot = styled('span', {
	  name: 'MuiIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => ({
	  userSelect: 'none',
	  width: '1em',
	  height: '1em',
	  // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
	  // To remove at some point.
	  overflow: 'hidden',
	  display: 'inline-block',
	  // allow overflow hidden to take action
	  textAlign: 'center',
	  // support non-square icon
	  flexShrink: 0,
	  fontSize: {
	    inherit: 'inherit',
	    small: theme.typography.pxToRem(20),
	    medium: theme.typography.pxToRem(24),
	    large: theme.typography.pxToRem(36)
	  }[ownerState.fontSize],
	  // TODO v5 deprecate, v6 remove for sx
	  color: {
	    primary: (theme.vars || theme).palette.primary.main,
	    secondary: (theme.vars || theme).palette.secondary.main,
	    info: (theme.vars || theme).palette.info.main,
	    success: (theme.vars || theme).palette.success.main,
	    warning: (theme.vars || theme).palette.warning.main,
	    action: (theme.vars || theme).palette.action.active,
	    error: (theme.vars || theme).palette.error.main,
	    disabled: (theme.vars || theme).palette.action.disabled,
	    inherit: undefined
	  }[ownerState.color]
	}));
	const Icon = /*#__PURE__*/react.exports.forwardRef(function Icon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIcon'
	  });

	  const {
	    baseClassName = 'material-icons',
	    className,
	    color = 'inherit',
	    component: Component = 'span',
	    fontSize = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$17);

	  const ownerState = _extends({}, props, {
	    baseClassName,
	    color,
	    component: Component,
	    fontSize
	  });

	  const classes = useUtilityClasses$Y(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(IconRoot, _extends({
	    as: Component,
	    className: clsx(baseClassName, // Prevent the translation of the text content.
	    // The font relies on the exact text content to render the icon.
	    'notranslate', classes.root, className),
	    ownerState: ownerState,
	    "aria-hidden": true,
	    ref: ref
	  }, other));
	});
	Icon.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
	   * other base class that suits the icon font you're using (e.g. material-icons-rounded, fas, etc).
	   * @default 'material-icons'
	   */
	  baseClassName: propTypes.exports.string,

	  /**
	   * The name of the icon font ligature.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'inherit'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
	   * @default 'medium'
	   */
	  fontSize: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'large', 'medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;
	Icon.muiName = 'Icon';

	function getImageListUtilityClass(slot) {
	  return generateUtilityClass('MuiImageList', slot);
	}
	generateUtilityClasses('MuiImageList', ['root', 'masonry', 'quilted', 'standard', 'woven']);

	/**
	 * @ignore - internal component.
	 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
	 */

	const ImageListContext = /*#__PURE__*/react.exports.createContext({});

	{
	  ImageListContext.displayName = 'ImageListContext';
	}

	const _excluded$16 = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"];

	const useUtilityClasses$X = ownerState => {
	  const {
	    classes,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant]
	  };
	  return composeClasses(slots, getImageListUtilityClass, classes);
	};

	const ImageListRoot = styled('ul', {
	  name: 'MuiImageList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant]];
	  }
	})(({
	  ownerState
	}) => {
	  return _extends({
	    display: 'grid',
	    overflowY: 'auto',
	    listStyle: 'none',
	    padding: 0,
	    // Add iOS momentum scrolling for iOS < 13.0
	    WebkitOverflowScrolling: 'touch'
	  }, ownerState.variant === 'masonry' && {
	    display: 'block'
	  });
	});
	const ImageList = /*#__PURE__*/react.exports.forwardRef(function ImageList(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiImageList'
	  });

	  const {
	    children,
	    className,
	    cols = 2,
	    component = 'ul',
	    rowHeight = 'auto',
	    gap = 4,
	    style: styleProp,
	    variant = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$16);

	  const contextValue = react.exports.useMemo(() => ({
	    rowHeight,
	    gap,
	    variant
	  }), [rowHeight, gap, variant]);
	  react.exports.useEffect(() => {
	    {
	      // Detect Internet Explorer 8+
	      if (document !== undefined && 'objectFit' in document.documentElement.style === false) {
	        console.error(['MUI: ImageList v5+ no longer natively supports Internet Explorer.', 'Use v4 of this component instead, or polyfill CSS object-fit.'].join('\n'));
	      }
	    }
	  }, []);
	  const style = variant === 'masonry' ? _extends({
	    columnCount: cols,
	    columnGap: gap
	  }, styleProp) : _extends({
	    gridTemplateColumns: `repeat(${cols}, 1fr)`,
	    gap
	  }, styleProp);

	  const ownerState = _extends({}, props, {
	    component,
	    gap,
	    rowHeight,
	    variant
	  });

	  const classes = useUtilityClasses$X(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ImageListRoot, _extends({
	    as: component,
	    className: clsx(classes.root, classes[variant], className),
	    ref: ref,
	    style: style,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ImageListContext.Provider, {
	      value: contextValue,
	      children: children
	    })
	  }));
	});
	ImageList.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `ImageListItem`s.
	   */
	  children: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Number of columns.
	   * @default 2
	   */
	  cols: integerPropType,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The gap between items in px.
	   * @default 4
	   */
	  gap: propTypes.exports.number,

	  /**
	   * The height of one row in px.
	   * @default 'auto'
	   */
	  rowHeight: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number]),

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['masonry', 'quilted', 'standard', 'woven']), propTypes.exports.string])
	} ;

	function getImageListItemUtilityClass(slot) {
	  return generateUtilityClass('MuiImageListItem', slot);
	}
	const imageListItemClasses = generateUtilityClasses('MuiImageListItem', ['root', 'img', 'standard', 'woven', 'masonry', 'quilted']);

	const _excluded$15 = ["children", "className", "cols", "component", "rows", "style"];

	const useUtilityClasses$W = ownerState => {
	  const {
	    classes,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant],
	    img: ['img']
	  };
	  return composeClasses(slots, getImageListItemUtilityClass, classes);
	};

	const ImageListItemRoot = styled('li', {
	  name: 'MuiImageListItem',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${imageListItemClasses.img}`]: styles.img
	    }, styles.root, styles[ownerState.variant]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-block',
	  position: 'relative',
	  lineHeight: 0
	}, ownerState.variant === 'standard' && {
	  // For titlebar under list item
	  display: 'flex',
	  flexDirection: 'column'
	}, ownerState.variant === 'woven' && {
	  height: '100%',
	  alignSelf: 'center',
	  '&:nth-of-type(even)': {
	    height: '70%'
	  }
	}, {
	  [`& .${imageListItemClasses.img}`]: _extends({
	    objectFit: 'cover',
	    width: '100%',
	    height: '100%'
	  }, ownerState.variant === 'standard' && {
	    height: 'auto',
	    flexGrow: 1
	  })
	}));
	const ImageListItem = /*#__PURE__*/react.exports.forwardRef(function ImageListItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiImageListItem'
	  }); // TODO: - Use jsdoc @default?: "cols rows default values are for docs only"

	  const {
	    children,
	    className,
	    cols = 1,
	    component = 'li',
	    rows = 1,
	    style
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$15);

	  const {
	    rowHeight = 'auto',
	    gap,
	    variant
	  } = react.exports.useContext(ImageListContext);
	  let height = 'auto';

	  if (variant === 'woven') {
	    height = undefined;
	  } else if (rowHeight !== 'auto') {
	    height = rowHeight * rows + gap * (rows - 1);
	  }

	  const ownerState = _extends({}, props, {
	    cols,
	    component,
	    gap,
	    rowHeight,
	    rows,
	    variant
	  });

	  const classes = useUtilityClasses$W(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ImageListItemRoot, _extends({
	    as: component,
	    className: clsx(classes.root, classes[variant], className),
	    ref: ref,
	    style: _extends({
	      height,
	      gridColumnEnd: variant !== 'masonry' ? `span ${cols}` : undefined,
	      gridRowEnd: variant !== 'masonry' ? `span ${rows}` : undefined,
	      marginBottom: variant === 'masonry' ? gap : undefined
	    }, style),
	    ownerState: ownerState
	  }, other, {
	    children: react.exports.Children.map(children, child => {
	      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	        return null;
	      }

	      {
	        if (reactIs.exports.isFragment(child)) {
	          console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	        }
	      }

	      if (child.type === 'img' || isMuiElement(child, ['Image'])) {
	        return /*#__PURE__*/react.exports.cloneElement(child, {
	          className: clsx(classes.img, child.props.className)
	        });
	      }

	      return child;
	    })
	  }));
	});
	ImageListItem.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally an `<img>`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Width of the item in number of grid columns.
	   * @default 1
	   */
	  cols: integerPropType,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Height of the item in number of grid rows.
	   * @default 1
	   */
	  rows: integerPropType,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getImageListItemBarUtilityClass(slot) {
	  return generateUtilityClass('MuiImageListItemBar', slot);
	}
	generateUtilityClasses('MuiImageListItemBar', ['root', 'positionBottom', 'positionTop', 'positionBelow', 'titleWrap', 'titleWrapBottom', 'titleWrapTop', 'titleWrapBelow', 'titleWrapActionPosLeft', 'titleWrapActionPosRight', 'title', 'subtitle', 'actionIcon', 'actionIconActionPosLeft', 'actionIconActionPosRight']);

	const _excluded$14 = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"];

	const useUtilityClasses$V = ownerState => {
	  const {
	    classes,
	    position,
	    actionIcon,
	    actionPosition
	  } = ownerState;
	  const slots = {
	    root: ['root', `position${capitalize(position)}`],
	    titleWrap: ['titleWrap', `titleWrap${capitalize(position)}`, actionIcon && `titleWrapActionPos${capitalize(actionPosition)}`],
	    title: ['title'],
	    subtitle: ['subtitle'],
	    actionIcon: ['actionIcon', `actionIconActionPos${capitalize(actionPosition)}`]
	  };
	  return composeClasses(slots, getImageListItemBarUtilityClass, classes);
	};

	const ImageListItemBarRoot = styled('div', {
	  name: 'MuiImageListItemBar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`position${capitalize(ownerState.position)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  return _extends({
	    position: 'absolute',
	    left: 0,
	    right: 0,
	    background: 'rgba(0, 0, 0, 0.5)',
	    display: 'flex',
	    alignItems: 'center',
	    fontFamily: theme.typography.fontFamily
	  }, ownerState.position === 'bottom' && {
	    bottom: 0
	  }, ownerState.position === 'top' && {
	    top: 0
	  }, ownerState.position === 'below' && {
	    position: 'relative',
	    background: 'transparent',
	    alignItems: 'normal'
	  });
	});
	const ImageListItemBarTitleWrap = styled('div', {
	  name: 'MuiImageListItemBar',
	  slot: 'TitleWrap',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.titleWrap, styles[`titleWrap${capitalize(ownerState.position)}`], ownerState.actionIcon && styles[`titleWrapActionPos${capitalize(ownerState.actionPosition)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  return _extends({
	    flexGrow: 1,
	    padding: '12px 16px',
	    color: (theme.vars || theme).palette.common.white,
	    overflow: 'hidden'
	  }, ownerState.position === 'below' && {
	    padding: '6px 0 12px',
	    color: 'inherit'
	  }, ownerState.actionIcon && ownerState.actionPosition === 'left' && {
	    paddingLeft: 0
	  }, ownerState.actionIcon && ownerState.actionPosition === 'right' && {
	    paddingRight: 0
	  });
	});
	const ImageListItemBarTitle = styled('div', {
	  name: 'MuiImageListItemBar',
	  slot: 'Title',
	  overridesResolver: (props, styles) => styles.title
	})(({
	  theme
	}) => {
	  return {
	    fontSize: theme.typography.pxToRem(16),
	    lineHeight: '24px',
	    textOverflow: 'ellipsis',
	    overflow: 'hidden',
	    whiteSpace: 'nowrap'
	  };
	});
	const ImageListItemBarSubtitle = styled('div', {
	  name: 'MuiImageListItemBar',
	  slot: 'Subtitle',
	  overridesResolver: (props, styles) => styles.subtitle
	})(({
	  theme
	}) => {
	  return {
	    fontSize: theme.typography.pxToRem(12),
	    lineHeight: 1,
	    textOverflow: 'ellipsis',
	    overflow: 'hidden',
	    whiteSpace: 'nowrap'
	  };
	});
	const ImageListItemBarActionIcon = styled('div', {
	  name: 'MuiImageListItemBar',
	  slot: 'ActionIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.actionIcon, styles[`actionIconActionPos${capitalize(ownerState.actionPosition)}`]];
	  }
	})(({
	  ownerState
	}) => {
	  return _extends({}, ownerState.actionPosition === 'left' && {
	    order: -1
	  });
	});
	const ImageListItemBar = /*#__PURE__*/react.exports.forwardRef(function ImageListItemBar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiImageListItemBar'
	  });

	  const {
	    actionIcon,
	    actionPosition = 'right',
	    className,
	    subtitle,
	    title,
	    position = 'bottom'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$14);

	  const ownerState = _extends({}, props, {
	    position,
	    actionPosition
	  });

	  const classes = useUtilityClasses$V(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ImageListItemBarRoot, _extends({
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsxs(ImageListItemBarTitleWrap, {
	      ownerState: ownerState,
	      className: classes.titleWrap,
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(ImageListItemBarTitle, {
	        className: classes.title,
	        children: title
	      }), subtitle ? /*#__PURE__*/jsxRuntime.exports.jsx(ImageListItemBarSubtitle, {
	        className: classes.subtitle,
	        children: subtitle
	      }) : null]
	    }), actionIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(ImageListItemBarActionIcon, {
	      ownerState: ownerState,
	      className: classes.actionIcon,
	      children: actionIcon
	    }) : null]
	  }));
	});
	ImageListItemBar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * An IconButton element to be used as secondary action target
	   * (primary action target is the item itself).
	   */
	  actionIcon: propTypes.exports.node,

	  /**
	   * Position of secondary action IconButton.
	   * @default 'right'
	   */
	  actionPosition: propTypes.exports.oneOf(['left', 'right']),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Position of the title bar.
	   * @default 'bottom'
	   */
	  position: propTypes.exports.oneOf(['below', 'bottom', 'top']),

	  /**
	   * String or element serving as subtitle (support text).
	   */
	  subtitle: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Title to be displayed.
	   */
	  title: propTypes.exports.node
	} ;

	const _excluded$13 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "type"];

	const useUtilityClasses$U = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const InputRoot = styled(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';

	  if (theme.vars) {
	    bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
	  }

	  return _extends({
	    position: 'relative'
	  }, ownerState.formControl && {
	    'label + &': {
	      marginTop: 16
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&.${inputClasses.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${inputClasses.error}:after`]: {
	      borderBottomColor: (theme.vars || theme).palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red

	    },
	    '&:before': {
	      borderBottom: `1px solid ${bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&:hover:not(.${inputClasses.disabled}):before`]: {
	      borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        borderBottom: `1px solid ${bottomLineColor}`
	      }
	    },
	    [`&.${inputClasses.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  });
	});
	const InputInput = styled(InputBaseComponent, {
	  name: 'MuiInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})({});
	const Input = /*#__PURE__*/react.exports.forwardRef(function Input(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInput'
	  });

	  const {
	    disableUnderline,
	    components = {},
	    componentsProps: componentsPropsProp,
	    fullWidth = false,
	    inputComponent = 'input',
	    multiline = false,
	    type = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$13);

	  const classes = useUtilityClasses$U(props);
	  const ownerState = {
	    disableUnderline
	  };
	  const inputComponentsProps = {
	    root: {
	      ownerState
	    }
	  };
	  const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase, _extends({
	    components: _extends({
	      Root: InputRoot,
	      Input: InputInput
	    }, components),
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	Input.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary']), propTypes.exports.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.object,
	    root: propTypes.exports.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` will not have an underline.
	   */
	  disableUnderline: propTypes.exports.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.exports.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: propTypes.exports.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: propTypes.exports.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any
	} ;
	Input.muiName = 'Input';

	function getInputAdornmentUtilityClass(slot) {
	  return generateUtilityClass('MuiInputAdornment', slot);
	}
	const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);

	var _span$2;

	const _excluded$12 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];

	const overridesResolver$4 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
	};

	const useUtilityClasses$T = ownerState => {
	  const {
	    classes,
	    disablePointerEvents,
	    hiddenLabel,
	    position,
	    size,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getInputAdornmentUtilityClass, classes);
	};

	const InputAdornmentRoot = styled('div', {
	  name: 'MuiInputAdornment',
	  slot: 'Root',
	  overridesResolver: overridesResolver$4
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  height: '0.01em',
	  // Fix IE11 flexbox alignment. To remove at some point.
	  maxHeight: '2em',
	  alignItems: 'center',
	  whiteSpace: 'nowrap',
	  color: (theme.vars || theme).palette.action.active
	}, ownerState.variant === 'filled' && {
	  // Styles applied to the root element if `variant="filled"`.
	  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {
	    marginTop: 16
	  }
	}, ownerState.position === 'start' && {
	  // Styles applied to the root element if `position="start"`.
	  marginRight: 8
	}, ownerState.position === 'end' && {
	  // Styles applied to the root element if `position="end"`.
	  marginLeft: 8
	}, ownerState.disablePointerEvents === true && {
	  // Styles applied to the root element if `disablePointerEvents={true}`.
	  pointerEvents: 'none'
	}));
	const InputAdornment = /*#__PURE__*/react.exports.forwardRef(function InputAdornment(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInputAdornment'
	  });

	  const {
	    children,
	    className,
	    component = 'div',
	    disablePointerEvents = false,
	    disableTypography = false,
	    position,
	    variant: variantProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$12);

	  const muiFormControl = useFormControl() || {};
	  let variant = variantProp;

	  if (variantProp && muiFormControl.variant) {
	    {
	      if (variantProp === muiFormControl.variant) {
	        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
	      }
	    }
	  }

	  if (muiFormControl && !variant) {
	    variant = muiFormControl.variant;
	  }

	  const ownerState = _extends({}, props, {
	    hiddenLabel: muiFormControl.hiddenLabel,
	    size: muiFormControl.size,
	    disablePointerEvents,
	    position,
	    variant
	  });

	  const classes = useUtilityClasses$T(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext.Provider, {
	    value: null,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(InputAdornmentRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntime.exports.jsx(Typography, {
	        color: "text.secondary",
	        children: children
	      }) : /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	        children: [position === 'start' ?
	        /* notranslate needed while Google Translate will not fix zero-width space issue */
	        _span$2 || (_span$2 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	          className: "notranslate",
	          children: "\u200B"
	        })) : null, children]
	      })
	    }))
	  });
	});
	InputAdornment.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally an `IconButton` or string.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Disable pointer events on the root.
	   * This allows for the content of the adornment to focus the `input` on click.
	   * @default false
	   */
	  disablePointerEvents: propTypes.exports.bool,

	  /**
	   * If children is a string then disable wrapping in a Typography component.
	   * @default false
	   */
	  disableTypography: propTypes.exports.bool,

	  /**
	   * The position this adornment should appear relative to the `Input`.
	   */
	  position: propTypes.exports.oneOf(['end', 'start']).isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * Note: If you are using the `TextField` component or the `FormControl` component
	   * you do not have to set this manually.
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;

	function getInputLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiInputLabel', slot);
	}
	generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);

	const _excluded$11 = ["disableAnimation", "margin", "shrink", "variant"];

	const useUtilityClasses$S = ownerState => {
	  const {
	    classes,
	    formControl,
	    size,
	    shrink,
	    disableAnimation,
	    variant,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size === 'small' && 'sizeSmall', variant],
	    asterisk: [required && 'asterisk']
	  };
	  const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
	  return _extends({}, classes, composedClasses);
	};

	const InputLabelRoot = styled(FormLabel, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInputLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formLabelClasses.asterisk}`]: styles.asterisk
	    }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'block',
	  transformOrigin: 'top left',
	  whiteSpace: 'nowrap',
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  maxWidth: '100%'
	}, ownerState.formControl && {
	  position: 'absolute',
	  left: 0,
	  top: 0,
	  // slight alteration to spec spacing to match visual spec result
	  transform: 'translate(0, 20px) scale(1)'
	}, ownerState.size === 'small' && {
	  // Compensation for the `Input.inputSizeSmall` style.
	  transform: 'translate(0, 17px) scale(1)'
	}, ownerState.shrink && {
	  transform: 'translate(0, -1.5px) scale(0.75)',
	  transformOrigin: 'top left',
	  maxWidth: '133%'
	}, !ownerState.disableAnimation && {
	  transition: theme.transitions.create(['color', 'transform', 'max-width'], {
	    duration: theme.transitions.duration.shorter,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.variant === 'filled' && _extends({
	  // Chrome's autofill feature gives the input field a yellow background.
	  // Since the input field is behind the label in the HTML tree,
	  // the input field is drawn last and hides the label with an opaque background color.
	  // zIndex: 1 will raise the label above opaque background-colors of input.
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(12px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 13px) scale(1)'
	}, ownerState.shrink && _extends({
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  transform: 'translate(12px, 7px) scale(0.75)',
	  maxWidth: 'calc(133% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 4px) scale(0.75)'
	})), ownerState.variant === 'outlined' && _extends({
	  // see comment above on filled.zIndex
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(14px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(14px, 9px) scale(1)'
	}, ownerState.shrink && {
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  maxWidth: 'calc(133% - 24px)',
	  transform: 'translate(14px, -9px) scale(0.75)'
	})));
	const InputLabel = /*#__PURE__*/react.exports.forwardRef(function InputLabel(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiInputLabel',
	    props: inProps
	  });

	  const {
	    disableAnimation = false,
	    shrink: shrinkProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$11);

	  const muiFormControl = useFormControl();
	  let shrink = shrinkProp;

	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
	  }

	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['size', 'variant', 'required']
	  });

	  const ownerState = _extends({}, props, {
	    disableAnimation,
	    formControl: muiFormControl,
	    shrink,
	    size: fcs.size,
	    variant: fcs.variant,
	    required: fcs.required
	  });

	  const classes = useUtilityClasses$S(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputLabelRoot, _extends({
	    "data-shrink": shrink,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    classes: classes
	  }));
	});
	InputLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the transition animation is disabled.
	   * @default false
	   */
	  disableAnimation: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` of this label is focused.
	   */
	  focused: propTypes.exports.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.exports.oneOf(['dense']),

	  /**
	   * if `true`, the label will indicate that the `input` is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * If `true`, the label is shrunk.
	   */
	  shrink: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * @default 'normal'
	   */
	  size: propTypes.exports.oneOf(['normal', 'small']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;

	function getLinearProgressUtilityClass(slot) {
	  return generateUtilityClass('MuiLinearProgress', slot);
	}
	generateUtilityClasses('MuiLinearProgress', ['root', 'colorPrimary', 'colorSecondary', 'determinate', 'indeterminate', 'buffer', 'query', 'dashed', 'dashedColorPrimary', 'dashedColorSecondary', 'bar', 'barColorPrimary', 'barColorSecondary', 'bar1Indeterminate', 'bar1Determinate', 'bar1Buffer', 'bar2Indeterminate', 'bar2Buffer']);

	const _excluded$10 = ["className", "color", "value", "valueBuffer", "variant"];

	let _$1 = t => t,
	    _t$1,
	    _t2$1,
	    _t3$1,
	    _t4$1,
	    _t5,
	    _t6;
	const TRANSITION_DURATION = 4; // seconds

	const indeterminate1Keyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
	const indeterminate2Keyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
	const bufferKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));

	const useUtilityClasses$R = ownerState => {
	  const {
	    classes,
	    variant,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, variant],
	    dashed: ['dashed', `dashedColor${capitalize(color)}`],
	    bar1: ['bar', `barColor${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar1Indeterminate', variant === 'determinate' && 'bar1Determinate', variant === 'buffer' && 'bar1Buffer'],
	    bar2: ['bar', variant !== 'buffer' && `barColor${capitalize(color)}`, variant === 'buffer' && `color${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar2Indeterminate', variant === 'buffer' && 'bar2Buffer']
	  };
	  return composeClasses(slots, getLinearProgressUtilityClass, classes);
	};

	const getColorShade = (theme, color) => {
	  if (color === 'inherit') {
	    return 'currentColor';
	  }

	  if (theme.vars) {
	    return theme.vars.palette.LinearProgress[`${color}Bg`];
	  }

	  return theme.palette.mode === 'light' ? lighten(theme.palette[color].main, 0.62) : darken(theme.palette[color].main, 0.5);
	};

	const LinearProgressRoot = styled('span', {
	  name: 'MuiLinearProgress',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`color${capitalize(ownerState.color)}`], styles[ownerState.variant]];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  position: 'relative',
	  overflow: 'hidden',
	  display: 'block',
	  height: 4,
	  zIndex: 0,
	  // Fix Safari's bug during composition of different paint.
	  '@media print': {
	    colorAdjust: 'exact'
	  },
	  backgroundColor: getColorShade(theme, ownerState.color)
	}, ownerState.color === 'inherit' && ownerState.variant !== 'buffer' && {
	  backgroundColor: 'none',
	  '&::before': {
	    content: '""',
	    position: 'absolute',
	    left: 0,
	    top: 0,
	    right: 0,
	    bottom: 0,
	    backgroundColor: 'currentColor',
	    opacity: 0.3
	  }
	}, ownerState.variant === 'buffer' && {
	  backgroundColor: 'transparent'
	}, ownerState.variant === 'query' && {
	  transform: 'rotate(180deg)'
	}));
	const LinearProgressDashed = styled('span', {
	  name: 'MuiLinearProgress',
	  slot: 'Dashed',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.dashed, styles[`dashedColor${capitalize(ownerState.color)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => {
	  const backgroundColor = getColorShade(theme, ownerState.color);
	  return _extends({
	    position: 'absolute',
	    marginTop: 0,
	    height: '100%',
	    width: '100%'
	  }, ownerState.color === 'inherit' && {
	    opacity: 0.3
	  }, {
	    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,
	    backgroundSize: '10px 10px',
	    backgroundPosition: '0 -23px'
	  });
	}, css(_t4$1 || (_t4$1 = _$1`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
	const LinearProgressBar1 = styled('span', {
	  name: 'MuiLinearProgress',
	  slot: 'Bar1',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar1Indeterminate, ownerState.variant === 'determinate' && styles.bar1Determinate, ownerState.variant === 'buffer' && styles.bar1Buffer];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  width: '100%',
	  position: 'absolute',
	  left: 0,
	  bottom: 0,
	  top: 0,
	  transition: 'transform 0.2s linear',
	  transformOrigin: 'left',
	  backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : (theme.vars || theme).palette[ownerState.color].main
	}, ownerState.variant === 'determinate' && {
	  transition: `transform .${TRANSITION_DURATION}s linear`
	}, ownerState.variant === 'buffer' && {
	  zIndex: 1,
	  transition: `transform .${TRANSITION_DURATION}s linear`
	}), ({
	  ownerState
	}) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t5 || (_t5 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
	const LinearProgressBar2 = styled('span', {
	  name: 'MuiLinearProgress',
	  slot: 'Bar2',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar2Indeterminate, ownerState.variant === 'buffer' && styles.bar2Buffer];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  width: '100%',
	  position: 'absolute',
	  left: 0,
	  bottom: 0,
	  top: 0,
	  transition: 'transform 0.2s linear',
	  transformOrigin: 'left'
	}, ownerState.variant !== 'buffer' && {
	  backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : (theme.vars || theme).palette[ownerState.color].main
	}, ownerState.color === 'inherit' && {
	  opacity: 0.3
	}, ownerState.variant === 'buffer' && {
	  backgroundColor: getColorShade(theme, ownerState.color),
	  transition: `transform .${TRANSITION_DURATION}s linear`
	}), ({
	  ownerState
	}) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t6 || (_t6 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
	/**
	 * ## ARIA
	 *
	 * If the progress bar is describing the loading progress of a particular region of a page,
	 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
	 * attribute to `true` on that region until it has finished loading.
	 */

	const LinearProgress = /*#__PURE__*/react.exports.forwardRef(function LinearProgress(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiLinearProgress'
	  });

	  const {
	    className,
	    color = 'primary',
	    value,
	    valueBuffer,
	    variant = 'indeterminate'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$10);

	  const ownerState = _extends({}, props, {
	    color,
	    variant
	  });

	  const classes = useUtilityClasses$R(ownerState);
	  const theme = useTheme();
	  const rootProps = {};
	  const inlineStyles = {
	    bar1: {},
	    bar2: {}
	  };

	  if (variant === 'determinate' || variant === 'buffer') {
	    if (value !== undefined) {
	      rootProps['aria-valuenow'] = Math.round(value);
	      rootProps['aria-valuemin'] = 0;
	      rootProps['aria-valuemax'] = 100;
	      let transform = value - 100;

	      if (theme.direction === 'rtl') {
	        transform = -transform;
	      }

	      inlineStyles.bar1.transform = `translateX(${transform}%)`;
	    } else {
	      console.error('MUI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');
	    }
	  }

	  if (variant === 'buffer') {
	    if (valueBuffer !== undefined) {
	      let transform = (valueBuffer || 0) - 100;

	      if (theme.direction === 'rtl') {
	        transform = -transform;
	      }

	      inlineStyles.bar2.transform = `translateX(${transform}%)`;
	    } else {
	      console.error('MUI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');
	    }
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(LinearProgressRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    role: "progressbar"
	  }, rootProps, {
	    ref: ref
	  }, other, {
	    children: [variant === 'buffer' ? /*#__PURE__*/jsxRuntime.exports.jsx(LinearProgressDashed, {
	      className: classes.dashed,
	      ownerState: ownerState
	    }) : null, /*#__PURE__*/jsxRuntime.exports.jsx(LinearProgressBar1, {
	      className: classes.bar1,
	      ownerState: ownerState,
	      style: inlineStyles.bar1
	    }), variant === 'determinate' ? null : /*#__PURE__*/jsxRuntime.exports.jsx(LinearProgressBar2, {
	      className: classes.bar2,
	      ownerState: ownerState,
	      style: inlineStyles.bar2
	    })]
	  }));
	});
	LinearProgress.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['inherit', 'primary', 'secondary']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the progress indicator for the determinate and buffer variants.
	   * Value between 0 and 100.
	   */
	  value: propTypes.exports.number,

	  /**
	   * The value for the buffer variant.
	   * Value between 0 and 100.
	   */
	  valueBuffer: propTypes.exports.number,

	  /**
	   * The variant to use.
	   * Use indeterminate or query when there is no progress value.
	   * @default 'indeterminate'
	   */
	  variant: propTypes.exports.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])
	} ;

	function getLinkUtilityClass(slot) {
	  return generateUtilityClass('MuiLink', slot);
	}
	const linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);

	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};

	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};

	const getTextDecoration = ({
	  theme,
	  ownerState
	}) => {
	  const transformedColor = transformDeprecatedColors(ownerState.color);
	  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
	  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);

	  if ('vars' in theme && channelColor) {
	    return `rgba(${channelColor} / 0.4)`;
	  }

	  return alpha(color, 0.4);
	};

	const _excluded$$ = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];

	const useUtilityClasses$Q = ownerState => {
	  const {
	    classes,
	    component,
	    focusVisible,
	    underline
	  } = ownerState;
	  const slots = {
	    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']
	  };
	  return composeClasses(slots, getLinkUtilityClass, classes);
	};

	const LinkRoot = styled(Typography, {
	  name: 'MuiLink',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  return _extends({}, ownerState.underline === 'none' && {
	    textDecoration: 'none'
	  }, ownerState.underline === 'hover' && {
	    textDecoration: 'none',
	    '&:hover': {
	      textDecoration: 'underline'
	    }
	  }, ownerState.underline === 'always' && _extends({
	    textDecoration: 'underline'
	  }, ownerState.color !== 'inherit' && {
	    textDecorationColor: getTextDecoration({
	      theme,
	      ownerState
	    })
	  }, {
	    '&:hover': {
	      textDecorationColor: 'inherit'
	    }
	  }), ownerState.component === 'button' && {
	    position: 'relative',
	    WebkitTapHighlightColor: 'transparent',
	    backgroundColor: 'transparent',
	    // Reset default value
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    border: 0,
	    margin: 0,
	    // Remove the margin in Safari
	    borderRadius: 0,
	    padding: 0,
	    // Remove the padding in Firefox
	    cursor: 'pointer',
	    userSelect: 'none',
	    verticalAlign: 'middle',
	    MozAppearance: 'none',
	    // Reset
	    WebkitAppearance: 'none',
	    // Reset
	    '&::-moz-focus-inner': {
	      borderStyle: 'none' // Remove Firefox dotted outline.

	    },
	    [`&.${linkClasses.focusVisible}`]: {
	      outline: 'auto'
	    }
	  });
	});
	const Link = /*#__PURE__*/react.exports.forwardRef(function Link(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiLink'
	  });

	  const {
	    className,
	    color = 'primary',
	    component = 'a',
	    onBlur,
	    onFocus,
	    TypographyClasses,
	    underline = 'always',
	    variant = 'inherit',
	    sx
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$$);

	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);
	  const handlerRef = useForkRef(ref, focusVisibleRef);

	  const handleBlur = event => {
	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    if (onBlur) {
	      onBlur(event);
	    }
	  };

	  const handleFocus = event => {
	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    focusVisible,
	    underline,
	    variant
	  });

	  const classes = useUtilityClasses$Q(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(LinkRoot, _extends({
	    color: color,
	    className: clsx(classes.root, className),
	    classes: TypographyClasses,
	    component: component,
	    onBlur: handleBlur,
	    onFocus: handleFocus,
	    ref: handlerRef,
	    ownerState: ownerState,
	    variant: variant,
	    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{
	      color
	    }] : []), ...(Array.isArray(sx) ? sx : [sx])]
	  }, other));
	});
	Link.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the link.
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .any,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
	   */
	  TypographyClasses: propTypes.exports.object,

	  /**
	   * Controls when the link should have an underline.
	   * @default 'always'
	   */
	  underline: propTypes.exports.oneOf(['always', 'hover', 'none']),

	  /**
	   * Applies the theme typography styles.
	   * @default 'inherit'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), propTypes.exports.string])
	} ;

	/**
	 * @ignore - internal component.
	 */

	const ListContext = /*#__PURE__*/react.exports.createContext({});

	{
	  ListContext.displayName = 'ListContext';
	}

	function getListUtilityClass(slot) {
	  return generateUtilityClass('MuiList', slot);
	}
	generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

	const _excluded$_ = ["children", "className", "component", "dense", "disablePadding", "subheader"];

	const useUtilityClasses$P = ownerState => {
	  const {
	    classes,
	    disablePadding,
	    dense,
	    subheader
	  } = ownerState;
	  const slots = {
	    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
	  };
	  return composeClasses(slots, getListUtilityClass, classes);
	};

	const ListRoot = styled('ul', {
	  name: 'MuiList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
	  }
	})(({
	  ownerState
	}) => _extends({
	  listStyle: 'none',
	  margin: 0,
	  padding: 0,
	  position: 'relative'
	}, !ownerState.disablePadding && {
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.subheader && {
	  paddingTop: 0
	}));
	const List = /*#__PURE__*/react.exports.forwardRef(function List(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiList'
	  });

	  const {
	    children,
	    className,
	    component = 'ul',
	    dense = false,
	    disablePadding = false,
	    subheader
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$_);

	  const context = react.exports.useMemo(() => ({
	    dense
	  }), [dense]);

	  const ownerState = _extends({}, props, {
	    component,
	    dense,
	    disablePadding
	  });

	  const classes = useUtilityClasses$P(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext.Provider, {
	    value: context,
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [subheader, children]
	    }))
	  });
	});
	List.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
	   * the list and list items.
	   * The prop is available to descendant components as the `dense` context.
	   * @default false
	   */
	  dense: propTypes.exports.bool,

	  /**
	   * If `true`, vertical padding is removed from the list.
	   * @default false
	   */
	  disablePadding: propTypes.exports.bool,

	  /**
	   * The content of the subheader, normally `ListSubheader`.
	   */
	  subheader: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getListItemUtilityClass(slot) {
	  return generateUtilityClass('MuiListItem', slot);
	}
	const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);

	function getListItemButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemButton', slot);
	}
	const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);

	const _excluded$Z = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected"];
	const overridesResolver$3 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};

	const useUtilityClasses$O = ownerState => {
	  const {
	    alignItems,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    divider,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const ListItemButtonRoot = styled(ButtonBase, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiListItemButton',
	  slot: 'Root',
	  overridesResolver: overridesResolver$3
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexGrow: 1,
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minWidth: 0,
	  boxSizing: 'border-box',
	  textAlign: 'left',
	  paddingTop: 8,
	  paddingBottom: 8,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${listItemButtonClasses.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${listItemButtonClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${listItemButtonClasses.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${listItemButtonClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${listItemButtonClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}));
	const ListItemButton = /*#__PURE__*/react.exports.forwardRef(function ListItemButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemButton'
	  });

	  const {
	    alignItems = 'center',
	    autoFocus = false,
	    component = 'div',
	    children,
	    dense = false,
	    disableGutters = false,
	    divider = false,
	    focusVisibleClassName,
	    selected = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$Z);

	  const context = react.exports.useContext(ListContext);
	  const childContext = {
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  };
	  const listItemRef = react.exports.useRef(null);
	  useEnhancedEffect(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else {
	        console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);

	  const ownerState = _extends({}, props, {
	    alignItems,
	    dense: childContext.dense,
	    disableGutters,
	    divider,
	    selected
	  });

	  const classes = useUtilityClasses$O(ownerState);
	  const handleRef = useForkRef(listItemRef, ref);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ListItemButtonRoot, _extends({
	      ref: handleRef,
	      href: other.href || other.to,
	      component: (other.href || other.to) && component === 'div' ? 'a' : component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	      ownerState: ownerState
	    }, other, {
	      classes: classes,
	      children: children
	    }))
	  });
	});
	ListItemButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: propTypes.exports.oneOf(['center', 'flex-start']),

	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: propTypes.exports.bool,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  href: propTypes.exports.string,

	  /**
	   * Use to apply selected styling.
	   * @default false
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getListItemSecondaryActionClassesUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemSecondaryAction', slot);
	}
	generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);

	const _excluded$Y = ["className"];

	const useUtilityClasses$N = ownerState => {
	  const {
	    disableGutters,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disableGutters && 'disableGutters']
	  };
	  return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
	};

	const ListItemSecondaryActionRoot = styled('div', {
	  name: 'MuiListItemSecondaryAction',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.disableGutters && styles.disableGutters];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'absolute',
	  right: 16,
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.disableGutters && {
	  right: 0
	}));
	/**
	 * Must be used as the last child of ListItem to function properly.
	 */

	const ListItemSecondaryAction = /*#__PURE__*/react.exports.forwardRef(function ListItemSecondaryAction(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemSecondaryAction'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$Y);

	  const context = react.exports.useContext(ListContext);

	  const ownerState = _extends({}, props, {
	    disableGutters: context.disableGutters
	  });

	  const classes = useUtilityClasses$N(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListItemSecondaryActionRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	ListItemSecondaryAction.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally an `IconButton` or selection control.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;
	ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';

	const _excluded$X = ["className"],
	      _excluded2$7 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected"];
	const overridesResolver$2 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
	};

	const useUtilityClasses$M = ownerState => {
	  const {
	    alignItems,
	    button,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
	    container: ['container']
	  };
	  return composeClasses(slots, getListItemUtilityClass, classes);
	};

	const ListItemRoot = styled('div', {
	  name: 'MuiListItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$2
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  width: '100%',
	  boxSizing: 'border-box',
	  textAlign: 'left'
	}, !ownerState.disablePadding && _extends({
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, !!ownerState.secondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}), !!ownerState.secondaryAction && {
	  [`& > .${listItemButtonClasses.root}`]: {
	    paddingRight: 48
	  }
	}, {
	  [`&.${listItemClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${listItemClasses.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${listItemClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${listItemClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.button && {
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${listItemClasses.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  }
	}, ownerState.hasSecondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}));
	const ListItemContainer = styled('li', {
	  name: 'MuiListItem',
	  slot: 'Container',
	  overridesResolver: (props, styles) => styles.container
	})({
	  position: 'relative'
	});
	/**
	 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
	 */

	const ListItem = /*#__PURE__*/react.exports.forwardRef(function ListItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItem'
	  });

	  const {
	    alignItems = 'center',
	    autoFocus = false,
	    button = false,
	    children: childrenProp,
	    className,
	    component: componentProp,
	    components = {},
	    componentsProps = {},
	    ContainerComponent = 'li',
	    ContainerProps: {
	      className: ContainerClassName
	    } = {},
	    dense = false,
	    disabled = false,
	    disableGutters = false,
	    disablePadding = false,
	    divider = false,
	    focusVisibleClassName,
	    secondaryAction,
	    selected = false
	  } = props,
	        ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$X),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$7);

	  const context = react.exports.useContext(ListContext);
	  const childContext = {
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  };
	  const listItemRef = react.exports.useRef(null);
	  useEnhancedEffect(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else {
	        console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const children = react.exports.Children.toArray(childrenProp); // v4 implementation, deprecated in v5, will be removed in v6

	  const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);

	  const ownerState = _extends({}, props, {
	    alignItems,
	    autoFocus,
	    button,
	    dense: childContext.dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  });

	  const classes = useUtilityClasses$M(ownerState);
	  const handleRef = useForkRef(listItemRef, ref);
	  const Root = components.Root || ListItemRoot;
	  const rootProps = componentsProps.root || {};

	  const componentProps = _extends({
	    className: clsx(classes.root, rootProps.className, className),
	    disabled
	  }, other);

	  let Component = componentProp || 'li';

	  if (button) {
	    componentProps.component = componentProp || 'div';
	    componentProps.focusVisibleClassName = clsx(listItemClasses.focusVisible, focusVisibleClassName);
	    Component = ButtonBase;
	  } // v4 implementation, deprecated in v5, will be removed in v6


	  if (hasSecondaryAction) {
	    // Use div by default.
	    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

	    if (ContainerComponent === 'li') {
	      if (Component === 'li') {
	        Component = 'div';
	      } else if (componentProps.component === 'li') {
	        componentProps.component = 'div';
	      }
	    }

	    return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext.Provider, {
	      value: childContext,
	      children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListItemContainer, _extends({
	        as: ContainerComponent,
	        className: clsx(classes.container, ContainerClassName),
	        ref: handleRef,
	        ownerState: ownerState
	      }, ContainerProps, {
	        children: [/*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, !isHostComponent(Root) && {
	          as: Component,
	          ownerState: _extends({}, ownerState, rootProps.ownerState)
	        }, componentProps, {
	          children: children
	        })), children.pop()]
	      }))
	    });
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	      as: Component,
	      ref: handleRef,
	      ownerState: ownerState
	    }, !isHostComponent(Root) && {
	      ownerState: _extends({}, ownerState, rootProps.ownerState)
	    }, componentProps, {
	      children: [children, secondaryAction && /*#__PURE__*/jsxRuntime.exports.jsx(ListItemSecondaryAction, {
	        children: secondaryAction
	      })]
	    }))
	  });
	});
	ListItem.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: propTypes.exports.oneOf(['center', 'flex-start']),

	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the list item is a button (using `ButtonBase`). Props intended
	   * for `ButtonBase` can then be applied to `ListItem`.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  button: propTypes.exports.bool,

	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: chainPropTypes(propTypes.exports.node, props => {
	    const children = react.exports.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

	    let secondaryActionIndex = -1;

	    for (let i = children.length - 1; i >= 0; i -= 1) {
	      const child = children[i];

	      if (isMuiElement(child, ['ListItemSecondaryAction'])) {
	        secondaryActionIndex = i;
	        break;
	      }
	    } //  is ListItemSecondaryAction the last child of ListItem


	    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
	      return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    root: propTypes.exports.object
	  }),

	  /**
	   * The container component used when a `ListItemSecondaryAction` is the last child.
	   * @default 'li'
	   * @deprecated
	   */
	  ContainerComponent: elementTypeAcceptingRef$1,

	  /**
	   * Props applied to the container component if used.
	   * @default {}
	   * @deprecated
	   */
	  ContainerProps: propTypes.exports.object,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * If `true`, all padding is removed.
	   * @default false
	   */
	  disablePadding: propTypes.exports.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * The element to display at the end of ListItem.
	   */
	  secondaryAction: propTypes.exports.node,

	  /**
	   * Use to apply selected styling.
	   * @default false
	   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getListItemAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemAvatar', slot);
	}
	generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);

	const _excluded$W = ["className"];

	const useUtilityClasses$L = ownerState => {
	  const {
	    alignItems,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
	  };
	  return composeClasses(slots, getListItemAvatarUtilityClass, classes);
	};

	const ListItemAvatarRoot = styled('div', {
	  name: 'MuiListItemAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
	  }
	})(({
	  ownerState
	}) => _extends({
	  minWidth: 56,
	  flexShrink: 0
	}, ownerState.alignItems === 'flex-start' && {
	  marginTop: 8
	}));
	/**
	 * A simple wrapper to apply `List` styles to an `Avatar`.
	 */

	const ListItemAvatar = /*#__PURE__*/react.exports.forwardRef(function ListItemAvatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemAvatar'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$W);

	  const context = react.exports.useContext(ListContext);

	  const ownerState = _extends({}, props, {
	    alignItems: context.alignItems
	  });

	  const classes = useUtilityClasses$L(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListItemAvatarRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	ListItemAvatar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally an `Avatar`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getListItemIconUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemIcon', slot);
	}
	const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);

	const _excluded$V = ["className"];

	const useUtilityClasses$K = ownerState => {
	  const {
	    alignItems,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
	  };
	  return composeClasses(slots, getListItemIconUtilityClass, classes);
	};

	const ListItemIconRoot = styled('div', {
	  name: 'MuiListItemIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  minWidth: 56,
	  color: (theme.vars || theme).palette.action.active,
	  flexShrink: 0,
	  display: 'inline-flex'
	}, ownerState.alignItems === 'flex-start' && {
	  marginTop: 8
	}));
	/**
	 * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
	 */

	const ListItemIcon = /*#__PURE__*/react.exports.forwardRef(function ListItemIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemIcon'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$V);

	  const context = react.exports.useContext(ListContext);

	  const ownerState = _extends({}, props, {
	    alignItems: context.alignItems
	  });

	  const classes = useUtilityClasses$K(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListItemIconRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	ListItemIcon.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `Icon`, `SvgIcon`,
	   * or a `@mui/icons-material` SVG icon element.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getListItemTextUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemText', slot);
	}
	const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);

	const _excluded$U = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];

	const useUtilityClasses$J = ownerState => {
	  const {
	    classes,
	    inset,
	    primary,
	    secondary,
	    dense
	  } = ownerState;
	  const slots = {
	    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
	    primary: ['primary'],
	    secondary: ['secondary']
	  };
	  return composeClasses(slots, getListItemTextUtilityClass, classes);
	};

	const ListItemTextRoot = styled('div', {
	  name: 'MuiListItemText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${listItemTextClasses.primary}`]: styles.primary
	    }, {
	      [`& .${listItemTextClasses.secondary}`]: styles.secondary
	    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
	  }
	})(({
	  ownerState
	}) => _extends({
	  flex: '1 1 auto',
	  minWidth: 0,
	  marginTop: 4,
	  marginBottom: 4
	}, ownerState.primary && ownerState.secondary && {
	  marginTop: 6,
	  marginBottom: 6
	}, ownerState.inset && {
	  paddingLeft: 56
	}));
	const ListItemText = /*#__PURE__*/react.exports.forwardRef(function ListItemText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemText'
	  });

	  const {
	    children,
	    className,
	    disableTypography = false,
	    inset = false,
	    primary: primaryProp,
	    primaryTypographyProps,
	    secondary: secondaryProp,
	    secondaryTypographyProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$U);

	  const {
	    dense
	  } = react.exports.useContext(ListContext);
	  let primary = primaryProp != null ? primaryProp : children;
	  let secondary = secondaryProp;

	  const ownerState = _extends({}, props, {
	    disableTypography,
	    inset,
	    primary: !!primary,
	    secondary: !!secondary,
	    dense
	  });

	  const classes = useUtilityClasses$J(ownerState);

	  if (primary != null && primary.type !== Typography && !disableTypography) {
	    primary = /*#__PURE__*/jsxRuntime.exports.jsx(Typography, _extends({
	      variant: dense ? 'body2' : 'body1',
	      className: classes.primary,
	      component: "span",
	      display: "block"
	    }, primaryTypographyProps, {
	      children: primary
	    }));
	  }

	  if (secondary != null && secondary.type !== Typography && !disableTypography) {
	    secondary = /*#__PURE__*/jsxRuntime.exports.jsx(Typography, _extends({
	      variant: "body2",
	      className: classes.secondary,
	      color: "text.secondary",
	      display: "block"
	    }, secondaryTypographyProps, {
	      children: secondary
	    }));
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ListItemTextRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [primary, secondary]
	  }));
	});
	ListItemText.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Alias for the `primary` prop.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the children won't be wrapped by a Typography component.
	   * This can be useful to render an alternative Typography variant by wrapping
	   * the `children` (or `primary`) text, and optional `secondary` text
	   * with the Typography component.
	   * @default false
	   */
	  disableTypography: propTypes.exports.bool,

	  /**
	   * If `true`, the children are indented.
	   * This should be used if there is no left avatar or left icon.
	   * @default false
	   */
	  inset: propTypes.exports.bool,

	  /**
	   * The main content element.
	   */
	  primary: propTypes.exports.node,

	  /**
	   * These props will be forwarded to the primary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  primaryTypographyProps: propTypes.exports.object,

	  /**
	   * The secondary content element.
	   */
	  secondary: propTypes.exports.node,

	  /**
	   * These props will be forwarded to the secondary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  secondaryTypographyProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const _excluded$T = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];

	function nextItem$1(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return disableListWrap ? null : list.firstChild;
	}

	function previousItem$1(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return disableListWrap ? null : list.lastChild;
	}

	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }

	  let text = nextFocus.innerText;

	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }

	  text = text.trim().toLowerCase();

	  if (text.length === 0) {
	    return false;
	  }

	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }

	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}

	function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return false;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return true;
	    }
	  }

	  return false;
	}
	/**
	 * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/.
	 * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */


	const MenuList = /*#__PURE__*/react.exports.forwardRef(function MenuList(props, ref) {
	  const {
	    // private
	    // eslint-disable-next-line react/prop-types
	    actions,
	    autoFocus = false,
	    autoFocusItem = false,
	    children,
	    className,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    onKeyDown,
	    variant = 'selectedMenu'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$T);

	  const listRef = react.exports.useRef(null);
	  const textCriteriaRef = react.exports.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  useEnhancedEffect(() => {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  react.exports.useImperativeHandle(actions, () => ({
	    adjustStyleForScrollbar: (containerElement, theme) => {
	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      const noExplicitWidth = !listRef.current.style.width;

	      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
	        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
	      }

	      return listRef.current;
	    }
	  }), []);

	  const handleKeyDown = event => {
	    const list = listRef.current;
	    const key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */

	    const currentFocus = ownerDocument(list).activeElement;

	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
	    } else if (key.length === 1) {
	      const criteria = textCriteriaRef.current;
	      const lowerKey = key.toLowerCase();
	      const currTime = performance.now();

	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }

	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };

	  const handleRef = useForkRef(listRef, ref);
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */

	  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  react.exports.Children.forEach(children, (child, index) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return;
	    }

	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  const items = react.exports.Children.map(children, (child, index) => {
	    if (index === activeItemIndex) {
	      const newChildProps = {};

	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }

	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }

	      return /*#__PURE__*/react.exports.cloneElement(child, newChildProps);
	    }

	    return child;
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(List, _extends({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other, {
	    children: items
	  }));
	});
	MenuList.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, will focus the `[role="menu"]` container and move into tab order.
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
	   * if `variant="selectedMenu"`.
	   * @default false
	   */
	  autoFocusItem: propTypes.exports.bool,

	  /**
	   * MenuList contents, normally `MenuItem`s.
	   */
	  children: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, will allow focus on disabled items.
	   * @default false
	   */
	  disabledItemsFocusable: propTypes.exports.bool,

	  /**
	   * If `true`, the menu items will not wrap focus.
	   * @default false
	   */
	  disableListWrap: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
	   * and the vertical alignment relative to the anchor element.
	   * @default 'selectedMenu'
	   */
	  variant: propTypes.exports.oneOf(['menu', 'selectedMenu'])
	} ;

	function getPopoverUtilityClass(slot) {
	  return generateUtilityClass('MuiPopover', slot);
	}
	generateUtilityClasses('MuiPopover', ['root', 'paper']);

	const _excluded$S = ["onEntering"],
	      _excluded2$6 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
	function getOffsetTop(rect, vertical) {
	  let offset = 0;

	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }

	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;

	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }

	  return offset;
	}

	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}

	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	const useUtilityClasses$I = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return composeClasses(slots, getPopoverUtilityClass, classes);
	};

	const PopoverRoot = styled(Modal, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = styled(Paper, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover = /*#__PURE__*/react.exports.forwardRef(function Popover(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopover'
	  });

	  const {
	    action,
	    anchorEl,
	    anchorOrigin = {
	      vertical: 'top',
	      horizontal: 'left'
	    },
	    anchorPosition,
	    anchorReference = 'anchorEl',
	    children,
	    className,
	    container: containerProp,
	    elevation = 8,
	    marginThreshold = 16,
	    open,
	    PaperProps = {},
	    transformOrigin = {
	      vertical: 'top',
	      horizontal: 'left'
	    },
	    TransitionComponent = Grow,
	    transitionDuration: transitionDurationProp = 'auto',
	    TransitionProps: {
	      onEntering
	    } = {}
	  } = props,
	        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$S),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$6);

	  const paperRef = react.exports.useRef();
	  const handlePaperRef = useForkRef(paperRef, PaperProps.ref);

	  const ownerState = _extends({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    PaperProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });

	  const classes = useUtilityClasses$I(ownerState); // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)

	  const getAnchorOffset = react.exports.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      {
	        if (!anchorPosition) {
	          console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
	        }
	      }

	      return anchorPosition;
	    }

	    const resolvedAnchorEl = resolveAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();

	    {
	      const box = anchorElement.getBoundingClientRect();

	      if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	        console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	      }
	    }

	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the base transform origin using the element

	  const getTransformOrigin = react.exports.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = react.exports.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    }; // Get the transform origin point on the element itself

	    const elemTransformOrigin = getTransformOrigin(elemRect);

	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    } // Get the offset of the anchoring element


	    const anchorOffset = getAnchorOffset(); // Calculate element positioning

	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width; // Use the parent window of the anchorEl if provided

	    const containerWindow = ownerWindow(resolveAnchorEl(anchorEl)); // Window thresholds taking required margin into account

	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

	    if (top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }

	    {
	      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
	        console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
	      }
	    } // Check if the horizontal axis needs shifting


	    if (left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }

	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const setPositioningStyles = react.exports.useCallback(() => {
	    const element = paperRef.current;

	    if (!element) {
	      return;
	    }

	    const positioning = getPositioningStyle(element);

	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }

	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }

	    element.style.transformOrigin = positioning.transformOrigin;
	  }, [getPositioningStyle]);

	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }

	    setPositioningStyles();
	  };

	  react.exports.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  react.exports.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  react.exports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }

	    const handleResize = debounce$1(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = ownerWindow(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;

	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  } // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container


	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PopoverRoot, _extends({
	    BackdropProps: {
	      invisible: true
	    },
	    className: clsx(classes.root, className),
	    container: container,
	    open: open,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(PopoverPaper, _extends({
	        elevation: elevation
	      }, PaperProps, {
	        ref: handlePaperRef,
	        className: clsx(classes.paper, PaperProps.className),
	        children: children
	      }))
	    }))
	  }));
	});
	Popover.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports updatePosition() action.
	   */
	  action: refType,

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the popover.
	   */
	  anchorEl: chainPropTypes(propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]), props => {
	    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
	      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);

	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  anchorOrigin: propTypes.exports.shape({
	    horizontal: propTypes.exports.oneOfType([propTypes.exports.oneOf(['center', 'left', 'right']), propTypes.exports.number]).isRequired,
	    vertical: propTypes.exports.oneOfType([propTypes.exports.oneOf(['bottom', 'center', 'top']), propTypes.exports.number]).isRequired
	  }),

	  /**
	   * This is the position that may be used to set the position of the popover.
	   * The coordinates are relative to the application's client area.
	   */
	  anchorPosition: propTypes.exports.shape({
	    left: propTypes.exports.number.isRequired,
	    top: propTypes.exports.number.isRequired
	  }),

	  /**
	   * This determines which anchor prop to refer to when setting
	   * the position of the popover.
	   * @default 'anchorEl'
	   */
	  anchorReference: propTypes.exports.oneOf(['anchorEl', 'anchorPosition', 'none']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * An HTML element, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   *
	   * By default, it uses the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * The elevation of the popover.
	   * @default 8
	   */
	  elevation: integerPropType,

	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   * @default 16
	   */
	  marginThreshold: propTypes.exports.number,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    component: elementTypeAcceptingRef$1
	  }),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  transformOrigin: propTypes.exports.shape({
	    horizontal: propTypes.exports.oneOfType([propTypes.exports.oneOf(['center', 'left', 'right']), propTypes.exports.number]).isRequired,
	    vertical: propTypes.exports.oneOfType([propTypes.exports.oneOf(['bottom', 'center', 'top']), propTypes.exports.number]).isRequired
	  }),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getMenuUtilityClass(slot) {
	  return generateUtilityClass('MuiMenu', slot);
	}
	generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

	const _excluded$R = ["onEntering"],
	      _excluded2$5 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
	const RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	const LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};

	const useUtilityClasses$H = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper'],
	    list: ['list']
	  };
	  return composeClasses(slots, getMenuUtilityClass, classes);
	};

	const MenuRoot = styled(Popover, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenu',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const MenuPaper = styled(Paper, {
	  name: 'MuiMenu',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  // specZ: The maximum height of a simple menu should be one or more rows less than the view
	  // height. This ensures a tapable area outside of the simple menu with which to dismiss
	  // the menu.
	  maxHeight: 'calc(100% - 96px)',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch'
	});
	const MenuMenuList = styled(MenuList, {
	  name: 'MuiMenu',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Menu = /*#__PURE__*/react.exports.forwardRef(function Menu(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenu'
	  });

	  const {
	    autoFocus = true,
	    children,
	    disableAutoFocusItem = false,
	    MenuListProps = {},
	    onClose,
	    open,
	    PaperProps = {},
	    PopoverClasses,
	    transitionDuration = 'auto',
	    TransitionProps: {
	      onEntering
	    } = {},
	    variant = 'selectedMenu'
	  } = props,
	        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$R),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$5);

	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';

	  const ownerState = _extends({}, props, {
	    autoFocus,
	    disableAutoFocusItem,
	    MenuListProps,
	    onEntering,
	    PaperProps,
	    transitionDuration,
	    TransitionProps,
	    variant
	  });

	  const classes = useUtilityClasses$H(ownerState);
	  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  const menuListActionsRef = react.exports.useRef(null);

	  const handleEntering = (element, isAppearing) => {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }

	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };

	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();

	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */


	  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  react.exports.Children.map(children, (child, index) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return;
	    }

	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuRoot, _extends({
	    classes: PopoverClasses,
	    onClose: onClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: isRtl ? 'right' : 'left'
	    },
	    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
	    PaperProps: _extends({
	      component: MenuPaper
	    }, PaperProps, {
	      classes: _extends({}, PaperProps.classes, {
	        root: classes.paper
	      })
	    }),
	    className: classes.root,
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration,
	    TransitionProps: _extends({
	      onEntering: handleEntering
	    }, TransitionProps),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuMenuList, _extends({
	      onKeyDown: handleListKeyDown,
	      actions: menuListActionsRef,
	      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	      autoFocusItem: autoFocusItem,
	      variant: variant
	    }, MenuListProps, {
	      className: clsx(classes.list, MenuListProps.className),
	      children: children
	    }))
	  }));
	});
	Menu.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the menu.
	   */
	  anchorEl: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.exports.func]),

	  /**
	   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
	   * children are not focusable. If you set this prop to `false` focus will be placed
	   * on the parent modal container. This has severe accessibility implications
	   * and should only be considered if you manage focus otherwise.
	   * @default true
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * Menu contents, normally `MenuItem`s.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * When opening the menu will not focus the active item but the `[role="menu"]`
	   * unless `autoFocus` is also set to `false`. Not using the default means not
	   * following WAI-ARIA authoring practices. Please be considerate about possible
	   * accessibility implications.
	   * @default false
	   */
	  disableAutoFocusItem: propTypes.exports.bool,

	  /**
	   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
	   * @default {}
	   */
	  MenuListProps: propTypes.exports.object,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * @ignore
	   */
	  PaperProps: propTypes.exports.object,

	  /**
	   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
	   */
	  PopoverClasses: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The length of the transition in `ms`, or 'auto'
	   * @default 'auto'
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: propTypes.exports.object,

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
	   * @default 'selectedMenu'
	   */
	  variant: propTypes.exports.oneOf(['menu', 'selectedMenu'])
	} ;

	function getMenuItemUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuItem', slot);
	}
	const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);

	const _excluded$Q = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex"];
	const overridesResolver$1 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};

	const useUtilityClasses$G = ownerState => {
	  const {
	    disabled,
	    dense,
	    divider,
	    disableGutters,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const MenuItemRoot = styled(ButtonBase, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenuItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$1
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minHeight: 48,
	  paddingTop: 6,
	  paddingBottom: 6,
	  boxSizing: 'border-box',
	  whiteSpace: 'nowrap'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, {
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${menuItemClasses.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${menuItemClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${menuItemClasses.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${menuItemClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${menuItemClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  [`& + .${dividerClasses.root}`]: {
	    marginTop: theme.spacing(1),
	    marginBottom: theme.spacing(1)
	  },
	  [`& + .${dividerClasses.inset}`]: {
	    marginLeft: 52
	  },
	  [`& .${listItemTextClasses.root}`]: {
	    marginTop: 0,
	    marginBottom: 0
	  },
	  [`& .${listItemTextClasses.inset}`]: {
	    paddingLeft: 36
	  },
	  [`& .${listItemIconClasses.root}`]: {
	    minWidth: 36
	  }
	}, !ownerState.dense && {
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 'auto'
	  }
	}, ownerState.dense && _extends({
	  minHeight: 32,
	  // https://material.io/components/menus#specs > Dense
	  paddingTop: 4,
	  paddingBottom: 4
	}, theme.typography.body2, {
	  [`& .${listItemIconClasses.root} svg`]: {
	    fontSize: '1.25rem'
	  }
	})));
	const MenuItem = /*#__PURE__*/react.exports.forwardRef(function MenuItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenuItem'
	  });

	  const {
	    autoFocus = false,
	    component = 'li',
	    dense = false,
	    divider = false,
	    disableGutters = false,
	    focusVisibleClassName,
	    role = 'menuitem',
	    tabIndex: tabIndexProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$Q);

	  const context = react.exports.useContext(ListContext);
	  const childContext = {
	    dense: dense || context.dense || false,
	    disableGutters
	  };
	  const menuItemRef = react.exports.useRef(null);
	  useEnhancedEffect(() => {
	    if (autoFocus) {
	      if (menuItemRef.current) {
	        menuItemRef.current.focus();
	      } else {
	        console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);

	  const ownerState = _extends({}, props, {
	    dense: childContext.dense,
	    divider,
	    disableGutters
	  });

	  const classes = useUtilityClasses$G(props);
	  const handleRef = useForkRef(menuItemRef, ref);
	  let tabIndex;

	  if (!props.disabled) {
	    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuItemRoot, _extends({
	      ref: handleRef,
	      role: role,
	      tabIndex: tabIndex,
	      component: component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName)
	    }, other, {
	      ownerState: ownerState,
	      classes: classes
	    }))
	  });
	});
	MenuItem.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent Menu component.
	   * @default false
	   */
	  dense: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the menu item.
	   * @default false
	   */
	  divider: propTypes.exports.bool,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  role: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .string,

	  /**
	   * @ignore
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * @default 0
	   */
	  tabIndex: propTypes.exports.number
	} ;

	function getMobileStepperUtilityClass(slot) {
	  return generateUtilityClass('MuiMobileStepper', slot);
	}
	generateUtilityClasses('MuiMobileStepper', ['root', 'positionBottom', 'positionTop', 'positionStatic', 'dots', 'dot', 'dotActive', 'progress']);

	const _excluded$P = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"];

	const useUtilityClasses$F = ownerState => {
	  const {
	    classes,
	    position
	  } = ownerState;
	  const slots = {
	    root: ['root', `position${capitalize(position)}`],
	    dots: ['dots'],
	    dot: ['dot'],
	    dotActive: ['dotActive'],
	    progress: ['progress']
	  };
	  return composeClasses(slots, getMobileStepperUtilityClass, classes);
	};

	const MobileStepperRoot = styled(Paper, {
	  name: 'MuiMobileStepper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`position${capitalize(ownerState.position)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'row',
	  justifyContent: 'space-between',
	  alignItems: 'center',
	  background: (theme.vars || theme).palette.background.default,
	  padding: 8
	}, ownerState.position === 'bottom' && {
	  position: 'fixed',
	  bottom: 0,
	  left: 0,
	  right: 0,
	  zIndex: (theme.vars || theme).zIndex.mobileStepper
	}, ownerState.position === 'top' && {
	  position: 'fixed',
	  top: 0,
	  left: 0,
	  right: 0,
	  zIndex: (theme.vars || theme).zIndex.mobileStepper
	}));
	const MobileStepperDots = styled('div', {
	  name: 'MuiMobileStepper',
	  slot: 'Dots',
	  overridesResolver: (props, styles) => styles.dots
	})(({
	  ownerState
	}) => _extends({}, ownerState.variant === 'dots' && {
	  display: 'flex',
	  flexDirection: 'row'
	}));
	const MobileStepperDot = styled('div', {
	  name: 'MuiMobileStepper',
	  slot: 'Dot',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'dotActive',
	  overridesResolver: (props, styles) => {
	    const {
	      dotActive
	    } = props;
	    return [styles.dot, dotActive && styles.dotActive];
	  }
	})(({
	  theme,
	  ownerState,
	  dotActive
	}) => _extends({}, ownerState.variant === 'dots' && _extends({
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  backgroundColor: (theme.vars || theme).palette.action.disabled,
	  borderRadius: '50%',
	  width: 8,
	  height: 8,
	  margin: '0 2px'
	}, dotActive && {
	  backgroundColor: (theme.vars || theme).palette.primary.main
	})));
	const MobileStepperProgress = styled(LinearProgress, {
	  name: 'MuiMobileStepper',
	  slot: 'Progress',
	  overridesResolver: (props, styles) => styles.progress
	})(({
	  ownerState
	}) => _extends({}, ownerState.variant === 'progress' && {
	  width: '50%'
	}));
	const MobileStepper = /*#__PURE__*/react.exports.forwardRef(function MobileStepper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMobileStepper'
	  });

	  const {
	    activeStep = 0,
	    backButton,
	    className,
	    LinearProgressProps,
	    nextButton,
	    position = 'bottom',
	    steps,
	    variant = 'dots'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$P);

	  const ownerState = _extends({}, props, {
	    activeStep,
	    position,
	    variant
	  });

	  const classes = useUtilityClasses$F(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(MobileStepperRoot, _extends({
	    square: true,
	    elevation: 0,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [backButton, variant === 'text' && /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	      children: [activeStep + 1, " / ", steps]
	    }), variant === 'dots' && /*#__PURE__*/jsxRuntime.exports.jsx(MobileStepperDots, {
	      ownerState: ownerState,
	      className: classes.dots,
	      children: [...new Array(steps)].map((_, index) => /*#__PURE__*/jsxRuntime.exports.jsx(MobileStepperDot, {
	        className: clsx(classes.dot, index === activeStep && classes.dotActive),
	        ownerState: ownerState,
	        dotActive: index === activeStep
	      }, index))
	    }), variant === 'progress' && /*#__PURE__*/jsxRuntime.exports.jsx(MobileStepperProgress, _extends({
	      ownerState: ownerState,
	      className: classes.progress,
	      variant: "determinate",
	      value: Math.ceil(activeStep / (steps - 1) * 100)
	    }, LinearProgressProps)), nextButton]
	  }));
	});
	MobileStepper.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the active step (zero based index).
	   * Defines which dot is highlighted when the variant is 'dots'.
	   * @default 0
	   */
	  activeStep: integerPropType,

	  /**
	   * A back button element. For instance, it can be a `Button` or an `IconButton`.
	   */
	  backButton: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Props applied to the `LinearProgress` element.
	   */
	  LinearProgressProps: propTypes.exports.object,

	  /**
	   * A next button element. For instance, it can be a `Button` or an `IconButton`.
	   */
	  nextButton: propTypes.exports.node,

	  /**
	   * Set the positioning type.
	   * @default 'bottom'
	   */
	  position: propTypes.exports.oneOf(['bottom', 'static', 'top']),

	  /**
	   * The total steps.
	   */
	  steps: integerPropType.isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'dots'
	   */
	  variant: propTypes.exports.oneOf(['dots', 'progress', 'text'])
	} ;

	function getNativeSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiNativeSelect', slot);
	}
	const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);

	const _excluded$O = ["className", "disabled", "IconComponent", "inputRef", "variant"];

	const useUtilityClasses$E = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
	  };
	  return composeClasses(slots, getNativeSelectUtilityClasses, classes);
	};

	const nativeSelectSelectStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  // When interacting quickly, the text can end up selected.
	  // Native select can't be selected either.
	  userSelect: 'none',
	  borderRadius: 0,
	  // Reset
	  cursor: 'pointer',
	  '&:focus': {
	    // Show that it's not an text input
	    backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
	    borderRadius: 0 // Reset Chrome style

	  },
	  // Remove IE11 arrow
	  '&::-ms-expand': {
	    display: 'none'
	  },
	  [`&.${nativeSelectClasses.disabled}`]: {
	    cursor: 'default'
	  },
	  '&[multiple]': {
	    height: 'auto'
	  },
	  '&:not([multiple]) option, &:not([multiple]) optgroup': {
	    backgroundColor: theme.palette.background.paper
	  },
	  // Bump specificity to allow extending custom inputs
	  '&&&': {
	    paddingRight: 24,
	    minWidth: 16 // So it doesn't collapse.

	  }
	}, ownerState.variant === 'filled' && {
	  '&&&': {
	    paddingRight: 32
	  }
	}, ownerState.variant === 'outlined' && {
	  borderRadius: theme.shape.borderRadius,
	  '&:focus': {
	    borderRadius: theme.shape.borderRadius // Reset the reset for Chrome style

	  },
	  '&&&': {
	    paddingRight: 32
	  }
	});
	const NativeSelectSelect = styled('select', {
	  name: 'MuiNativeSelect',
	  slot: 'Select',
	  shouldForwardProp: rootShouldForwardProp,
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.select, styles[ownerState.variant], {
	      [`&.${nativeSelectClasses.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles);
	const nativeSelectIconStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  // We use a position absolute over a flexbox in order to forward the pointer events
	  // to the input and to support wrapping tags..
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - .5em)',
	  // Center vertically, height is 1em
	  pointerEvents: 'none',
	  // Don't block pointer events on the select under the icon.
	  color: theme.palette.action.active,
	  [`&.${nativeSelectClasses.disabled}`]: {
	    color: theme.palette.action.disabled
	  }
	}, ownerState.open && {
	  transform: 'rotate(180deg)'
	}, ownerState.variant === 'filled' && {
	  right: 7
	}, ownerState.variant === 'outlined' && {
	  right: 7
	});
	const NativeSelectIcon = styled('svg', {
	  name: 'MuiNativeSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);
	/**
	 * @ignore - internal component.
	 */

	const NativeSelectInput = /*#__PURE__*/react.exports.forwardRef(function NativeSelectInput(props, ref) {
	  const {
	    className,
	    disabled,
	    IconComponent,
	    inputRef,
	    variant = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$O);

	  const ownerState = _extends({}, props, {
	    disabled,
	    variant
	  });

	  const classes = useUtilityClasses$E(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectSelect, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.select, className),
	      disabled: disabled,
	      ref: inputRef || ref
	    }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectIcon, {
	      as: IconComponent,
	      ownerState: ownerState,
	      className: classes.icon
	    })]
	  });
	});
	NativeSelectInput.propTypes = {
	  /**
	   * The option elements to populate the select with.
	   * Can be some `<option>` elements.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the select is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.exports.elementType.isRequired,

	  /**
	   * Use that prop to pass a ref to the native select element.
	   * @deprecated
	   */
	  inputRef: refType,

	  /**
	   * @ignore
	   */
	  multiple: propTypes.exports.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The input value.
	   */
	  value: propTypes.exports.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.exports.oneOf(['standard', 'outlined', 'filled'])
	} ;

	const _excluded$N = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"],
	      _excluded2$4 = ["root"];

	const useUtilityClasses$D = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getNativeSelectUtilityClasses, classes);
	};

	const defaultInput = /*#__PURE__*/jsxRuntime.exports.jsx(Input, {});
	/**
	 * An alternative to `<Select native />` with a much smaller bundle size footprint.
	 */


	const NativeSelect = /*#__PURE__*/react.exports.forwardRef(function NativeSelect(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiNativeSelect',
	    props: inProps
	  });

	  const {
	    className,
	    children,
	    classes: classesProp = {},
	    IconComponent = ArrowDropDownIcon,
	    input = defaultInput,
	    inputProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$N);

	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant']
	  });

	  const ownerState = _extends({}, props, {
	    classes: classesProp
	  });

	  const classes = useUtilityClasses$D(ownerState);

	  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2$4);

	  return /*#__PURE__*/react.exports.cloneElement(input, _extends({
	    // Most of the logic is implemented in `NativeSelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent: NativeSelectInput,
	    inputProps: _extends({
	      children,
	      classes: otherClasses,
	      IconComponent,
	      variant: fcs.variant,
	      type: undefined
	    }, inputProps, input ? input.props.inputProps : {}),
	    ref
	  }, other, {
	    className: clsx(classes.root, input.props.className, className)
	  }));
	});
	NativeSelect.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The option elements to populate the select with.
	   * Can be some `<option>` elements.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * @default {}
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon that displays the arrow.
	   * @default ArrowDropDownIcon
	   */
	  IconComponent: propTypes.exports.elementType,

	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   * @default <Input />
	   */
	  input: propTypes.exports.element,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The `input` value. The DOM API casts this to a string.
	   */
	  value: propTypes.exports.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;
	NativeSelect.muiName = 'Select';

	var _span$1;

	const _excluded$M = ["children", "classes", "className", "label", "notched"];
	const NotchedOutlineRoot$1 = styled('fieldset')({
	  textAlign: 'left',
	  position: 'absolute',
	  bottom: 0,
	  right: 0,
	  top: -5,
	  left: 0,
	  margin: 0,
	  padding: '0 8px',
	  pointerEvents: 'none',
	  borderRadius: 'inherit',
	  borderStyle: 'solid',
	  borderWidth: 1,
	  overflow: 'hidden',
	  minWidth: '0%'
	});
	const NotchedOutlineLegend = styled('legend')(({
	  ownerState,
	  theme
	}) => _extends({
	  float: 'unset',
	  // Fix conflict with bootstrap
	  overflow: 'hidden'
	}, !ownerState.withLabel && {
	  padding: 0,
	  lineHeight: '11px',
	  // sync with `height` in `legend` styles
	  transition: theme.transitions.create('width', {
	    duration: 150,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.withLabel && _extends({
	  display: 'block',
	  // Fix conflict with normalize.css and sanitize.css
	  width: 'auto',
	  // Fix conflict with bootstrap
	  padding: 0,
	  height: 11,
	  // sync with `lineHeight` in `legend` styles
	  fontSize: '0.75em',
	  visibility: 'hidden',
	  maxWidth: 0.01,
	  transition: theme.transitions.create('max-width', {
	    duration: 50,
	    easing: theme.transitions.easing.easeOut
	  }),
	  whiteSpace: 'nowrap',
	  '& > span': {
	    paddingLeft: 5,
	    paddingRight: 5,
	    display: 'inline-block',
	    opacity: 0,
	    visibility: 'visible'
	  }
	}, ownerState.notched && {
	  maxWidth: '100%',
	  transition: theme.transitions.create('max-width', {
	    duration: 100,
	    easing: theme.transitions.easing.easeOut,
	    delay: 50
	  })
	})));
	/**
	 * @ignore - internal component.
	 */

	function NotchedOutline(props) {
	  const {
	    className,
	    label,
	    notched
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$M);

	  const withLabel = label != null && label !== '';

	  const ownerState = _extends({}, props, {
	    notched,
	    withLabel
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot$1, _extends({
	    "aria-hidden": true,
	    className: className,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineLegend, {
	      ownerState: ownerState,
	      children: withLabel ? /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        children: label
	      }) : // notranslate needed while Google Translate will not fix zero-width space issue
	      _span$1 || (_span$1 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      }))
	    })
	  }));
	}
	NotchedOutline.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The label.
	   */
	  label: propTypes.exports.node,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: propTypes.exports.bool.isRequired,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object
	} ;

	const _excluded$L = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "type"];

	const useUtilityClasses$C = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    notchedOutline: ['notchedOutline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const OutlinedInputRoot = styled(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiOutlinedInput',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return _extends({
	    position: 'relative',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.text.primary
	    },
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
	        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	      }
	    },
	    [`&.${outlinedInputClasses.focused} .${outlinedInputClasses.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette[ownerState.color].main,
	      borderWidth: 2
	    },
	    [`&.${outlinedInputClasses.error} .${outlinedInputClasses.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.error.main
	    },
	    [`&.${outlinedInputClasses.disabled} .${outlinedInputClasses.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.action.disabled
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 14
	  }, ownerState.endAdornment && {
	    paddingRight: 14
	  }, ownerState.multiline && _extends({
	    padding: '16.5px 14px'
	  }, ownerState.size === 'small' && {
	    padding: '8.5px 14px'
	  }));
	});
	const NotchedOutlineRoot = styled(NotchedOutline, {
	  name: 'MuiOutlinedInput',
	  slot: 'NotchedOutline',
	  overridesResolver: (props, styles) => styles.notchedOutline
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return {
	    borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	  };
	});
	const OutlinedInputInput = styled(InputBaseComponent, {
	  name: 'MuiOutlinedInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  padding: '16.5px 14px'
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  padding: '8.5px 14px'
	}, ownerState.multiline && {
	  padding: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}));
	const OutlinedInput = /*#__PURE__*/react.exports.forwardRef(function OutlinedInput(inProps, ref) {
	  var _React$Fragment;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiOutlinedInput'
	  });

	  const {
	    components = {},
	    fullWidth = false,
	    inputComponent = 'input',
	    label,
	    multiline = false,
	    notched,
	    type = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$L);

	  const classes = useUtilityClasses$C(props);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['required']
	  });

	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    type
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase, _extends({
	    components: _extends({
	      Root: OutlinedInputRoot,
	      Input: OutlinedInputInput
	    }, components),
	    renderSuffix: state => /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot, {
	      ownerState: ownerState,
	      className: classes.notchedOutline,
	      label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	        children: [label, "\xA0", '*']
	      })) : label,
	      notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: _extends({}, classes, {
	      notchedOutline: null
	    })
	  }));
	});
	OutlinedInput.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary']), propTypes.exports.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.exports.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: propTypes.exports.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * The label of the `input`. It is only used for layout. The actual labelling
	   * is handled by `InputLabel`.
	   */
	  label: propTypes.exports.node,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: propTypes.exports.bool,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: propTypes.exports.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any
	} ;
	OutlinedInput.muiName = 'Input';

	function getPaginationUtilityClass(slot) {
	  return generateUtilityClass('MuiPagination', slot);
	}
	generateUtilityClasses('MuiPagination', ['root', 'ul', 'outlined', 'text']);

	const _excluded$K = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
	function usePagination(props = {}) {
	  // keep default values in sync with @default tags in Pagination.propTypes
	  const {
	    boundaryCount = 1,
	    componentName = 'usePagination',
	    count = 1,
	    defaultPage = 1,
	    disabled = false,
	    hideNextButton = false,
	    hidePrevButton = false,
	    onChange: handleChange,
	    page: pageProp,
	    showFirstButton = false,
	    showLastButton = false,
	    siblingCount = 1
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$K);

	  const [page, setPageState] = useControlled({
	    controlled: pageProp,
	    default: defaultPage,
	    name: componentName,
	    state: 'page'
	  });

	  const handleClick = (event, value) => {
	    if (!pageProp) {
	      setPageState(value);
	    }

	    if (handleChange) {
	      handleChange(event, value);
	    }
	  }; // https://dev.to/namirsab/comment/2050


	  const range = (start, end) => {
	    const length = end - start + 1;
	    return Array.from({
	      length
	    }, (_, i) => start + i);
	  };

	  const startPages = range(1, Math.min(boundaryCount, count));
	  const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
	  const siblingsStart = Math.max(Math.min( // Natural start
	  page - siblingCount, // Lower boundary when page is high
	  count - boundaryCount - siblingCount * 2 - 1), // Greater than startPages
	  boundaryCount + 2);
	  const siblingsEnd = Math.min(Math.max( // Natural end
	  page + siblingCount, // Upper boundary when page is low
	  boundaryCount + siblingCount * 2 + 2), // Less than endPages
	  endPages.length > 0 ? endPages[0] - 2 : count - 1); // Basic list of items to render
	  // e.g. itemList = ['first', 'previous', 1, 'ellipsis', 4, 5, 6, 'ellipsis', 10, 'next', 'last']

	  const itemList = [...(showFirstButton ? ['first'] : []), ...(hidePrevButton ? [] : ['previous']), ...startPages, // Start ellipsis
	  // eslint-disable-next-line no-nested-ternary
	  ...(siblingsStart > boundaryCount + 2 ? ['start-ellipsis'] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), // Sibling pages
	  ...range(siblingsStart, siblingsEnd), // End ellipsis
	  // eslint-disable-next-line no-nested-ternary
	  ...(siblingsEnd < count - boundaryCount - 1 ? ['end-ellipsis'] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), ...endPages, ...(hideNextButton ? [] : ['next']), ...(showLastButton ? ['last'] : [])]; // Map the button type to its page number

	  const buttonPage = type => {
	    switch (type) {
	      case 'first':
	        return 1;

	      case 'previous':
	        return page - 1;

	      case 'next':
	        return page + 1;

	      case 'last':
	        return count;

	      default:
	        return null;
	    }
	  }; // Convert the basic item list to PaginationItem props objects


	  const items = itemList.map(item => {
	    return typeof item === 'number' ? {
	      onClick: event => {
	        handleClick(event, item);
	      },
	      type: 'page',
	      page: item,
	      selected: item === page,
	      disabled,
	      'aria-current': item === page ? 'true' : undefined
	    } : {
	      onClick: event => {
	        handleClick(event, buttonPage(item));
	      },
	      type: item,
	      page: buttonPage(item),
	      selected: false,
	      disabled: disabled || item.indexOf('ellipsis') === -1 && (item === 'next' || item === 'last' ? page >= count : page <= 1)
	    };
	  });
	  return _extends({
	    items
	  }, other);
	}

	function getPaginationItemUtilityClass(slot) {
	  return generateUtilityClass('MuiPaginationItem', slot);
	}
	const paginationItemClasses = generateUtilityClasses('MuiPaginationItem', ['root', 'page', 'sizeSmall', 'sizeLarge', 'text', 'textPrimary', 'textSecondary', 'outlined', 'outlinedPrimary', 'outlinedSecondary', 'rounded', 'ellipsis', 'firstLast', 'previousNext', 'focusVisible', 'disabled', 'selected', 'icon']);

	var FirstPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
	}), 'FirstPage');

	var LastPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
	}), 'LastPage');

	var NavigateBeforeIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
	}), 'NavigateBefore');

	var NavigateNextIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
	}), 'NavigateNext');

	const _excluded$J = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "type", "variant"];

	const overridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.variant === 'text' && styles[`text${capitalize(ownerState.color)}`], ownerState.variant === 'outlined' && styles[`outlined${capitalize(ownerState.color)}`], ownerState.shape === 'rounded' && styles.rounded, ownerState.type === 'page' && styles.page, (ownerState.type === 'start-ellipsis' || ownerState.type === 'end-ellipsis') && styles.ellipsis, (ownerState.type === 'previous' || ownerState.type === 'next') && styles.previousNext, (ownerState.type === 'first' || ownerState.type === 'last') && styles.firstLast];
	};

	const useUtilityClasses$B = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    selected,
	    size,
	    shape,
	    type,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', `size${capitalize(size)}`, variant, shape, color !== 'standard' && `${variant}${capitalize(color)}`, disabled && 'disabled', selected && 'selected', {
	      page: 'page',
	      first: 'firstLast',
	      last: 'firstLast',
	      'start-ellipsis': 'ellipsis',
	      'end-ellipsis': 'ellipsis',
	      previous: 'previousNext',
	      next: 'previousNext'
	    }[type]],
	    icon: ['icon']
	  };
	  return composeClasses(slots, getPaginationItemUtilityClass, classes);
	};

	const PaginationItemEllipsis = styled('div', {
	  name: 'MuiPaginationItem',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body2, {
	  borderRadius: 32 / 2,
	  textAlign: 'center',
	  boxSizing: 'border-box',
	  minWidth: 32,
	  padding: '0 6px',
	  margin: '0 3px',
	  color: (theme.vars || theme).palette.text.primary,
	  height: 'auto',
	  [`&.${paginationItemClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.size === 'small' && {
	  minWidth: 26,
	  borderRadius: 26 / 2,
	  margin: '0 1px',
	  padding: '0 4px'
	}, ownerState.size === 'large' && {
	  minWidth: 40,
	  borderRadius: 40 / 2,
	  padding: '0 10px',
	  fontSize: theme.typography.pxToRem(15)
	}));
	const PaginationItemPage = styled(ButtonBase, {
	  name: 'MuiPaginationItem',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body2, {
	  borderRadius: 32 / 2,
	  textAlign: 'center',
	  boxSizing: 'border-box',
	  minWidth: 32,
	  height: 32,
	  padding: '0 6px',
	  margin: '0 3px',
	  color: (theme.vars || theme).palette.text.primary,
	  [`&.${paginationItemClasses.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${paginationItemClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  transition: theme.transitions.create(['color', 'background-color'], {
	    duration: theme.transitions.duration.short
	  }),
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${paginationItemClasses.selected}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.selected,
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selected} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette.action.selected
	      }
	    },
	    [`&.${paginationItemClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selected} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    },
	    [`&.${paginationItemClasses.disabled}`]: {
	      opacity: 1,
	      color: (theme.vars || theme).palette.action.disabled,
	      backgroundColor: (theme.vars || theme).palette.action.selected
	    }
	  }
	}, ownerState.size === 'small' && {
	  minWidth: 26,
	  height: 26,
	  borderRadius: 26 / 2,
	  margin: '0 1px',
	  padding: '0 4px'
	}, ownerState.size === 'large' && {
	  minWidth: 40,
	  height: 40,
	  borderRadius: 40 / 2,
	  padding: '0 10px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.shape === 'rounded' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.variant === 'text' && {
	  [`&.${paginationItemClasses.selected}`]: _extends({}, ownerState.color !== 'standard' && {
	    color: (theme.vars || theme).palette[ownerState.color].contrastText,
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	      }
	    },
	    [`&.${paginationItemClasses.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	    }
	  }, {
	    [`&.${paginationItemClasses.disabled}`]: {
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  })
	}, ownerState.variant === 'outlined' && {
	  border: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,
	  [`&.${paginationItemClasses.selected}`]: _extends({}, ownerState.color !== 'standard' && {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)}`,
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.activatedOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${paginationItemClasses.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
	    }
	  }, {
	    [`&.${paginationItemClasses.disabled}`]: {
	      borderColor: (theme.vars || theme).palette.action.disabledBackground,
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  })
	}));
	const PaginationItemPageIcon = styled('div', {
	  name: 'MuiPaginationItem',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => styles.icon
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  fontSize: theme.typography.pxToRem(20),
	  margin: '0 -8px'
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  fontSize: theme.typography.pxToRem(22)
	}));
	const PaginationItem = /*#__PURE__*/react.exports.forwardRef(function PaginationItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaginationItem'
	  });

	  const {
	    className,
	    color = 'standard',
	    component,
	    components = {
	      first: FirstPageIcon,
	      last: LastPageIcon,
	      next: NavigateNextIcon,
	      previous: NavigateBeforeIcon
	    },
	    disabled = false,
	    page,
	    selected = false,
	    shape = 'circular',
	    size = 'medium',
	    type = 'page',
	    variant = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$J);

	  const ownerState = _extends({}, props, {
	    color,
	    disabled,
	    selected,
	    shape,
	    size,
	    type,
	    variant
	  });

	  const theme = useTheme();
	  const classes = useUtilityClasses$B(ownerState);
	  const normalizedIcons = theme.direction === 'rtl' ? {
	    previous: components.next || NavigateNextIcon,
	    next: components.previous || NavigateBeforeIcon,
	    last: components.first || FirstPageIcon,
	    first: components.last || LastPageIcon
	  } : {
	    previous: components.previous || NavigateBeforeIcon,
	    next: components.next || NavigateNextIcon,
	    first: components.first || FirstPageIcon,
	    last: components.last || LastPageIcon
	  };
	  const Icon = normalizedIcons[type];
	  return type === 'start-ellipsis' || type === 'end-ellipsis' ? /*#__PURE__*/jsxRuntime.exports.jsx(PaginationItemEllipsis, {
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    children: "\u2026"
	  }) : /*#__PURE__*/jsxRuntime.exports.jsxs(PaginationItemPage, _extends({
	    ref: ref,
	    ownerState: ownerState,
	    component: component,
	    disabled: disabled,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: [type === 'page' && page, Icon ? /*#__PURE__*/jsxRuntime.exports.jsx(PaginationItemPageIcon, {
	      as: Icon,
	      ownerState: ownerState,
	      className: classes.icon
	    }) : null]
	  }));
	});
	PaginationItem.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The active color.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'standard'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary', 'standard']), propTypes.exports.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The components used for first, last, next & previous item type
	   * @default {
	   *   first: FirstPageIcon,
	   *   last: LastPageIcon,
	   *   next: NavigateNextIcon,
	   *   previous: NavigateBeforeIcon,
	   * }
	   */
	  components: propTypes.exports.shape({
	    first: propTypes.exports.elementType,
	    last: propTypes.exports.elementType,
	    next: propTypes.exports.elementType,
	    previous: propTypes.exports.elementType
	  }),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * The current page number.
	   */
	  page: propTypes.exports.node,

	  /**
	   * If `true` the pagination item is selected.
	   * @default false
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The shape of the pagination item.
	   * @default 'circular'
	   */
	  shape: propTypes.exports.oneOf(['circular', 'rounded']),

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The type of pagination item.
	   * @default 'page'
	   */
	  type: propTypes.exports.oneOf(['end-ellipsis', 'first', 'last', 'next', 'page', 'previous', 'start-ellipsis']),

	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['outlined', 'text']), propTypes.exports.string])
	} ;

	const _excluded$I = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];

	const useUtilityClasses$A = ownerState => {
	  const {
	    classes,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant],
	    ul: ['ul']
	  };
	  return composeClasses(slots, getPaginationUtilityClass, classes);
	};

	const PaginationRoot = styled('nav', {
	  name: 'MuiPagination',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant]];
	  }
	})({});
	const PaginationUl = styled('ul', {
	  name: 'MuiPagination',
	  slot: 'Ul',
	  overridesResolver: (props, styles) => styles.ul
	})({
	  display: 'flex',
	  flexWrap: 'wrap',
	  alignItems: 'center',
	  padding: 0,
	  margin: 0,
	  listStyle: 'none'
	});

	function defaultGetAriaLabel$1(type, page, selected) {
	  if (type === 'page') {
	    return `${selected ? '' : 'Go to '}page ${page}`;
	  }

	  return `Go to ${type} page`;
	}

	const Pagination = /*#__PURE__*/react.exports.forwardRef(function Pagination(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPagination'
	  });

	  const {
	    boundaryCount = 1,
	    className,
	    color = 'standard',
	    count = 1,
	    defaultPage = 1,
	    disabled = false,
	    getItemAriaLabel = defaultGetAriaLabel$1,
	    hideNextButton = false,
	    hidePrevButton = false,
	    renderItem = item => /*#__PURE__*/jsxRuntime.exports.jsx(PaginationItem, _extends({}, item)),
	    shape = 'circular',
	    showFirstButton = false,
	    showLastButton = false,
	    siblingCount = 1,
	    size = 'medium',
	    variant = 'text'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$I);

	  const {
	    items
	  } = usePagination(_extends({}, props, {
	    componentName: 'Pagination'
	  }));

	  const ownerState = _extends({}, props, {
	    boundaryCount,
	    color,
	    count,
	    defaultPage,
	    disabled,
	    getItemAriaLabel,
	    hideNextButton,
	    hidePrevButton,
	    renderItem,
	    shape,
	    showFirstButton,
	    showLastButton,
	    siblingCount,
	    size,
	    variant
	  });

	  const classes = useUtilityClasses$A(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PaginationRoot, _extends({
	    "aria-label": "pagination navigation",
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(PaginationUl, {
	      className: classes.ul,
	      ownerState: ownerState,
	      children: items.map((item, index) => /*#__PURE__*/jsxRuntime.exports.jsx("li", {
	        children: renderItem(_extends({}, item, {
	          color,
	          'aria-label': getItemAriaLabel(item.type, item.page, item.selected),
	          shape,
	          size,
	          variant
	        }))
	      }, index))
	    })
	  }));
	}); // @default tags synced with default values from usePagination

	Pagination.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Number of always visible pages at the beginning and end.
	   * @default 1
	   */
	  boundaryCount: integerPropType,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The active color.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'standard'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary', 'standard']), propTypes.exports.string]),

	  /**
	   * The total number of pages.
	   * @default 1
	   */
	  count: integerPropType,

	  /**
	   * The page selected by default when the component is uncontrolled.
	   * @default 1
	   */
	  defaultPage: integerPropType,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
	   * This is important for screen reader users.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
	   * @param {number} page The page number to format.
	   * @param {bool} selected If true, the current page is selected.
	   * @returns {string}
	   */
	  getItemAriaLabel: propTypes.exports.func,

	  /**
	   * If `true`, hide the next-page button.
	   * @default false
	   */
	  hideNextButton: propTypes.exports.bool,

	  /**
	   * If `true`, hide the previous-page button.
	   * @default false
	   */
	  hidePrevButton: propTypes.exports.bool,

	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {React.ChangeEvent<unknown>} event The event source of the callback.
	   * @param {number} page The page selected.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The current page.
	   */
	  page: integerPropType,

	  /**
	   * Render the item.
	   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
	   * @returns {ReactNode}
	   * @default (item) => <PaginationItem {...item} />
	   */
	  renderItem: propTypes.exports.func,

	  /**
	   * The shape of the pagination items.
	   * @default 'circular'
	   */
	  shape: propTypes.exports.oneOf(['circular', 'rounded']),

	  /**
	   * If `true`, show the first-page button.
	   * @default false
	   */
	  showFirstButton: propTypes.exports.bool,

	  /**
	   * If `true`, show the last-page button.
	   * @default false
	   */
	  showLastButton: propTypes.exports.bool,

	  /**
	   * Number of always visible pages before and after the current page.
	   * @default 1
	   */
	  siblingCount: integerPropType,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['outlined', 'text']), propTypes.exports.string])
	} ;

	var RadioButtonUncheckedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	}), 'RadioButtonUnchecked');

	var RadioButtonCheckedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
	}), 'RadioButtonChecked');

	const RadioButtonIconRoot = styled('span')({
	  position: 'relative',
	  display: 'flex'
	});
	const RadioButtonIconBackground = styled(RadioButtonUncheckedIcon)({
	  // Scale applied to prevent dot misalignment in Safari
	  transform: 'scale(1)'
	});
	const RadioButtonIconDot = styled(RadioButtonCheckedIcon)(({
	  theme,
	  ownerState
	}) => _extends({
	  left: 0,
	  position: 'absolute',
	  transform: 'scale(0)',
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeIn,
	    duration: theme.transitions.duration.shortest
	  })
	}, ownerState.checked && {
	  transform: 'scale(1)',
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeOut,
	    duration: theme.transitions.duration.shortest
	  })
	}));
	/**
	 * @ignore - internal component.
	 */

	function RadioButtonIcon(props) {
	  const {
	    checked = false,
	    classes = {},
	    fontSize
	  } = props;

	  const ownerState = _extends({}, props, {
	    checked
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(RadioButtonIconRoot, {
	    className: classes.root,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIconBackground, {
	      fontSize: fontSize,
	      className: classes.background,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIconDot, {
	      fontSize: fontSize,
	      className: classes.dot,
	      ownerState: ownerState
	    })]
	  });
	}

	RadioButtonIcon.propTypes = {
	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense radio styling.
	   */
	  fontSize: propTypes.exports.oneOf(['small', 'medium'])
	} ;

	/**
	 * @ignore - internal component.
	 */
	const RadioGroupContext = /*#__PURE__*/react.exports.createContext(undefined);

	{
	  RadioGroupContext.displayName = 'RadioGroupContext';
	}

	function useRadioGroup() {
	  return react.exports.useContext(RadioGroupContext);
	}

	function getRadioUtilityClass(slot) {
	  return generateUtilityClass('MuiRadio', slot);
	}
	const radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary']);

	const _excluded$H = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size"];

	const useUtilityClasses$z = ownerState => {
	  const {
	    classes,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`]
	  };
	  return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
	};

	const RadioRoot = styled(SwitchBase, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiRadio',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary,
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${radioClasses.checked}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  }
	}, {
	  [`&.${radioClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));

	function areEqualValues$1(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  } // The value could be a number, the DOM will stringify it anyway.


	  return String(a) === String(b);
	}

	const defaultCheckedIcon = /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIcon, {
	  checked: true
	});

	const defaultIcon$1 = /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIcon, {});

	const Radio = /*#__PURE__*/react.exports.forwardRef(function Radio(inProps, ref) {
	  var _defaultIcon$props$fo, _defaultCheckedIcon$p;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiRadio'
	  });

	  const {
	    checked: checkedProp,
	    checkedIcon = defaultCheckedIcon,
	    color = 'primary',
	    icon = defaultIcon$1,
	    name: nameProp,
	    onChange: onChangeProp,
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$H);

	  const ownerState = _extends({}, props, {
	    color,
	    size
	  });

	  const classes = useUtilityClasses$z(ownerState);
	  const radioGroup = useRadioGroup();
	  let checked = checkedProp;
	  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
	  let name = nameProp;

	  if (radioGroup) {
	    if (typeof checked === 'undefined') {
	      checked = areEqualValues$1(radioGroup.value, props.value);
	    }

	    if (typeof name === 'undefined') {
	      name = radioGroup.name;
	    }
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(RadioRoot, _extends({
	    type: "radio",
	    icon: /*#__PURE__*/react.exports.cloneElement(icon, {
	      fontSize: (_defaultIcon$props$fo = defaultIcon$1.props.fontSize) != null ? _defaultIcon$props$fo : size
	    }),
	    checkedIcon: /*#__PURE__*/react.exports.cloneElement(checkedIcon, {
	      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
	    }),
	    ownerState: ownerState,
	    classes: classes,
	    name: name,
	    checked: checked,
	    onChange: onChange,
	    ref: ref
	  }, other));
	});
	Radio.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is checked.
	   * @default <RadioButtonIcon checked />
	   */
	  checkedIcon: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is unchecked.
	   * @default <RadioButtonIcon />
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense radio styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   */
	  value: propTypes.exports.any
	} ;

	const _excluded$G = ["actions", "children", "defaultValue", "name", "onChange", "value"];
	const RadioGroup = /*#__PURE__*/react.exports.forwardRef(function RadioGroup(props, ref) {
	  const {
	    // private
	    // eslint-disable-next-line react/prop-types
	    actions,
	    children,
	    defaultValue,
	    name: nameProp,
	    onChange,
	    value: valueProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$G);

	  const rootRef = react.exports.useRef(null);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'RadioGroup'
	  });
	  react.exports.useImperativeHandle(actions, () => ({
	    focus: () => {
	      let input = rootRef.current.querySelector('input:not(:disabled):checked');

	      if (!input) {
	        input = rootRef.current.querySelector('input:not(:disabled)');
	      }

	      if (input) {
	        input.focus();
	      }
	    }
	  }), []);
	  const handleRef = useForkRef(ref, rootRef);

	  const handleChange = event => {
	    setValueState(event.target.value);

	    if (onChange) {
	      onChange(event, event.target.value);
	    }
	  };

	  const name = useId(nameProp);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(RadioGroupContext.Provider, {
	    value: {
	      name,
	      onChange: handleChange,
	      value
	    },
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(FormGroup, _extends({
	      role: "radiogroup",
	      ref: handleRef
	    }, other, {
	      children: children
	    }))
	  });
	});
	RadioGroup.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * The name used to reference the value of the control.
	   * If you don't provide this prop, it falls back to a randomly generated name.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when a radio button is selected.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * @param {string} value The value of the selected radio button.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Value of the selected radio button. The DOM API casts this to a string.
	   */
	  value: propTypes.exports.any
	} ;

	var Star = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
	}), 'Star');

	var StarBorder = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
	}), 'StarBorder');

	function getRatingUtilityClass(slot) {
	  return generateUtilityClass('MuiRating', slot);
	}
	const ratingClasses = generateUtilityClasses('MuiRating', ['root', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'readOnly', 'disabled', 'focusVisible', 'visuallyHidden', 'pristine', 'label', 'labelEmptyValueActive', 'icon', 'iconEmpty', 'iconFilled', 'iconHover', 'iconFocus', 'iconActive', 'decimal']);

	const _excluded$F = ["value"],
	      _excluded2$3 = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];

	function clamp$1(value, min, max) {
	  if (value < min) {
	    return min;
	  }

	  if (value > max) {
	    return max;
	  }

	  return value;
	}

	function getDecimalPrecision(num) {
	  const decimalPart = num.toString().split('.')[1];
	  return decimalPart ? decimalPart.length : 0;
	}

	function roundValueToPrecision(value, precision) {
	  if (value == null) {
	    return value;
	  }

	  const nearest = Math.round(value / precision) * precision;
	  return Number(nearest.toFixed(getDecimalPrecision(precision)));
	}

	const useUtilityClasses$y = ownerState => {
	  const {
	    classes,
	    size,
	    readOnly,
	    disabled,
	    emptyValueFocused,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', `size${capitalize(size)}`, disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readyOnly'],
	    label: ['label', 'pristine'],
	    labelEmptyValue: [emptyValueFocused && 'labelEmptyValueActive'],
	    icon: ['icon'],
	    iconEmpty: ['iconEmpty'],
	    iconFilled: ['iconFilled'],
	    iconHover: ['iconHover'],
	    iconFocus: ['iconFocus'],
	    iconActive: ['iconActive'],
	    decimal: ['decimal'],
	    visuallyHidden: ['visuallyHidden']
	  };
	  return composeClasses(slots, getRatingUtilityClass, classes);
	};

	const RatingRoot = styled('span', {
	  name: 'MuiRating',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${ratingClasses.visuallyHidden}`]: styles.visuallyHidden
	    }, styles.root, styles[`size${capitalize(ownerState.size)}`], ownerState.readOnly && styles.readOnly];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  // Required to position the pristine input absolutely
	  position: 'relative',
	  fontSize: theme.typography.pxToRem(24),
	  color: '#faaf00',
	  cursor: 'pointer',
	  textAlign: 'left',
	  WebkitTapHighlightColor: 'transparent',
	  [`&.${ratingClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity,
	    pointerEvents: 'none'
	  },
	  [`&.${ratingClasses.focusVisible} .${ratingClasses.iconActive}`]: {
	    outline: '1px solid #999'
	  },
	  [`& .${ratingClasses.visuallyHidden}`]: visuallyHidden
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  fontSize: theme.typography.pxToRem(30)
	}, ownerState.readOnly && {
	  pointerEvents: 'none'
	}));
	const RatingLabel = styled('label', {
	  name: 'MuiRating',
	  slot: 'Label',
	  overridesResolver: (props, styles) => styles.label
	})(({
	  ownerState
	}) => _extends({
	  cursor: 'inherit'
	}, ownerState.emptyValueFocused && {
	  top: 0,
	  bottom: 0,
	  position: 'absolute',
	  outline: '1px solid #999',
	  width: '100%'
	}));
	const RatingIcon = styled('span', {
	  name: 'MuiRating',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.iconEmpty && styles.iconEmpty, ownerState.iconFilled && styles.iconFilled, ownerState.iconHover && styles.iconHover, ownerState.iconFocus && styles.iconFocus, ownerState.iconActive && styles.iconActive];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  // Fit wrapper to actual icon size.
	  display: 'flex',
	  transition: theme.transitions.create('transform', {
	    duration: theme.transitions.duration.shortest
	  }),
	  // Fix mouseLeave issue.
	  // https://github.com/facebook/react/issues/4492
	  pointerEvents: 'none'
	}, ownerState.iconActive && {
	  transform: 'scale(1.2)'
	}, ownerState.iconEmpty && {
	  color: (theme.vars || theme).palette.action.disabled
	}));
	const RatingDecimal = styled('span', {
	  name: 'MuiRating',
	  slot: 'Decimal',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'iconActive',
	  overridesResolver: (props, styles) => {
	    const {
	      iconActive
	    } = props;
	    return [styles.decimal, iconActive && styles.iconActive];
	  }
	})(({
	  iconActive
	}) => _extends({
	  position: 'relative'
	}, iconActive && {
	  transform: 'scale(1.2)'
	}));

	function IconContainer(props) {
	  const other = _objectWithoutPropertiesLoose(props, _excluded$F);

	  return /*#__PURE__*/jsxRuntime.exports.jsx("span", _extends({}, other));
	}

	IconContainer.propTypes = {
	  value: propTypes.exports.number.isRequired
	} ;

	function RatingItem(props) {
	  const {
	    classes,
	    disabled,
	    emptyIcon,
	    focus,
	    getLabelText,
	    highlightSelectedOnly,
	    hover,
	    icon,
	    IconContainerComponent,
	    isActive,
	    itemValue,
	    labelProps,
	    name,
	    onBlur,
	    onChange,
	    onClick,
	    onFocus,
	    readOnly,
	    ownerState,
	    ratingValue,
	    ratingValueRounded
	  } = props;
	  const isFilled = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;
	  const isHovered = itemValue <= hover;
	  const isFocused = itemValue <= focus;
	  const isChecked = itemValue === ratingValueRounded;
	  const id = useId();

	  const container = /*#__PURE__*/jsxRuntime.exports.jsx(RatingIcon, {
	    as: IconContainerComponent,
	    value: itemValue,
	    className: clsx(classes.icon, isFilled ? classes.iconFilled : classes.iconEmpty, isHovered && classes.iconHover, isFocused && classes.iconFocus, isActive && classes.iconActive),
	    ownerState: _extends({}, ownerState, {
	      iconEmpty: !isFilled,
	      iconFilled: isFilled,
	      iconHover: isHovered,
	      iconFocus: isFocused,
	      iconActive: isActive
	    }),
	    children: emptyIcon && !isFilled ? emptyIcon : icon
	  });

	  if (readOnly) {
	    return /*#__PURE__*/jsxRuntime.exports.jsx("span", _extends({}, labelProps, {
	      children: container
	    }));
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsxs(RatingLabel, _extends({
	      ownerState: _extends({}, ownerState, {
	        emptyValueFocused: undefined
	      }),
	      htmlFor: id
	    }, labelProps, {
	      children: [container, /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: classes.visuallyHidden,
	        children: getLabelText(itemValue)
	      })]
	    })), /*#__PURE__*/jsxRuntime.exports.jsx("input", {
	      className: classes.visuallyHidden,
	      onFocus: onFocus,
	      onBlur: onBlur,
	      onChange: onChange,
	      onClick: onClick,
	      disabled: disabled,
	      value: itemValue,
	      id: id,
	      type: "radio",
	      name: name,
	      checked: isChecked
	    })]
	  });
	}

	RatingItem.propTypes = {
	  classes: propTypes.exports.object.isRequired,
	  disabled: propTypes.exports.bool.isRequired,
	  emptyIcon: propTypes.exports.node,
	  focus: propTypes.exports.number.isRequired,
	  getLabelText: propTypes.exports.func.isRequired,
	  highlightSelectedOnly: propTypes.exports.bool.isRequired,
	  hover: propTypes.exports.number.isRequired,
	  icon: propTypes.exports.node,
	  IconContainerComponent: propTypes.exports.elementType.isRequired,
	  isActive: propTypes.exports.bool.isRequired,
	  itemValue: propTypes.exports.number.isRequired,
	  labelProps: propTypes.exports.object,
	  name: propTypes.exports.string,
	  onBlur: propTypes.exports.func.isRequired,
	  onChange: propTypes.exports.func.isRequired,
	  onClick: propTypes.exports.func.isRequired,
	  onFocus: propTypes.exports.func.isRequired,
	  ownerState: propTypes.exports.object.isRequired,
	  ratingValue: propTypes.exports.number,
	  ratingValueRounded: propTypes.exports.number,
	  readOnly: propTypes.exports.bool.isRequired
	} ;

	const defaultIcon = /*#__PURE__*/jsxRuntime.exports.jsx(Star, {
	  fontSize: "inherit"
	});

	const defaultEmptyIcon = /*#__PURE__*/jsxRuntime.exports.jsx(StarBorder, {
	  fontSize: "inherit"
	});

	function defaultLabelText(value) {
	  return `${value} Star${value !== 1 ? 's' : ''}`;
	}

	const Rating = /*#__PURE__*/react.exports.forwardRef(function Rating(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiRating',
	    props: inProps
	  });

	  const {
	    className,
	    defaultValue = null,
	    disabled = false,
	    emptyIcon = defaultEmptyIcon,
	    emptyLabelText = 'Empty',
	    getLabelText = defaultLabelText,
	    highlightSelectedOnly = false,
	    icon = defaultIcon,
	    IconContainerComponent = IconContainer,
	    max = 5,
	    name: nameProp,
	    onChange,
	    onChangeActive,
	    onMouseLeave,
	    onMouseMove,
	    precision = 1,
	    readOnly = false,
	    size = 'medium',
	    value: valueProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded2$3);

	  const name = useId(nameProp);
	  const [valueDerived, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Rating'
	  });
	  const valueRounded = roundValueToPrecision(valueDerived, precision);
	  const theme = useTheme();
	  const [{
	    hover,
	    focus
	  }, setState] = react.exports.useState({
	    hover: -1,
	    focus: -1
	  });
	  let value = valueRounded;

	  if (hover !== -1) {
	    value = hover;
	  }

	  if (focus !== -1) {
	    value = focus;
	  }

	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);
	  const rootRef = react.exports.useRef();
	  const handleFocusRef = useForkRef(focusVisibleRef, rootRef);
	  const handleRef = useForkRef(handleFocusRef, ref);

	  const handleMouseMove = event => {
	    if (onMouseMove) {
	      onMouseMove(event);
	    }

	    const rootNode = rootRef.current;
	    const {
	      right,
	      left
	    } = rootNode.getBoundingClientRect();
	    const {
	      width
	    } = rootNode.firstChild.getBoundingClientRect();
	    let percent;

	    if (theme.direction === 'rtl') {
	      percent = (right - event.clientX) / (width * max);
	    } else {
	      percent = (event.clientX - left) / (width * max);
	    }

	    let newHover = roundValueToPrecision(max * percent + precision / 2, precision);
	    newHover = clamp$1(newHover, precision, max);
	    setState(prev => prev.hover === newHover && prev.focus === newHover ? prev : {
	      hover: newHover,
	      focus: newHover
	    });
	    setFocusVisible(false);

	    if (onChangeActive && hover !== newHover) {
	      onChangeActive(event, newHover);
	    }
	  };

	  const handleMouseLeave = event => {
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }

	    const newHover = -1;
	    setState({
	      hover: newHover,
	      focus: newHover
	    });

	    if (onChangeActive && hover !== newHover) {
	      onChangeActive(event, newHover);
	    }
	  };

	  const handleChange = event => {
	    let newValue = event.target.value === '' ? null : parseFloat(event.target.value); // Give mouse priority over keyboard
	    // Fix https://github.com/mui/material-ui/issues/22827

	    if (hover !== -1) {
	      newValue = hover;
	    }

	    setValueState(newValue);

	    if (onChange) {
	      onChange(event, newValue);
	    }
	  };

	  const handleClear = event => {
	    // Ignore keyboard events
	    // https://github.com/facebook/react/issues/7407
	    if (event.clientX === 0 && event.clientY === 0) {
	      return;
	    }

	    setState({
	      hover: -1,
	      focus: -1
	    });
	    setValueState(null);

	    if (onChange && parseFloat(event.target.value) === valueRounded) {
	      onChange(event, null);
	    }
	  };

	  const handleFocus = event => {
	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	    }

	    const newFocus = parseFloat(event.target.value);
	    setState(prev => ({
	      hover: prev.hover,
	      focus: newFocus
	    }));
	  };

	  const handleBlur = event => {
	    if (hover !== -1) {
	      return;
	    }

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    const newFocus = -1;
	    setState(prev => ({
	      hover: prev.hover,
	      focus: newFocus
	    }));
	  };

	  const [emptyValueFocused, setEmptyValueFocused] = react.exports.useState(false);

	  const ownerState = _extends({}, props, {
	    defaultValue,
	    disabled,
	    emptyIcon,
	    emptyLabelText,
	    emptyValueFocused,
	    focusVisible,
	    getLabelText,
	    icon,
	    IconContainerComponent,
	    max,
	    precision,
	    readOnly,
	    size
	  });

	  const classes = useUtilityClasses$y(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(RatingRoot, _extends({
	    ref: handleRef,
	    onMouseMove: handleMouseMove,
	    onMouseLeave: handleMouseLeave,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    role: readOnly ? 'img' : null,
	    "aria-label": readOnly ? getLabelText(value) : null
	  }, other, {
	    children: [Array.from(new Array(max)).map((_, index) => {
	      const itemValue = index + 1;
	      const ratingItemProps = {
	        classes,
	        disabled,
	        emptyIcon,
	        focus,
	        getLabelText,
	        highlightSelectedOnly,
	        hover,
	        icon,
	        IconContainerComponent,
	        name,
	        onBlur: handleBlur,
	        onChange: handleChange,
	        onClick: handleClear,
	        onFocus: handleFocus,
	        ratingValue: value,
	        ratingValueRounded: valueRounded,
	        readOnly,
	        ownerState
	      };
	      const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);

	      if (precision < 1) {
	        const items = Array.from(new Array(1 / precision));
	        return /*#__PURE__*/jsxRuntime.exports.jsx(RatingDecimal, {
	          className: clsx(classes.decimal, isActive && classes.iconActive),
	          ownerState: ownerState,
	          iconActive: isActive,
	          children: items.map(($, indexDecimal) => {
	            const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
	            return /*#__PURE__*/jsxRuntime.exports.jsx(RatingItem, _extends({}, ratingItemProps, {
	              // The icon is already displayed as active
	              isActive: false,
	              itemValue: itemDecimalValue,
	              labelProps: {
	                style: items.length - 1 === indexDecimal ? {} : {
	                  width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : '0%',
	                  overflow: 'hidden',
	                  position: 'absolute'
	                }
	              }
	            }), itemDecimalValue);
	          })
	        }, itemValue);
	      }

	      return /*#__PURE__*/jsxRuntime.exports.jsx(RatingItem, _extends({}, ratingItemProps, {
	        isActive: isActive,
	        itemValue: itemValue
	      }), itemValue);
	    }), !readOnly && !disabled && /*#__PURE__*/jsxRuntime.exports.jsxs(RatingLabel, {
	      className: clsx(classes.label, classes.labelEmptyValue),
	      ownerState: ownerState,
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx("input", {
	        className: classes.visuallyHidden,
	        value: "",
	        id: `${name}-empty`,
	        type: "radio",
	        name: name,
	        checked: valueRounded == null,
	        onFocus: () => setEmptyValueFocused(true),
	        onBlur: () => setEmptyValueFocused(false),
	        onChange: handleChange
	      }), /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: classes.visuallyHidden,
	        children: emptyLabelText
	      })]
	    })]
	  }));
	});
	Rating.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The default value. Use when the component is not controlled.
	   * @default null
	   */
	  defaultValue: propTypes.exports.number,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * The icon to display when empty.
	   * @default <StarBorder fontSize="inherit" />
	   */
	  emptyIcon: propTypes.exports.node,

	  /**
	   * The label read when the rating input is empty.
	   * @default 'Empty'
	   */
	  emptyLabelText: propTypes.exports.node,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
	   * This is important for screen reader users.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @param {number} value The rating label's value to format.
	   * @returns {string}
	   * @default function defaultLabelText(value) {
	   *   return `${value} Star${value !== 1 ? 's' : ''}`;
	   * }
	   */
	  getLabelText: propTypes.exports.func,

	  /**
	   * If `true`, only the selected icon will be highlighted.
	   * @default false
	   */
	  highlightSelectedOnly: propTypes.exports.bool,

	  /**
	   * The icon to display.
	   * @default <Star fontSize="inherit" />
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The component containing the icon.
	   * @default function IconContainer(props) {
	   *   const { value, ...other } = props;
	   *   return <span {...other} />;
	   * }
	   */
	  IconContainerComponent: propTypes.exports.elementType,

	  /**
	   * Maximum rating.
	   * @default 5
	   */
	  max: propTypes.exports.number,

	  /**
	   * The name attribute of the radio `input` elements.
	   * This input `name` should be unique within the page.
	   * Being unique within a form is insufficient since the `name` is used to generated IDs.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback fired when the value changes.
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {number|null} value The new value.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback function that is fired when the hover state changes.
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   * @param {number} value The new value.
	   */
	  onChangeActive: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseMove: propTypes.exports.func,

	  /**
	   * The minimum increment value change allowed.
	   * @default 1
	   */
	  precision: chainPropTypes(propTypes.exports.number, props => {
	    if (props.precision < 0.1) {
	      return new Error(['MUI: The prop `precision` should be above 0.1.', 'A value below this limit has an imperceptible impact.'].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * Removes all hover effects and pointer events.
	   * @default false
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The rating value.
	   */
	  value: propTypes.exports.number
	} ;

	function getScopedCssBaselineUtilityClass(slot) {
	  return generateUtilityClass('MuiScopedCssBaseline', slot);
	}
	generateUtilityClasses('MuiScopedCssBaseline', ['root']);

	const _excluded$E = ["className", "component", "enableColorScheme"];

	const useUtilityClasses$x = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);
	};

	const ScopedCssBaselineRoot = styled('div', {
	  name: 'MuiScopedCssBaseline',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => {
	  return _extends({}, html(theme, ownerState.enableColorScheme), body(theme), {
	    '& *, & *::before, & *::after': {
	      boxSizing: 'inherit'
	    },
	    '& strong, & b': {
	      fontWeight: theme.typography.fontWeightBold
	    }
	  });
	});
	const ScopedCssBaseline = /*#__PURE__*/react.exports.forwardRef(function ScopedCssBaseline(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiScopedCssBaseline'
	  });

	  const {
	    className,
	    component = 'div'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$E);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$x(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ScopedCssBaselineRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	ScopedCssBaseline.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
	   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
	   * For browser support, check out https://caniuse.com/?search=color-scheme
	   */
	  enableColorScheme: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiSelect', slot);
	}
	const selectClasses = generateUtilityClasses('MuiSelect', ['select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);

	var _span;

	const _excluded$D = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
	const SelectSelect = styled('div', {
	  name: 'MuiSelect',
	  slot: 'Select',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [// Win specificity over the input base
	    {
	      [`&.${selectClasses.select}`]: styles.select
	    }, {
	      [`&.${selectClasses.select}`]: styles[ownerState.variant]
	    }, {
	      [`&.${selectClasses.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles, {
	  // Win specificity over the input base
	  [`&.${selectClasses.select}`]: {
	    height: 'auto',
	    // Resets for multiple select with chips
	    minHeight: '1.4375em',
	    // Required for select\text-field height consistency
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    overflow: 'hidden'
	  }
	});
	const SelectIcon = styled('svg', {
	  name: 'MuiSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);
	const SelectNativeInput = styled('input', {
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
	  name: 'MuiSelect',
	  slot: 'NativeInput',
	  overridesResolver: (props, styles) => styles.nativeInput
	})({
	  bottom: 0,
	  left: 0,
	  position: 'absolute',
	  opacity: 0,
	  pointerEvents: 'none',
	  width: '100%',
	  boxSizing: 'border-box'
	});

	function areEqualValues(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  } // The value could be a number, the DOM will stringify it anyway.


	  return String(a) === String(b);
	}

	function isEmpty(display) {
	  return display == null || typeof display === 'string' && !display.trim();
	}

	const useUtilityClasses$w = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
	    nativeInput: ['nativeInput']
	  };
	  return composeClasses(slots, getSelectUtilityClasses, classes);
	};
	/**
	 * @ignore - internal component.
	 */


	const SelectInput = /*#__PURE__*/react.exports.forwardRef(function SelectInput(props, ref) {
	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    autoFocus,
	    autoWidth,
	    children,
	    className,
	    defaultOpen,
	    defaultValue,
	    disabled,
	    displayEmpty,
	    IconComponent,
	    inputRef: inputRefProp,
	    labelId,
	    MenuProps = {},
	    multiple,
	    name,
	    onBlur,
	    onChange,
	    onClose,
	    onFocus,
	    onOpen,
	    open: openProp,
	    readOnly,
	    renderValue,
	    SelectDisplayProps = {},
	    tabIndex: tabIndexProp,
	    value: valueProp,
	    variant = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$D);

	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Select'
	  });
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: defaultOpen,
	    name: 'Select'
	  });
	  const inputRef = react.exports.useRef(null);
	  const displayRef = react.exports.useRef(null);
	  const [displayNode, setDisplayNode] = react.exports.useState(null);
	  const {
	    current: isOpenControlled
	  } = react.exports.useRef(openProp != null);
	  const [menuMinWidthState, setMenuMinWidthState] = react.exports.useState();
	  const handleRef = useForkRef(ref, inputRefProp);
	  const handleDisplayRef = react.exports.useCallback(node => {
	    displayRef.current = node;

	    if (node) {
	      setDisplayNode(node);
	    }
	  }, []);
	  react.exports.useImperativeHandle(handleRef, () => ({
	    focus: () => {
	      displayRef.current.focus();
	    },
	    node: inputRef.current,
	    value
	  }), [value]); // Resize menu on `defaultOpen` automatic toggle.

	  react.exports.useEffect(() => {
	    if (defaultOpen && openState && displayNode && !isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      displayRef.current.focus();
	    } // eslint-disable-next-line react-hooks/exhaustive-deps

	  }, [displayNode, autoWidth]); // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
	  // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.

	  react.exports.useEffect(() => {
	    if (autoFocus) {
	      displayRef.current.focus();
	    }
	  }, [autoFocus]);
	  react.exports.useEffect(() => {
	    if (!labelId) {
	      return undefined;
	    }

	    const label = ownerDocument(displayRef.current).getElementById(labelId);

	    if (label) {
	      const handler = () => {
	        if (getSelection().isCollapsed) {
	          displayRef.current.focus();
	        }
	      };

	      label.addEventListener('click', handler);
	      return () => {
	        label.removeEventListener('click', handler);
	      };
	    }

	    return undefined;
	  }, [labelId]);

	  const update = (open, event) => {
	    if (open) {
	      if (onOpen) {
	        onOpen(event);
	      }
	    } else if (onClose) {
	      onClose(event);
	    }

	    if (!isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      setOpenState(open);
	    }
	  };

	  const handleMouseDown = event => {
	    // Ignore everything but left-click
	    if (event.button !== 0) {
	      return;
	    } // Hijack the default focus behavior.


	    event.preventDefault();
	    displayRef.current.focus();
	    update(true, event);
	  };

	  const handleClose = event => {
	    update(false, event);
	  };

	  const childrenArray = react.exports.Children.toArray(children); // Support autofill.

	  const handleChange = event => {
	    const index = childrenArray.map(child => child.props.value).indexOf(event.target.value);

	    if (index === -1) {
	      return;
	    }

	    const child = childrenArray[index];
	    setValueState(child.props.value);

	    if (onChange) {
	      onChange(event, child);
	    }
	  };

	  const handleItemClick = child => event => {
	    let newValue; // We use the tabindex attribute to signal the available options.

	    if (!event.currentTarget.hasAttribute('tabindex')) {
	      return;
	    }

	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = value.indexOf(child.props.value);

	      if (itemIndex === -1) {
	        newValue.push(child.props.value);
	      } else {
	        newValue.splice(itemIndex, 1);
	      }
	    } else {
	      newValue = child.props.value;
	    }

	    if (child.props.onClick) {
	      child.props.onClick(event);
	    }

	    if (value !== newValue) {
	      setValueState(newValue);

	      if (onChange) {
	        // Redefine target to allow name and value to be read.
	        // This allows seamless integration with the most popular form libraries.
	        // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
	        // Clone the event to not override `target` of the original event.
	        const nativeEvent = event.nativeEvent || event;
	        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        Object.defineProperty(clonedEvent, 'target', {
	          writable: true,
	          value: {
	            value: newValue,
	            name
	          }
	        });
	        onChange(clonedEvent, child);
	      }
	    }

	    if (!multiple) {
	      update(false, event);
	    }
	  };

	  const handleKeyDown = event => {
	    if (!readOnly) {
	      const validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on macOS, but it's recommended by
	      // https://www.w3.org/WAI/ARIA/apg/example-index/combobox/combobox-select-only.html
	      'Enter'];

	      if (validKeys.indexOf(event.key) !== -1) {
	        event.preventDefault();
	        update(true, event);
	      }
	    }
	  };

	  const open = displayNode !== null && openState;

	  const handleBlur = event => {
	    // if open event.stopImmediatePropagation
	    if (!open && onBlur) {
	      // Preact support, target is read only property on a native event.
	      Object.defineProperty(event, 'target', {
	        writable: true,
	        value: {
	          value,
	          name
	        }
	      });
	      onBlur(event);
	    }
	  };

	  delete other['aria-invalid'];
	  let display;
	  let displaySingle;
	  const displayMultiple = [];
	  let computeDisplay = false;
	  let foundMatch = false; // No need to display any value if the field is empty.

	  if (isFilled({
	    value
	  }) || displayEmpty) {
	    if (renderValue) {
	      display = renderValue(value);
	    } else {
	      computeDisplay = true;
	    }
	  }

	  const items = childrenArray.map((child, index, arr) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return null;
	    }

	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    let selected;

	    if (multiple) {
	      if (!Array.isArray(value)) {
	        throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` );
	      }

	      selected = value.some(v => areEqualValues(v, child.props.value));

	      if (selected && computeDisplay) {
	        displayMultiple.push(child.props.children);
	      }
	    } else {
	      selected = areEqualValues(value, child.props.value);

	      if (selected && computeDisplay) {
	        displaySingle = child.props.children;
	      }
	    }

	    if (selected) {
	      foundMatch = true;
	    }

	    if (child.props.value === undefined) {
	      return /*#__PURE__*/react.exports.cloneElement(child, {
	        'aria-readonly': true,
	        role: 'option'
	      });
	    }

	    const isFirstSelectableElement = () => {
	      if (value) {
	        return selected;
	      }

	      const firstSelectableElement = arr.find(item => item.props.value !== undefined && item.props.disabled !== true);

	      if (child === firstSelectableElement) {
	        return true;
	      }

	      return selected;
	    };

	    return /*#__PURE__*/react.exports.cloneElement(child, {
	      'aria-selected': selected ? 'true' : 'false',
	      onClick: handleItemClick(child),
	      onKeyUp: event => {
	        if (event.key === ' ') {
	          // otherwise our MenuItems dispatches a click event
	          // it's not behavior of the native <option> and causes
	          // the select to close immediately since we open on space keydown
	          event.preventDefault();
	        }

	        if (child.props.onKeyUp) {
	          child.props.onKeyUp(event);
	        }
	      },
	      role: 'option',
	      selected: arr[0].props.value === undefined || arr[0].props.disabled === true ? isFirstSelectableElement() : selected,
	      value: undefined,
	      // The value is most likely not a valid HTML attribute.
	      'data-value': child.props.value // Instead, we provide it as a data attribute.

	    });
	  });

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    react.exports.useEffect(() => {
	      if (!foundMatch && !multiple && value !== '') {
	        const values = childrenArray.map(child => child.props.value);
	        console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ''}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values.filter(x => x != null).map(x => `\`${x}\``).join(', ') || '""'}.`].join('\n'));
	      }
	    }, [foundMatch, childrenArray, multiple, name, value]);
	  }

	  if (computeDisplay) {
	    if (multiple) {
	      if (displayMultiple.length === 0) {
	        display = null;
	      } else {
	        display = displayMultiple.reduce((output, child, index) => {
	          output.push(child);

	          if (index < displayMultiple.length - 1) {
	            output.push(', ');
	          }

	          return output;
	        }, []);
	      }
	    } else {
	      display = displaySingle;
	    }
	  } // Avoid performing a layout computation in the render method.


	  let menuMinWidth = menuMinWidthState;

	  if (!autoWidth && isOpenControlled && displayNode) {
	    menuMinWidth = displayNode.clientWidth;
	  }

	  let tabIndex;

	  if (typeof tabIndexProp !== 'undefined') {
	    tabIndex = tabIndexProp;
	  } else {
	    tabIndex = disabled ? null : 0;
	  }

	  const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);

	  const ownerState = _extends({}, props, {
	    variant,
	    value,
	    open
	  });

	  const classes = useUtilityClasses$w(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SelectSelect, _extends({
	      ref: handleDisplayRef,
	      tabIndex: tabIndex,
	      role: "button",
	      "aria-disabled": disabled ? 'true' : undefined,
	      "aria-expanded": open ? 'true' : 'false',
	      "aria-haspopup": "listbox",
	      "aria-label": ariaLabel,
	      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
	      "aria-describedby": ariaDescribedby,
	      onKeyDown: handleKeyDown,
	      onMouseDown: disabled || readOnly ? null : handleMouseDown,
	      onBlur: handleBlur,
	      onFocus: onFocus
	    }, SelectDisplayProps, {
	      ownerState: ownerState,
	      className: clsx(classes.select, className, SelectDisplayProps.className) // The id is required for proper a11y
	      ,
	      id: buttonId,
	      children: isEmpty(display) ? // notranslate needed while Google Translate will not fix zero-width space issue
	      _span || (_span = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      })) : display
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(SelectNativeInput, _extends({
	      value: Array.isArray(value) ? value.join(',') : value,
	      name: name,
	      ref: inputRef,
	      "aria-hidden": true,
	      onChange: handleChange,
	      tabIndex: -1,
	      disabled: disabled,
	      className: classes.nativeInput,
	      autoFocus: autoFocus,
	      ownerState: ownerState
	    }, other)), /*#__PURE__*/jsxRuntime.exports.jsx(SelectIcon, {
	      as: IconComponent,
	      className: classes.icon,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(Menu, _extends({
	      id: `menu-${name || ''}`,
	      anchorEl: displayNode,
	      open: open,
	      onClose: handleClose,
	      anchorOrigin: {
	        vertical: 'bottom',
	        horizontal: 'center'
	      },
	      transformOrigin: {
	        vertical: 'top',
	        horizontal: 'center'
	      }
	    }, MenuProps, {
	      MenuListProps: _extends({
	        'aria-labelledby': labelId,
	        role: 'listbox',
	        disableListWrap: true
	      }, MenuProps.MenuListProps),
	      PaperProps: _extends({}, MenuProps.PaperProps, {
	        style: _extends({
	          minWidth: menuMinWidth
	        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
	      }),
	      children: items
	    }))]
	  });
	});
	SelectInput.propTypes = {
	  /**
	   * @ignore
	   */
	  'aria-describedby': propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  'aria-label': propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: propTypes.exports.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `<MenuItem>` elements.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  defaultOpen: propTypes.exports.bool,

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the select is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the selected item is displayed even if its value is empty.
	   */
	  displayEmpty: propTypes.exports.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.exports.elementType.isRequired,

	  /**
	   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
	   * Equivalent to `ref`
	   */
	  inputRef: refType,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: propTypes.exports.string,

	  /**
	   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
	   */
	  MenuProps: propTypes.exports.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   */
	  multiple: propTypes.exports.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * @param {object} [child] The react element that was selected.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  readOnly: propTypes.exports.bool,

	  /**
	   * Render the selected value.
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: propTypes.exports.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * @ignore
	   */
	  type: propTypes.exports.any,

	  /**
	   * The input value.
	   */
	  value: propTypes.exports.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.exports.oneOf(['standard', 'outlined', 'filled'])
	} ;

	var _StyledInput, _StyledFilledInput;

	const _excluded$C = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];

	const useUtilityClasses$v = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return classes;
	};

	const styledRootConfig = {
	  name: 'MuiSelect',
	  overridesResolver: (props, styles) => styles.root,
	  shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',
	  slot: 'Root'
	};
	const StyledInput = styled(Input, styledRootConfig)('');
	const StyledOutlinedInput = styled(OutlinedInput, styledRootConfig)('');
	const StyledFilledInput = styled(FilledInput, styledRootConfig)('');
	const Select = /*#__PURE__*/react.exports.forwardRef(function Select(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiSelect',
	    props: inProps
	  });

	  const {
	    autoWidth = false,
	    children,
	    classes: classesProp = {},
	    className,
	    defaultOpen = false,
	    displayEmpty = false,
	    IconComponent = ArrowDropDownIcon,
	    id,
	    input,
	    inputProps,
	    label,
	    labelId,
	    MenuProps,
	    multiple = false,
	    native = false,
	    onClose,
	    onOpen,
	    open,
	    renderValue,
	    SelectDisplayProps,
	    variant: variantProp = 'outlined'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$C);

	  const inputComponent = native ? NativeSelectInput : SelectInput;
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant']
	  });
	  const variant = fcs.variant || variantProp;
	  const InputComponent = input || {
	    standard: _StyledInput || (_StyledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledInput, {})),
	    outlined: /*#__PURE__*/jsxRuntime.exports.jsx(StyledOutlinedInput, {
	      label: label
	    }),
	    filled: _StyledFilledInput || (_StyledFilledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledFilledInput, {}))
	  }[variant];

	  const ownerState = _extends({}, props, {
	    variant,
	    classes: classesProp
	  });

	  const classes = useUtilityClasses$v(ownerState);
	  const inputComponentRef = useForkRef(ref, InputComponent.ref);
	  return /*#__PURE__*/react.exports.cloneElement(InputComponent, _extends({
	    // Most of the logic is implemented in `SelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent,
	    inputProps: _extends({
	      children,
	      IconComponent,
	      variant,
	      type: undefined,
	      // We render a select. We can ignore the type provided by the `Input`.
	      multiple
	    }, native ? {
	      id
	    } : {
	      autoWidth,
	      defaultOpen,
	      displayEmpty,
	      labelId,
	      MenuProps,
	      onClose,
	      onOpen,
	      open,
	      renderValue,
	      SelectDisplayProps: _extends({
	        id
	      }, SelectDisplayProps)
	    }, inputProps, {
	      classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
	    }, input ? input.props.inputProps : {})
	  }, multiple && native && variant === 'outlined' ? {
	    notched: true
	  } : {}, {
	    ref: inputComponentRef,
	    className: clsx(InputComponent.props.className, className),
	    variant
	  }, other));
	});
	Select.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   * @default false
	   */
	  autoWidth: propTypes.exports.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
	   *
	   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * @default {}
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
	   * You can only use it when the `native` prop is `false` (default).
	   * @default false
	   */
	  defaultOpen: propTypes.exports.bool,

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, a value is displayed even if no items are selected.
	   *
	   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
	   * returns the value to be displayed when no items are selected.
	   *
	   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
	   * The label should either be hidden or forced to a shrunk state.
	   * @default false
	   */
	  displayEmpty: propTypes.exports.bool,

	  /**
	   * The icon that displays the arrow.
	   * @default ArrowDropDownIcon
	   */
	  IconComponent: propTypes.exports.elementType,

	  /**
	   * The `id` of the wrapper element or the `select` element when `native`.
	   */
	  id: propTypes.exports.string,

	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   */
	  input: propTypes.exports.element,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * When `native` is `true`, the attributes are applied on the `select` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
	   */
	  label: propTypes.exports.node,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: propTypes.exports.string,

	  /**
	   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
	   */
	  MenuProps: propTypes.exports.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   * @default false
	   */
	  multiple: propTypes.exports.bool,

	  /**
	   * If `true`, the component uses a native `select` element.
	   * @default false
	   */
	  native: propTypes.exports.bool,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {SelectChangeEvent<T>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.
	   * @param {object} [child] The react element that was selected when `native` is `false` (default).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  open: propTypes.exports.bool,

	  /**
	   * Render the selected value.
	   * You can only use it when the `native` prop is `false` (default).
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: propTypes.exports.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The `input` value. Providing an empty string will select no options.
	   * Set to an empty string `''` if you don't want any of the available options to be selected.
	   *
	   * If the value is an object it must have reference equality with the option in order to be selected.
	   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.oneOf(['']), propTypes.exports.any]),

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;
	Select.muiName = 'Select';

	function getSkeletonUtilityClass(slot) {
	  return generateUtilityClass('MuiSkeleton', slot);
	}
	generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);

	const _excluded$B = ["animation", "className", "component", "height", "style", "variant", "width"];

	let _ = t => t,
	    _t,
	    _t2,
	    _t3,
	    _t4;

	const useUtilityClasses$u = ownerState => {
	  const {
	    classes,
	    variant,
	    animation,
	    hasChildren,
	    width,
	    height
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']
	  };
	  return composeClasses(slots, getSkeletonUtilityClass, classes);
	};

	const pulseKeyframe = keyframes(_t || (_t = _`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
	const waveKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
	const SkeletonRoot = styled('span', {
	  name: 'MuiSkeleton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';
	  const radiusValue = toUnitless(theme.shape.borderRadius);
	  return _extends({
	    display: 'block',
	    // Create a "on paper" color with sufficient contrast retaining the color
	    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),
	    height: '1.2em'
	  }, ownerState.variant === 'text' && {
	    marginTop: 0,
	    marginBottom: 0,
	    height: 'auto',
	    transformOrigin: '0 55%',
	    transform: 'scale(1, 0.60)',
	    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
	    '&:empty:before': {
	      content: '"\\00a0"'
	    }
	  }, ownerState.variant === 'circular' && {
	    borderRadius: '50%'
	  }, ownerState.hasChildren && {
	    '& > *': {
	      visibility: 'hidden'
	    }
	  }, ownerState.hasChildren && !ownerState.width && {
	    maxWidth: 'fit-content'
	  }, ownerState.hasChildren && !ownerState.height && {
	    height: 'auto'
	  });
	}, ({
	  ownerState
	}) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _`
      animation: ${0} 1.5s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
	  ownerState,
	  theme
	}) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
	const Skeleton = /*#__PURE__*/react.exports.forwardRef(function Skeleton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSkeleton'
	  });

	  const {
	    animation = 'pulse',
	    className,
	    component = 'span',
	    height,
	    style,
	    variant = 'text',
	    width
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$B);

	  const ownerState = _extends({}, props, {
	    animation,
	    component,
	    variant,
	    hasChildren: Boolean(other.children)
	  });

	  const classes = useUtilityClasses$u(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(SkeletonRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    style: _extends({
	      width,
	      height
	    }, style)
	  }));
	});
	Skeleton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The animation.
	   * If `false` the animation effect is disabled.
	   * @default 'pulse'
	   */
	  animation: propTypes.exports.oneOf(['pulse', 'wave', false]),

	  /**
	   * Optional children to infer width and height from.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Height of the skeleton.
	   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	   */
	  height: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The type of content that will be rendered.
	   * @default 'text'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['circular', 'rectangular', 'text']), propTypes.exports.string]),

	  /**
	   * Width of the skeleton.
	   * Useful when the skeleton is inside an inline element with no width of its own.
	   */
	  width: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])
	} ;

	const _excluded$A = ["component", "components", "componentsProps", "color", "size"];
	const sliderClasses = _extends({}, sliderUnstyledClasses, generateUtilityClasses('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));
	const SliderRoot = styled('span', {
	  name: 'MuiSlider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`color${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], ownerState.marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  borderRadius: 12,
	  boxSizing: 'content-box',
	  display: 'inline-block',
	  position: 'relative',
	  cursor: 'pointer',
	  touchAction: 'none',
	  color: (theme.vars || theme).palette[ownerState.color].main,
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.orientation === 'horizontal' && _extends({
	  height: 4,
	  width: '100%',
	  padding: '13px 0',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '20px 0'
	  }
	}, ownerState.size === 'small' && {
	  height: 2
	}, ownerState.marked && {
	  marginBottom: 20
	}), ownerState.orientation === 'vertical' && _extends({
	  height: '100%',
	  width: 4,
	  padding: '0 13px',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '0 20px'
	  }
	}, ownerState.size === 'small' && {
	  width: 2
	}, ownerState.marked && {
	  marginRight: 44
	}), {
	  '@media print': {
	    colorAdjust: 'exact'
	  },
	  [`&.${sliderClasses.disabled}`]: {
	    pointerEvents: 'none',
	    cursor: 'default',
	    color: (theme.vars || theme).palette.grey[400]
	  },
	  [`&.${sliderClasses.dragging}`]: {
	    [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
	      transition: 'none'
	    }
	  }
	}));
	SliderRoot.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderRail = styled('span', {
	  name: 'MuiSlider',
	  slot: 'Rail',
	  overridesResolver: (props, styles) => styles.rail
	})(({
	  ownerState
	}) => _extends({
	  display: 'block',
	  position: 'absolute',
	  borderRadius: 'inherit',
	  backgroundColor: 'currentColor',
	  opacity: 0.38
	}, ownerState.orientation === 'horizontal' && {
	  width: '100%',
	  height: 'inherit',
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  width: 'inherit',
	  left: '50%',
	  transform: 'translateX(-50%)'
	}, ownerState.track === 'inverted' && {
	  opacity: 1
	}));
	SliderRail.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderTrack = styled('span', {
	  name: 'MuiSlider',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme,
	  ownerState
	}) => {
	  const color = // Same logic as the LinearProgress track color
	  theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
	  return _extends({
	    display: 'block',
	    position: 'absolute',
	    borderRadius: 'inherit',
	    border: '1px solid currentColor',
	    backgroundColor: 'currentColor',
	    transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
	      duration: theme.transitions.duration.shortest
	    })
	  }, ownerState.size === 'small' && {
	    border: 'none'
	  }, ownerState.orientation === 'horizontal' && {
	    height: 'inherit',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  }, ownerState.orientation === 'vertical' && {
	    width: 'inherit',
	    left: '50%',
	    transform: 'translateX(-50%)'
	  }, ownerState.track === false && {
	    display: 'none'
	  }, ownerState.track === 'inverted' && {
	    backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color,
	    borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color
	  });
	});
	SliderTrack.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderThumb = styled('span', {
	  name: 'MuiSlider',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.thumb, styles[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'absolute',
	  width: 20,
	  height: 20,
	  boxSizing: 'border-box',
	  borderRadius: '50%',
	  outline: 0,
	  backgroundColor: 'currentColor',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
	    duration: theme.transitions.duration.shortest
	  })
	}, ownerState.size === 'small' && {
	  width: 12,
	  height: 12
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-50%, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 50%)'
	}, {
	  '&:before': _extends({
	    position: 'absolute',
	    content: '""',
	    borderRadius: 'inherit',
	    width: '100%',
	    height: '100%',
	    boxShadow: (theme.vars || theme).shadows[2]
	  }, ownerState.size === 'small' && {
	    boxShadow: 'none'
	  }),
	  '&::after': {
	    position: 'absolute',
	    content: '""',
	    borderRadius: '50%',
	    // 42px is the hit target
	    width: 42,
	    height: 42,
	    top: '50%',
	    left: '50%',
	    transform: 'translate(-50%, -50%)'
	  },
	  [`&:hover, &.${sliderClasses.focusVisible}`]: {
	    boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
	    '@media (hover: none)': {
	      boxShadow: 'none'
	    }
	  },
	  [`&.${sliderClasses.active}`]: {
	    boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
	  },
	  [`&.${sliderClasses.disabled}`]: {
	    '&:hover': {
	      boxShadow: 'none'
	    }
	  }
	}));
	SliderThumb.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderValueLabel = styled(SliderValueLabelUnstyled, {
	  name: 'MuiSlider',
	  slot: 'ValueLabel',
	  overridesResolver: (props, styles) => styles.valueLabel
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  [`&.${sliderClasses.valueLabelOpen}`]: {
	    transform: 'translateY(-100%) scale(1)'
	  },
	  zIndex: 1,
	  whiteSpace: 'nowrap'
	}, theme.typography.body2, {
	  fontWeight: 500,
	  transition: theme.transitions.create(['transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  transform: 'translateY(-100%) scale(0)',
	  position: 'absolute',
	  backgroundColor: (theme.vars || theme).palette.grey[600],
	  borderRadius: 2,
	  color: (theme.vars || theme).palette.common.white,
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  padding: '0.25rem 0.75rem'
	}, ownerState.orientation === 'horizontal' && {
	  top: '-10px',
	  transformOrigin: 'bottom center',
	  '&:before': {
	    position: 'absolute',
	    content: '""',
	    width: 8,
	    height: 8,
	    transform: 'translate(-50%, 50%) rotate(45deg)',
	    backgroundColor: 'inherit',
	    bottom: 0,
	    left: '50%'
	  }
	}, ownerState.orientation === 'vertical' && {
	  right: '30px',
	  top: '24px',
	  transformOrigin: 'right center',
	  '&:before': {
	    position: 'absolute',
	    content: '""',
	    width: 8,
	    height: 8,
	    transform: 'translate(-50%, 50%) rotate(45deg)',
	    backgroundColor: 'inherit',
	    right: '-20%',
	    top: '25%'
	  }
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(12),
	  padding: '0.25rem 0.5rem'
	}));
	SliderValueLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderMark = styled('span', {
	  name: 'MuiSlider',
	  slot: 'Mark',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markActive',
	  overridesResolver: (props, styles) => styles.mark
	})(({
	  theme,
	  ownerState,
	  markActive
	}) => _extends({
	  position: 'absolute',
	  width: 2,
	  height: 2,
	  borderRadius: 1,
	  backgroundColor: 'currentColor'
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-1px, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 1px)'
	}, markActive && {
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  opacity: 0.8
	}));
	SliderMark.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;
	const SliderMarkLabel = styled('span', {
	  name: 'MuiSlider',
	  slot: 'MarkLabel',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markLabelActive',
	  overridesResolver: (props, styles) => styles.markLabel
	})(({
	  theme,
	  ownerState,
	  markLabelActive
	}) => _extends({}, theme.typography.body2, {
	  color: (theme.vars || theme).palette.text.secondary,
	  position: 'absolute',
	  whiteSpace: 'nowrap'
	}, ownerState.orientation === 'horizontal' && {
	  top: 30,
	  transform: 'translateX(-50%)',
	  '@media (pointer: coarse)': {
	    top: 40
	  }
	}, ownerState.orientation === 'vertical' && {
	  left: 36,
	  transform: 'translateY(50%)',
	  '@media (pointer: coarse)': {
	    left: 44
	  }
	}, markLabelActive && {
	  color: (theme.vars || theme).palette.text.primary
	}));
	SliderMarkLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node
	} ;

	const extendUtilityClasses = ownerState => {
	  const {
	    color,
	    size,
	    classes = {}
	  } = ownerState;
	  return _extends({}, classes, {
	    root: clsx(classes.root, getSliderUtilityClass(`color${capitalize(color)}`), classes[`color${capitalize(color)}`], size && [getSliderUtilityClass(`size${capitalize(size)}`), classes[`size${capitalize(size)}`]]),
	    thumb: clsx(classes.thumb, getSliderUtilityClass(`thumbColor${capitalize(color)}`), classes[`thumbColor${capitalize(color)}`], size && [getSliderUtilityClass(`thumbSize${capitalize(size)}`), classes[`thumbSize${capitalize(size)}`]])
	  });
	};

	const Slider = /*#__PURE__*/react.exports.forwardRef(function Slider(inputProps, ref) {
	  var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;

	  const props = useThemeProps({
	    props: inputProps,
	    name: 'MuiSlider'
	  });
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';

	  const {
	    // eslint-disable-next-line react/prop-types
	    component = 'span',
	    components = {},
	    componentsProps = {},
	    color = 'primary',
	    size = 'medium'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$A);

	  const ownerState = _extends({}, props, {
	    color,
	    size
	  });

	  const classes = extendUtilityClasses(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(SliderUnstyled, _extends({}, other, {
	    isRtl: isRtl,
	    components: _extends({
	      Root: SliderRoot,
	      Rail: SliderRail,
	      Track: SliderTrack,
	      Thumb: SliderThumb,
	      ValueLabel: SliderValueLabel,
	      Mark: SliderMark,
	      MarkLabel: SliderMarkLabel
	    }, components),
	    componentsProps: _extends({}, componentsProps, {
	      root: _extends({}, componentsProps.root, shouldSpreadAdditionalProps(components.Root) && {
	        as: component,
	        ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
	          color,
	          size
	        })
	      }),
	      thumb: _extends({}, componentsProps.thumb, shouldSpreadAdditionalProps(components.Thumb) && {
	        ownerState: _extends({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
	          color,
	          size
	        })
	      }),
	      track: _extends({}, componentsProps.track, shouldSpreadAdditionalProps(components.Track) && {
	        ownerState: _extends({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
	          color,
	          size
	        })
	      }),
	      valueLabel: _extends({}, componentsProps.valueLabel, shouldSpreadAdditionalProps(components.ValueLabel) && {
	        ownerState: _extends({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
	          color,
	          size
	        })
	      })
	    }),
	    classes: classes,
	    ref: ref
	  }));
	});
	Slider.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The label of the slider.
	   */
	  'aria-label': chainPropTypes(propTypes.exports.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-label'] != null) {
	      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * The id of the element containing a label for the slider.
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * A string value that provides a user-friendly name for the current value of the slider.
	   */
	  'aria-valuetext': chainPropTypes(propTypes.exports.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-valuetext'] != null) {
	      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary']), propTypes.exports.string]),

	  /**
	   * The components used for each slot inside the Slider.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Input: propTypes.exports.elementType,
	    Mark: propTypes.exports.elementType,
	    MarkLabel: propTypes.exports.elementType,
	    Rail: propTypes.exports.elementType,
	    Root: propTypes.exports.elementType,
	    Thumb: propTypes.exports.elementType,
	    Track: propTypes.exports.elementType,
	    ValueLabel: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Slider.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    mark: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    markLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    rail: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    thumb: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    track: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
	    valueLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
	      children: propTypes.exports.element,
	      className: propTypes.exports.string,
	      components: propTypes.exports.shape({
	        Root: propTypes.exports.elementType
	      }),
	      open: propTypes.exports.bool,
	      style: propTypes.exports.object,
	      value: propTypes.exports.number,
	      valueLabelDisplay: propTypes.exports.oneOf(['auto', 'off', 'on'])
	    })])
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
	   * @default false
	   */
	  disableSwap: propTypes.exports.bool,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
	   * This is important for screen reader users.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaLabel: propTypes.exports.func,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
	   * This is important for screen reader users.
	   * @param {number} value The thumb label's value to format.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaValueText: propTypes.exports.func,

	  /**
	   * Indicates whether the theme context has rtl direction. It is set automatically.
	   * @default false
	   */
	  isRtl: propTypes.exports.bool,

	  /**
	   * Marks indicate predetermined values to which the user can move the slider.
	   * If `true` the marks are spaced according the value of the `step` prop.
	   * If an array, it should contain objects with `value` and an optional `label` keys.
	   * @default false
	   */
	  marks: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.shape({
	    label: propTypes.exports.node,
	    value: propTypes.exports.number.isRequired
	  })), propTypes.exports.bool]),

	  /**
	   * The maximum allowed value of the slider.
	   * Should not be equal to min.
	   * @default 100
	   */
	  max: propTypes.exports.number,

	  /**
	   * The minimum allowed value of the slider.
	   * Should not be equal to max.
	   * @default 0
	   */
	  min: propTypes.exports.number,

	  /**
	   * Name attribute of the hidden `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * Callback function that is fired when the slider's value changed.
	   *
	   * @param {Event} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   * @param {number} activeThumb Index of the currently moved thumb.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback function that is fired when the `mouseup` is triggered.
	   *
	   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   */
	  onChangeCommitted: propTypes.exports.func,

	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * A transformation function, to change the scale of the slider.
	   * @default (x) => x
	   */
	  scale: propTypes.exports.func,

	  /**
	   * The size of the slider.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium']), propTypes.exports.string]),

	  /**
	   * The granularity with which the slider can step through values. (A "discrete" slider.)
	   * The `min` prop serves as the origin for the valid values.
	   * We recommend (max - min) to be evenly divisible by the step.
	   *
	   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
	   * @default 1
	   */
	  step: propTypes.exports.number,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Tab index attribute of the hidden `input` element.
	   */
	  tabIndex: propTypes.exports.number,

	  /**
	   * The track presentation:
	   *
	   * - `normal` the track will render a bar representing the slider value.
	   * - `inverted` the track will render a bar representing the remaining slider value.
	   * - `false` the track will render without a bar.
	   * @default 'normal'
	   */
	  track: propTypes.exports.oneOf(['inverted', 'normal', false]),

	  /**
	   * The value of the slider.
	   * For ranged sliders, provide an array with two values.
	   */
	  value: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),

	  /**
	   * Controls when the value label is displayed:
	   *
	   * - `auto` the value label will display when the thumb is hovered or focused.
	   * - `on` will display persistently.
	   * - `off` will never display.
	   * @default 'off'
	   */
	  valueLabelDisplay: propTypes.exports.oneOf(['auto', 'off', 'on']),

	  /**
	   * The format function the value label's value.
	   *
	   * When a function is provided, it should have the following signature:
	   *
	   * - {number} value The value label's value to format
	   * - {number} index The value label's index to format
	   * @default (x) => x
	   */
	  valueLabelFormat: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.string])
	} ;

	function getSnackbarContentUtilityClass(slot) {
	  return generateUtilityClass('MuiSnackbarContent', slot);
	}
	generateUtilityClasses('MuiSnackbarContent', ['root', 'message', 'action']);

	const _excluded$z = ["action", "className", "message", "role"];

	const useUtilityClasses$t = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    action: ['action'],
	    message: ['message']
	  };
	  return composeClasses(slots, getSnackbarContentUtilityClass, classes);
	};

	const SnackbarContentRoot = styled(Paper, {
	  name: 'MuiSnackbarContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => {
	  const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;
	  const backgroundColor = emphasize(theme.palette.background.default, emphasis);
	  return _extends({}, theme.typography.body2, {
	    color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor),
	    backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor,
	    display: 'flex',
	    alignItems: 'center',
	    flexWrap: 'wrap',
	    padding: '6px 16px',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    flexGrow: 1,
	    [theme.breakpoints.up('sm')]: {
	      flexGrow: 'initial',
	      minWidth: 288
	    }
	  });
	});
	const SnackbarContentMessage = styled('div', {
	  name: 'MuiSnackbarContent',
	  slot: 'Message',
	  overridesResolver: (props, styles) => styles.message
	})({
	  padding: '8px 0'
	});
	const SnackbarContentAction = styled('div', {
	  name: 'MuiSnackbarContent',
	  slot: 'Action',
	  overridesResolver: (props, styles) => styles.action
	})({
	  display: 'flex',
	  alignItems: 'center',
	  marginLeft: 'auto',
	  paddingLeft: 16,
	  marginRight: -8
	});
	const SnackbarContent = /*#__PURE__*/react.exports.forwardRef(function SnackbarContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSnackbarContent'
	  });

	  const {
	    action,
	    className,
	    message,
	    role = 'alert'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$z);

	  const ownerState = props;
	  const classes = useUtilityClasses$t(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SnackbarContentRoot, _extends({
	    role: role,
	    square: true,
	    elevation: 6,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SnackbarContentMessage, {
	      className: classes.message,
	      ownerState: ownerState,
	      children: message
	    }), action ? /*#__PURE__*/jsxRuntime.exports.jsx(SnackbarContentAction, {
	      className: classes.action,
	      ownerState: ownerState,
	      children: action
	    }) : null]
	  }));
	});
	SnackbarContent.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The action to display. It renders after the message, at the end of the snackbar.
	   */
	  action: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The message to display.
	   */
	  message: propTypes.exports.node,

	  /**
	   * The ARIA role attribute of the element.
	   * @default 'alert'
	   */
	  role: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getSnackbarUtilityClass(slot) {
	  return generateUtilityClass('MuiSnackbar', slot);
	}
	generateUtilityClasses('MuiSnackbar', ['root', 'anchorOriginTopCenter', 'anchorOriginBottomCenter', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft']);

	const _excluded$y = ["onEnter", "onExited"],
	      _excluded2$2 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];

	const useUtilityClasses$s = ownerState => {
	  const {
	    classes,
	    anchorOrigin
	  } = ownerState;
	  const slots = {
	    root: ['root', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`]
	  };
	  return composeClasses(slots, getSnackbarUtilityClass, classes);
	};

	const SnackbarRoot = styled('div', {
	  name: 'MuiSnackbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const center = {
	    left: '50%',
	    right: 'auto',
	    transform: 'translateX(-50%)'
	  };
	  return _extends({
	    zIndex: (theme.vars || theme).zIndex.snackbar,
	    position: 'fixed',
	    display: 'flex',
	    left: 8,
	    right: 8,
	    justifyContent: 'center',
	    alignItems: 'center'
	  }, ownerState.anchorOrigin.vertical === 'top' ? {
	    top: 8
	  } : {
	    bottom: 8
	  }, ownerState.anchorOrigin.horizontal === 'left' && {
	    justifyContent: 'flex-start'
	  }, ownerState.anchorOrigin.horizontal === 'right' && {
	    justifyContent: 'flex-end'
	  }, {
	    [theme.breakpoints.up('sm')]: _extends({}, ownerState.anchorOrigin.vertical === 'top' ? {
	      top: 24
	    } : {
	      bottom: 24
	    }, ownerState.anchorOrigin.horizontal === 'center' && center, ownerState.anchorOrigin.horizontal === 'left' && {
	      left: 24,
	      right: 'auto'
	    }, ownerState.anchorOrigin.horizontal === 'right' && {
	      right: 24,
	      left: 'auto'
	    })
	  });
	});
	const Snackbar = /*#__PURE__*/react.exports.forwardRef(function Snackbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSnackbar'
	  });
	  const theme = useTheme();
	  const defaultTransitionDuration = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    action,
	    anchorOrigin: {
	      vertical,
	      horizontal
	    } = {
	      vertical: 'bottom',
	      horizontal: 'left'
	    },
	    autoHideDuration = null,
	    children,
	    className,
	    ClickAwayListenerProps,
	    ContentProps,
	    disableWindowBlurListener = false,
	    message,
	    onBlur,
	    onClose,
	    onFocus,
	    onMouseEnter,
	    onMouseLeave,
	    open,
	    resumeHideDuration,
	    TransitionComponent = Grow,
	    transitionDuration = defaultTransitionDuration,
	    TransitionProps: {
	      onEnter,
	      onExited
	    } = {}
	  } = props,
	        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$y),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$2);

	  const ownerState = _extends({}, props, {
	    anchorOrigin: {
	      vertical,
	      horizontal
	    }
	  });

	  const classes = useUtilityClasses$s(ownerState);
	  const timerAutoHide = react.exports.useRef();
	  const [exited, setExited] = react.exports.useState(true);
	  const handleClose = useEventCallback((...args) => {
	    if (onClose) {
	      onClose(...args);
	    }
	  });
	  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {
	    if (!onClose || autoHideDurationParam == null) {
	      return;
	    }

	    clearTimeout(timerAutoHide.current);
	    timerAutoHide.current = setTimeout(() => {
	      handleClose(null, 'timeout');
	    }, autoHideDurationParam);
	  });
	  react.exports.useEffect(() => {
	    if (open) {
	      setAutoHideTimer(autoHideDuration);
	    }

	    return () => {
	      clearTimeout(timerAutoHide.current);
	    };
	  }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar
	  // or when the user hide the window.

	  const handlePause = () => {
	    clearTimeout(timerAutoHide.current);
	  }; // Restart the timer when the user is no longer interacting with the Snackbar
	  // or when the window is shown back.


	  const handleResume = react.exports.useCallback(() => {
	    if (autoHideDuration != null) {
	      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
	    }
	  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);

	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }

	    handlePause();
	  };

	  const handleMouseEnter = event => {
	    if (onMouseEnter) {
	      onMouseEnter(event);
	    }

	    handlePause();
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    handleResume();
	  };

	  const handleMouseLeave = event => {
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }

	    handleResume();
	  };

	  const handleClickAway = event => {
	    if (onClose) {
	      onClose(event, 'clickaway');
	    }
	  };

	  const handleExited = node => {
	    setExited(true);

	    if (onExited) {
	      onExited(node);
	    }
	  };

	  const handleEnter = (node, isAppearing) => {
	    setExited(false);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  };

	  react.exports.useEffect(() => {
	    // TODO: window global should be refactored here
	    if (!disableWindowBlurListener && open) {
	      window.addEventListener('focus', handleResume);
	      window.addEventListener('blur', handlePause);
	      return () => {
	        window.removeEventListener('focus', handleResume);
	        window.removeEventListener('blur', handlePause);
	      };
	    }

	    return undefined;
	  }, [disableWindowBlurListener, handleResume, open]);
	  react.exports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    /**
	     * @param {KeyboardEvent} nativeEvent
	     */


	    function handleKeyDown(nativeEvent) {
	      if (!nativeEvent.defaultPrevented) {
	        // IE11, Edge (prior to using Bink?) use 'Esc'
	        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
	          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar
	          if (onClose) {
	            onClose(nativeEvent, 'escapeKeyDown');
	          }
	        }
	      }
	    }

	    document.addEventListener('keydown', handleKeyDown);
	    return () => {
	      document.removeEventListener('keydown', handleKeyDown);
	    };
	  }, [exited, open, onClose]); // So we only render active snackbars.

	  if (!open && exited) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(ClickAwayListener, _extends({
	    onClickAway: handleClickAway
	  }, ClickAwayListenerProps, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(SnackbarRoot, _extends({
	      className: clsx(classes.root, className),
	      onBlur: handleBlur,
	      onFocus: handleFocus,
	      onMouseEnter: handleMouseEnter,
	      onMouseLeave: handleMouseLeave,
	      ownerState: ownerState,
	      ref: ref // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
	      // See https://github.com/mui/material-ui/issues/29080
	      ,
	      role: "presentation"
	    }, other, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	        appear: true,
	        in: open,
	        timeout: transitionDuration,
	        direction: vertical === 'top' ? 'down' : 'up',
	        onEnter: handleEnter,
	        onExited: handleExited
	      }, TransitionProps, {
	        children: children || /*#__PURE__*/jsxRuntime.exports.jsx(SnackbarContent, _extends({
	          message: message,
	          action: action
	        }, ContentProps))
	      }))
	    }))
	  }));
	});
	Snackbar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The action to display. It renders after the message, at the end of the snackbar.
	   */
	  action: propTypes.exports.node,

	  /**
	   * The anchor of the `Snackbar`.
	   * On smaller screens, the component grows to occupy all the available width,
	   * the horizontal alignment is ignored.
	   * @default { vertical: 'bottom', horizontal: 'left' }
	   */
	  anchorOrigin: propTypes.exports.shape({
	    horizontal: propTypes.exports.oneOf(['center', 'left', 'right']).isRequired,
	    vertical: propTypes.exports.oneOf(['bottom', 'top']).isRequired
	  }),

	  /**
	   * The number of milliseconds to wait before automatically calling the
	   * `onClose` function. `onClose` should then set the state of the `open`
	   * prop to hide the Snackbar. This behavior is disabled by default with
	   * the `null` value.
	   * @default null
	   */
	  autoHideDuration: propTypes.exports.number,

	  /**
	   * Replace the `SnackbarContent` component.
	   */
	  children: propTypes.exports.element,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Props applied to the `ClickAwayListener` element.
	   */
	  ClickAwayListenerProps: propTypes.exports.object,

	  /**
	   * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.
	   */
	  ContentProps: propTypes.exports.object,

	  /**
	   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
	   * @default false
	   */
	  disableWindowBlurListener: propTypes.exports.bool,

	  /**
	   * When displaying multiple consecutive Snackbars from a parent rendering a single
	   * <Snackbar/>, add the key prop to ensure independent treatment of each message.
	   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
	   * features such as autoHideDuration may be canceled.
	   */
	  key: () => null,

	  /**
	   * The message to display.
	   */
	  message: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Typically `onClose` is used to set state in the parent component,
	   * which is used to control the `Snackbar` `open` prop.
	   * The `reason` parameter can optionally be used to control the response to `onClose`,
	   * for example ignoring `clickaway`.
	   *
	   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
	   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * The number of milliseconds to wait before dismissing after user interaction.
	   * If `autoHideDuration` prop isn't specified, it does nothing.
	   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
	   * we default to `autoHideDuration / 2` ms.
	   */
	  resumeHideDuration: propTypes.exports.number,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	const _excluded$x = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	const styles$1 = {
	  entering: {
	    transform: 'none'
	  },
	  entered: {
	    transform: 'none'
	  }
	};
	/**
	 * The Zoom transition can be used for the floating variant of the
	 * [Button](/material-ui/react-button/#floating-action-buttons) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Zoom = /*#__PURE__*/react.exports.forwardRef(function Zoom(props, ref) {
	  const theme = useTheme();
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    addEndListener,
	    appear = true,
	    children,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = defaultTimeout,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = Transition
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$x);

	  const nodeRef = react.exports.useRef(null);
	  const foreignRef = useForkRef(children.ref, ref);
	  const handleRef = useForkRef(nodeRef, foreignRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
	    node.style.transition = theme.transitions.create('transform', transitionProps);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
	    node.style.transition = theme.transitions.create('transform', transitionProps);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);

	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        style: _extends({
	          transform: 'scale(0)',
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$1[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Zoom.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: propTypes.exports.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: propTypes.exports.bool,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: propTypes.exports.oneOfType([propTypes.exports.shape({
	    enter: propTypes.exports.string,
	    exit: propTypes.exports.string
	  }), propTypes.exports.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  timeout: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })])
	} ;

	function getSpeedDialUtilityClass(slot) {
	  return generateUtilityClass('MuiSpeedDial', slot);
	}
	const speedDialClasses = generateUtilityClasses('MuiSpeedDial', ['root', 'fab', 'directionUp', 'directionDown', 'directionLeft', 'directionRight', 'actions', 'actionsClosed']);

	const _excluded$w = ["ref"],
	      _excluded2$1 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"],
	      _excluded3 = ["ref"];

	const useUtilityClasses$r = ownerState => {
	  const {
	    classes,
	    open,
	    direction
	  } = ownerState;
	  const slots = {
	    root: ['root', `direction${capitalize(direction)}`],
	    fab: ['fab'],
	    actions: ['actions', !open && 'actionsClosed']
	  };
	  return composeClasses(slots, getSpeedDialUtilityClass, classes);
	};

	function getOrientation(direction) {
	  if (direction === 'up' || direction === 'down') {
	    return 'vertical';
	  }

	  if (direction === 'right' || direction === 'left') {
	    return 'horizontal';
	  }

	  return undefined;
	}

	function clamp(value, min, max) {
	  if (value < min) {
	    return min;
	  }

	  if (value > max) {
	    return max;
	  }

	  return value;
	}

	const dialRadius = 32;
	const spacingActions = 16;
	const SpeedDialRoot = styled('div', {
	  name: 'MuiSpeedDial',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`direction${capitalize(ownerState.direction)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.speedDial,
	  display: 'flex',
	  alignItems: 'center',
	  pointerEvents: 'none'
	}, ownerState.direction === 'up' && {
	  flexDirection: 'column-reverse',
	  [`& .${speedDialClasses.actions}`]: {
	    flexDirection: 'column-reverse',
	    marginBottom: -dialRadius,
	    paddingBottom: spacingActions + dialRadius
	  }
	}, ownerState.direction === 'down' && {
	  flexDirection: 'column',
	  [`& .${speedDialClasses.actions}`]: {
	    flexDirection: 'column',
	    marginTop: -dialRadius,
	    paddingTop: spacingActions + dialRadius
	  }
	}, ownerState.direction === 'left' && {
	  flexDirection: 'row-reverse',
	  [`& .${speedDialClasses.actions}`]: {
	    flexDirection: 'row-reverse',
	    marginRight: -dialRadius,
	    paddingRight: spacingActions + dialRadius
	  }
	}, ownerState.direction === 'right' && {
	  flexDirection: 'row',
	  [`& .${speedDialClasses.actions}`]: {
	    flexDirection: 'row',
	    marginLeft: -dialRadius,
	    paddingLeft: spacingActions + dialRadius
	  }
	}));
	const SpeedDialFab = styled(Fab, {
	  name: 'MuiSpeedDial',
	  slot: 'Fab',
	  overridesResolver: (props, styles) => styles.fab
	})(() => ({
	  pointerEvents: 'auto'
	}));
	const SpeedDialActions = styled('div', {
	  name: 'MuiSpeedDial',
	  slot: 'Actions',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.actions, !ownerState.open && styles.actionsClosed];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  pointerEvents: 'auto'
	}, !ownerState.open && {
	  transition: 'top 0s linear 0.2s',
	  pointerEvents: 'none'
	}));
	const SpeedDial = /*#__PURE__*/react.exports.forwardRef(function SpeedDial(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSpeedDial'
	  });
	  const theme = useTheme();
	  const defaultTransitionDuration = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    ariaLabel,
	    FabProps: {
	      ref: origDialButtonRef
	    } = {},
	    children: childrenProp,
	    className,
	    direction = 'up',
	    hidden = false,
	    icon,
	    onBlur,
	    onClose,
	    onFocus,
	    onKeyDown,
	    onMouseEnter,
	    onMouseLeave,
	    onOpen,
	    open: openProp,
	    TransitionComponent = Zoom,
	    transitionDuration = defaultTransitionDuration,
	    TransitionProps
	  } = props,
	        FabProps = _objectWithoutPropertiesLoose(props.FabProps, _excluded$w),
	        other = _objectWithoutPropertiesLoose(props, _excluded2$1);

	  const [open, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: 'SpeedDial',
	    state: 'open'
	  });

	  const ownerState = _extends({}, props, {
	    open,
	    direction
	  });

	  const classes = useUtilityClasses$r(ownerState);
	  const eventTimer = react.exports.useRef();
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(eventTimer.current);
	    };
	  }, []);
	  /**
	   * an index in actions.current
	   */

	  const focusedAction = react.exports.useRef(0);
	  /**
	   * pressing this key while the focus is on a child SpeedDialAction focuses
	   * the next SpeedDialAction.
	   * It is equal to the first arrow key pressed while focus is on the SpeedDial
	   * that is not orthogonal to the direction.
	   * @type {utils.ArrowKey?}
	   */

	  const nextItemArrowKey = react.exports.useRef();
	  /**
	   * refs to the Button that have an action associated to them in this SpeedDial
	   * [Fab, ...(SpeedDialActions > Button)]
	   * @type {HTMLButtonElement[]}
	   */

	  const actions = react.exports.useRef([]);
	  actions.current = [actions.current[0]];
	  const handleOwnFabRef = react.exports.useCallback(fabFef => {
	    actions.current[0] = fabFef;
	  }, []);
	  const handleFabRef = useForkRef(origDialButtonRef, handleOwnFabRef);
	  /**
	   * creates a ref callback for the Button in a SpeedDialAction
	   * Is called before the original ref callback for Button that was set in buttonProps
	   *
	   * @param dialActionIndex {number}
	   * @param origButtonRef {React.RefObject?}
	   */

	  const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
	    return buttonRef => {
	      actions.current[dialActionIndex + 1] = buttonRef;

	      if (origButtonRef) {
	        origButtonRef(buttonRef);
	      }
	    };
	  };

	  const handleKeyDown = event => {
	    if (onKeyDown) {
	      onKeyDown(event);
	    }

	    const key = event.key.replace('Arrow', '').toLowerCase();
	    const {
	      current: nextItemArrowKeyCurrent = key
	    } = nextItemArrowKey;

	    if (event.key === 'Escape') {
	      setOpenState(false);
	      actions.current[0].focus();

	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }

	      return;
	    }

	    if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== undefined) {
	      event.preventDefault();
	      const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1; // stay within array indices

	      const nextAction = clamp(focusedAction.current + actionStep, 0, actions.current.length - 1);
	      actions.current[nextAction].focus();
	      focusedAction.current = nextAction;
	      nextItemArrowKey.current = nextItemArrowKeyCurrent;
	    }
	  };

	  react.exports.useEffect(() => {
	    // actions were closed while navigation state was not reset
	    if (!open) {
	      focusedAction.current = 0;
	      nextItemArrowKey.current = undefined;
	    }
	  }, [open]);

	  const handleClose = event => {
	    if (event.type === 'mouseleave' && onMouseLeave) {
	      onMouseLeave(event);
	    }

	    if (event.type === 'blur' && onBlur) {
	      onBlur(event);
	    }

	    clearTimeout(eventTimer.current);

	    if (event.type === 'blur') {
	      eventTimer.current = setTimeout(() => {
	        setOpenState(false);

	        if (onClose) {
	          onClose(event, 'blur');
	        }
	      });
	    } else {
	      setOpenState(false);

	      if (onClose) {
	        onClose(event, 'mouseLeave');
	      }
	    }
	  };

	  const handleClick = event => {
	    if (FabProps.onClick) {
	      FabProps.onClick(event);
	    }

	    clearTimeout(eventTimer.current);

	    if (open) {
	      setOpenState(false);

	      if (onClose) {
	        onClose(event, 'toggle');
	      }
	    } else {
	      setOpenState(true);

	      if (onOpen) {
	        onOpen(event, 'toggle');
	      }
	    }
	  };

	  const handleOpen = event => {
	    if (event.type === 'mouseenter' && onMouseEnter) {
	      onMouseEnter(event);
	    }

	    if (event.type === 'focus' && onFocus) {
	      onFocus(event);
	    } // When moving the focus between two items,
	    // a chain if blur and focus event is triggered.
	    // We only handle the last event.


	    clearTimeout(eventTimer.current);

	    if (!open) {
	      // Wait for a future focus or click event
	      eventTimer.current = setTimeout(() => {
	        setOpenState(true);

	        if (onOpen) {
	          const eventMap = {
	            focus: 'focus',
	            mouseenter: 'mouseEnter'
	          };
	          onOpen(event, eventMap[event.type]);
	        }
	      });
	    }
	  }; // Filter the label for valid id characters.


	  const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
	  const allItems = react.exports.Children.toArray(childrenProp).filter(child => {
	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    return /*#__PURE__*/react.exports.isValidElement(child);
	  });
	  const children = allItems.map((child, index) => {
	    const _child$props = child.props,
	          {
	      FabProps: {
	        ref: origButtonRef
	      } = {},
	      tooltipPlacement: tooltipPlacementProp
	    } = _child$props,
	          ChildFabProps = _objectWithoutPropertiesLoose(_child$props.FabProps, _excluded3);

	    const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === 'vertical' ? 'left' : 'top');
	    return /*#__PURE__*/react.exports.cloneElement(child, {
	      FabProps: _extends({}, ChildFabProps, {
	        ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
	      }),
	      delay: 30 * (open ? index : allItems.length - index),
	      open,
	      tooltipPlacement,
	      id: `${id}-action-${index}`
	    });
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SpeedDialRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    role: "presentation",
	    onKeyDown: handleKeyDown,
	    onBlur: handleClose,
	    onFocus: handleOpen,
	    onMouseEnter: handleOpen,
	    onMouseLeave: handleClose,
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	      in: !hidden,
	      timeout: transitionDuration,
	      unmountOnExit: true
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(SpeedDialFab, _extends({
	        color: "primary",
	        "aria-label": ariaLabel,
	        "aria-haspopup": "true",
	        "aria-expanded": open,
	        "aria-controls": `${id}-actions`
	      }, FabProps, {
	        onClick: handleClick,
	        className: clsx(classes.fab, FabProps.className),
	        ref: handleFabRef,
	        ownerState: ownerState,
	        children: /*#__PURE__*/react.exports.isValidElement(icon) && isMuiElement(icon, ['SpeedDialIcon']) ? /*#__PURE__*/react.exports.cloneElement(icon, {
	          open
	        }) : icon
	      }))
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(SpeedDialActions, {
	      id: `${id}-actions`,
	      role: "menu",
	      "aria-orientation": getOrientation(direction),
	      className: clsx(classes.actions, !open && classes.actionsClosed),
	      ownerState: ownerState,
	      children: children
	    })]
	  }));
	});
	SpeedDial.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The aria-label of the button element.
	   * Also used to provide the `id` for the `SpeedDial` element and its children.
	   */
	  ariaLabel: propTypes.exports.string.isRequired,

	  /**
	   * SpeedDialActions to display when the SpeedDial is `open`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The direction the actions open relative to the floating action button.
	   * @default 'up'
	   */
	  direction: propTypes.exports.oneOf(['down', 'left', 'right', 'up']),

	  /**
	   * Props applied to the [`Fab`](/material-ui/api/fab/) element.
	   * @default {}
	   */
	  FabProps: propTypes.exports.object,

	  /**
	   * If `true`, the SpeedDial is hidden.
	   * @default false
	   */
	  hidden: propTypes.exports.bool,

	  /**
	   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
	   * provides a default Icon with animation.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseEnter: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be open.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
	   */
	  onOpen: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * The icon to display in the SpeedDial Fab when the SpeedDial is open.
	   */
	  openIcon: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Zoom
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getTooltipUtilityClass(slot) {
	  return generateUtilityClass('MuiTooltip', slot);
	}
	const tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);

	const _excluded$v = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"];

	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	const useUtilityClasses$q = ownerState => {
	  const {
	    classes,
	    disableInteractive,
	    arrow,
	    touch,
	    placement
	  } = ownerState;
	  const slots = {
	    popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
	    tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${capitalize(placement.split('-')[0])}`],
	    arrow: ['arrow']
	  };
	  return composeClasses(slots, getTooltipUtilityClass, classes);
	};

	const TooltipPopper = styled(Popper, {
	  name: 'MuiTooltip',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
	  }
	})(({
	  theme,
	  ownerState,
	  open
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.tooltip,
	  pointerEvents: 'none'
	}, !ownerState.disableInteractive && {
	  pointerEvents: 'auto'
	}, !open && {
	  pointerEvents: 'none'
	}, ownerState.arrow && {
	  [`&[data-popper-placement*="bottom"] .${tooltipClasses.arrow}`]: {
	    top: 0,
	    marginTop: '-0.71em',
	    '&::before': {
	      transformOrigin: '0 100%'
	    }
	  },
	  [`&[data-popper-placement*="top"] .${tooltipClasses.arrow}`]: {
	    bottom: 0,
	    marginBottom: '-0.71em',
	    '&::before': {
	      transformOrigin: '100% 0'
	    }
	  },
	  [`&[data-popper-placement*="right"] .${tooltipClasses.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    left: 0,
	    marginLeft: '-0.71em'
	  } : {
	    right: 0,
	    marginRight: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '100% 100%'
	    }
	  }),
	  [`&[data-popper-placement*="left"] .${tooltipClasses.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    right: 0,
	    marginRight: '-0.71em'
	  } : {
	    left: 0,
	    marginLeft: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '0 0'
	    }
	  })
	}));
	const TooltipTooltip = styled('div', {
	  name: 'MuiTooltip',
	  slot: 'Tooltip',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize(ownerState.placement.split('-')[0])}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  color: (theme.vars || theme).palette.common.white,
	  fontFamily: theme.typography.fontFamily,
	  padding: '4px 8px',
	  fontSize: theme.typography.pxToRem(11),
	  maxWidth: 300,
	  margin: 2,
	  wordWrap: 'break-word',
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.arrow && {
	  position: 'relative',
	  margin: 0
	}, ownerState.touch && {
	  padding: '8px 16px',
	  fontSize: theme.typography.pxToRem(14),
	  lineHeight: `${round(16 / 14)}em`,
	  fontWeight: theme.typography.fontWeightRegular
	}, {
	  [`.${tooltipClasses.popper}[data-popper-placement*="left"] &`]: _extends({
	    transformOrigin: 'right center'
	  }, !ownerState.isRtl ? _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  }) : _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  })),
	  [`.${tooltipClasses.popper}[data-popper-placement*="right"] &`]: _extends({
	    transformOrigin: 'left center'
	  }, !ownerState.isRtl ? _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  }) : _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  })),
	  [`.${tooltipClasses.popper}[data-popper-placement*="top"] &`]: _extends({
	    transformOrigin: 'center bottom',
	    marginBottom: '14px'
	  }, ownerState.touch && {
	    marginBottom: '24px'
	  }),
	  [`.${tooltipClasses.popper}[data-popper-placement*="bottom"] &`]: _extends({
	    transformOrigin: 'center top',
	    marginTop: '14px'
	  }, ownerState.touch && {
	    marginTop: '24px'
	  })
	}));
	const TooltipArrow = styled('span', {
	  name: 'MuiTooltip',
	  slot: 'Arrow',
	  overridesResolver: (props, styles) => styles.arrow
	})(({
	  theme
	}) => ({
	  overflow: 'hidden',
	  position: 'absolute',
	  width: '1em',
	  height: '0.71em'
	  /* = width / sqrt(2) = (length of the hypotenuse) */
	  ,
	  boxSizing: 'border-box',
	  color: theme.vars ? `rgba(${theme.vars.palette.grey.darkChannel} / 0.9)` : alpha(theme.palette.grey[700], 0.9),
	  '&::before': {
	    content: '""',
	    margin: 'auto',
	    display: 'block',
	    width: '100%',
	    height: '100%',
	    backgroundColor: 'currentColor',
	    transform: 'rotate(45deg)'
	  }
	}));
	let hystersisOpen = false;
	let hystersisTimer = null;

	function composeEventHandler(handler, eventHandler) {
	  return event => {
	    if (eventHandler) {
	      eventHandler(event);
	    }

	    handler(event);
	  };
	} // TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.


	const Tooltip = /*#__PURE__*/react.exports.forwardRef(function Tooltip(inProps, ref) {
	  var _components$Popper, _ref, _components$Transitio, _components$Tooltip, _components$Arrow, _componentsProps$popp;

	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTooltip'
	  });

	  const {
	    arrow = false,
	    children,
	    components = {},
	    componentsProps = {},
	    describeChild = false,
	    disableFocusListener = false,
	    disableHoverListener = false,
	    disableInteractive: disableInteractiveProp = false,
	    disableTouchListener = false,
	    enterDelay = 100,
	    enterNextDelay = 0,
	    enterTouchDelay = 700,
	    followCursor = false,
	    id: idProp,
	    leaveDelay = 0,
	    leaveTouchDelay = 1500,
	    onClose,
	    onOpen,
	    open: openProp,
	    placement = 'bottom',
	    PopperComponent: PopperComponentProp,
	    PopperProps = {},
	    title,
	    TransitionComponent: TransitionComponentProp = Grow,
	    TransitionProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$v);

	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const [childNode, setChildNode] = react.exports.useState();
	  const [arrowRef, setArrowRef] = react.exports.useState(null);
	  const ignoreNonTouchEvents = react.exports.useRef(false);
	  const disableInteractive = disableInteractiveProp || followCursor;
	  const closeTimer = react.exports.useRef();
	  const enterTimer = react.exports.useRef();
	  const leaveTimer = react.exports.useRef();
	  const touchTimer = react.exports.useRef();
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: 'Tooltip',
	    state: 'open'
	  });
	  let open = openState;

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const {
	      current: isControlled
	    } = react.exports.useRef(openProp !== undefined); // eslint-disable-next-line react-hooks/rules-of-hooks

	    react.exports.useEffect(() => {
	      if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
	        console.error(['MUI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
	      }
	    }, [title, childNode, isControlled]);
	  }

	  const id = useId(idProp);
	  const prevUserSelect = react.exports.useRef();
	  const stopTouchInteraction = react.exports.useCallback(() => {
	    if (prevUserSelect.current !== undefined) {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      prevUserSelect.current = undefined;
	    }

	    clearTimeout(touchTimer.current);
	  }, []);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(closeTimer.current);
	      clearTimeout(enterTimer.current);
	      clearTimeout(leaveTimer.current);
	      stopTouchInteraction();
	    };
	  }, [stopTouchInteraction]);

	  const handleOpen = event => {
	    clearTimeout(hystersisTimer);
	    hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
	    // We can skip rerendering when the tooltip is already open.
	    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

	    setOpenState(true);

	    if (onOpen && !open) {
	      onOpen(event);
	    }
	  };

	  const handleClose = useEventCallback(
	  /**
	   * @param {React.SyntheticEvent | Event} event
	   */
	  event => {
	    clearTimeout(hystersisTimer);
	    hystersisTimer = setTimeout(() => {
	      hystersisOpen = false;
	    }, 800 + leaveDelay);
	    setOpenState(false);

	    if (onClose && open) {
	      onClose(event);
	    }

	    clearTimeout(closeTimer.current);
	    closeTimer.current = setTimeout(() => {
	      ignoreNonTouchEvents.current = false;
	    }, theme.transitions.duration.shortest);
	  });

	  const handleEnter = event => {
	    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
	      return;
	    } // Workaround for https://github.com/facebook/react/issues/7769


	    if (!childNode) {
	      setChildNode(event.currentTarget);
	    } // Remove the title ahead of time.
	    // We don't want to wait for the next render commit.
	    // We would risk displaying two tooltips at the same time (native + this one).
	    else {
	      childNode.removeAttribute('title');
	    }

	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);

	    if (enterDelay || hystersisOpen && enterNextDelay) {
	      enterTimer.current = setTimeout(() => {
	        handleOpen(event);
	      }, hystersisOpen ? enterNextDelay : enterDelay);
	    } else {
	      handleOpen(event);
	    }
	  };

	  const handleLeave = event => {
	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveDelay);
	  };

	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible(); // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
	  // We just need to re-render the Tooltip if the focus-visible state changes.

	  const [, setChildIsFocusVisible] = react.exports.useState(false);

	  const handleBlur = event => {
	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setChildIsFocusVisible(false);
	      handleLeave(event);
	    }
	  };

	  const handleFocus = event => {
	    // Workaround for https://github.com/facebook/react/issues/7769
	    if (!childNode) {
	      setChildNode(event.currentTarget);
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setChildIsFocusVisible(true);
	      handleEnter(event);
	    }
	  };

	  const detectTouchStart = event => {
	    ignoreNonTouchEvents.current = true;
	    const childrenProps = children.props;

	    if (childrenProps.onTouchStart) {
	      childrenProps.onTouchStart(event);
	    }
	  };

	  const handleMouseOver = handleEnter;
	  const handleMouseLeave = handleLeave;

	  const handleTouchStart = event => {
	    detectTouchStart(event);
	    clearTimeout(leaveTimer.current);
	    clearTimeout(closeTimer.current);
	    stopTouchInteraction();
	    prevUserSelect.current = document.body.style.WebkitUserSelect; // Prevent iOS text selection on long-tap.

	    document.body.style.WebkitUserSelect = 'none';
	    touchTimer.current = setTimeout(() => {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      handleEnter(event);
	    }, enterTouchDelay);
	  };

	  const handleTouchEnd = event => {
	    if (children.props.onTouchEnd) {
	      children.props.onTouchEnd(event);
	    }

	    stopTouchInteraction();
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveTouchDelay);
	  };

	  react.exports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    /**
	     * @param {KeyboardEvent} nativeEvent
	     */


	    function handleKeyDown(nativeEvent) {
	      // IE11, Edge (prior to using Bink?) use 'Esc'
	      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
	        handleClose(nativeEvent);
	      }
	    }

	    document.addEventListener('keydown', handleKeyDown);
	    return () => {
	      document.removeEventListener('keydown', handleKeyDown);
	    };
	  }, [handleClose, open]);
	  const handleUseRef = useForkRef(setChildNode, ref);
	  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
	  const handleRef = useForkRef(children.ref, handleFocusRef); // There is no point in displaying an empty tooltip.

	  if (title === '') {
	    open = false;
	  }

	  const positionRef = react.exports.useRef({
	    x: 0,
	    y: 0
	  });
	  const popperRef = react.exports.useRef();

	  const handleMouseMove = event => {
	    const childrenProps = children.props;

	    if (childrenProps.onMouseMove) {
	      childrenProps.onMouseMove(event);
	    }

	    positionRef.current = {
	      x: event.clientX,
	      y: event.clientY
	    };

	    if (popperRef.current) {
	      popperRef.current.update();
	    }
	  };

	  const nameOrDescProps = {};
	  const titleIsString = typeof title === 'string';

	  if (describeChild) {
	    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
	    nameOrDescProps['aria-describedby'] = open ? id : null;
	  } else {
	    nameOrDescProps['aria-label'] = titleIsString ? title : null;
	    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
	  }

	  const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
	    className: clsx(other.className, children.props.className),
	    onTouchStart: detectTouchStart,
	    ref: handleRef
	  }, followCursor ? {
	    onMouseMove: handleMouseMove
	  } : {});

	  {
	    childrenProps['data-mui-internal-clone-element'] = true; // eslint-disable-next-line react-hooks/rules-of-hooks

	    react.exports.useEffect(() => {
	      if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) {
	        console.error(['MUI: The `children` component of the Tooltip is not forwarding its props correctly.', 'Please make sure that props are spread on the same element that the ref is applied to.'].join('\n'));
	      }
	    }, [childNode]);
	  }

	  const interactiveWrapperListeners = {};

	  if (!disableTouchListener) {
	    childrenProps.onTouchStart = handleTouchStart;
	    childrenProps.onTouchEnd = handleTouchEnd;
	  }

	  if (!disableHoverListener) {
	    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
	    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);

	    if (!disableInteractive) {
	      interactiveWrapperListeners.onMouseOver = handleMouseOver;
	      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
	    }
	  }

	  if (!disableFocusListener) {
	    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
	    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);

	    if (!disableInteractive) {
	      interactiveWrapperListeners.onFocus = handleFocus;
	      interactiveWrapperListeners.onBlur = handleBlur;
	    }
	  }

	  {
	    if (children.props.title) {
	      console.error(['MUI: You have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join('\n'));
	    }
	  }

	  const popperOptions = react.exports.useMemo(() => {
	    var _PopperProps$popperOp;

	    let tooltipModifiers = [{
	      name: 'arrow',
	      enabled: Boolean(arrowRef),
	      options: {
	        element: arrowRef,
	        padding: 4
	      }
	    }];

	    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
	      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
	    }

	    return _extends({}, PopperProps.popperOptions, {
	      modifiers: tooltipModifiers
	    });
	  }, [arrowRef, PopperProps]);

	  const ownerState = _extends({}, props, {
	    isRtl,
	    arrow,
	    disableInteractive,
	    placement,
	    PopperComponentProp,
	    touch: ignoreNonTouchEvents.current
	  });

	  const classes = useUtilityClasses$q(ownerState);
	  const PopperComponent = (_components$Popper = components.Popper) != null ? _components$Popper : TooltipPopper;
	  const TransitionComponent = (_ref = (_components$Transitio = components.Transition) != null ? _components$Transitio : TransitionComponentProp) != null ? _ref : Grow;
	  const TooltipComponent = (_components$Tooltip = components.Tooltip) != null ? _components$Tooltip : TooltipTooltip;
	  const ArrowComponent = (_components$Arrow = components.Arrow) != null ? _components$Arrow : TooltipArrow;
	  const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, componentsProps.popper), ownerState);
	  const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, componentsProps.transition), ownerState);
	  const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, componentsProps.tooltip), ownerState);
	  const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, componentsProps.arrow), ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/react.exports.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntime.exports.jsx(PopperComponent, _extends({
	      as: PopperComponentProp != null ? PopperComponentProp : Popper,
	      placement: placement,
	      anchorEl: followCursor ? {
	        getBoundingClientRect: () => ({
	          top: positionRef.current.y,
	          left: positionRef.current.x,
	          right: positionRef.current.x,
	          bottom: positionRef.current.y,
	          width: 0,
	          height: 0
	        })
	      } : childNode,
	      popperRef: popperRef,
	      open: childNode ? open : false,
	      id: id,
	      transition: true
	    }, interactiveWrapperListeners, popperProps, {
	      className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
	      popperOptions: popperOptions,
	      children: ({
	        TransitionProps: TransitionPropsInner
	      }) => {
	        var _componentsProps$tool, _componentsProps$arro;

	        return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	          timeout: theme.transitions.duration.shorter
	        }, TransitionPropsInner, transitionProps, {
	          children: /*#__PURE__*/jsxRuntime.exports.jsxs(TooltipComponent, _extends({}, tooltipProps, {
	            className: clsx(classes.tooltip, (_componentsProps$tool = componentsProps.tooltip) == null ? void 0 : _componentsProps$tool.className),
	            children: [title, arrow ? /*#__PURE__*/jsxRuntime.exports.jsx(ArrowComponent, _extends({}, tooltipArrowProps, {
	              className: clsx(classes.arrow, (_componentsProps$arro = componentsProps.arrow) == null ? void 0 : _componentsProps$arro.className),
	              ref: setArrowRef
	            })) : null]
	          }))
	        }));
	      }
	    }))]
	  });
	});
	Tooltip.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, adds an arrow to the tooltip.
	   * @default false
	   */
	  arrow: propTypes.exports.bool,

	  /**
	   * Tooltip reference element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The components used for each slot inside the Tooltip.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: propTypes.exports.shape({
	    Arrow: propTypes.exports.elementType,
	    Popper: propTypes.exports.elementType,
	    Tooltip: propTypes.exports.elementType,
	    Transition: propTypes.exports.elementType
	  }),

	  /**
	   * The props used for each slot inside the Tooltip.
	   * Note that `componentsProps.popper` prop values win over `PopperProps`
	   * and `componentsProps.transition` prop values win over `TransitionProps` if both are applied.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    arrow: propTypes.exports.object,
	    popper: propTypes.exports.object,
	    tooltip: propTypes.exports.object,
	    transition: propTypes.exports.object
	  }),

	  /**
	   * Set to `true` if the `title` acts as an accessible description.
	   * By default the `title` acts as an accessible label for the child.
	   * @default false
	   */
	  describeChild: propTypes.exports.bool,

	  /**
	   * Do not respond to focus-visible events.
	   * @default false
	   */
	  disableFocusListener: propTypes.exports.bool,

	  /**
	   * Do not respond to hover events.
	   * @default false
	   */
	  disableHoverListener: propTypes.exports.bool,

	  /**
	   * Makes a tooltip not interactive, i.e. it will close when the user
	   * hovers over the tooltip before the `leaveDelay` is expired.
	   * @default false
	   */
	  disableInteractive: propTypes.exports.bool,

	  /**
	   * Do not respond to long press touch events.
	   * @default false
	   */
	  disableTouchListener: propTypes.exports.bool,

	  /**
	   * The number of milliseconds to wait before showing the tooltip.
	   * This prop won't impact the enter touch delay (`enterTouchDelay`).
	   * @default 100
	   */
	  enterDelay: propTypes.exports.number,

	  /**
	   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
	   * @default 0
	   */
	  enterNextDelay: propTypes.exports.number,

	  /**
	   * The number of milliseconds a user must touch the element before showing the tooltip.
	   * @default 700
	   */
	  enterTouchDelay: propTypes.exports.number,

	  /**
	   * If `true`, the tooltip follow the cursor over the wrapped element.
	   * @default false
	   */
	  followCursor: propTypes.exports.bool,

	  /**
	   * This prop is used to help implement the accessibility logic.
	   * If you don't provide this prop. It falls back to a randomly generated id.
	   */
	  id: propTypes.exports.string,

	  /**
	   * The number of milliseconds to wait before hiding the tooltip.
	   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
	   * @default 0
	   */
	  leaveDelay: propTypes.exports.number,

	  /**
	   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
	   * @default 1500
	   */
	  leaveTouchDelay: propTypes.exports.number,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func,

	  /**
	   * Callback fired when the component requests to be open.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback.
	   */
	  onOpen: propTypes.exports.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * Tooltip placement.
	   * @default 'bottom'
	   */
	  placement: propTypes.exports.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

	  /**
	   * The component used for the popper.
	   * @default Popper
	   */
	  PopperComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the [`Popper`](/material-ui/api/popper/) element.
	   * @default {}
	   */
	  PopperProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Tooltip title. Zero-length titles string are never displayed.
	   */
	  title: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .node.isRequired,

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getSpeedDialActionUtilityClass(slot) {
	  return generateUtilityClass('MuiSpeedDialAction', slot);
	}
	const speedDialActionClasses = generateUtilityClasses('MuiSpeedDialAction', ['fab', 'fabClosed', 'staticTooltip', 'staticTooltipClosed', 'staticTooltipLabel', 'tooltipPlacementLeft', 'tooltipPlacementRight']);

	const _excluded$u = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"];

	const useUtilityClasses$p = ownerState => {
	  const {
	    open,
	    tooltipPlacement,
	    classes
	  } = ownerState;
	  const slots = {
	    fab: ['fab', !open && 'fabClosed'],
	    staticTooltip: ['staticTooltip', `tooltipPlacement${capitalize(tooltipPlacement)}`, !open && 'staticTooltipClosed'],
	    staticTooltipLabel: ['staticTooltipLabel']
	  };
	  return composeClasses(slots, getSpeedDialActionUtilityClass, classes);
	};

	const SpeedDialActionFab = styled(Fab, {
	  name: 'MuiSpeedDialAction',
	  slot: 'Fab',
	  skipVariantsResolver: false,
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.fab, !ownerState.open && styles.fabClosed];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 8,
	  color: (theme.vars || theme).palette.text.secondary,
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  '&:hover': {
	    backgroundColor: theme.vars ? theme.vars.palette.SpeedDialAction.fabHoverBg : emphasize(theme.palette.background.paper, 0.15)
	  },
	  transition: `${theme.transitions.create('transform', {
    duration: theme.transitions.duration.shorter
  })}, opacity 0.8s`,
	  opacity: 1
	}, !ownerState.open && {
	  opacity: 0,
	  transform: 'scale(0)'
	}));
	const SpeedDialActionStaticTooltip = styled('span', {
	  name: 'MuiSpeedDialAction',
	  slot: 'StaticTooltip',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.staticTooltip, !ownerState.open && styles.staticTooltipClosed, styles[`tooltipPlacement${capitalize(ownerState.tooltipPlacement)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => ({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center',
	  [`& .${speedDialActionClasses.staticTooltipLabel}`]: _extends({
	    transition: theme.transitions.create(['transform', 'opacity'], {
	      duration: theme.transitions.duration.shorter
	    }),
	    opacity: 1
	  }, !ownerState.open && {
	    opacity: 0,
	    transform: 'scale(0.5)'
	  }, ownerState.tooltipPlacement === 'left' && {
	    transformOrigin: '100% 50%',
	    right: '100%',
	    marginRight: 8
	  }, ownerState.tooltipPlacement === 'right' && {
	    transformOrigin: '0% 50%',
	    left: '100%',
	    marginLeft: 8
	  })
	}));
	const SpeedDialActionStaticTooltipLabel = styled('span', {
	  name: 'MuiSpeedDialAction',
	  slot: 'StaticTooltipLabel',
	  overridesResolver: (props, styles) => styles.staticTooltipLabel
	})(({
	  theme
	}) => _extends({
	  position: 'absolute'
	}, theme.typography.body1, {
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  boxShadow: (theme.vars || theme).shadows[1],
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '4px 16px',
	  wordBreak: 'keep-all'
	}));
	const SpeedDialAction = /*#__PURE__*/react.exports.forwardRef(function SpeedDialAction(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSpeedDialAction'
	  });

	  const {
	    className,
	    delay = 0,
	    FabProps = {},
	    icon,
	    id,
	    open,
	    TooltipClasses,
	    tooltipOpen: tooltipOpenProp = false,
	    tooltipPlacement = 'left',
	    tooltipTitle
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$u);

	  const ownerState = _extends({}, props, {
	    tooltipPlacement
	  });

	  const classes = useUtilityClasses$p(ownerState);
	  const [tooltipOpen, setTooltipOpen] = react.exports.useState(tooltipOpenProp);

	  const handleTooltipClose = () => {
	    setTooltipOpen(false);
	  };

	  const handleTooltipOpen = () => {
	    setTooltipOpen(true);
	  };

	  const transitionStyle = {
	    transitionDelay: `${delay}ms`
	  };

	  const fab = /*#__PURE__*/jsxRuntime.exports.jsx(SpeedDialActionFab, _extends({
	    size: "small",
	    className: clsx(classes.fab, className),
	    tabIndex: -1,
	    role: "menuitem",
	    ownerState: ownerState
	  }, FabProps, {
	    style: _extends({}, transitionStyle, FabProps.style),
	    children: icon
	  }));

	  if (tooltipOpenProp) {
	    return /*#__PURE__*/jsxRuntime.exports.jsxs(SpeedDialActionStaticTooltip, _extends({
	      id: id,
	      ref: ref,
	      className: classes.staticTooltip,
	      ownerState: ownerState
	    }, other, {
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(SpeedDialActionStaticTooltipLabel, {
	        style: transitionStyle,
	        id: `${id}-label`,
	        className: classes.staticTooltipLabel,
	        ownerState: ownerState,
	        children: tooltipTitle
	      }), /*#__PURE__*/react.exports.cloneElement(fab, {
	        'aria-labelledby': `${id}-label`
	      })]
	    }));
	  }

	  if (!open && tooltipOpen) {
	    setTooltipOpen(false);
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(Tooltip, _extends({
	    id: id,
	    ref: ref,
	    title: tooltipTitle,
	    placement: tooltipPlacement,
	    onClose: handleTooltipClose,
	    onOpen: handleTooltipOpen,
	    open: open && tooltipOpen,
	    classes: TooltipClasses
	  }, other, {
	    children: fab
	  }));
	});
	SpeedDialAction.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
	   * @default 0
	   */
	  delay: propTypes.exports.number,

	  /**
	   * Props applied to the [`Fab`](/material-ui/api/fab/) component.
	   * @default {}
	   */
	  FabProps: propTypes.exports.object,

	  /**
	   * The icon to display in the SpeedDial Fab.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * This prop is used to help implement the accessibility logic.
	   * If you don't provide this prop. It falls back to a randomly generated id.
	   */
	  id: propTypes.exports.string,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.
	   */
	  TooltipClasses: propTypes.exports.object,

	  /**
	   * Make the tooltip always visible when the SpeedDial is open.
	   * @default false
	   */
	  tooltipOpen: propTypes.exports.bool,

	  /**
	   * Placement of the tooltip.
	   * @default 'left'
	   */
	  tooltipPlacement: propTypes.exports.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

	  /**
	   * Label to display in the tooltip.
	   */
	  tooltipTitle: propTypes.exports.node
	} ;

	var AddIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
	}), 'Add');

	function getSpeedDialIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSpeedDialIcon', slot);
	}
	const speedDialIconClasses = generateUtilityClasses('MuiSpeedDialIcon', ['root', 'icon', 'iconOpen', 'iconWithOpenIconOpen', 'openIcon', 'openIconOpen']);

	const _excluded$t = ["className", "icon", "open", "openIcon"];

	const useUtilityClasses$o = ownerState => {
	  const {
	    classes,
	    open,
	    openIcon
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    icon: ['icon', open && 'iconOpen', openIcon && open && 'iconWithOpenIconOpen'],
	    openIcon: ['openIcon', open && 'openIconOpen']
	  };
	  return composeClasses(slots, getSpeedDialIconUtilityClass, classes);
	};

	const SpeedDialIconRoot = styled('span', {
	  name: 'MuiSpeedDialIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${speedDialIconClasses.icon}`]: styles.icon
	    }, {
	      [`& .${speedDialIconClasses.icon}`]: ownerState.open && styles.iconOpen
	    }, {
	      [`& .${speedDialIconClasses.icon}`]: ownerState.open && ownerState.openIcon && styles.iconWithOpenIconOpen
	    }, {
	      [`& .${speedDialIconClasses.openIcon}`]: styles.openIcon
	    }, {
	      [`& .${speedDialIconClasses.openIcon}`]: ownerState.open && styles.openIconOpen
	    }, styles.root];
	  }
	})(({
	  theme,
	  ownerState
	}) => ({
	  height: 24,
	  [`& .${speedDialIconClasses.icon}`]: _extends({
	    transition: theme.transitions.create(['transform', 'opacity'], {
	      duration: theme.transitions.duration.short
	    })
	  }, ownerState.open && _extends({
	    transform: 'rotate(45deg)'
	  }, ownerState.openIcon && {
	    opacity: 0
	  })),
	  [`& .${speedDialIconClasses.openIcon}`]: _extends({
	    position: 'absolute',
	    transition: theme.transitions.create(['transform', 'opacity'], {
	      duration: theme.transitions.duration.short
	    }),
	    opacity: 0,
	    transform: 'rotate(-45deg)'
	  }, ownerState.open && {
	    transform: 'rotate(0deg)',
	    opacity: 1
	  })
	}));
	const SpeedDialIcon = /*#__PURE__*/react.exports.forwardRef(function SpeedDialIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSpeedDialIcon'
	  });

	  const {
	    className,
	    icon: iconProp,
	    openIcon: openIconProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$t);

	  const ownerState = props;
	  const classes = useUtilityClasses$o(ownerState);

	  function formatIcon(icon, newClassName) {
	    if ( /*#__PURE__*/react.exports.isValidElement(icon)) {
	      return /*#__PURE__*/react.exports.cloneElement(icon, {
	        className: newClassName
	      });
	    }

	    return icon;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SpeedDialIconRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [openIconProp ? formatIcon(openIconProp, classes.openIcon) : null, iconProp ? formatIcon(iconProp, classes.icon) : /*#__PURE__*/jsxRuntime.exports.jsx(AddIcon, {
	      className: classes.icon
	    })]
	  }));
	});
	SpeedDialIcon.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon to display.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * @ignore
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool,

	  /**
	   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
	   */
	  openIcon: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;
	SpeedDialIcon.muiName = 'SpeedDialIcon';

	const _excluded$s = ["component", "direction", "spacing", "divider", "children"];

	function joinChildren(children, separator) {
	  const childrenArray = react.exports.Children.toArray(children).filter(Boolean);
	  return childrenArray.reduce((output, child, index) => {
	    output.push(child);

	    if (index < childrenArray.length - 1) {
	      output.push( /*#__PURE__*/react.exports.cloneElement(separator, {
	        key: `separator-${index}`
	      }));
	    }

	    return output;
	  }, []);
	}

	const getSideFromDirection = direction => {
	  return {
	    row: 'Left',
	    'row-reverse': 'Right',
	    column: 'Top',
	    'column-reverse': 'Bottom'
	  }[direction];
	};

	const style = ({
	  ownerState,
	  theme
	}) => {
	  let styles = _extends({
	    display: 'flex'
	  }, handleBreakpoints({
	    theme
	  }, resolveBreakpointValues({
	    values: ownerState.direction,
	    breakpoints: theme.breakpoints.values
	  }), propValue => ({
	    flexDirection: propValue
	  })));

	  if (ownerState.spacing) {
	    const transformer = createUnarySpacing(theme);
	    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
	      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
	        acc[breakpoint] = true;
	      }

	      return acc;
	    }, {});
	    const directionValues = resolveBreakpointValues({
	      values: ownerState.direction,
	      base
	    });
	    const spacingValues = resolveBreakpointValues({
	      values: ownerState.spacing,
	      base
	    });

	    const styleFromPropValue = (propValue, breakpoint) => {
	      return {
	        '& > :not(style) + :not(style)': {
	          margin: 0,
	          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
	        }
	      };
	    };

	    styles = deepmerge(styles, handleBreakpoints({
	      theme
	    }, spacingValues, styleFromPropValue));
	  }

	  return styles;
	};
	const StackRoot = styled('div', {
	  name: 'MuiStack',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    return [styles.root];
	  }
	})(style);
	const Stack = /*#__PURE__*/react.exports.forwardRef(function Stack(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiStack'
	  });
	  const props = extendSxProp(themeProps);

	  const {
	    component = 'div',
	    direction = 'column',
	    spacing = 0,
	    divider,
	    children
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$s);

	  const ownerState = {
	    direction,
	    spacing
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx(StackRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: divider ? joinChildren(children, divider) : children
	  }));
	});
	Stack.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Defines the `flex-direction` style property.
	   * It is applied for all screen sizes.
	   * @default 'column'
	   */
	  direction: propTypes.exports.oneOfType([propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.exports.arrayOf(propTypes.exports.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.exports.object]),

	  /**
	   * Add an element between each child.
	   */
	  divider: propTypes.exports.node,

	  /**
	   * Defines the space between immediate children.
	   * @default 0
	   */
	  spacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),

	  /**
	   * The system prop, which allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	/**
	 * Provides information about the current step in Stepper.
	 */
	const StepperContext = /*#__PURE__*/react.exports.createContext({});

	{
	  StepperContext.displayName = 'StepperContext';
	}

	/**
	 * Provides information about the current step in Stepper.
	 */
	const StepContext = /*#__PURE__*/react.exports.createContext({});

	{
	  StepContext.displayName = 'StepContext';
	}

	function getStepUtilityClass(slot) {
	  return generateUtilityClass('MuiStep', slot);
	}
	generateUtilityClasses('MuiStep', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'completed']);

	const _excluded$r = ["active", "children", "className", "completed", "disabled", "expanded", "index", "last"];

	const useUtilityClasses$n = ownerState => {
	  const {
	    classes,
	    orientation,
	    alternativeLabel,
	    completed
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel', completed && 'completed']
	  };
	  return composeClasses(slots, getStepUtilityClass, classes);
	};

	const StepRoot = styled('div', {
	  name: 'MuiStep',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
	  }
	})(({
	  ownerState
	}) => _extends({}, ownerState.orientation === 'horizontal' && {
	  paddingLeft: 8,
	  paddingRight: 8
	}, ownerState.alternativeLabel && {
	  flex: 1,
	  position: 'relative'
	}));
	const Step = /*#__PURE__*/react.exports.forwardRef(function Step(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStep'
	  });

	  const {
	    active: activeProp,
	    children,
	    className,
	    completed: completedProp,
	    disabled: disabledProp,
	    expanded = false,
	    index,
	    last
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$r);

	  const {
	    activeStep,
	    connector,
	    alternativeLabel,
	    orientation,
	    nonLinear
	  } = react.exports.useContext(StepperContext);
	  let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];

	  if (activeStep === index) {
	    active = activeProp !== undefined ? activeProp : true;
	  } else if (!nonLinear && activeStep > index) {
	    completed = completedProp !== undefined ? completedProp : true;
	  } else if (!nonLinear && activeStep < index) {
	    disabled = disabledProp !== undefined ? disabledProp : true;
	  }

	  const contextValue = react.exports.useMemo(() => ({
	    index,
	    last,
	    expanded,
	    icon: index + 1,
	    active,
	    completed,
	    disabled
	  }), [index, last, expanded, active, completed, disabled]);

	  const ownerState = _extends({}, props, {
	    active,
	    orientation,
	    alternativeLabel,
	    completed,
	    disabled,
	    expanded
	  });

	  const classes = useUtilityClasses$n(ownerState);

	  const newChildren = /*#__PURE__*/jsxRuntime.exports.jsxs(StepRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
	  }));

	  return /*#__PURE__*/jsxRuntime.exports.jsx(StepContext.Provider, {
	    value: contextValue,
	    children: connector && !alternativeLabel && index !== 0 ? /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	      children: [connector, newChildren]
	    }) : newChildren
	  });
	});
	Step.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Sets the step as active. Is passed to child components.
	   */
	  active: propTypes.exports.bool,

	  /**
	   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Mark the step as completed. Is passed to child components.
	   */
	  completed: propTypes.exports.bool,

	  /**
	   * If `true`, the step is disabled, will also disable the button if
	   * `StepButton` is a child of `Step`. Is passed to child components.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * Expand the step.
	   * @default false
	   */
	  expanded: propTypes.exports.bool,

	  /**
	   * The position of the step.
	   * The prop defaults to the value inherited from the parent Stepper component.
	   */
	  index: integerPropType,

	  /**
	   * If `true`, the Step is displayed as rendered last.
	   * The prop defaults to the value inherited from the parent Stepper component.
	   */
	  last: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	var CheckCircle = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
	}), 'CheckCircle');

	var Warning = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
	}), 'Warning');

	function getStepIconUtilityClass(slot) {
	  return generateUtilityClass('MuiStepIcon', slot);
	}
	const stepIconClasses = generateUtilityClasses('MuiStepIcon', ['root', 'active', 'completed', 'error', 'text']);

	var _circle;

	const _excluded$q = ["active", "className", "completed", "error", "icon"];

	const useUtilityClasses$m = ownerState => {
	  const {
	    classes,
	    active,
	    completed,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', active && 'active', completed && 'completed', error && 'error'],
	    text: ['text']
	  };
	  return composeClasses(slots, getStepIconUtilityClass, classes);
	};

	const StepIconRoot = styled(SvgIcon, {
	  name: 'MuiStepIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'block',
	  transition: theme.transitions.create('color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  color: (theme.vars || theme).palette.text.disabled,
	  [`&.${stepIconClasses.completed}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${stepIconClasses.active}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${stepIconClasses.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const StepIconText = styled('text', {
	  name: 'MuiStepIcon',
	  slot: 'Text',
	  overridesResolver: (props, styles) => styles.text
	})(({
	  theme
	}) => ({
	  fill: (theme.vars || theme).palette.primary.contrastText,
	  fontSize: theme.typography.caption.fontSize,
	  fontFamily: theme.typography.fontFamily
	}));
	const StepIcon = /*#__PURE__*/react.exports.forwardRef(function StepIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepIcon'
	  });

	  const {
	    active = false,
	    className: classNameProp,
	    completed = false,
	    error = false,
	    icon
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$q);

	  const ownerState = _extends({}, props, {
	    active,
	    completed,
	    error
	  });

	  const classes = useUtilityClasses$m(ownerState);

	  if (typeof icon === 'number' || typeof icon === 'string') {
	    const className = clsx(classNameProp, classes.root);

	    if (error) {
	      return /*#__PURE__*/jsxRuntime.exports.jsx(StepIconRoot, _extends({
	        as: Warning,
	        className: className,
	        ref: ref,
	        ownerState: ownerState
	      }, other));
	    }

	    if (completed) {
	      return /*#__PURE__*/jsxRuntime.exports.jsx(StepIconRoot, _extends({
	        as: CheckCircle,
	        className: className,
	        ref: ref,
	        ownerState: ownerState
	      }, other));
	    }

	    return /*#__PURE__*/jsxRuntime.exports.jsxs(StepIconRoot, _extends({
	      className: className,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [_circle || (_circle = /*#__PURE__*/jsxRuntime.exports.jsx("circle", {
	        cx: "12",
	        cy: "12",
	        r: "12"
	      })), /*#__PURE__*/jsxRuntime.exports.jsx(StepIconText, {
	        className: classes.text,
	        x: "12",
	        y: "12",
	        textAnchor: "middle",
	        dominantBaseline: "central",
	        ownerState: ownerState,
	        children: icon
	      })]
	    }));
	  }

	  return icon;
	});
	StepIcon.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Whether this step is active.
	   * @default false
	   */
	  active: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * Mark the step as completed. Is passed to child components.
	   * @default false
	   */
	  completed: propTypes.exports.bool,

	  /**
	   * If `true`, the step is marked as failed.
	   * @default false
	   */
	  error: propTypes.exports.bool,

	  /**
	   * The label displayed in the step icon.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getStepLabelUtilityClass(slot) {
	  return generateUtilityClass('MuiStepLabel', slot);
	}
	const stepLabelClasses = generateUtilityClasses('MuiStepLabel', ['root', 'horizontal', 'vertical', 'label', 'active', 'completed', 'error', 'disabled', 'iconContainer', 'alternativeLabel', 'labelContainer']);

	const _excluded$p = ["children", "className", "componentsProps", "error", "icon", "optional", "StepIconComponent", "StepIconProps"];

	const useUtilityClasses$l = ownerState => {
	  const {
	    classes,
	    orientation,
	    active,
	    completed,
	    error,
	    disabled,
	    alternativeLabel
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
	    label: ['label', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
	    iconContainer: ['iconContainer', alternativeLabel && 'alternativeLabel'],
	    labelContainer: ['labelContainer']
	  };
	  return composeClasses(slots, getStepLabelUtilityClass, classes);
	};

	const StepLabelRoot = styled('span', {
	  name: 'MuiStepLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  [`&.${stepLabelClasses.alternativeLabel}`]: {
	    flexDirection: 'column'
	  },
	  [`&.${stepLabelClasses.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.orientation === 'vertical' && {
	  textAlign: 'left',
	  padding: '8px 0'
	}));
	const StepLabelLabel = styled('span', {
	  name: 'MuiStepLabel',
	  slot: 'Label',
	  overridesResolver: (props, styles) => styles.label
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  display: 'block',
	  transition: theme.transitions.create('color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${stepLabelClasses.active}`]: {
	    color: (theme.vars || theme).palette.text.primary,
	    fontWeight: 500
	  },
	  [`&.${stepLabelClasses.completed}`]: {
	    color: (theme.vars || theme).palette.text.primary,
	    fontWeight: 500
	  },
	  [`&.${stepLabelClasses.alternativeLabel}`]: {
	    textAlign: 'center',
	    marginTop: 16
	  },
	  [`&.${stepLabelClasses.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const StepLabelIconContainer = styled('span', {
	  name: 'MuiStepLabel',
	  slot: 'IconContainer',
	  overridesResolver: (props, styles) => styles.iconContainer
	})(() => ({
	  flexShrink: 0,
	  // Fix IE11 issue
	  display: 'flex',
	  paddingRight: 8,
	  [`&.${stepLabelClasses.alternativeLabel}`]: {
	    paddingRight: 0
	  }
	}));
	const StepLabelLabelContainer = styled('span', {
	  name: 'MuiStepLabel',
	  slot: 'LabelContainer',
	  overridesResolver: (props, styles) => styles.labelContainer
	})(({
	  theme
	}) => ({
	  width: '100%',
	  color: (theme.vars || theme).palette.text.secondary
	}));
	const StepLabel = /*#__PURE__*/react.exports.forwardRef(function StepLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepLabel'
	  });

	  const {
	    children,
	    className,
	    componentsProps = {},
	    error = false,
	    icon: iconProp,
	    optional,
	    StepIconComponent: StepIconComponentProp,
	    StepIconProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$p);

	  const {
	    alternativeLabel,
	    orientation
	  } = react.exports.useContext(StepperContext);
	  const {
	    active,
	    disabled,
	    completed,
	    icon: iconContext
	  } = react.exports.useContext(StepContext);
	  const icon = iconProp || iconContext;
	  let StepIconComponent = StepIconComponentProp;

	  if (icon && !StepIconComponent) {
	    StepIconComponent = StepIcon;
	  }

	  const ownerState = _extends({}, props, {
	    active,
	    alternativeLabel,
	    completed,
	    disabled,
	    error,
	    orientation
	  });

	  const classes = useUtilityClasses$l(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(StepLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [icon || StepIconComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(StepLabelIconContainer, {
	      className: classes.iconContainer,
	      ownerState: ownerState,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(StepIconComponent, _extends({
	        completed: completed,
	        active: active,
	        error: error,
	        icon: icon
	      }, StepIconProps))
	    }) : null, /*#__PURE__*/jsxRuntime.exports.jsxs(StepLabelLabelContainer, {
	      className: classes.labelContainer,
	      ownerState: ownerState,
	      children: [children ? /*#__PURE__*/jsxRuntime.exports.jsx(StepLabelLabel, _extends({
	        className: classes.label,
	        ownerState: ownerState
	      }, componentsProps.label, {
	        children: children
	      })) : null, optional]
	    })]
	  }));
	});
	StepLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * In most cases will simply be a string containing a title for the label.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The props used for each slot inside.
	   * @default {}
	   */
	  componentsProps: propTypes.exports.shape({
	    label: propTypes.exports.object
	  }),

	  /**
	   * If `true`, the step is marked as failed.
	   * @default false
	   */
	  error: propTypes.exports.bool,

	  /**
	   * Override the default label of the step icon.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The optional node to display.
	   */
	  optional: propTypes.exports.node,

	  /**
	   * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).
	   */
	  StepIconComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.
	   */
	  StepIconProps: propTypes.exports.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;
	StepLabel.muiName = 'StepLabel';

	function getStepButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiStepButton', slot);
	}
	const stepButtonClasses = generateUtilityClasses('MuiStepButton', ['root', 'horizontal', 'vertical', 'touchRipple']);

	const _excluded$o = ["children", "className", "icon", "optional"];

	const useUtilityClasses$k = ownerState => {
	  const {
	    classes,
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation],
	    touchRipple: ['touchRipple']
	  };
	  return composeClasses(slots, getStepButtonUtilityClass, classes);
	};

	const StepButtonRoot = styled(ButtonBase, {
	  name: 'MuiStepButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${stepButtonClasses.touchRipple}`]: styles.touchRipple
	    }, styles.root, styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  width: '100%',
	  padding: '24px 16px',
	  margin: '-24px -16px',
	  boxSizing: 'content-box'
	}, ownerState.orientation === 'vertical' && {
	  justifyContent: 'flex-start',
	  padding: '8px',
	  margin: '-8px'
	}, {
	  [`& .${stepButtonClasses.touchRipple}`]: {
	    color: 'rgba(0, 0, 0, 0.3)'
	  }
	}));
	const StepButton = /*#__PURE__*/react.exports.forwardRef(function StepButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepButton'
	  });

	  const {
	    children,
	    className,
	    icon,
	    optional
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$o);

	  const {
	    disabled
	  } = react.exports.useContext(StepContext);
	  const {
	    orientation
	  } = react.exports.useContext(StepperContext);

	  const ownerState = _extends({}, props, {
	    orientation
	  });

	  const classes = useUtilityClasses$k(ownerState);
	  const childProps = {
	    icon,
	    optional
	  };
	  const child = isMuiElement(children, ['StepLabel']) ? /*#__PURE__*/react.exports.cloneElement(children, childProps) : /*#__PURE__*/jsxRuntime.exports.jsx(StepLabel, _extends({}, childProps, {
	    children: children
	  }));
	  return /*#__PURE__*/jsxRuntime.exports.jsx(StepButtonRoot, _extends({
	    focusRipple: true,
	    disabled: disabled,
	    TouchRippleProps: {
	      className: classes.touchRipple
	    },
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: child
	  }));
	});
	StepButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The icon displayed by the step label.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The optional node to display.
	   */
	  optional: propTypes.exports.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getStepConnectorUtilityClass(slot) {
	  return generateUtilityClass('MuiStepConnector', slot);
	}
	generateUtilityClasses('MuiStepConnector', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'active', 'completed', 'disabled', 'line', 'lineHorizontal', 'lineVertical']);

	const _excluded$n = ["className"];

	const useUtilityClasses$j = ownerState => {
	  const {
	    classes,
	    orientation,
	    alternativeLabel,
	    active,
	    completed,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel', active && 'active', completed && 'completed', disabled && 'disabled'],
	    line: ['line', `line${capitalize(orientation)}`]
	  };
	  return composeClasses(slots, getStepConnectorUtilityClass, classes);
	};

	const StepConnectorRoot = styled('div', {
	  name: 'MuiStepConnector',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
	  }
	})(({
	  ownerState
	}) => _extends({
	  flex: '1 1 auto'
	}, ownerState.orientation === 'vertical' && {
	  marginLeft: 12 // half icon

	}, ownerState.alternativeLabel && {
	  position: 'absolute',
	  top: 8 + 4,
	  left: 'calc(-50% + 20px)',
	  right: 'calc(50% + 20px)'
	}));
	const StepConnectorLine = styled('span', {
	  name: 'MuiStepConnector',
	  slot: 'Line',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.line, styles[`line${capitalize(ownerState.orientation)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600];
	  return _extends({
	    display: 'block',
	    borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor
	  }, ownerState.orientation === 'horizontal' && {
	    borderTopStyle: 'solid',
	    borderTopWidth: 1
	  }, ownerState.orientation === 'vertical' && {
	    borderLeftStyle: 'solid',
	    borderLeftWidth: 1,
	    minHeight: 24
	  });
	});
	const StepConnector = /*#__PURE__*/react.exports.forwardRef(function StepConnector(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepConnector'
	  });

	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$n);

	  const {
	    alternativeLabel,
	    orientation = 'horizontal'
	  } = react.exports.useContext(StepperContext);
	  const {
	    active,
	    disabled,
	    completed
	  } = react.exports.useContext(StepContext);

	  const ownerState = _extends({}, props, {
	    alternativeLabel,
	    orientation,
	    active,
	    completed,
	    disabled
	  });

	  const classes = useUtilityClasses$j(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(StepConnectorRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(StepConnectorLine, {
	      className: classes.line,
	      ownerState: ownerState
	    })
	  }));
	});
	StepConnector.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getStepContentUtilityClass(slot) {
	  return generateUtilityClass('MuiStepContent', slot);
	}
	generateUtilityClasses('MuiStepContent', ['root', 'last', 'transition']);

	const _excluded$m = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"];

	const useUtilityClasses$i = ownerState => {
	  const {
	    classes,
	    last
	  } = ownerState;
	  const slots = {
	    root: ['root', last && 'last'],
	    transition: ['transition']
	  };
	  return composeClasses(slots, getStepContentUtilityClass, classes);
	};

	const StepContentRoot = styled('div', {
	  name: 'MuiStepContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.last && styles.last];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  marginLeft: 12,
	  // half icon
	  paddingLeft: 8 + 12,
	  // margin + half icon
	  paddingRight: 8,
	  borderLeft: theme.vars ? `1px solid ${theme.vars.palette.StepContent.border}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]}`
	}, ownerState.last && {
	  borderLeft: 'none'
	}));
	const StepContentTransition = styled(Collapse, {
	  name: 'MuiStepContent',
	  slot: 'Transition',
	  overridesResolver: (props, styles) => styles.transition
	})({});
	const StepContent = /*#__PURE__*/react.exports.forwardRef(function StepContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepContent'
	  });

	  const {
	    children,
	    className,
	    TransitionComponent = Collapse,
	    transitionDuration: transitionDurationProp = 'auto',
	    TransitionProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$m);

	  const {
	    orientation
	  } = react.exports.useContext(StepperContext);
	  const {
	    active,
	    last,
	    expanded
	  } = react.exports.useContext(StepContext);

	  const ownerState = _extends({}, props, {
	    last
	  });

	  const classes = useUtilityClasses$i(ownerState);

	  {
	    if (orientation !== 'vertical') {
	      console.error('MUI: <StepContent /> is only designed for use with the vertical stepper.');
	    }
	  }

	  let transitionDuration = transitionDurationProp;

	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(StepContentRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(StepContentTransition, _extends({
	      as: TransitionComponent,
	      in: active || expanded,
	      className: classes.transition,
	      ownerState: ownerState,
	      timeout: transitionDuration,
	      unmountOnExit: true
	    }, TransitionProps, {
	      children: children
	    }))
	  }));
	});
	StepContent.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Collapse
	   */
	  TransitionComponent: propTypes.exports.elementType,

	  /**
	   * Adjust the duration of the content expand transition.
	   * Passed as a prop to the transition component.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.oneOf(['auto']), propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: propTypes.exports.object
	} ;

	function getStepperUtilityClass(slot) {
	  return generateUtilityClass('MuiStepper', slot);
	}
	generateUtilityClasses('MuiStepper', ['root', 'horizontal', 'vertical', 'alternativeLabel']);

	const _excluded$l = ["activeStep", "alternativeLabel", "children", "className", "connector", "nonLinear", "orientation"];

	const useUtilityClasses$h = ownerState => {
	  const {
	    orientation,
	    alternativeLabel,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel']
	  };
	  return composeClasses(slots, getStepperUtilityClass, classes);
	};

	const StepperRoot = styled('div', {
	  name: 'MuiStepper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex'
	}, ownerState.orientation === 'horizontal' && {
	  flexDirection: 'row',
	  alignItems: 'center'
	}, ownerState.orientation === 'vertical' && {
	  flexDirection: 'column'
	}, ownerState.alternativeLabel && {
	  alignItems: 'flex-start'
	}));

	const defaultConnector = /*#__PURE__*/jsxRuntime.exports.jsx(StepConnector, {});

	const Stepper = /*#__PURE__*/react.exports.forwardRef(function Stepper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepper'
	  });

	  const {
	    activeStep = 0,
	    alternativeLabel = false,
	    children,
	    className,
	    connector = defaultConnector,
	    nonLinear = false,
	    orientation = 'horizontal'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$l);

	  const ownerState = _extends({}, props, {
	    alternativeLabel,
	    orientation
	  });

	  const classes = useUtilityClasses$h(ownerState);
	  const childrenArray = react.exports.Children.toArray(children).filter(Boolean);
	  const steps = childrenArray.map((step, index) => {
	    return /*#__PURE__*/react.exports.cloneElement(step, _extends({
	      index,
	      last: index + 1 === childrenArray.length
	    }, step.props));
	  });
	  const contextValue = react.exports.useMemo(() => ({
	    activeStep,
	    alternativeLabel,
	    connector,
	    nonLinear,
	    orientation
	  }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(StepperContext.Provider, {
	    value: contextValue,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(StepperRoot, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: steps
	    }))
	  });
	});
	Stepper.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the active step (zero based index).
	   * Set to -1 to disable all the steps.
	   * @default 0
	   */
	  activeStep: integerPropType,

	  /**
	   * If set to 'true' and orientation is horizontal,
	   * then the step label will be positioned under the icon.
	   * @default false
	   */
	  alternativeLabel: propTypes.exports.bool,

	  /**
	   * Two or more `<Step />` components.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * An element to be placed between each step.
	   * @default <StepConnector />
	   */
	  connector: propTypes.exports.element,

	  /**
	   * If set the `Stepper` will not assist in controlling steps for linear flow.
	   * @default false
	   */
	  nonLinear: propTypes.exports.bool,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	const _excluded$k = ["anchor", "classes", "className", "width", "style"];
	const SwipeAreaRoot = styled('div')(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  top: 0,
	  left: 0,
	  bottom: 0,
	  zIndex: theme.zIndex.drawer - 1
	}, ownerState.anchor === 'left' && {
	  right: 'auto'
	}, ownerState.anchor === 'right' && {
	  left: 'auto',
	  right: 0
	}, ownerState.anchor === 'top' && {
	  bottom: 'auto',
	  right: 0
	}, ownerState.anchor === 'bottom' && {
	  top: 'auto',
	  bottom: 0,
	  right: 0
	}));
	/**
	 * @ignore - internal component.
	 */

	const SwipeArea = /*#__PURE__*/react.exports.forwardRef(function SwipeArea(props, ref) {
	  const {
	    anchor,
	    classes = {},
	    className,
	    width,
	    style
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$k);

	  const ownerState = props;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(SwipeAreaRoot, _extends({
	    className: clsx('PrivateSwipeArea-root', classes.root, classes[`anchor${capitalize(anchor)}`], className),
	    ref: ref,
	    style: _extends({
	      [isHorizontal(anchor) ? 'width' : 'height']: width
	    }, style),
	    ownerState: ownerState
	  }, other));
	});
	SwipeArea.propTypes = {
	  /**
	   * Side on which to attach the discovery area.
	   */
	  anchor: propTypes.exports.oneOf(['left', 'top', 'right', 'bottom']).isRequired,

	  /**
	   * @ignore
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  style: propTypes.exports.object,

	  /**
	   * The width of the left most (or right most) area in `px` where the
	   * drawer can be swiped open from.
	   */
	  width: propTypes.exports.number.isRequired
	} ;

	const _excluded$j = ["BackdropProps"],
	      _excluded2 = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"];
	const UNCERTAINTY_THRESHOLD = 3; // px
	// This is the part of the drawer displayed on touch start.

	const DRAG_STARTED_SIGNAL = 20; // px
	// We can only have one instance at the time claiming ownership for handling the swipe.
	// Otherwise, the UX would be confusing.
	// That's why we use a singleton here.

	let claimedSwipeInstance = null; // Exported for test purposes.

	function calculateCurrentX(anchor, touches, doc) {
	  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;
	}

	function calculateCurrentY(anchor, touches, containerWindow) {
	  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;
	}

	function getMaxTranslate(horizontalSwipe, paperInstance) {
	  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
	}

	function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
	  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
	}
	/**
	 * @param {Element | null} element
	 * @param {Element} rootNode
	 */


	function getDomTreeShapes(element, rootNode) {
	  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129
	  const domTreeShapes = [];

	  while (element && element !== rootNode.parentElement) {
	    const style = ownerWindow(rootNode).getComputedStyle(element);

	    if ( // Ignore the scroll children if the element is absolute positioned.
	    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden
	    style.getPropertyValue('overflow-x') === 'hidden') ; else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
	      // Ignore the nodes that have no width.
	      // Keep elements with a scroll
	      domTreeShapes.push(element);
	    }

	    element = element.parentElement;
	  }

	  return domTreeShapes;
	}
	/**
	 * @param {object} param0
	 * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes
	 */


	function computeHasNativeHandler({
	  domTreeShapes,
	  start,
	  current,
	  anchor
	}) {
	  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175
	  const axisProperties = {
	    scrollPosition: {
	      x: 'scrollLeft',
	      y: 'scrollTop'
	    },
	    scrollLength: {
	      x: 'scrollWidth',
	      y: 'scrollHeight'
	    },
	    clientLength: {
	      x: 'clientWidth',
	      y: 'clientHeight'
	    }
	  };
	  return domTreeShapes.some(shape => {
	    // Determine if we are going backward or forward.
	    let goingForward = current >= start;

	    if (anchor === 'top' || anchor === 'left') {
	      goingForward = !goingForward;
	    }

	    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';
	    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);
	    const areNotAtStart = scrollPosition > 0;
	    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];

	    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
	      return true;
	    }

	    return false;
	  });
	}

	const iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);
	const SwipeableDrawer = /*#__PURE__*/react.exports.forwardRef(function SwipeableDrawer(inProps, ref) {
	  const props = useThemeProps$1({
	    name: 'MuiSwipeableDrawer',
	    props: inProps
	  });
	  const theme = useTheme();
	  const transitionDurationDefault = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };

	  const {
	    anchor = 'left',
	    disableBackdropTransition = false,
	    disableDiscovery = false,
	    disableSwipeToOpen = iOS,
	    hideBackdrop,
	    hysteresis = 0.52,
	    minFlingVelocity = 450,
	    ModalProps: {
	      BackdropProps
	    } = {},
	    onClose,
	    onOpen,
	    open,
	    PaperProps = {},
	    SwipeAreaProps,
	    swipeAreaWidth = 20,
	    transitionDuration = transitionDurationDefault,
	    variant = 'temporary'
	  } = props,
	        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$j),
	        other = _objectWithoutPropertiesLoose(props, _excluded2);

	  const [maybeSwiping, setMaybeSwiping] = react.exports.useState(false);
	  const swipeInstance = react.exports.useRef({
	    isSwiping: null
	  });
	  const swipeAreaRef = react.exports.useRef();
	  const backdropRef = react.exports.useRef();
	  const paperRef = react.exports.useRef();
	  const touchDetected = react.exports.useRef(false); // Ref for transition duration based on / to match swipe speed

	  const calculatedDurationRef = react.exports.useRef(); // Use a ref so the open value used is always up to date inside useCallback.

	  useEnhancedEffect(() => {
	    calculatedDurationRef.current = null;
	  }, [open]);
	  const setPosition = react.exports.useCallback((translate, options = {}) => {
	    const {
	      mode = null,
	      changeTransition = true
	    } = options;
	    const anchorRtl = getAnchor(theme, anchor);
	    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;
	    const horizontalSwipe = isHorizontal(anchor);
	    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;
	    const drawerStyle = paperRef.current.style;
	    drawerStyle.webkitTransform = transform;
	    drawerStyle.transform = transform;
	    let transition = '';

	    if (mode) {
	      transition = theme.transitions.create('all', getTransitionProps({
	        easing: undefined,
	        style: undefined,
	        timeout: transitionDuration
	      }, {
	        mode
	      }));
	    }

	    if (changeTransition) {
	      drawerStyle.webkitTransition = transition;
	      drawerStyle.transition = transition;
	    }

	    if (!disableBackdropTransition && !hideBackdrop) {
	      const backdropStyle = backdropRef.current.style;
	      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);

	      if (changeTransition) {
	        backdropStyle.webkitTransition = transition;
	        backdropStyle.transition = transition;
	      }
	    }
	  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
	  const handleBodyTouchEnd = useEventCallback(nativeEvent => {
	    if (!touchDetected.current) {
	      return;
	    }

	    claimedSwipeInstance = null;
	    touchDetected.current = false;
	    setMaybeSwiping(false); // The swipe wasn't started.

	    if (!swipeInstance.current.isSwiping) {
	      swipeInstance.current.isSwiping = null;
	      return;
	    }

	    swipeInstance.current.isSwiping = null;
	    const anchorRtl = getAnchor(theme, anchor);
	    const horizontal = isHorizontal(anchor);
	    let current;

	    if (horizontal) {
	      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));
	    } else {
	      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));
	    }

	    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
	    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);
	    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
	    const translateRatio = currentTranslate / maxTranslate;

	    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
	      // Calculate transition duration to match swipe speed
	      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;
	    }

	    if (open) {
	      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
	        onClose();
	      } else {
	        // Reset the position, the swipe was aborted.
	        setPosition(0, {
	          mode: 'exit'
	        });
	      }

	      return;
	    }

	    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
	      onOpen();
	    } else {
	      // Reset the position, the swipe was aborted.
	      setPosition(getMaxTranslate(horizontal, paperRef.current), {
	        mode: 'enter'
	      });
	    }
	  });
	  const handleBodyTouchMove = useEventCallback(nativeEvent => {
	    // the ref may be null when a parent component updates while swiping
	    if (!paperRef.current || !touchDetected.current) {
	      return;
	    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer


	    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {
	      return;
	    }

	    const anchorRtl = getAnchor(theme, anchor);
	    const horizontalSwipe = isHorizontal(anchor);
	    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));
	    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));

	    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {
	      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);
	      const hasNativeHandler = computeHasNativeHandler({
	        domTreeShapes,
	        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
	        current: horizontalSwipe ? currentX : currentY,
	        anchor
	      });

	      if (hasNativeHandler) {
	        claimedSwipeInstance = true;
	        return;
	      }

	      claimedSwipeInstance = swipeInstance.current;
	    } // We don't know yet.


	    if (swipeInstance.current.isSwiping == null) {
	      const dx = Math.abs(currentX - swipeInstance.current.startX);
	      const dy = Math.abs(currentY - swipeInstance.current.startY);
	      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;

	      if (definitelySwiping && nativeEvent.cancelable) {
	        nativeEvent.preventDefault();
	      }

	      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
	        swipeInstance.current.isSwiping = definitelySwiping;

	        if (!definitelySwiping) {
	          handleBodyTouchEnd(nativeEvent);
	          return;
	        } // Shift the starting point.


	        swipeInstance.current.startX = currentX;
	        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.

	        if (!disableDiscovery && !open) {
	          if (horizontalSwipe) {
	            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;
	          } else {
	            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;
	          }
	        }
	      }
	    }

	    if (!swipeInstance.current.isSwiping) {
	      return;
	    }

	    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
	    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;

	    if (open && !swipeInstance.current.paperHit) {
	      startLocation = Math.min(startLocation, maxTranslate);
	    }

	    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);

	    if (open) {
	      if (!swipeInstance.current.paperHit) {
	        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;

	        if (paperHit) {
	          swipeInstance.current.paperHit = true;
	          swipeInstance.current.startX = currentX;
	          swipeInstance.current.startY = currentY;
	        } else {
	          return;
	        }
	      } else if (translate === 0) {
	        swipeInstance.current.startX = currentX;
	        swipeInstance.current.startY = currentY;
	      }
	    }

	    if (swipeInstance.current.lastTranslate === null) {
	      swipeInstance.current.lastTranslate = translate;
	      swipeInstance.current.lastTime = performance.now() + 1;
	    }

	    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.

	    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
	    swipeInstance.current.lastTranslate = translate;
	    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.

	    if (nativeEvent.cancelable) {
	      nativeEvent.preventDefault();
	    }

	    setPosition(translate);
	  });
	  const handleBodyTouchStart = useEventCallback(nativeEvent => {
	    // We are not supposed to handle this touch move.
	    // Example of use case: ignore the event if there is a Slider.
	    if (nativeEvent.defaultPrevented) {
	      return;
	    } // We can only have one node at the time claiming ownership for handling the swipe.


	    if (nativeEvent.defaultMuiPrevented) {
	      return;
	    } // At least one element clogs the drawer interaction zone.


	    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {
	      return;
	    }

	    const anchorRtl = getAnchor(theme, anchor);
	    const horizontalSwipe = isHorizontal(anchor);
	    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));
	    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));

	    if (!open) {
	      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {
	        return;
	      }

	      if (horizontalSwipe) {
	        if (currentX > swipeAreaWidth) {
	          return;
	        }
	      } else if (currentY > swipeAreaWidth) {
	        return;
	      }
	    }

	    nativeEvent.defaultMuiPrevented = true;
	    claimedSwipeInstance = null;
	    swipeInstance.current.startX = currentX;
	    swipeInstance.current.startY = currentY;
	    setMaybeSwiping(true);

	    if (!open && paperRef.current) {
	      // The ref may be null when a parent component updates while swiping.
	      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {
	        changeTransition: false
	      });
	    }

	    swipeInstance.current.velocity = 0;
	    swipeInstance.current.lastTime = null;
	    swipeInstance.current.lastTranslate = null;
	    swipeInstance.current.paperHit = false;
	    touchDetected.current = true;
	  });
	  react.exports.useEffect(() => {
	    if (variant === 'temporary') {
	      const doc = ownerDocument(paperRef.current);
	      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.
	      // It only needs to prevent scrolling on the drawer's content when open.
	      // When closed, the overlay prevents scrolling.

	      doc.addEventListener('touchmove', handleBodyTouchMove, {
	        passive: !open
	      });
	      doc.addEventListener('touchend', handleBodyTouchEnd);
	      return () => {
	        doc.removeEventListener('touchstart', handleBodyTouchStart);
	        doc.removeEventListener('touchmove', handleBodyTouchMove, {
	          passive: !open
	        });
	        doc.removeEventListener('touchend', handleBodyTouchEnd);
	      };
	    }

	    return undefined;
	  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
	  react.exports.useEffect(() => () => {
	    // We need to release the lock.
	    if (claimedSwipeInstance === swipeInstance.current) {
	      claimedSwipeInstance = null;
	    }
	  }, []);
	  react.exports.useEffect(() => {
	    if (!open) {
	      setMaybeSwiping(false);
	    }
	  }, [open]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(Drawer, _extends({
	      open: variant === 'temporary' && maybeSwiping ? true : open,
	      variant: variant,
	      ModalProps: _extends({
	        BackdropProps: _extends({}, BackdropProps, {
	          ref: backdropRef
	        })
	      }, ModalPropsProp),
	      hideBackdrop: hideBackdrop,
	      PaperProps: _extends({}, PaperProps, {
	        style: _extends({
	          pointerEvents: variant === 'temporary' && !open ? 'none' : ''
	        }, PaperProps.style),
	        ref: paperRef
	      }),
	      anchor: anchor,
	      transitionDuration: calculatedDurationRef.current || transitionDuration,
	      onClose: onClose,
	      ref: ref
	    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/jsxRuntime.exports.jsx(NoSsr, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(SwipeArea, _extends({
	        anchor: anchor,
	        ref: swipeAreaRef,
	        width: swipeAreaWidth
	      }, SwipeAreaProps))
	    })]
	  });
	});
	SwipeableDrawer.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  anchor: propTypes.exports.oneOf(['bottom', 'left', 'right', 'top']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Disable the backdrop transition.
	   * This can improve the FPS on low-end devices.
	   * @default false
	   */
	  disableBackdropTransition: propTypes.exports.bool,

	  /**
	   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
	   * to promote accidental discovery of the swipe gesture.
	   * @default false
	   */
	  disableDiscovery: propTypes.exports.bool,

	  /**
	   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
	   * navigation actions. Swipe to open is disabled on iOS browsers by default.
	   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
	   */
	  disableSwipeToOpen: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  hideBackdrop: propTypes.exports.bool,

	  /**
	   * Affects how far the drawer must be opened/closed to change its state.
	   * Specified as percent (0-1) of the width of the drawer
	   * @default 0.52
	   */
	  hysteresis: propTypes.exports.number,

	  /**
	   * Defines, from which (average) velocity on, the swipe is
	   * defined as complete although hysteresis isn't reached.
	   * Good threshold is between 250 - 1000 px/s
	   * @default 450
	   */
	  minFlingVelocity: propTypes.exports.number,

	  /**
	   * @ignore
	   */
	  ModalProps: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    BackdropProps: propTypes.exports.shape({
	      component: elementTypeAcceptingRef$1
	    })
	  }),

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.exports.func.isRequired,

	  /**
	   * Callback fired when the component requests to be opened.
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: propTypes.exports.func.isRequired,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: propTypes.exports.bool.isRequired,

	  /**
	   * @ignore
	   */
	  PaperProps: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    component: elementTypeAcceptingRef$1,
	    style: propTypes.exports.object
	  }),

	  /**
	   * The element is used to intercept the touch events on the edge.
	   */
	  SwipeAreaProps: propTypes.exports.object,

	  /**
	   * The width of the left most (or right most) area in `px` that
	   * the drawer can be swiped open from.
	   * @default 20
	   */
	  swipeAreaWidth: propTypes.exports.number,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: theme.transitions.duration.enteringScreen,
	   *   exit: theme.transitions.duration.leavingScreen,
	   * }
	   */
	  transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    appear: propTypes.exports.number,
	    enter: propTypes.exports.number,
	    exit: propTypes.exports.number
	  })]),

	  /**
	   * @ignore
	   */
	  variant: propTypes.exports.oneOf(['permanent', 'persistent', 'temporary'])
	} ;

	function getSwitchUtilityClass(slot) {
	  return generateUtilityClass('MuiSwitch', slot);
	}
	const switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);

	const _excluded$i = ["className", "color", "edge", "size", "sx"];

	const useUtilityClasses$g = ownerState => {
	  const {
	    classes,
	    edge,
	    size,
	    color,
	    checked,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
	    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],
	    thumb: ['thumb'],
	    track: ['track'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};

	const SwitchRoot = styled('span', {
	  name: 'MuiSwitch',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  width: 34 + 12 * 2,
	  height: 14 + 12 * 2,
	  overflow: 'hidden',
	  padding: 12,
	  boxSizing: 'border-box',
	  position: 'relative',
	  flexShrink: 0,
	  zIndex: 0,
	  // Reset the stacking context.
	  verticalAlign: 'middle',
	  // For correct alignment with the text.
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: -8
	}, ownerState.edge === 'end' && {
	  marginRight: -8
	}, ownerState.size === 'small' && {
	  width: 40,
	  height: 24,
	  padding: 7,
	  [`& .${switchClasses.thumb}`]: {
	    width: 16,
	    height: 16
	  },
	  [`& .${switchClasses.switchBase}`]: {
	    padding: 4,
	    [`&.${switchClasses.checked}`]: {
	      transform: 'translateX(16px)'
	    }
	  }
	}));
	const SwitchSwitchBase = styled(SwitchBase, {
	  name: 'MuiSwitch',
	  slot: 'SwitchBase',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.switchBase, {
	      [`& .${switchClasses.input}`]: styles.input
	    }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme
	}) => ({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  zIndex: 1,
	  // Render above the focus ripple.
	  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,
	  transition: theme.transitions.create(['left', 'transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${switchClasses.checked}`]: {
	    transform: 'translateX(20px)'
	  },
	  [`&.${switchClasses.disabled}`]: {
	    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`
	  },
	  [`&.${switchClasses.checked} + .${switchClasses.track}`]: {
	    opacity: 0.5
	  },
	  [`&.${switchClasses.disabled} + .${switchClasses.track}`]: {
	    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`
	  },
	  [`& .${switchClasses.input}`]: {
	    left: '-100%',
	    width: '300%'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${switchClasses.checked}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${switchClasses.disabled}`]: {
	      color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
	    }
	  },
	  [`&.${switchClasses.checked} + .${switchClasses.track}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }
	}));
	const SwitchTrack = styled('span', {
	  name: 'MuiSwitch',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme
	}) => ({
	  height: '100%',
	  width: '100%',
	  borderRadius: 14 / 2,
	  zIndex: -1,
	  transition: theme.transitions.create(['opacity', 'background-color'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,
	  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`
	}));
	const SwitchThumb = styled('span', {
	  name: 'MuiSwitch',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => styles.thumb
	})(({
	  theme
	}) => ({
	  boxShadow: (theme.vars || theme).shadows[1],
	  backgroundColor: 'currentColor',
	  width: 20,
	  height: 20,
	  borderRadius: '50%'
	}));
	const Switch = /*#__PURE__*/react.exports.forwardRef(function Switch(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSwitch'
	  });

	  const {
	    className,
	    color = 'primary',
	    edge = false,
	    size = 'medium',
	    sx
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$i);

	  const ownerState = _extends({}, props, {
	    color,
	    edge,
	    size
	  });

	  const classes = useUtilityClasses$g(ownerState);

	  const icon = /*#__PURE__*/jsxRuntime.exports.jsx(SwitchThumb, {
	    className: classes.thumb,
	    ownerState: ownerState
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchRoot, {
	    className: clsx(classes.root, className),
	    sx: sx,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchSwitchBase, _extends({
	      type: "checkbox",
	      icon: icon,
	      checkedIcon: icon,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      classes: _extends({}, classes, {
	        root: classes.switchBase
	      })
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(SwitchTrack, {
	      className: classes.track,
	      ownerState: ownerState
	    })]
	  });
	});
	Switch.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.exports.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The default checked state. Use when the component is not controlled.
	   */
	  defaultChecked: propTypes.exports.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: propTypes.exports.oneOf(['end', 'start', false]),

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: propTypes.exports.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.exports.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense switch styling.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   * The browser uses "on" as the default value.
	   */
	  value: propTypes.exports.any
	} ;

	function getTabUtilityClass(slot) {
	  return generateUtilityClass('MuiTab', slot);
	}
	const tabClasses = generateUtilityClasses('MuiTab', ['root', 'labelIcon', 'textColorInherit', 'textColorPrimary', 'textColorSecondary', 'selected', 'disabled', 'fullWidth', 'wrapped', 'iconWrapper']);

	const _excluded$h = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];

	const useUtilityClasses$f = ownerState => {
	  const {
	    classes,
	    textColor,
	    fullWidth,
	    wrapped,
	    icon,
	    label,
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', icon && label && 'labelIcon', `textColor${capitalize(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],
	    iconWrapper: ['iconWrapper']
	  };
	  return composeClasses(slots, getTabUtilityClass, classes);
	};

	const TabRoot = styled(ButtonBase, {
	  name: 'MuiTab',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.label && ownerState.icon && styles.labelIcon, styles[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles.fullWidth, ownerState.wrapped && styles.wrapped];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.button, {
	  maxWidth: 360,
	  minWidth: 90,
	  position: 'relative',
	  minHeight: 48,
	  flexShrink: 0,
	  padding: '12px 16px',
	  overflow: 'hidden',
	  whiteSpace: 'normal',
	  textAlign: 'center'
	}, ownerState.label && {
	  flexDirection: ownerState.iconPosition === 'top' || ownerState.iconPosition === 'bottom' ? 'column' : 'row'
	}, {
	  lineHeight: 1.25
	}, ownerState.icon && ownerState.label && {
	  minHeight: 72,
	  paddingTop: 9,
	  paddingBottom: 9,
	  [`& > .${tabClasses.iconWrapper}`]: _extends({}, ownerState.iconPosition === 'top' && {
	    marginBottom: 6
	  }, ownerState.iconPosition === 'bottom' && {
	    marginTop: 6
	  }, ownerState.iconPosition === 'start' && {
	    marginRight: theme.spacing(1)
	  }, ownerState.iconPosition === 'end' && {
	    marginLeft: theme.spacing(1)
	  })
	}, ownerState.textColor === 'inherit' && {
	  color: 'inherit',
	  opacity: 0.6,
	  // same opacity as theme.palette.text.secondary
	  [`&.${tabClasses.selected}`]: {
	    opacity: 1
	  },
	  [`&.${tabClasses.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.textColor === 'primary' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${tabClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${tabClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  }
	}, ownerState.textColor === 'secondary' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${tabClasses.selected}`]: {
	    color: (theme.vars || theme).palette.secondary.main
	  },
	  [`&.${tabClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  }
	}, ownerState.fullWidth && {
	  flexShrink: 1,
	  flexGrow: 1,
	  flexBasis: 0,
	  maxWidth: 'none'
	}, ownerState.wrapped && {
	  fontSize: theme.typography.pxToRem(12)
	}));
	const Tab = /*#__PURE__*/react.exports.forwardRef(function Tab(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTab'
	  });

	  const {
	    className,
	    disabled = false,
	    disableFocusRipple = false,
	    // eslint-disable-next-line react/prop-types
	    fullWidth,
	    icon: iconProp,
	    iconPosition = 'top',
	    // eslint-disable-next-line react/prop-types
	    indicator,
	    label,
	    onChange,
	    onClick,
	    onFocus,
	    // eslint-disable-next-line react/prop-types
	    selected,
	    // eslint-disable-next-line react/prop-types
	    selectionFollowsFocus,
	    // eslint-disable-next-line react/prop-types
	    textColor = 'inherit',
	    value,
	    wrapped = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$h);

	  const ownerState = _extends({}, props, {
	    disabled,
	    disableFocusRipple,
	    selected,
	    icon: !!iconProp,
	    iconPosition,
	    label: !!label,
	    fullWidth,
	    textColor,
	    wrapped
	  });

	  const classes = useUtilityClasses$f(ownerState);
	  const icon = iconProp && label && /*#__PURE__*/react.exports.isValidElement(iconProp) ? /*#__PURE__*/react.exports.cloneElement(iconProp, {
	    className: clsx(classes.iconWrapper, iconProp.props.className)
	  }) : iconProp;

	  const handleClick = event => {
	    if (!selected && onChange) {
	      onChange(event, value);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const handleFocus = event => {
	    if (selectionFollowsFocus && !selected && onChange) {
	      onChange(event, value);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(TabRoot, _extends({
	    focusRipple: !disableFocusRipple,
	    className: clsx(classes.root, className),
	    ref: ref,
	    role: "tab",
	    "aria-selected": selected,
	    disabled: disabled,
	    onClick: handleClick,
	    onFocus: handleFocus,
	    ownerState: ownerState,
	    tabIndex: selected ? 0 : -1
	  }, other, {
	    children: [iconPosition === 'top' || iconPosition === 'start' ? /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	      children: [icon, label]
	    }) : /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	      children: [label, icon]
	    }), indicator]
	  }));
	});
	Tab.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop isn't supported.
	   * Use the `component` prop if you need to change the children structure.
	   */
	  children: unsupportedProp,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * The icon to display.
	   */
	  icon: propTypes.exports.oneOfType([propTypes.exports.element, propTypes.exports.string]),

	  /**
	   * The position of the icon relative to the label.
	   * @default 'top'
	   */
	  iconPosition: propTypes.exports.oneOf(['bottom', 'end', 'start', 'top']),

	  /**
	   * The label element.
	   */
	  label: propTypes.exports.node,

	  /**
	   * @ignore
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * You can provide your own value. Otherwise, we fallback to the child position index.
	   */
	  value: propTypes.exports.any,

	  /**
	   * Tab labels appear in a single row.
	   * They can use a second line if needed.
	   * @default false
	   */
	  wrapped: propTypes.exports.bool
	} ;

	/**
	 * @ignore - internal component.
	 */

	const TableContext = /*#__PURE__*/react.exports.createContext();

	{
	  TableContext.displayName = 'TableContext';
	}

	function getTableUtilityClass(slot) {
	  return generateUtilityClass('MuiTable', slot);
	}
	generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);

	const _excluded$g = ["className", "component", "padding", "size", "stickyHeader"];

	const useUtilityClasses$e = ownerState => {
	  const {
	    classes,
	    stickyHeader
	  } = ownerState;
	  const slots = {
	    root: ['root', stickyHeader && 'stickyHeader']
	  };
	  return composeClasses(slots, getTableUtilityClass, classes);
	};

	const TableRoot = styled('table', {
	  name: 'MuiTable',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'table',
	  width: '100%',
	  borderCollapse: 'collapse',
	  borderSpacing: 0,
	  '& caption': _extends({}, theme.typography.body2, {
	    padding: theme.spacing(2),
	    color: (theme.vars || theme).palette.text.secondary,
	    textAlign: 'left',
	    captionSide: 'bottom'
	  })
	}, ownerState.stickyHeader && {
	  borderCollapse: 'separate'
	}));
	const defaultComponent$4 = 'table';
	const Table = /*#__PURE__*/react.exports.forwardRef(function Table(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTable'
	  });

	  const {
	    className,
	    component = defaultComponent$4,
	    padding = 'normal',
	    size = 'medium',
	    stickyHeader = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$g);

	  const ownerState = _extends({}, props, {
	    component,
	    padding,
	    size,
	    stickyHeader
	  });

	  const classes = useUtilityClasses$e(ownerState);
	  const table = react.exports.useMemo(() => ({
	    padding,
	    size,
	    stickyHeader
	  }), [padding, size, stickyHeader]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TableContext.Provider, {
	    value: table,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TableRoot, _extends({
	      as: component,
	      role: component === defaultComponent$4 ? null : 'table',
	      ref: ref,
	      className: clsx(classes.root, className),
	      ownerState: ownerState
	    }, other))
	  });
	});
	Table.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the table, normally `TableHead` and `TableBody`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Allows TableCells to inherit padding of the Table.
	   * @default 'normal'
	   */
	  padding: propTypes.exports.oneOf(['checkbox', 'none', 'normal']),

	  /**
	   * Allows TableCells to inherit size of the Table.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * Set the header sticky.
	   *
	   * ⚠️ It doesn't work with IE11.
	   * @default false
	   */
	  stickyHeader: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	/**
	 * @ignore - internal component.
	 */

	const Tablelvl2Context = /*#__PURE__*/react.exports.createContext();

	{
	  Tablelvl2Context.displayName = 'Tablelvl2Context';
	}

	function getTableBodyUtilityClass(slot) {
	  return generateUtilityClass('MuiTableBody', slot);
	}
	generateUtilityClasses('MuiTableBody', ['root']);

	const _excluded$f = ["className", "component"];

	const useUtilityClasses$d = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableBodyUtilityClass, classes);
	};

	const TableBodyRoot = styled('tbody', {
	  name: 'MuiTableBody',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'table-row-group'
	});
	const tablelvl2$2 = {
	  variant: 'body'
	};
	const defaultComponent$3 = 'tbody';
	const TableBody = /*#__PURE__*/react.exports.forwardRef(function TableBody(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableBody'
	  });

	  const {
	    className,
	    component = defaultComponent$3
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$f);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$d(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Tablelvl2Context.Provider, {
	    value: tablelvl2$2,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TableBodyRoot, _extends({
	      className: clsx(classes.root, className),
	      as: component,
	      ref: ref,
	      role: component === defaultComponent$3 ? null : 'rowgroup',
	      ownerState: ownerState
	    }, other))
	  });
	});
	TableBody.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getTableCellUtilityClass(slot) {
	  return generateUtilityClass('MuiTableCell', slot);
	}
	const tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);

	const _excluded$e = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];

	const useUtilityClasses$c = ownerState => {
	  const {
	    classes,
	    variant,
	    align,
	    padding,
	    size,
	    stickyHeader
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getTableCellUtilityClass, classes);
	};

	const TableCellRoot = styled('td', {
	  name: 'MuiTableCell',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body2, {
	  display: 'table-cell',
	  verticalAlign: 'inherit',
	  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
	  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
	  borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
	  textAlign: 'left',
	  padding: 16
	}, ownerState.variant === 'head' && {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: theme.typography.pxToRem(24),
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.variant === 'body' && {
	  color: (theme.vars || theme).palette.text.primary
	}, ownerState.variant === 'footer' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  lineHeight: theme.typography.pxToRem(21),
	  fontSize: theme.typography.pxToRem(12)
	}, ownerState.size === 'small' && {
	  padding: '6px 16px',
	  [`&.${tableCellClasses.paddingCheckbox}`]: {
	    width: 24,
	    // prevent the checkbox column from growing
	    padding: '0 12px 0 16px',
	    '& > *': {
	      padding: 0
	    }
	  }
	}, ownerState.padding === 'checkbox' && {
	  width: 48,
	  // prevent the checkbox column from growing
	  padding: '0 0 0 4px'
	}, ownerState.padding === 'none' && {
	  padding: 0
	}, ownerState.align === 'left' && {
	  textAlign: 'left'
	}, ownerState.align === 'center' && {
	  textAlign: 'center'
	}, ownerState.align === 'right' && {
	  textAlign: 'right',
	  flexDirection: 'row-reverse'
	}, ownerState.align === 'justify' && {
	  textAlign: 'justify'
	}, ownerState.stickyHeader && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 2,
	  backgroundColor: (theme.vars || theme).palette.background.default
	}));
	/**
	 * The component renders a `<th>` element when the parent context is a header
	 * or otherwise a `<td>` element.
	 */

	const TableCell = /*#__PURE__*/react.exports.forwardRef(function TableCell(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableCell'
	  });

	  const {
	    align = 'inherit',
	    className,
	    component: componentProp,
	    padding: paddingProp,
	    scope: scopeProp,
	    size: sizeProp,
	    sortDirection,
	    variant: variantProp
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$e);

	  const table = react.exports.useContext(TableContext);
	  const tablelvl2 = react.exports.useContext(Tablelvl2Context);
	  const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
	  let component;

	  if (componentProp) {
	    component = componentProp;
	  } else {
	    component = isHeadCell ? 'th' : 'td';
	  }

	  let scope = scopeProp;

	  if (!scope && isHeadCell) {
	    scope = 'col';
	  }

	  const variant = variantProp || tablelvl2 && tablelvl2.variant;

	  const ownerState = _extends({}, props, {
	    align,
	    component,
	    padding: paddingProp || (table && table.padding ? table.padding : 'normal'),
	    size: sizeProp || (table && table.size ? table.size : 'medium'),
	    sortDirection,
	    stickyHeader: variant === 'head' && table && table.stickyHeader,
	    variant
	  });

	  const classes = useUtilityClasses$c(ownerState);
	  let ariaSort = null;

	  if (sortDirection) {
	    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(TableCellRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    "aria-sort": ariaSort,
	    scope: scope,
	    ownerState: ownerState
	  }, other));
	});
	TableCell.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the text-align on the table cell content.
	   *
	   * Monetary or generally number fields **should be right aligned** as that allows
	   * you to add them up quickly in your head without having to worry about decimals.
	   * @default 'inherit'
	   */
	  align: propTypes.exports.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Sets the padding applied to the cell.
	   * The prop defaults to the value (`'default'`) inherited from the parent Table component.
	   */
	  padding: propTypes.exports.oneOf(['checkbox', 'none', 'normal']),

	  /**
	   * Set scope attribute.
	   */
	  scope: propTypes.exports.string,

	  /**
	   * Specify the size of the cell.
	   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
	   */
	  size: propTypes.exports.oneOf(['small', 'medium']),

	  /**
	   * Set aria-sort direction.
	   */
	  sortDirection: propTypes.exports.oneOf(['asc', 'desc', false]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Specify the cell type.
	   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
	   */
	  variant: propTypes.exports.oneOf(['body', 'footer', 'head'])
	} ;

	function getTableContainerUtilityClass(slot) {
	  return generateUtilityClass('MuiTableContainer', slot);
	}
	generateUtilityClasses('MuiTableContainer', ['root']);

	const _excluded$d = ["className", "component"];

	const useUtilityClasses$b = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableContainerUtilityClass, classes);
	};

	const TableContainerRoot = styled('div', {
	  name: 'MuiTableContainer',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  width: '100%',
	  overflowX: 'auto'
	});
	const TableContainer = /*#__PURE__*/react.exports.forwardRef(function TableContainer(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableContainer'
	  });

	  const {
	    className,
	    component = 'div'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$d);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$b(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TableContainerRoot, _extends({
	    ref: ref,
	    as: component,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other));
	});
	TableContainer.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `Table`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getTableFooterUtilityClass(slot) {
	  return generateUtilityClass('MuiTableFooter', slot);
	}
	generateUtilityClasses('MuiTableFooter', ['root']);

	const _excluded$c = ["className", "component"];

	const useUtilityClasses$a = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableFooterUtilityClass, classes);
	};

	const TableFooterRoot = styled('tfoot', {
	  name: 'MuiTableFooter',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'table-footer-group'
	});
	const tablelvl2$1 = {
	  variant: 'footer'
	};
	const defaultComponent$2 = 'tfoot';
	const TableFooter = /*#__PURE__*/react.exports.forwardRef(function TableFooter(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableFooter'
	  });

	  const {
	    className,
	    component = defaultComponent$2
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$c);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$a(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Tablelvl2Context.Provider, {
	    value: tablelvl2$1,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TableFooterRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      role: component === defaultComponent$2 ? null : 'rowgroup',
	      ownerState: ownerState
	    }, other))
	  });
	});
	TableFooter.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getTableHeadUtilityClass(slot) {
	  return generateUtilityClass('MuiTableHead', slot);
	}
	generateUtilityClasses('MuiTableHead', ['root']);

	const _excluded$b = ["className", "component"];

	const useUtilityClasses$9 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableHeadUtilityClass, classes);
	};

	const TableHeadRoot = styled('thead', {
	  name: 'MuiTableHead',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'table-header-group'
	});
	const tablelvl2 = {
	  variant: 'head'
	};
	const defaultComponent$1 = 'thead';
	const TableHead = /*#__PURE__*/react.exports.forwardRef(function TableHead(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableHead'
	  });

	  const {
	    className,
	    component = defaultComponent$1
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$b);

	  const ownerState = _extends({}, props, {
	    component
	  });

	  const classes = useUtilityClasses$9(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Tablelvl2Context.Provider, {
	    value: tablelvl2,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TableHeadRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      role: component === defaultComponent$1 ? null : 'rowgroup',
	      ownerState: ownerState
	    }, other))
	  });
	});
	TableHead.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiToolbar', slot);
	}
	generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

	const _excluded$a = ["className", "component", "disableGutters", "variant"];

	const useUtilityClasses$8 = ownerState => {
	  const {
	    classes,
	    disableGutters,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableGutters && 'gutters', variant]
	  };
	  return composeClasses(slots, getToolbarUtilityClass, classes);
	};

	const ToolbarRoot = styled('div', {
	  name: 'MuiToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center'
	}, !ownerState.disableGutters && {
	  paddingLeft: theme.spacing(2),
	  paddingRight: theme.spacing(2),
	  [theme.breakpoints.up('sm')]: {
	    paddingLeft: theme.spacing(3),
	    paddingRight: theme.spacing(3)
	  }
	}, ownerState.variant === 'dense' && {
	  minHeight: 48
	}), ({
	  theme,
	  ownerState
	}) => ownerState.variant === 'regular' && theme.mixins.toolbar);
	const Toolbar = /*#__PURE__*/react.exports.forwardRef(function Toolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToolbar'
	  });

	  const {
	    className,
	    component = 'div',
	    disableGutters = false,
	    variant = 'regular'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$a);

	  const ownerState = _extends({}, props, {
	    component,
	    disableGutters,
	    variant
	  });

	  const classes = useUtilityClasses$8(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ToolbarRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	Toolbar.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
	   * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, disables gutter padding.
	   * @default false
	   */
	  disableGutters: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The variant to use.
	   * @default 'regular'
	   */
	  variant: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['dense', 'regular']), propTypes.exports.string])
	} ;

	var KeyboardArrowLeft = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
	}), 'KeyboardArrowLeft');

	var KeyboardArrowRight = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
	}), 'KeyboardArrowRight');

	var _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight$1, _KeyboardArrowLeft$1, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;

	const _excluded$9 = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
	const TablePaginationActions = /*#__PURE__*/react.exports.forwardRef(function TablePaginationActions(props, ref) {
	  const {
	    backIconButtonProps,
	    count,
	    getItemAriaLabel,
	    nextIconButtonProps,
	    onPageChange,
	    page,
	    rowsPerPage,
	    showFirstButton,
	    showLastButton
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$9);

	  const theme = useTheme();

	  const handleFirstPageButtonClick = event => {
	    onPageChange(event, 0);
	  };

	  const handleBackButtonClick = event => {
	    onPageChange(event, page - 1);
	  };

	  const handleNextButtonClick = event => {
	    onPageChange(event, page + 1);
	  };

	  const handleLastPageButtonClick = event => {
	    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    ref: ref
	  }, other, {
	    children: [showFirstButton && /*#__PURE__*/jsxRuntime.exports.jsx(IconButton, {
	      onClick: handleFirstPageButtonClick,
	      disabled: page === 0,
	      "aria-label": getItemAriaLabel('first', page),
	      title: getItemAriaLabel('first', page),
	      children: theme.direction === 'rtl' ? _LastPageIcon || (_LastPageIcon = /*#__PURE__*/jsxRuntime.exports.jsx(LastPageIcon, {})) : _FirstPageIcon || (_FirstPageIcon = /*#__PURE__*/jsxRuntime.exports.jsx(FirstPageIcon, {}))
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(IconButton, _extends({
	      onClick: handleBackButtonClick,
	      disabled: page === 0,
	      color: "inherit",
	      "aria-label": getItemAriaLabel('previous', page),
	      title: getItemAriaLabel('previous', page)
	    }, backIconButtonProps, {
	      children: theme.direction === 'rtl' ? _KeyboardArrowRight$1 || (_KeyboardArrowRight$1 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {})) : _KeyboardArrowLeft$1 || (_KeyboardArrowLeft$1 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {}))
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(IconButton, _extends({
	      onClick: handleNextButtonClick,
	      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
	      color: "inherit",
	      "aria-label": getItemAriaLabel('next', page),
	      title: getItemAriaLabel('next', page)
	    }, nextIconButtonProps, {
	      children: theme.direction === 'rtl' ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {}))
	    })), showLastButton && /*#__PURE__*/jsxRuntime.exports.jsx(IconButton, {
	      onClick: handleLastPageButtonClick,
	      disabled: page >= Math.ceil(count / rowsPerPage) - 1,
	      "aria-label": getItemAriaLabel('last', page),
	      title: getItemAriaLabel('last', page),
	      children: theme.direction === 'rtl' ? _FirstPageIcon2 || (_FirstPageIcon2 = /*#__PURE__*/jsxRuntime.exports.jsx(FirstPageIcon, {})) : _LastPageIcon2 || (_LastPageIcon2 = /*#__PURE__*/jsxRuntime.exports.jsx(LastPageIcon, {}))
	    })]
	  }));
	});
	TablePaginationActions.propTypes = {
	  /**
	   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
	   */
	  backIconButtonProps: propTypes.exports.object,

	  /**
	   * The total number of rows.
	   */
	  count: propTypes.exports.number.isRequired,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   *
	   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
	   * @param {number} page The page number to format.
	   * @returns {string}
	   */
	  getItemAriaLabel: propTypes.exports.func.isRequired,

	  /**
	   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
	   */
	  nextIconButtonProps: propTypes.exports.object,

	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {number} page The page selected.
	   */
	  onPageChange: propTypes.exports.func.isRequired,

	  /**
	   * The zero-based index of the current page.
	   */
	  page: propTypes.exports.number.isRequired,

	  /**
	   * The number of rows per page.
	   */
	  rowsPerPage: propTypes.exports.number.isRequired,

	  /**
	   * If `true`, show the first-page button.
	   */
	  showFirstButton: propTypes.exports.bool.isRequired,

	  /**
	   * If `true`, show the last-page button.
	   */
	  showLastButton: propTypes.exports.bool.isRequired
	} ;

	function getTablePaginationUtilityClass(slot) {
	  return generateUtilityClass('MuiTablePagination', slot);
	}
	const tablePaginationClasses = generateUtilityClasses('MuiTablePagination', ['root', 'toolbar', 'spacer', 'selectLabel', 'selectRoot', 'select', 'selectIcon', 'input', 'menuItem', 'displayedRows', 'actions']);

	var _InputBase;

	const _excluded$8 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
	const TablePaginationRoot = styled(TableCell, {
	  name: 'MuiTablePagination',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  overflow: 'auto',
	  color: (theme.vars || theme).palette.text.primary,
	  fontSize: theme.typography.pxToRem(14),
	  // Increase the specificity to override TableCell.
	  '&:last-child': {
	    padding: 0
	  }
	}));
	const TablePaginationToolbar = styled(Toolbar, {
	  name: 'MuiTablePagination',
	  slot: 'Toolbar',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${tablePaginationClasses.actions}`]: styles.actions
	  }, styles.toolbar)
	})(({
	  theme
	}) => ({
	  minHeight: 52,
	  paddingRight: 2,
	  [`${theme.breakpoints.up('xs')} and (orientation: landscape)`]: {
	    minHeight: 52
	  },
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 52,
	    paddingRight: 2
	  },
	  [`& .${tablePaginationClasses.actions}`]: {
	    flexShrink: 0,
	    marginLeft: 20
	  }
	}));
	const TablePaginationSpacer = styled('div', {
	  name: 'MuiTablePagination',
	  slot: 'Spacer',
	  overridesResolver: (props, styles) => styles.spacer
	})({
	  flex: '1 1 100%'
	});
	const TablePaginationSelectLabel = styled('p', {
	  name: 'MuiTablePagination',
	  slot: 'SelectLabel',
	  overridesResolver: (props, styles) => styles.selectLabel
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  flexShrink: 0
	}));
	const TablePaginationSelect = styled(Select, {
	  name: 'MuiTablePagination',
	  slot: 'Select',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${tablePaginationClasses.selectIcon}`]: styles.selectIcon,
	    [`& .${tablePaginationClasses.select}`]: styles.select
	  }, styles.input, styles.selectRoot)
	})({
	  color: 'inherit',
	  fontSize: 'inherit',
	  flexShrink: 0,
	  marginRight: 32,
	  marginLeft: 8,
	  [`& .${tablePaginationClasses.select}`]: {
	    paddingLeft: 8,
	    paddingRight: 24,
	    textAlign: 'right',
	    textAlignLast: 'right' // Align <select> on Chrome.

	  }
	});
	const TablePaginationMenuItem = styled(MenuItem, {
	  name: 'MuiTablePagination',
	  slot: 'MenuItem',
	  overridesResolver: (props, styles) => styles.menuItem
	})({});
	const TablePaginationDisplayedRows = styled('p', {
	  name: 'MuiTablePagination',
	  slot: 'DisplayedRows',
	  overridesResolver: (props, styles) => styles.displayedRows
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  flexShrink: 0
	}));

	function defaultLabelDisplayedRows({
	  from,
	  to,
	  count
	}) {
	  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
	}

	function defaultGetAriaLabel(type) {
	  return `Go to ${type} page`;
	}

	const useUtilityClasses$7 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    toolbar: ['toolbar'],
	    spacer: ['spacer'],
	    selectLabel: ['selectLabel'],
	    select: ['select'],
	    input: ['input'],
	    selectIcon: ['selectIcon'],
	    menuItem: ['menuItem'],
	    displayedRows: ['displayedRows'],
	    actions: ['actions']
	  };
	  return composeClasses(slots, getTablePaginationUtilityClass, classes);
	};
	/**
	 * A `TableCell` based component for placing inside `TableFooter` for pagination.
	 */


	const TablePagination = /*#__PURE__*/react.exports.forwardRef(function TablePagination(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTablePagination'
	  });

	  const {
	    ActionsComponent = TablePaginationActions,
	    backIconButtonProps,
	    className,
	    colSpan: colSpanProp,
	    component = TableCell,
	    count,
	    getItemAriaLabel = defaultGetAriaLabel,
	    labelDisplayedRows = defaultLabelDisplayedRows,
	    labelRowsPerPage = 'Rows per page:',
	    nextIconButtonProps,
	    onPageChange,
	    onRowsPerPageChange,
	    page,
	    rowsPerPage,
	    rowsPerPageOptions = [10, 25, 50, 100],
	    SelectProps = {},
	    showFirstButton = false,
	    showLastButton = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$8);

	  const ownerState = props;
	  const classes = useUtilityClasses$7(ownerState);
	  const MenuItemComponent = SelectProps.native ? 'option' : TablePaginationMenuItem;
	  let colSpan;

	  if (component === TableCell || component === 'td') {
	    colSpan = colSpanProp || 1000; // col-span over everything
	  }

	  const selectId = useId(SelectProps.id);
	  const labelId = useId(SelectProps.labelId);

	  const getLabelDisplayedRowsTo = () => {
	    if (count === -1) {
	      return (page + 1) * rowsPerPage;
	    }

	    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationRoot, _extends({
	    colSpan: colSpan,
	    ref: ref,
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(TablePaginationToolbar, {
	      className: classes.toolbar,
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSpacer, {
	        className: classes.spacer
	      }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSelectLabel, {
	        className: classes.selectLabel,
	        id: labelId,
	        children: labelRowsPerPage
	      }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSelect, _extends({
	        variant: "standard",
	        input: _InputBase || (_InputBase = /*#__PURE__*/jsxRuntime.exports.jsx(InputBase, {})),
	        value: rowsPerPage,
	        onChange: onRowsPerPageChange,
	        id: selectId,
	        labelId: labelId
	      }, SelectProps, {
	        classes: _extends({}, SelectProps.classes, {
	          // TODO v5 remove `classes.input`
	          root: clsx(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
	          select: clsx(classes.select, (SelectProps.classes || {}).select),
	          // TODO v5 remove `selectIcon`
	          icon: clsx(classes.selectIcon, (SelectProps.classes || {}).icon)
	        }),
	        children: rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/react.exports.createElement(MenuItemComponent, _extends({}, !isHostComponent(MenuItemComponent) && {
	          ownerState
	        }, {
	          className: classes.menuItem,
	          key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
	          value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
	        }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
	      })), /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationDisplayedRows, {
	        className: classes.displayedRows,
	        children: labelDisplayedRows({
	          from: count === 0 ? 0 : page * rowsPerPage + 1,
	          to: getLabelDisplayedRowsTo(),
	          count: count === -1 ? -1 : count,
	          page
	        })
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(ActionsComponent, {
	        className: classes.actions,
	        backIconButtonProps: backIconButtonProps,
	        count: count,
	        nextIconButtonProps: nextIconButtonProps,
	        onPageChange: onPageChange,
	        page: page,
	        rowsPerPage: rowsPerPage,
	        showFirstButton: showFirstButton,
	        showLastButton: showLastButton,
	        getItemAriaLabel: getItemAriaLabel
	      })]
	    })
	  }));
	});
	TablePagination.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The component used for displaying the actions.
	   * Either a string to use a HTML element or a component.
	   * @default TablePaginationActions
	   */
	  ActionsComponent: propTypes.exports.elementType,

	  /**
	   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
	   */
	  backIconButtonProps: propTypes.exports.object,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  colSpan: propTypes.exports.number,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * The total number of rows.
	   *
	   * To enable server side pagination for an unknown number of items, provide -1.
	   */
	  count: integerPropType.isRequired,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
	   * This is important for screen reader users.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
	   * @returns {string}
	   * @default function defaultGetAriaLabel(type) {
	   *   return `Go to ${type} page`;
	   * }
	   */
	  getItemAriaLabel: propTypes.exports.func,

	  /**
	   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
	   * object.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default function defaultLabelDisplayedRows({ from, to, count }) {
	   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
	   * }
	   */
	  labelDisplayedRows: propTypes.exports.func,

	  /**
	   * Customize the rows per page label.
	   *
	   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
	   * @default 'Rows per page:'
	   */
	  labelRowsPerPage: propTypes.exports.node,

	  /**
	   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
	   */
	  nextIconButtonProps: propTypes.exports.object,

	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
	   * @param {number} page The page selected.
	   */
	  onPageChange: propTypes.exports.func.isRequired,

	  /**
	   * Callback fired when the number of rows per page is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   */
	  onRowsPerPageChange: propTypes.exports.func,

	  /**
	   * The zero-based index of the current page.
	   */
	  page: chainPropTypes(integerPropType.isRequired, props => {
	    const {
	      count,
	      page,
	      rowsPerPage
	    } = props;

	    if (count === -1) {
	      return null;
	    }

	    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);

	    if (page < 0 || page > newLastPage) {
	      return new Error('MUI: The page prop of a TablePagination is out of range ' + `(0 to ${newLastPage}, but page is ${page}).`);
	    }

	    return null;
	  }),

	  /**
	   * The number of rows per page.
	   *
	   * Set -1 to display all the rows.
	   */
	  rowsPerPage: integerPropType.isRequired,

	  /**
	   * Customizes the options of the rows per page select field. If less than two options are
	   * available, no select field will be displayed.
	   * Use -1 for the value with a custom label to show all the rows.
	   * @default [10, 25, 50, 100]
	   */
	  rowsPerPageOptions: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
	    label: propTypes.exports.string.isRequired,
	    value: propTypes.exports.number.isRequired
	  })]).isRequired),

	  /**
	   * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
	   * @default {}
	   */
	  SelectProps: propTypes.exports.object,

	  /**
	   * If `true`, show the first-page button.
	   * @default false
	   */
	  showFirstButton: propTypes.exports.bool,

	  /**
	   * If `true`, show the last-page button.
	   * @default false
	   */
	  showLastButton: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getTableRowUtilityClass(slot) {
	  return generateUtilityClass('MuiTableRow', slot);
	}
	const tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);

	const _excluded$7 = ["className", "component", "hover", "selected"];

	const useUtilityClasses$6 = ownerState => {
	  const {
	    classes,
	    selected,
	    hover,
	    head,
	    footer
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']
	  };
	  return composeClasses(slots, getTableRowUtilityClass, classes);
	};

	const TableRowRoot = styled('tr', {
	  name: 'MuiTableRow',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];
	  }
	})(({
	  theme
	}) => ({
	  color: 'inherit',
	  display: 'table-row',
	  verticalAlign: 'middle',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  [`&.${tableRowClasses.hover}:hover`]: {
	    backgroundColor: (theme.vars || theme).palette.action.hover
	  },
	  [`&.${tableRowClasses.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
	    }
	  }
	}));
	const defaultComponent = 'tr';
	/**
	 * Will automatically set dynamic row height
	 * based on the material table element parent (head, body, etc).
	 */

	const TableRow = /*#__PURE__*/react.exports.forwardRef(function TableRow(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableRow'
	  });

	  const {
	    className,
	    component = defaultComponent,
	    hover = false,
	    selected = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$7);

	  const tablelvl2 = react.exports.useContext(Tablelvl2Context);

	  const ownerState = _extends({}, props, {
	    component,
	    hover,
	    selected,
	    head: tablelvl2 && tablelvl2.variant === 'head',
	    footer: tablelvl2 && tablelvl2.variant === 'footer'
	  });

	  const classes = useUtilityClasses$6(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TableRowRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    role: component === defaultComponent ? null : 'row',
	    ownerState: ownerState
	  }, other));
	});
	TableRow.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Should be valid <tr> children such as `TableCell`.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * If `true`, the table row will shade on hover.
	   * @default false
	   */
	  hover: propTypes.exports.bool,

	  /**
	   * If `true`, the table row will have the selected shading.
	   * @default false
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	var ArrowDownwardIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
	}), 'ArrowDownward');

	function getTableSortLabelUtilityClass(slot) {
	  return generateUtilityClass('MuiTableSortLabel', slot);
	}
	const tableSortLabelClasses = generateUtilityClasses('MuiTableSortLabel', ['root', 'active', 'icon', 'iconDirectionDesc', 'iconDirectionAsc']);

	const _excluded$6 = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"];

	const useUtilityClasses$5 = ownerState => {
	  const {
	    classes,
	    direction,
	    active
	  } = ownerState;
	  const slots = {
	    root: ['root', active && 'active'],
	    icon: ['icon', `iconDirection${capitalize(direction)}`]
	  };
	  return composeClasses(slots, getTableSortLabelUtilityClass, classes);
	};

	const TableSortLabelRoot = styled(ButtonBase, {
	  name: 'MuiTableSortLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.active && styles.active];
	  }
	})(({
	  theme
	}) => ({
	  cursor: 'pointer',
	  display: 'inline-flex',
	  justifyContent: 'flex-start',
	  flexDirection: 'inherit',
	  alignItems: 'center',
	  '&:focus': {
	    color: (theme.vars || theme).palette.text.secondary
	  },
	  '&:hover': {
	    color: (theme.vars || theme).palette.text.secondary,
	    [`& .${tableSortLabelClasses.icon}`]: {
	      opacity: 0.5
	    }
	  },
	  [`&.${tableSortLabelClasses.active}`]: {
	    color: (theme.vars || theme).palette.text.primary,
	    [`& .${tableSortLabelClasses.icon}`]: {
	      opacity: 1,
	      color: (theme.vars || theme).palette.text.secondary
	    }
	  }
	}));
	const TableSortLabelIcon = styled('span', {
	  name: 'MuiTableSortLabel',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, styles[`iconDirection${capitalize(ownerState.direction)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  fontSize: 18,
	  marginRight: 4,
	  marginLeft: 4,
	  opacity: 0,
	  transition: theme.transitions.create(['opacity', 'transform'], {
	    duration: theme.transitions.duration.shorter
	  }),
	  userSelect: 'none'
	}, ownerState.direction === 'desc' && {
	  transform: 'rotate(0deg)'
	}, ownerState.direction === 'asc' && {
	  transform: 'rotate(180deg)'
	}));
	/**
	 * A button based label for placing inside `TableCell` for column sorting.
	 */

	const TableSortLabel = /*#__PURE__*/react.exports.forwardRef(function TableSortLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableSortLabel'
	  });

	  const {
	    active = false,
	    children,
	    className,
	    direction = 'asc',
	    hideSortIcon = false,
	    IconComponent = ArrowDownwardIcon
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$6);

	  const ownerState = _extends({}, props, {
	    active,
	    direction,
	    hideSortIcon,
	    IconComponent
	  });

	  const classes = useUtilityClasses$5(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(TableSortLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    component: "span",
	    disableRipple: true,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [children, hideSortIcon && !active ? null : /*#__PURE__*/jsxRuntime.exports.jsx(TableSortLabelIcon, {
	      as: IconComponent,
	      className: clsx(classes.icon),
	      ownerState: ownerState
	    })]
	  }));
	});
	TableSortLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the label will have the active styling (should be true for the sorted column).
	   * @default false
	   */
	  active: propTypes.exports.bool,

	  /**
	   * Label contents, the arrow will be appended automatically.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The current sort direction.
	   * @default 'asc'
	   */
	  direction: propTypes.exports.oneOf(['asc', 'desc']),

	  /**
	   * Hide sort icon when active is false.
	   * @default false
	   */
	  hideSortIcon: propTypes.exports.bool,

	  /**
	   * Sort icon to use.
	   * @default ArrowDownwardIcon
	   */
	  IconComponent: propTypes.exports.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function easeInOutSin(time) {
	  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
	}

	function animate(property, element, to, options = {}, cb = () => {}) {
	  const {
	    ease = easeInOutSin,
	    duration = 300 // standard

	  } = options;
	  let start = null;
	  const from = element[property];
	  let cancelled = false;

	  const cancel = () => {
	    cancelled = true;
	  };

	  const step = timestamp => {
	    if (cancelled) {
	      cb(new Error('Animation cancelled'));
	      return;
	    }

	    if (start === null) {
	      start = timestamp;
	    }

	    const time = Math.min(1, (timestamp - start) / duration);
	    element[property] = ease(time) * (to - from) + from;

	    if (time >= 1) {
	      requestAnimationFrame(() => {
	        cb(null);
	      });
	      return;
	    }

	    requestAnimationFrame(step);
	  };

	  if (from === to) {
	    cb(new Error('Element already at target position'));
	    return cancel;
	  }

	  requestAnimationFrame(step);
	  return cancel;
	}

	const _excluded$5 = ["onChange"];
	const styles = {
	  width: 99,
	  height: 99,
	  position: 'absolute',
	  top: -9999,
	  overflow: 'scroll'
	};
	/**
	 * @ignore - internal component.
	 * The component originates from https://github.com/STORIS/react-scrollbar-size.
	 * It has been moved into the core in order to minimize the bundle size.
	 */

	function ScrollbarSize(props) {
	  const {
	    onChange
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$5);

	  const scrollbarHeight = react.exports.useRef();
	  const nodeRef = react.exports.useRef(null);

	  const setMeasurements = () => {
	    scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
	  };

	  react.exports.useEffect(() => {
	    const handleResize = debounce$1(() => {
	      const prevHeight = scrollbarHeight.current;
	      setMeasurements();

	      if (prevHeight !== scrollbarHeight.current) {
	        onChange(scrollbarHeight.current);
	      }
	    });
	    const containerWindow = ownerWindow(nodeRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [onChange]);
	  react.exports.useEffect(() => {
	    setMeasurements();
	    onChange(scrollbarHeight.current);
	  }, [onChange]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    style: styles,
	    ref: nodeRef
	  }, other));
	}
	ScrollbarSize.propTypes = {
	  onChange: propTypes.exports.func.isRequired
	} ;

	function getTabScrollButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiTabScrollButton', slot);
	}
	const tabScrollButtonClasses = generateUtilityClasses('MuiTabScrollButton', ['root', 'vertical', 'horizontal', 'disabled']);

	var _KeyboardArrowLeft, _KeyboardArrowRight;

	const _excluded$4 = ["className", "direction", "orientation", "disabled"];

	const useUtilityClasses$4 = ownerState => {
	  const {
	    classes,
	    orientation,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, disabled && 'disabled']
	  };
	  return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
	};

	const TabScrollButtonRoot = styled(ButtonBase, {
	  name: 'MuiTabScrollButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.orientation && styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  width: 40,
	  flexShrink: 0,
	  opacity: 0.8,
	  [`&.${tabScrollButtonClasses.disabled}`]: {
	    opacity: 0
	  }
	}, ownerState.orientation === 'vertical' && {
	  width: '100%',
	  height: 40,
	  '& svg': {
	    transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
	  }
	}));
	const TabScrollButton = /*#__PURE__*/react.exports.forwardRef(function TabScrollButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTabScrollButton'
	  });

	  const {
	    className,
	    direction
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$4);

	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';

	  const ownerState = _extends({
	    isRtl
	  }, props);

	  const classes = useUtilityClasses$4(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TabScrollButtonRoot, _extends({
	    component: "div",
	    className: clsx(classes.root, className),
	    ref: ref,
	    role: null,
	    ownerState: ownerState,
	    tabIndex: null
	  }, other, {
	    children: direction === 'left' ? _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {
	      fontSize: "small"
	    })) : _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {
	      fontSize: "small"
	    }))
	  }));
	});
	TabScrollButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The direction the button should indicate.
	   */
	  direction: propTypes.exports.oneOf(['left', 'right']).isRequired,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * The component orientation (layout flow direction).
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']).isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	} ;

	function getTabsUtilityClass(slot) {
	  return generateUtilityClass('MuiTabs', slot);
	}
	const tabsClasses = generateUtilityClasses('MuiTabs', ['root', 'vertical', 'flexContainer', 'flexContainerVertical', 'centered', 'scroller', 'fixed', 'scrollableX', 'scrollableY', 'hideScrollbar', 'scrollButtons', 'scrollButtonsHideMobile', 'indicator']);

	const _excluded$3 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];

	const nextItem = (list, item) => {
	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return list.firstChild;
	};

	const previousItem = (list, item) => {
	  if (list === item) {
	    return list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return list.lastChild;
	};

	const moveFocus = (list, currentFocus, traversalFunction) => {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus);

	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	};

	const useUtilityClasses$3 = ownerState => {
	  const {
	    vertical,
	    fixed,
	    hideScrollbar,
	    scrollableX,
	    scrollableY,
	    centered,
	    scrollButtonsHideMobile,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', vertical && 'vertical'],
	    scroller: ['scroller', fixed && 'fixed', hideScrollbar && 'hideScrollbar', scrollableX && 'scrollableX', scrollableY && 'scrollableY'],
	    flexContainer: ['flexContainer', vertical && 'flexContainerVertical', centered && 'centered'],
	    indicator: ['indicator'],
	    scrollButtons: ['scrollButtons', scrollButtonsHideMobile && 'scrollButtonsHideMobile'],
	    scrollableX: [scrollableX && 'scrollableX'],
	    hideScrollbar: [hideScrollbar && 'hideScrollbar']
	  };
	  return composeClasses(slots, getTabsUtilityClass, classes);
	};

	const TabsRoot = styled('div', {
	  name: 'MuiTabs',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${tabsClasses.scrollButtons}`]: styles.scrollButtons
	    }, {
	      [`& .${tabsClasses.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles.scrollButtonsHideMobile
	    }, styles.root, ownerState.vertical && styles.vertical];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  overflow: 'hidden',
	  minHeight: 48,
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.scrollButtonsHideMobile && {
	  [`& .${tabsClasses.scrollButtons}`]: {
	    [theme.breakpoints.down('sm')]: {
	      display: 'none'
	    }
	  }
	}));
	const TabsScroller = styled('div', {
	  name: 'MuiTabs',
	  slot: 'Scroller',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.scroller, ownerState.fixed && styles.fixed, ownerState.hideScrollbar && styles.hideScrollbar, ownerState.scrollableX && styles.scrollableX, ownerState.scrollableY && styles.scrollableY];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'inline-block',
	  flex: '1 1 auto',
	  whiteSpace: 'nowrap'
	}, ownerState.fixed && {
	  overflowX: 'hidden',
	  width: '100%'
	}, ownerState.hideScrollbar && {
	  // Hide dimensionless scrollbar on macOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome

	  }
	}, ownerState.scrollableX && {
	  overflowX: 'auto',
	  overflowY: 'hidden'
	}, ownerState.scrollableY && {
	  overflowY: 'auto',
	  overflowX: 'hidden'
	}));
	const FlexContainer = styled('div', {
	  name: 'MuiTabs',
	  slot: 'FlexContainer',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.centered && {
	  justifyContent: 'center'
	}));
	const TabsIndicator = styled('span', {
	  name: 'MuiTabs',
	  slot: 'Indicator',
	  overridesResolver: (props, styles) => styles.indicator
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  position: 'absolute',
	  height: 2,
	  bottom: 0,
	  width: '100%',
	  transition: theme.transitions.create()
	}, ownerState.indicatorColor === 'primary' && {
	  backgroundColor: (theme.vars || theme).palette.primary.main
	}, ownerState.indicatorColor === 'secondary' && {
	  backgroundColor: (theme.vars || theme).palette.secondary.main
	}, ownerState.vertical && {
	  height: '100%',
	  width: 2,
	  right: 0
	}));
	const TabsScrollbarSize = styled(ScrollbarSize, {
	  name: 'MuiTabs',
	  slot: 'ScrollbarSize'
	})({
	  overflowX: 'auto',
	  overflowY: 'hidden',
	  // Hide dimensionless scrollbar on macOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome

	  }
	});
	const defaultIndicatorStyle = {};
	let warnedOnceTabPresent = false;
	const Tabs = /*#__PURE__*/react.exports.forwardRef(function Tabs(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTabs'
	  });
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';

	  const {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy,
	    action,
	    centered = false,
	    children: childrenProp,
	    className,
	    component = 'div',
	    allowScrollButtonsMobile = false,
	    indicatorColor = 'primary',
	    onChange,
	    orientation = 'horizontal',
	    ScrollButtonComponent = TabScrollButton,
	    scrollButtons = 'auto',
	    selectionFollowsFocus,
	    TabIndicatorProps = {},
	    TabScrollButtonProps = {},
	    textColor = 'primary',
	    value,
	    variant = 'standard',
	    visibleScrollbar = false
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$3);

	  const scrollable = variant === 'scrollable';
	  const vertical = orientation === 'vertical';
	  const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
	  const start = vertical ? 'top' : 'left';
	  const end = vertical ? 'bottom' : 'right';
	  const clientSize = vertical ? 'clientHeight' : 'clientWidth';
	  const size = vertical ? 'height' : 'width';

	  const ownerState = _extends({}, props, {
	    component,
	    allowScrollButtonsMobile,
	    indicatorColor,
	    orientation,
	    vertical,
	    scrollButtons,
	    textColor,
	    variant,
	    visibleScrollbar,
	    fixed: !scrollable,
	    hideScrollbar: scrollable && !visibleScrollbar,
	    scrollableX: scrollable && !vertical,
	    scrollableY: scrollable && vertical,
	    centered: centered && !scrollable,
	    scrollButtonsHideMobile: !allowScrollButtonsMobile
	  });

	  const classes = useUtilityClasses$3(ownerState);

	  {
	    if (centered && scrollable) {
	      console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
	    }
	  }

	  const [mounted, setMounted] = react.exports.useState(false);
	  const [indicatorStyle, setIndicatorStyle] = react.exports.useState(defaultIndicatorStyle);
	  const [displayScroll, setDisplayScroll] = react.exports.useState({
	    start: false,
	    end: false
	  });
	  const [scrollerStyle, setScrollerStyle] = react.exports.useState({
	    overflow: 'hidden',
	    scrollbarWidth: 0
	  });
	  const valueToIndex = new Map();
	  const tabsRef = react.exports.useRef(null);
	  const tabListRef = react.exports.useRef(null);

	  const getTabsMeta = () => {
	    const tabsNode = tabsRef.current;
	    let tabsMeta;

	    if (tabsNode) {
	      const rect = tabsNode.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft

	      tabsMeta = {
	        clientWidth: tabsNode.clientWidth,
	        scrollLeft: tabsNode.scrollLeft,
	        scrollTop: tabsNode.scrollTop,
	        scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
	        scrollWidth: tabsNode.scrollWidth,
	        top: rect.top,
	        bottom: rect.bottom,
	        left: rect.left,
	        right: rect.right
	      };
	    }

	    let tabMeta;

	    if (tabsNode && value !== false) {
	      const children = tabListRef.current.children;

	      if (children.length > 0) {
	        const tab = children[valueToIndex.get(value)];

	        {
	          if (!tab) {
	            console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(', ')}.` : null].join('\n'));
	          }
	        }

	        tabMeta = tab ? tab.getBoundingClientRect() : null;

	        {
	          if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0) {
	            tabsMeta = null;
	            console.error(['MUI: The `value` provided to the Tabs component is invalid.', `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join('\n'));
	            warnedOnceTabPresent = true;
	          }
	        }
	      }
	    }

	    return {
	      tabsMeta,
	      tabMeta
	    };
	  };

	  const updateIndicatorState = useEventCallback(() => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();
	    let startValue = 0;
	    let startIndicator;

	    if (vertical) {
	      startIndicator = 'top';

	      if (tabMeta && tabsMeta) {
	        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
	      }
	    } else {
	      startIndicator = isRtl ? 'right' : 'left';

	      if (tabMeta && tabsMeta) {
	        const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
	        startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
	      }
	    }

	    const newIndicatorStyle = {
	      [startIndicator]: startValue,
	      // May be wrong until the font is loaded.
	      [size]: tabMeta ? tabMeta[size] : 0
	    }; // IE11 support, replace with Number.isNaN
	    // eslint-disable-next-line no-restricted-globals

	    if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
	      setIndicatorStyle(newIndicatorStyle);
	    } else {
	      const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
	      const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);

	      if (dStart >= 1 || dSize >= 1) {
	        setIndicatorStyle(newIndicatorStyle);
	      }
	    }
	  });

	  const scroll = (scrollValue, {
	    animation = true
	  } = {}) => {
	    if (animation) {
	      animate(scrollStart, tabsRef.current, scrollValue, {
	        duration: theme.transitions.duration.standard
	      });
	    } else {
	      tabsRef.current[scrollStart] = scrollValue;
	    }
	  };

	  const moveTabsScroll = delta => {
	    let scrollValue = tabsRef.current[scrollStart];

	    if (vertical) {
	      scrollValue += delta;
	    } else {
	      scrollValue += delta * (isRtl ? -1 : 1); // Fix for Edge

	      scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;
	    }

	    scroll(scrollValue);
	  };

	  const getScrollSize = () => {
	    const containerSize = tabsRef.current[clientSize];
	    let totalSize = 0;
	    const children = Array.from(tabListRef.current.children);

	    for (let i = 0; i < children.length; i += 1) {
	      const tab = children[i];

	      if (totalSize + tab[clientSize] > containerSize) {
	        // If the first item is longer than the container size, then only scroll
	        // by the container size.
	        if (i === 0) {
	          totalSize = containerSize;
	        }

	        break;
	      }

	      totalSize += tab[clientSize];
	    }

	    return totalSize;
	  };

	  const handleStartScrollClick = () => {
	    moveTabsScroll(-1 * getScrollSize());
	  };

	  const handleEndScrollClick = () => {
	    moveTabsScroll(getScrollSize());
	  }; // TODO Remove <ScrollbarSize /> as browser support for hidding the scrollbar
	  // with CSS improves.


	  const handleScrollbarSizeChange = react.exports.useCallback(scrollbarWidth => {
	    setScrollerStyle({
	      overflow: null,
	      scrollbarWidth
	    });
	  }, []);

	  const getConditionalElements = () => {
	    const conditionalElements = {};
	    conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/jsxRuntime.exports.jsx(TabsScrollbarSize, {
	      onChange: handleScrollbarSizeChange,
	      className: clsx(classes.scrollableX, classes.hideScrollbar)
	    }) : null;
	    const scrollButtonsActive = displayScroll.start || displayScroll.end;
	    const showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === true);
	    conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/jsxRuntime.exports.jsx(ScrollButtonComponent, _extends({
	      orientation: orientation,
	      direction: isRtl ? 'right' : 'left',
	      onClick: handleStartScrollClick,
	      disabled: !displayScroll.start
	    }, TabScrollButtonProps, {
	      className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/jsxRuntime.exports.jsx(ScrollButtonComponent, _extends({
	      orientation: orientation,
	      direction: isRtl ? 'left' : 'right',
	      onClick: handleEndScrollClick,
	      disabled: !displayScroll.end
	    }, TabScrollButtonProps, {
	      className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    return conditionalElements;
	  };

	  const scrollSelectedIntoView = useEventCallback(animation => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();

	    if (!tabMeta || !tabsMeta) {
	      return;
	    }

	    if (tabMeta[start] < tabsMeta[start]) {
	      // left side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    } else if (tabMeta[end] > tabsMeta[end]) {
	      // right side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    }
	  });
	  const updateScrollButtonState = useEventCallback(() => {
	    if (scrollable && scrollButtons !== false) {
	      const {
	        scrollTop,
	        scrollHeight,
	        clientHeight,
	        scrollWidth,
	        clientWidth
	      } = tabsRef.current;
	      let showStartScroll;
	      let showEndScroll;

	      if (vertical) {
	        showStartScroll = scrollTop > 1;
	        showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
	      } else {
	        const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction); // use 1 for the potential rounding error with browser zooms.

	        showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
	        showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
	      }

	      if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
	        setDisplayScroll({
	          start: showStartScroll,
	          end: showEndScroll
	        });
	      }
	    }
	  });
	  react.exports.useEffect(() => {
	    const handleResize = debounce$1(() => {
	      // If the Tabs component is replaced by Suspense with a fallback, the last
	      // ResizeObserver's handler that runs because of the change in the layout is trying to
	      // access a dom node that is no longer there (as the fallback component is being shown instead).
	      // See https://github.com/mui/material-ui/issues/33276
	      // TODO: Add tests that will ensure the component is not failing when
	      // replaced by Suspense with a fallback, once React is updated to version 18
	      if (tabsRef.current) {
	        updateIndicatorState();
	        updateScrollButtonState();
	      }
	    });
	    const win = ownerWindow(tabsRef.current);
	    win.addEventListener('resize', handleResize);
	    let resizeObserver;

	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      Array.from(tabListRef.current.children).forEach(child => {
	        resizeObserver.observe(child);
	      });
	    }

	    return () => {
	      handleResize.clear();
	      win.removeEventListener('resize', handleResize);

	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  }, [updateIndicatorState, updateScrollButtonState]);
	  const handleTabsScroll = react.exports.useMemo(() => debounce$1(() => {
	    updateScrollButtonState();
	  }), [updateScrollButtonState]);
	  react.exports.useEffect(() => {
	    return () => {
	      handleTabsScroll.clear();
	    };
	  }, [handleTabsScroll]);
	  react.exports.useEffect(() => {
	    setMounted(true);
	  }, []);
	  react.exports.useEffect(() => {
	    updateIndicatorState();
	    updateScrollButtonState();
	  });
	  react.exports.useEffect(() => {
	    // Don't animate on the first render.
	    scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
	  }, [scrollSelectedIntoView, indicatorStyle]);
	  react.exports.useImperativeHandle(action, () => ({
	    updateIndicator: updateIndicatorState,
	    updateScrollButtons: updateScrollButtonState
	  }), [updateIndicatorState, updateScrollButtonState]);

	  const indicator = /*#__PURE__*/jsxRuntime.exports.jsx(TabsIndicator, _extends({}, TabIndicatorProps, {
	    className: clsx(classes.indicator, TabIndicatorProps.className),
	    ownerState: ownerState,
	    style: _extends({}, indicatorStyle, TabIndicatorProps.style)
	  }));

	  let childIndex = 0;
	  const children = react.exports.Children.map(childrenProp, child => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return null;
	    }

	    {
	      if (reactIs.exports.isFragment(child)) {
	        console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    const childValue = child.props.value === undefined ? childIndex : child.props.value;
	    valueToIndex.set(childValue, childIndex);
	    const selected = childValue === value;
	    childIndex += 1;
	    return /*#__PURE__*/react.exports.cloneElement(child, _extends({
	      fullWidth: variant === 'fullWidth',
	      indicator: selected && !mounted && indicator,
	      selected,
	      selectionFollowsFocus,
	      onChange,
	      textColor,
	      value: childValue
	    }, childIndex === 1 && value === false && !child.props.tabIndex ? {
	      tabIndex: 0
	    } : {}));
	  });

	  const handleKeyDown = event => {
	    const list = tabListRef.current;
	    const currentFocus = ownerDocument(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
	    // though we might warn in the future about nested, interactive elements
	    // as a a11y violation

	    const role = currentFocus.getAttribute('role');

	    if (role !== 'tab') {
	      return;
	    }

	    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
	    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';

	    if (orientation === 'horizontal' && isRtl) {
	      // swap previousItemKey with nextItemKey
	      previousItemKey = 'ArrowRight';
	      nextItemKey = 'ArrowLeft';
	    }

	    switch (event.key) {
	      case previousItemKey:
	        event.preventDefault();
	        moveFocus(list, currentFocus, previousItem);
	        break;

	      case nextItemKey:
	        event.preventDefault();
	        moveFocus(list, currentFocus, nextItem);
	        break;

	      case 'Home':
	        event.preventDefault();
	        moveFocus(list, null, nextItem);
	        break;

	      case 'End':
	        event.preventDefault();
	        moveFocus(list, null, previousItem);
	        break;
	    }
	  };

	  const conditionalElements = getConditionalElements();
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(TabsRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    as: component
	  }, other, {
	    children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/jsxRuntime.exports.jsxs(TabsScroller, {
	      className: classes.scroller,
	      ownerState: ownerState,
	      style: {
	        overflow: scrollerStyle.overflow,
	        [vertical ? `margin${isRtl ? 'Left' : 'Right'}` : 'marginBottom']: visibleScrollbar ? undefined : -scrollerStyle.scrollbarWidth
	      },
	      ref: tabsRef,
	      onScroll: handleTabsScroll,
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(FlexContainer, {
	        "aria-label": ariaLabel,
	        "aria-labelledby": ariaLabelledBy,
	        "aria-orientation": orientation === 'vertical' ? 'vertical' : null,
	        className: classes.flexContainer,
	        ownerState: ownerState,
	        onKeyDown: handleKeyDown,
	        ref: tabListRef,
	        role: "tablist",
	        children: children
	      }), mounted && indicator]
	    }), conditionalElements.scrollButtonEnd]
	  }));
	});
	Tabs.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Callback fired when the component mounts.
	   * This is useful when you want to trigger an action programmatically.
	   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
	   *
	   * @param {object} actions This object contains all possible actions
	   * that can be triggered programmatically.
	   */
	  action: refType,

	  /**
	   * If `true`, the scroll buttons aren't forced hidden on mobile.
	   * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
	   * @default false
	   */
	  allowScrollButtonsMobile: propTypes.exports.bool,

	  /**
	   * The label for the Tabs as a string.
	   */
	  'aria-label': propTypes.exports.string,

	  /**
	   * An id or list of ids separated by a space that label the Tabs.
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * If `true`, the tabs are centered.
	   * This prop is intended for large views.
	   * @default false
	   */
	  centered: propTypes.exports.bool,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes.exports.elementType,

	  /**
	   * Determines the color of the indicator.
	   * @default 'primary'
	   */
	  indicatorColor: propTypes.exports.oneOf(['primary', 'secondary']),

	  /**
	   * Callback fired when the value changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {any} value We default to the index of the child (number)
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * The component used to render the scroll buttons.
	   * @default TabScrollButton
	   */
	  ScrollButtonComponent: propTypes.exports.elementType,

	  /**
	   * Determine behavior of scroll buttons when tabs are set to scroll:
	   *
	   * - `auto` will only present them when not all the items are visible.
	   * - `true` will always present them.
	   * - `false` will never present them.
	   *
	   * By default the scroll buttons are hidden on mobile.
	   * This behavior can be disabled with `allowScrollButtonsMobile`.
	   * @default 'auto'
	   */
	  scrollButtons: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOf(['auto', false, true]),

	  /**
	   * If `true` the selected tab changes on focus. Otherwise it only
	   * changes on activation.
	   */
	  selectionFollowsFocus: propTypes.exports.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Props applied to the tab indicator element.
	   * @default  {}
	   */
	  TabIndicatorProps: propTypes.exports.object,

	  /**
	   * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
	   * @default {}
	   */
	  TabScrollButtonProps: propTypes.exports.object,

	  /**
	   * Determines the color of the `Tab`.
	   * @default 'primary'
	   */
	  textColor: propTypes.exports.oneOf(['inherit', 'primary', 'secondary']),

	  /**
	   * The value of the currently selected `Tab`.
	   * If you don't want any selected `Tab`, you can set this prop to `false`.
	   */
	  value: propTypes.exports.any,

	  /**
	   * Determines additional display behavior of the tabs:
	   *
	   *  - `scrollable` will invoke scrolling properties and allow for horizontally
	   *  scrolling (or swiping) of the tab bar.
	   *  -`fullWidth` will make the tabs grow to use all the available space,
	   *  which should be used for small views, like on mobile.
	   *  - `standard` will render the default state.
	   * @default 'standard'
	   */
	  variant: propTypes.exports.oneOf(['fullWidth', 'scrollable', 'standard']),

	  /**
	   * If `true`, the scrollbar is visible. It can be useful when displaying
	   * a long vertical list of tabs.
	   * @default false
	   */
	  visibleScrollbar: propTypes.exports.bool
	} ;

	function getTextFieldUtilityClass(slot) {
	  return generateUtilityClass('MuiTextField', slot);
	}
	generateUtilityClasses('MuiTextField', ['root']);

	const _excluded$2 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
	const variantComponent = {
	  standard: Input,
	  filled: FilledInput,
	  outlined: OutlinedInput
	};

	const useUtilityClasses$2 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTextFieldUtilityClass, classes);
	};

	const TextFieldRoot = styled(FormControl, {
	  name: 'MuiTextField',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 *
	 * - [FormControl](/material-ui/api/form-control/)
	 * - [InputLabel](/material-ui/api/input-label/)
	 * - [FilledInput](/material-ui/api/filled-input/)
	 * - [OutlinedInput](/material-ui/api/outlined-input/)
	 * - [Input](/material-ui/api/input/)
	 * - [FormHelperText](/material-ui/api/form-helper-text/)
	 *
	 * If you wish to alter the props applied to the `input` element, you can do so as follows:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 *
	 * - using the upper case props for passing values directly to the components
	 * - using the underlying components directly as shown in the demos
	 */

	const TextField = /*#__PURE__*/react.exports.forwardRef(function TextField(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTextField'
	  });

	  const {
	    autoComplete,
	    autoFocus = false,
	    children,
	    className,
	    color = 'primary',
	    defaultValue,
	    disabled = false,
	    error = false,
	    FormHelperTextProps,
	    fullWidth = false,
	    helperText,
	    id: idOverride,
	    InputLabelProps,
	    inputProps,
	    InputProps,
	    inputRef,
	    label,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onBlur,
	    onChange,
	    onFocus,
	    placeholder,
	    required = false,
	    rows,
	    select = false,
	    SelectProps,
	    type,
	    value,
	    variant = 'outlined'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2);

	  const ownerState = _extends({}, props, {
	    autoFocus,
	    color,
	    disabled,
	    error,
	    fullWidth,
	    multiline,
	    required,
	    select,
	    variant
	  });

	  const classes = useUtilityClasses$2(ownerState);

	  {
	    if (select && !children) {
	      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
	    }
	  }

	  const InputMore = {};

	  if (variant === 'outlined') {
	    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
	      InputMore.notched = InputLabelProps.shrink;
	    }

	    InputMore.label = label;
	  }

	  if (select) {
	    // unset defaults from textbox inputs
	    if (!SelectProps || !SelectProps.native) {
	      InputMore.id = undefined;
	    }

	    InputMore['aria-describedby'] = undefined;
	  }

	  const id = useId(idOverride);
	  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
	  const inputLabelId = label && id ? `${id}-label` : undefined;
	  const InputComponent = variantComponent[variant];

	  const InputElement = /*#__PURE__*/jsxRuntime.exports.jsx(InputComponent, _extends({
	    "aria-describedby": helperTextId,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    maxRows: maxRows,
	    minRows: minRows,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onBlur: onBlur,
	    onChange: onChange,
	    onFocus: onFocus,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputMore, InputProps));

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(TextFieldRoot, _extends({
	    className: clsx(classes.root, className),
	    disabled: disabled,
	    error: error,
	    fullWidth: fullWidth,
	    ref: ref,
	    required: required,
	    color: color,
	    variant: variant,
	    ownerState: ownerState
	  }, other, {
	    children: [label != null && label !== '' && /*#__PURE__*/jsxRuntime.exports.jsx(InputLabel, _extends({
	      htmlFor: id,
	      id: inputLabelId
	    }, InputLabelProps, {
	      children: label
	    })), select ? /*#__PURE__*/jsxRuntime.exports.jsx(Select, _extends({
	      "aria-describedby": helperTextId,
	      id: id,
	      labelId: inputLabelId,
	      value: value,
	      input: InputElement
	    }, SelectProps, {
	      children: children
	    })) : InputElement, helperText && /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperText, _extends({
	      id: helperTextId
	    }, FormHelperTextProps, {
	      children: helperText
	    }))]
	  }));
	});
	TextField.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.exports.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   * @default false
	   */
	  autoFocus: propTypes.exports.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the component.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'primary'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.exports.any,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: propTypes.exports.bool,

	  /**
	   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
	   */
	  FormHelperTextProps: propTypes.exports.object,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * The helper text content.
	   */
	  helperText: propTypes.exports.node,

	  /**
	   * The id of the `input` element.
	   * Use this prop to make `label` and `helperText` accessible for screen readers.
	   */
	  id: propTypes.exports.string,

	  /**
	   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
	   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
	   */
	  InputLabelProps: propTypes.exports.object,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.exports.object,

	  /**
	   * Props applied to the Input element.
	   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
	   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
	   * component depending on the `variant` prop value.
	   */
	  InputProps: propTypes.exports.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * The label content.
	   */
	  label: propTypes.exports.node,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   * @default 'none'
	   */
	  margin: propTypes.exports.oneOf(['dense', 'none', 'normal']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * If `true`, a `textarea` element is rendered instead of an input.
	   * @default false
	   */
	  multiline: propTypes.exports.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.exports.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.exports.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.exports.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: propTypes.exports.string,

	  /**
	   * If `true`, the label is displayed as required and the `input` element is required.
	   * @default false
	   */
	  required: propTypes.exports.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),

	  /**
	   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
	   * If this option is set you must pass the options of the select as children.
	   * @default false
	   */
	  select: propTypes.exports.bool,

	  /**
	   * Props applied to the [`Select`](/material-ui/api/select/) element.
	   */
	  SelectProps: propTypes.exports.object,

	  /**
	   * The size of the component.
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['medium', 'small']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.exports.any,

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: propTypes.exports.oneOf(['filled', 'outlined', 'standard'])
	} ;

	function getToggleButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiToggleButton', slot);
	}
	const toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge']);

	const _excluded$1 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];

	const useUtilityClasses$1 = ownerState => {
	  const {
	    classes,
	    fullWidth,
	    selected,
	    disabled,
	    size,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]
	  };
	  return composeClasses(slots, getToggleButtonUtilityClass, classes);
	};

	const ToggleButtonRoot = styled(ButtonBase, {
	  name: 'MuiToggleButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  let selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;
	  let selectedColorChannel;

	  if (theme.vars) {
	    selectedColor = ownerState.color === 'standard' ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;
	    selectedColorChannel = ownerState.color === 'standard' ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;
	  }

	  return _extends({}, theme.typography.button, {
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    padding: 11,
	    border: `1px solid ${(theme.vars || theme).palette.divider}`,
	    color: (theme.vars || theme).palette.action.active
	  }, ownerState.fullWidth && {
	    width: '100%'
	  }, {
	    [`&.${toggleButtonClasses.disabled}`]: {
	      color: (theme.vars || theme).palette.action.disabled,
	      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
	    },
	    '&:hover': {
	      textDecoration: 'none',
	      // Reset on mouse devices
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${toggleButtonClasses.selected}`]: {
	      color: selectedColor,
	      backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),
	      '&:hover': {
	        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)
	        }
	      }
	    }
	  }, ownerState.size === 'small' && {
	    padding: 7,
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && {
	    padding: 15,
	    fontSize: theme.typography.pxToRem(15)
	  });
	});
	const ToggleButton = /*#__PURE__*/react.exports.forwardRef(function ToggleButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToggleButton'
	  });

	  const {
	    children,
	    className,
	    color = 'standard',
	    disabled = false,
	    disableFocusRipple = false,
	    fullWidth = false,
	    onChange,
	    onClick,
	    selected,
	    size = 'medium',
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1);

	  const ownerState = _extends({}, props, {
	    color,
	    disabled,
	    disableFocusRipple,
	    fullWidth,
	    size
	  });

	  const classes = useUtilityClasses$1(ownerState);

	  const handleChange = event => {
	    if (onClick) {
	      onClick(event, value);

	      if (event.defaultPrevented) {
	        return;
	      }
	    }

	    if (onChange) {
	      onChange(event, value);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(ToggleButtonRoot, _extends({
	    className: clsx(classes.root, className),
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    ref: ref,
	    onClick: handleChange,
	    onChange: onChange,
	    value: value,
	    ownerState: ownerState,
	    "aria-pressed": selected
	  }, other, {
	    children: children
	  }));
	});
	ToggleButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the button when it is in an active state.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'standard'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: propTypes.exports.bool,

	  /**
	   * If `true`, the button will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * Callback fired when the state changes.
	   *
	   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
	   * @param {any} value of the selected button.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * Callback fired when the button is clicked.
	   *
	   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
	   * @param {any} value of the selected button.
	   */
	  onClick: propTypes.exports.func,

	  /**
	   * If `true`, the button is rendered in an active state.
	   */
	  selected: propTypes.exports.bool,

	  /**
	   * The size of the component.
	   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The value to associate with the button when selected in a
	   * ToggleButtonGroup.
	   */
	  value: propTypes.exports.any.isRequired
	} ;

	// Determine if the toggle button value matches, or is contained in, the
	// candidate group value.
	function isValueSelected(value, candidate) {
	  if (candidate === undefined || value === undefined) {
	    return false;
	  }

	  if (Array.isArray(candidate)) {
	    return candidate.indexOf(value) >= 0;
	  }

	  return value === candidate;
	}

	function getToggleButtonGroupUtilityClass(slot) {
	  return generateUtilityClass('MuiToggleButtonGroup', slot);
	}
	const toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical']);

	const _excluded = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];

	const useUtilityClasses = ownerState => {
	  const {
	    classes,
	    orientation,
	    fullWidth,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],
	    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']
	  };
	  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);
	};

	const ToggleButtonGroupRoot = styled('div', {
	  name: 'MuiToggleButtonGroup',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped
	    }, {
	      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]
	    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  display: 'inline-flex',
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}, ownerState.orientation === 'vertical' && {
	  flexDirection: 'column'
	}, ownerState.fullWidth && {
	  width: '100%'
	}, {
	  [`& .${toggleButtonGroupClasses.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {
	    '&:not(:first-of-type)': {
	      marginLeft: -1,
	      borderLeft: '1px solid transparent',
	      borderTopLeftRadius: 0,
	      borderBottomLeftRadius: 0
	    },
	    '&:not(:last-of-type)': {
	      borderTopRightRadius: 0,
	      borderBottomRightRadius: 0
	    },
	    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {
	      borderLeft: 0,
	      marginLeft: 0
	    }
	  } : {
	    '&:not(:first-of-type)': {
	      marginTop: -1,
	      borderTop: '1px solid transparent',
	      borderTopLeftRadius: 0,
	      borderTopRightRadius: 0
	    },
	    '&:not(:last-of-type)': {
	      borderBottomLeftRadius: 0,
	      borderBottomRightRadius: 0
	    },
	    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {
	      borderTop: 0,
	      marginTop: 0
	    }
	  })
	}));
	const ToggleButtonGroup = /*#__PURE__*/react.exports.forwardRef(function ToggleButtonGroup(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToggleButtonGroup'
	  });

	  const {
	    children,
	    className,
	    color = 'standard',
	    disabled = false,
	    exclusive = false,
	    fullWidth = false,
	    onChange,
	    orientation = 'horizontal',
	    size = 'medium',
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded);

	  const ownerState = _extends({}, props, {
	    disabled,
	    fullWidth,
	    orientation,
	    size
	  });

	  const classes = useUtilityClasses(ownerState);

	  const handleChange = (event, buttonValue) => {
	    if (!onChange) {
	      return;
	    }

	    const index = value && value.indexOf(buttonValue);
	    let newValue;

	    if (value && index >= 0) {
	      newValue = value.slice();
	      newValue.splice(index, 1);
	    } else {
	      newValue = value ? value.concat(buttonValue) : [buttonValue];
	    }

	    onChange(event, newValue);
	  };

	  const handleExclusiveChange = (event, buttonValue) => {
	    if (!onChange) {
	      return;
	    }

	    onChange(event, value === buttonValue ? null : buttonValue);
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(ToggleButtonGroupRoot, _extends({
	    role: "group",
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: react.exports.Children.map(children, child => {
	      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	        return null;
	      }

	      {
	        if (reactIs.exports.isFragment(child)) {
	          console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	        }
	      }

	      return /*#__PURE__*/react.exports.cloneElement(child, {
	        className: clsx(classes.grouped, child.props.className),
	        onChange: exclusive ? handleExclusiveChange : handleChange,
	        selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,
	        size: child.props.size || size,
	        fullWidth,
	        color: child.props.color || color,
	        disabled: child.props.disabled || disabled
	      });
	    })
	  }));
	});
	ToggleButtonGroup.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.exports.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.exports.string,

	  /**
	   * The color of the button when it is selected.
	   * It supports both default and custom theme colors, which can be added as shown in the
	   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
	   * @default 'standard'
	   */
	  color: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.exports.string]),

	  /**
	   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
	   * @default false
	   */
	  disabled: propTypes.exports.bool,

	  /**
	   * If `true`, only allow one of the child ToggleButton values to be selected.
	   * @default false
	   */
	  exclusive: propTypes.exports.bool,

	  /**
	   * If `true`, the button group will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: propTypes.exports.bool,

	  /**
	   * Callback fired when the value changes.
	   *
	   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
	   * @param {any} value of the selected buttons. When `exclusive` is true
	   * this is a single value; when false an array of selected values. If no value
	   * is selected and `exclusive` is true the value is null; when false an empty array.
	   */
	  onChange: propTypes.exports.func,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: propTypes.exports.oneOf(['horizontal', 'vertical']),

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: propTypes.exports
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([propTypes.exports.oneOf(['small', 'medium', 'large']), propTypes.exports.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),

	  /**
	   * The currently selected value within the group or an array of selected
	   * values when `exclusive` is false.
	   *
	   * The value must have reference equality with the option in order to be selected.
	   */
	  value: propTypes.exports.any
	} ;

	var AppStatusFilter;
	(function (AppStatusFilter) {
	    AppStatusFilter["Enabled"] = "enabled";
	    AppStatusFilter["Disabled"] = "disabled";
	    AppStatusFilter["Running"] = "running";
	    AppStatusFilter["Stopped"] = "stopped";
	    AppStatusFilter["Paused"] = "paused";
	})(AppStatusFilter || (AppStatusFilter = {}));

	// Integer Utility
	var UINT32_MAX = 4294967295;
	// DataView extension to handle int64 / uint64,
	// where the actual range is 53-bits integer (a.k.a. safe integer)
	function setUint64(view, offset, value) {
	    var high = value / 4294967296;
	    var low = value; // high bits are truncated by DataView
	    view.setUint32(offset, high);
	    view.setUint32(offset + 4, low);
	}
	function setInt64(view, offset, value) {
	    var high = Math.floor(value / 4294967296);
	    var low = value; // high bits are truncated by DataView
	    view.setUint32(offset, high);
	    view.setUint32(offset + 4, low);
	}
	function getInt64(view, offset) {
	    var high = view.getInt32(offset);
	    var low = view.getUint32(offset + 4);
	    return high * 4294967296 + low;
	}
	function getUint64(view, offset) {
	    var high = view.getUint32(offset);
	    var low = view.getUint32(offset + 4);
	    return high * 4294967296 + low;
	}

	var _a, _b, _c;
	var TEXT_ENCODING_AVAILABLE = (typeof process === "undefined" || ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a["TEXT_ENCODING"]) !== "never") &&
	    typeof TextEncoder !== "undefined" &&
	    typeof TextDecoder !== "undefined";
	function utf8Count(str) {
	    var strLength = str.length;
	    var byteLength = 0;
	    var pos = 0;
	    while (pos < strLength) {
	        var value = str.charCodeAt(pos++);
	        if ((value & 0xffffff80) === 0) {
	            // 1-byte
	            byteLength++;
	            continue;
	        }
	        else if ((value & 0xfffff800) === 0) {
	            // 2-bytes
	            byteLength += 2;
	        }
	        else {
	            // handle surrogate pair
	            if (value >= 0xd800 && value <= 0xdbff) {
	                // high surrogate
	                if (pos < strLength) {
	                    var extra = str.charCodeAt(pos);
	                    if ((extra & 0xfc00) === 0xdc00) {
	                        ++pos;
	                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
	                    }
	                }
	            }
	            if ((value & 0xffff0000) === 0) {
	                // 3-byte
	                byteLength += 3;
	            }
	            else {
	                // 4-byte
	                byteLength += 4;
	            }
	        }
	    }
	    return byteLength;
	}
	function utf8EncodeJs(str, output, outputOffset) {
	    var strLength = str.length;
	    var offset = outputOffset;
	    var pos = 0;
	    while (pos < strLength) {
	        var value = str.charCodeAt(pos++);
	        if ((value & 0xffffff80) === 0) {
	            // 1-byte
	            output[offset++] = value;
	            continue;
	        }
	        else if ((value & 0xfffff800) === 0) {
	            // 2-bytes
	            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;
	        }
	        else {
	            // handle surrogate pair
	            if (value >= 0xd800 && value <= 0xdbff) {
	                // high surrogate
	                if (pos < strLength) {
	                    var extra = str.charCodeAt(pos);
	                    if ((extra & 0xfc00) === 0xdc00) {
	                        ++pos;
	                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
	                    }
	                }
	            }
	            if ((value & 0xffff0000) === 0) {
	                // 3-byte
	                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;
	                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
	            }
	            else {
	                // 4-byte
	                output[offset++] = ((value >> 18) & 0x07) | 0xf0;
	                output[offset++] = ((value >> 12) & 0x3f) | 0x80;
	                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
	            }
	        }
	        output[offset++] = (value & 0x3f) | 0x80;
	    }
	}
	var sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;
	var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
	    ? UINT32_MAX
	    : typeof process !== "undefined" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b["TEXT_ENCODING"]) !== "force"
	        ? 200
	        : 0;
	function utf8EncodeTEencode(str, output, outputOffset) {
	    output.set(sharedTextEncoder.encode(str), outputOffset);
	}
	function utf8EncodeTEencodeInto(str, output, outputOffset) {
	    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
	}
	var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;
	var CHUNK_SIZE = 4096;
	function utf8DecodeJs(bytes, inputOffset, byteLength) {
	    var offset = inputOffset;
	    var end = offset + byteLength;
	    var units = [];
	    var result = "";
	    while (offset < end) {
	        var byte1 = bytes[offset++];
	        if ((byte1 & 0x80) === 0) {
	            // 1 byte
	            units.push(byte1);
	        }
	        else if ((byte1 & 0xe0) === 0xc0) {
	            // 2 bytes
	            var byte2 = bytes[offset++] & 0x3f;
	            units.push(((byte1 & 0x1f) << 6) | byte2);
	        }
	        else if ((byte1 & 0xf0) === 0xe0) {
	            // 3 bytes
	            var byte2 = bytes[offset++] & 0x3f;
	            var byte3 = bytes[offset++] & 0x3f;
	            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);
	        }
	        else if ((byte1 & 0xf8) === 0xf0) {
	            // 4 bytes
	            var byte2 = bytes[offset++] & 0x3f;
	            var byte3 = bytes[offset++] & 0x3f;
	            var byte4 = bytes[offset++] & 0x3f;
	            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;
	            if (unit > 0xffff) {
	                unit -= 0x10000;
	                units.push(((unit >>> 10) & 0x3ff) | 0xd800);
	                unit = 0xdc00 | (unit & 0x3ff);
	            }
	            units.push(unit);
	        }
	        else {
	            units.push(byte1);
	        }
	        if (units.length >= CHUNK_SIZE) {
	            result += String.fromCharCode.apply(String, units);
	            units.length = 0;
	        }
	    }
	    if (units.length > 0) {
	        result += String.fromCharCode.apply(String, units);
	    }
	    return result;
	}
	var sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;
	var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
	    ? UINT32_MAX
	    : typeof process !== "undefined" && ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c["TEXT_DECODER"]) !== "force"
	        ? 200
	        : 0;
	function utf8DecodeTD(bytes, inputOffset, byteLength) {
	    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
	    return sharedTextDecoder.decode(stringBytes);
	}

	/**
	 * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.
	 */
	var ExtData = /** @class */ (function () {
	    function ExtData(type, data) {
	        this.type = type;
	        this.data = data;
	    }
	    return ExtData;
	}());

	var __extends = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var DecodeError = /** @class */ (function (_super) {
	    __extends(DecodeError, _super);
	    function DecodeError(message) {
	        var _this = _super.call(this, message) || this;
	        // fix the prototype chain in a cross-platform way
	        var proto = Object.create(DecodeError.prototype);
	        Object.setPrototypeOf(_this, proto);
	        Object.defineProperty(_this, "name", {
	            configurable: true,
	            enumerable: false,
	            value: DecodeError.name,
	        });
	        return _this;
	    }
	    return DecodeError;
	}(Error));

	// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type
	var EXT_TIMESTAMP = -1;
	var TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int
	var TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int
	function encodeTimeSpecToTimestamp(_a) {
	    var sec = _a.sec, nsec = _a.nsec;
	    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
	        // Here sec >= 0 && nsec >= 0
	        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
	            // timestamp 32 = { sec32 (unsigned) }
	            var rv = new Uint8Array(4);
	            var view = new DataView(rv.buffer);
	            view.setUint32(0, sec);
	            return rv;
	        }
	        else {
	            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }
	            var secHigh = sec / 0x100000000;
	            var secLow = sec & 0xffffffff;
	            var rv = new Uint8Array(8);
	            var view = new DataView(rv.buffer);
	            // nsec30 | secHigh2
	            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));
	            // secLow32
	            view.setUint32(4, secLow);
	            return rv;
	        }
	    }
	    else {
	        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
	        var rv = new Uint8Array(12);
	        var view = new DataView(rv.buffer);
	        view.setUint32(0, nsec);
	        setInt64(view, 4, sec);
	        return rv;
	    }
	}
	function encodeDateToTimeSpec(date) {
	    var msec = date.getTime();
	    var sec = Math.floor(msec / 1e3);
	    var nsec = (msec - sec * 1e3) * 1e6;
	    // Normalizes { sec, nsec } to ensure nsec is unsigned.
	    var nsecInSec = Math.floor(nsec / 1e9);
	    return {
	        sec: sec + nsecInSec,
	        nsec: nsec - nsecInSec * 1e9,
	    };
	}
	function encodeTimestampExtension(object) {
	    if (object instanceof Date) {
	        var timeSpec = encodeDateToTimeSpec(object);
	        return encodeTimeSpecToTimestamp(timeSpec);
	    }
	    else {
	        return null;
	    }
	}
	function decodeTimestampToTimeSpec(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    // data may be 32, 64, or 96 bits
	    switch (data.byteLength) {
	        case 4: {
	            // timestamp 32 = { sec32 }
	            var sec = view.getUint32(0);
	            var nsec = 0;
	            return { sec: sec, nsec: nsec };
	        }
	        case 8: {
	            // timestamp 64 = { nsec30, sec34 }
	            var nsec30AndSecHigh2 = view.getUint32(0);
	            var secLow32 = view.getUint32(4);
	            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;
	            var nsec = nsec30AndSecHigh2 >>> 2;
	            return { sec: sec, nsec: nsec };
	        }
	        case 12: {
	            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
	            var sec = getInt64(view, 4);
	            var nsec = view.getUint32(0);
	            return { sec: sec, nsec: nsec };
	        }
	        default:
	            throw new DecodeError("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(data.length));
	    }
	}
	function decodeTimestampExtension(data) {
	    var timeSpec = decodeTimestampToTimeSpec(data);
	    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
	}
	var timestampExtension = {
	    type: EXT_TIMESTAMP,
	    encode: encodeTimestampExtension,
	    decode: decodeTimestampExtension,
	};

	// ExtensionCodec to handle MessagePack extensions
	var ExtensionCodec = /** @class */ (function () {
	    function ExtensionCodec() {
	        // built-in extensions
	        this.builtInEncoders = [];
	        this.builtInDecoders = [];
	        // custom extensions
	        this.encoders = [];
	        this.decoders = [];
	        this.register(timestampExtension);
	    }
	    ExtensionCodec.prototype.register = function (_a) {
	        var type = _a.type, encode = _a.encode, decode = _a.decode;
	        if (type >= 0) {
	            // custom extensions
	            this.encoders[type] = encode;
	            this.decoders[type] = decode;
	        }
	        else {
	            // built-in extensions
	            var index = 1 + type;
	            this.builtInEncoders[index] = encode;
	            this.builtInDecoders[index] = decode;
	        }
	    };
	    ExtensionCodec.prototype.tryToEncode = function (object, context) {
	        // built-in extensions
	        for (var i = 0; i < this.builtInEncoders.length; i++) {
	            var encodeExt = this.builtInEncoders[i];
	            if (encodeExt != null) {
	                var data = encodeExt(object, context);
	                if (data != null) {
	                    var type = -1 - i;
	                    return new ExtData(type, data);
	                }
	            }
	        }
	        // custom extensions
	        for (var i = 0; i < this.encoders.length; i++) {
	            var encodeExt = this.encoders[i];
	            if (encodeExt != null) {
	                var data = encodeExt(object, context);
	                if (data != null) {
	                    var type = i;
	                    return new ExtData(type, data);
	                }
	            }
	        }
	        if (object instanceof ExtData) {
	            // to keep ExtData as is
	            return object;
	        }
	        return null;
	    };
	    ExtensionCodec.prototype.decode = function (data, type, context) {
	        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
	        if (decodeExt) {
	            return decodeExt(data, type, context);
	        }
	        else {
	            // decode() does not fail, returns ExtData instead.
	            return new ExtData(type, data);
	        }
	    };
	    ExtensionCodec.defaultCodec = new ExtensionCodec();
	    return ExtensionCodec;
	}());

	function ensureUint8Array(buffer) {
	    if (buffer instanceof Uint8Array) {
	        return buffer;
	    }
	    else if (ArrayBuffer.isView(buffer)) {
	        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
	    }
	    else if (buffer instanceof ArrayBuffer) {
	        return new Uint8Array(buffer);
	    }
	    else {
	        // ArrayLike<number>
	        return Uint8Array.from(buffer);
	    }
	}
	function createDataView(buffer) {
	    if (buffer instanceof ArrayBuffer) {
	        return new DataView(buffer);
	    }
	    var bufferView = ensureUint8Array(buffer);
	    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);
	}

	var DEFAULT_MAX_DEPTH = 100;
	var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
	var Encoder = /** @class */ (function () {
	    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {
	        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }
	        if (context === void 0) { context = undefined; }
	        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }
	        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }
	        if (sortKeys === void 0) { sortKeys = false; }
	        if (forceFloat32 === void 0) { forceFloat32 = false; }
	        if (ignoreUndefined === void 0) { ignoreUndefined = false; }
	        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }
	        this.extensionCodec = extensionCodec;
	        this.context = context;
	        this.maxDepth = maxDepth;
	        this.initialBufferSize = initialBufferSize;
	        this.sortKeys = sortKeys;
	        this.forceFloat32 = forceFloat32;
	        this.ignoreUndefined = ignoreUndefined;
	        this.forceIntegerToFloat = forceIntegerToFloat;
	        this.pos = 0;
	        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
	        this.bytes = new Uint8Array(this.view.buffer);
	    }
	    Encoder.prototype.getUint8Array = function () {
	        return this.bytes.subarray(0, this.pos);
	    };
	    Encoder.prototype.reinitializeState = function () {
	        this.pos = 0;
	    };
	    Encoder.prototype.encode = function (object) {
	        this.reinitializeState();
	        this.doEncode(object, 1);
	        return this.getUint8Array();
	    };
	    Encoder.prototype.doEncode = function (object, depth) {
	        if (depth > this.maxDepth) {
	            throw new Error("Too deep objects in depth ".concat(depth));
	        }
	        if (object == null) {
	            this.encodeNil();
	        }
	        else if (typeof object === "boolean") {
	            this.encodeBoolean(object);
	        }
	        else if (typeof object === "number") {
	            this.encodeNumber(object);
	        }
	        else if (typeof object === "string") {
	            this.encodeString(object);
	        }
	        else {
	            this.encodeObject(object, depth);
	        }
	    };
	    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {
	        var requiredSize = this.pos + sizeToWrite;
	        if (this.view.byteLength < requiredSize) {
	            this.resizeBuffer(requiredSize * 2);
	        }
	    };
	    Encoder.prototype.resizeBuffer = function (newSize) {
	        var newBuffer = new ArrayBuffer(newSize);
	        var newBytes = new Uint8Array(newBuffer);
	        var newView = new DataView(newBuffer);
	        newBytes.set(this.bytes);
	        this.view = newView;
	        this.bytes = newBytes;
	    };
	    Encoder.prototype.encodeNil = function () {
	        this.writeU8(0xc0);
	    };
	    Encoder.prototype.encodeBoolean = function (object) {
	        if (object === false) {
	            this.writeU8(0xc2);
	        }
	        else {
	            this.writeU8(0xc3);
	        }
	    };
	    Encoder.prototype.encodeNumber = function (object) {
	        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {
	            if (object >= 0) {
	                if (object < 0x80) {
	                    // positive fixint
	                    this.writeU8(object);
	                }
	                else if (object < 0x100) {
	                    // uint 8
	                    this.writeU8(0xcc);
	                    this.writeU8(object);
	                }
	                else if (object < 0x10000) {
	                    // uint 16
	                    this.writeU8(0xcd);
	                    this.writeU16(object);
	                }
	                else if (object < 0x100000000) {
	                    // uint 32
	                    this.writeU8(0xce);
	                    this.writeU32(object);
	                }
	                else {
	                    // uint 64
	                    this.writeU8(0xcf);
	                    this.writeU64(object);
	                }
	            }
	            else {
	                if (object >= -0x20) {
	                    // negative fixint
	                    this.writeU8(0xe0 | (object + 0x20));
	                }
	                else if (object >= -0x80) {
	                    // int 8
	                    this.writeU8(0xd0);
	                    this.writeI8(object);
	                }
	                else if (object >= -0x8000) {
	                    // int 16
	                    this.writeU8(0xd1);
	                    this.writeI16(object);
	                }
	                else if (object >= -0x80000000) {
	                    // int 32
	                    this.writeU8(0xd2);
	                    this.writeI32(object);
	                }
	                else {
	                    // int 64
	                    this.writeU8(0xd3);
	                    this.writeI64(object);
	                }
	            }
	        }
	        else {
	            // non-integer numbers
	            if (this.forceFloat32) {
	                // float 32
	                this.writeU8(0xca);
	                this.writeF32(object);
	            }
	            else {
	                // float 64
	                this.writeU8(0xcb);
	                this.writeF64(object);
	            }
	        }
	    };
	    Encoder.prototype.writeStringHeader = function (byteLength) {
	        if (byteLength < 32) {
	            // fixstr
	            this.writeU8(0xa0 + byteLength);
	        }
	        else if (byteLength < 0x100) {
	            // str 8
	            this.writeU8(0xd9);
	            this.writeU8(byteLength);
	        }
	        else if (byteLength < 0x10000) {
	            // str 16
	            this.writeU8(0xda);
	            this.writeU16(byteLength);
	        }
	        else if (byteLength < 0x100000000) {
	            // str 32
	            this.writeU8(0xdb);
	            this.writeU32(byteLength);
	        }
	        else {
	            throw new Error("Too long string: ".concat(byteLength, " bytes in UTF-8"));
	        }
	    };
	    Encoder.prototype.encodeString = function (object) {
	        var maxHeaderSize = 1 + 4;
	        var strLength = object.length;
	        if (strLength > TEXT_ENCODER_THRESHOLD) {
	            var byteLength = utf8Count(object);
	            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
	            this.writeStringHeader(byteLength);
	            utf8EncodeTE(object, this.bytes, this.pos);
	            this.pos += byteLength;
	        }
	        else {
	            var byteLength = utf8Count(object);
	            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
	            this.writeStringHeader(byteLength);
	            utf8EncodeJs(object, this.bytes, this.pos);
	            this.pos += byteLength;
	        }
	    };
	    Encoder.prototype.encodeObject = function (object, depth) {
	        // try to encode objects with custom codec first of non-primitives
	        var ext = this.extensionCodec.tryToEncode(object, this.context);
	        if (ext != null) {
	            this.encodeExtension(ext);
	        }
	        else if (Array.isArray(object)) {
	            this.encodeArray(object, depth);
	        }
	        else if (ArrayBuffer.isView(object)) {
	            this.encodeBinary(object);
	        }
	        else if (typeof object === "object") {
	            this.encodeMap(object, depth);
	        }
	        else {
	            // symbol, function and other special object come here unless extensionCodec handles them.
	            throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(object)));
	        }
	    };
	    Encoder.prototype.encodeBinary = function (object) {
	        var size = object.byteLength;
	        if (size < 0x100) {
	            // bin 8
	            this.writeU8(0xc4);
	            this.writeU8(size);
	        }
	        else if (size < 0x10000) {
	            // bin 16
	            this.writeU8(0xc5);
	            this.writeU16(size);
	        }
	        else if (size < 0x100000000) {
	            // bin 32
	            this.writeU8(0xc6);
	            this.writeU32(size);
	        }
	        else {
	            throw new Error("Too large binary: ".concat(size));
	        }
	        var bytes = ensureUint8Array(object);
	        this.writeU8a(bytes);
	    };
	    Encoder.prototype.encodeArray = function (object, depth) {
	        var size = object.length;
	        if (size < 16) {
	            // fixarray
	            this.writeU8(0x90 + size);
	        }
	        else if (size < 0x10000) {
	            // array 16
	            this.writeU8(0xdc);
	            this.writeU16(size);
	        }
	        else if (size < 0x100000000) {
	            // array 32
	            this.writeU8(0xdd);
	            this.writeU32(size);
	        }
	        else {
	            throw new Error("Too large array: ".concat(size));
	        }
	        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
	            var item = object_1[_i];
	            this.doEncode(item, depth + 1);
	        }
	    };
	    Encoder.prototype.countWithoutUndefined = function (object, keys) {
	        var count = 0;
	        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
	            var key = keys_1[_i];
	            if (object[key] !== undefined) {
	                count++;
	            }
	        }
	        return count;
	    };
	    Encoder.prototype.encodeMap = function (object, depth) {
	        var keys = Object.keys(object);
	        if (this.sortKeys) {
	            keys.sort();
	        }
	        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
	        if (size < 16) {
	            // fixmap
	            this.writeU8(0x80 + size);
	        }
	        else if (size < 0x10000) {
	            // map 16
	            this.writeU8(0xde);
	            this.writeU16(size);
	        }
	        else if (size < 0x100000000) {
	            // map 32
	            this.writeU8(0xdf);
	            this.writeU32(size);
	        }
	        else {
	            throw new Error("Too large map object: ".concat(size));
	        }
	        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
	            var key = keys_2[_i];
	            var value = object[key];
	            if (!(this.ignoreUndefined && value === undefined)) {
	                this.encodeString(key);
	                this.doEncode(value, depth + 1);
	            }
	        }
	    };
	    Encoder.prototype.encodeExtension = function (ext) {
	        var size = ext.data.length;
	        if (size === 1) {
	            // fixext 1
	            this.writeU8(0xd4);
	        }
	        else if (size === 2) {
	            // fixext 2
	            this.writeU8(0xd5);
	        }
	        else if (size === 4) {
	            // fixext 4
	            this.writeU8(0xd6);
	        }
	        else if (size === 8) {
	            // fixext 8
	            this.writeU8(0xd7);
	        }
	        else if (size === 16) {
	            // fixext 16
	            this.writeU8(0xd8);
	        }
	        else if (size < 0x100) {
	            // ext 8
	            this.writeU8(0xc7);
	            this.writeU8(size);
	        }
	        else if (size < 0x10000) {
	            // ext 16
	            this.writeU8(0xc8);
	            this.writeU16(size);
	        }
	        else if (size < 0x100000000) {
	            // ext 32
	            this.writeU8(0xc9);
	            this.writeU32(size);
	        }
	        else {
	            throw new Error("Too large extension object: ".concat(size));
	        }
	        this.writeI8(ext.type);
	        this.writeU8a(ext.data);
	    };
	    Encoder.prototype.writeU8 = function (value) {
	        this.ensureBufferSizeToWrite(1);
	        this.view.setUint8(this.pos, value);
	        this.pos++;
	    };
	    Encoder.prototype.writeU8a = function (values) {
	        var size = values.length;
	        this.ensureBufferSizeToWrite(size);
	        this.bytes.set(values, this.pos);
	        this.pos += size;
	    };
	    Encoder.prototype.writeI8 = function (value) {
	        this.ensureBufferSizeToWrite(1);
	        this.view.setInt8(this.pos, value);
	        this.pos++;
	    };
	    Encoder.prototype.writeU16 = function (value) {
	        this.ensureBufferSizeToWrite(2);
	        this.view.setUint16(this.pos, value);
	        this.pos += 2;
	    };
	    Encoder.prototype.writeI16 = function (value) {
	        this.ensureBufferSizeToWrite(2);
	        this.view.setInt16(this.pos, value);
	        this.pos += 2;
	    };
	    Encoder.prototype.writeU32 = function (value) {
	        this.ensureBufferSizeToWrite(4);
	        this.view.setUint32(this.pos, value);
	        this.pos += 4;
	    };
	    Encoder.prototype.writeI32 = function (value) {
	        this.ensureBufferSizeToWrite(4);
	        this.view.setInt32(this.pos, value);
	        this.pos += 4;
	    };
	    Encoder.prototype.writeF32 = function (value) {
	        this.ensureBufferSizeToWrite(4);
	        this.view.setFloat32(this.pos, value);
	        this.pos += 4;
	    };
	    Encoder.prototype.writeF64 = function (value) {
	        this.ensureBufferSizeToWrite(8);
	        this.view.setFloat64(this.pos, value);
	        this.pos += 8;
	    };
	    Encoder.prototype.writeU64 = function (value) {
	        this.ensureBufferSizeToWrite(8);
	        setUint64(this.view, this.pos, value);
	        this.pos += 8;
	    };
	    Encoder.prototype.writeI64 = function (value) {
	        this.ensureBufferSizeToWrite(8);
	        setInt64(this.view, this.pos, value);
	        this.pos += 8;
	    };
	    return Encoder;
	}());

	var defaultEncodeOptions = {};
	/**
	 * It encodes `value` in the MessagePack format and
	 * returns a byte buffer.
	 *
	 * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.
	 */
	function encode(value, options) {
	    if (options === void 0) { options = defaultEncodeOptions; }
	    var encoder = new Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);
	    return encoder.encode(value);
	}

	function prettyByte(byte) {
	    return "".concat(byte < 0 ? "-" : "", "0x").concat(Math.abs(byte).toString(16).padStart(2, "0"));
	}

	var DEFAULT_MAX_KEY_LENGTH = 16;
	var DEFAULT_MAX_LENGTH_PER_KEY = 16;
	var CachedKeyDecoder = /** @class */ (function () {
	    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {
	        if (maxKeyLength === void 0) { maxKeyLength = DEFAULT_MAX_KEY_LENGTH; }
	        if (maxLengthPerKey === void 0) { maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY; }
	        this.maxKeyLength = maxKeyLength;
	        this.maxLengthPerKey = maxLengthPerKey;
	        this.hit = 0;
	        this.miss = 0;
	        // avoid `new Array(N)`, which makes a sparse array,
	        // because a sparse array is typically slower than a non-sparse array.
	        this.caches = [];
	        for (var i = 0; i < this.maxKeyLength; i++) {
	            this.caches.push([]);
	        }
	    }
	    CachedKeyDecoder.prototype.canBeCached = function (byteLength) {
	        return byteLength > 0 && byteLength <= this.maxKeyLength;
	    };
	    CachedKeyDecoder.prototype.find = function (bytes, inputOffset, byteLength) {
	        var records = this.caches[byteLength - 1];
	        FIND_CHUNK: for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {
	            var record = records_1[_i];
	            var recordBytes = record.bytes;
	            for (var j = 0; j < byteLength; j++) {
	                if (recordBytes[j] !== bytes[inputOffset + j]) {
	                    continue FIND_CHUNK;
	                }
	            }
	            return record.str;
	        }
	        return null;
	    };
	    CachedKeyDecoder.prototype.store = function (bytes, value) {
	        var records = this.caches[bytes.length - 1];
	        var record = { bytes: bytes, str: value };
	        if (records.length >= this.maxLengthPerKey) {
	            // `records` are full!
	            // Set `record` to an arbitrary position.
	            records[(Math.random() * records.length) | 0] = record;
	        }
	        else {
	            records.push(record);
	        }
	    };
	    CachedKeyDecoder.prototype.decode = function (bytes, inputOffset, byteLength) {
	        var cachedValue = this.find(bytes, inputOffset, byteLength);
	        if (cachedValue != null) {
	            this.hit++;
	            return cachedValue;
	        }
	        this.miss++;
	        var str = utf8DecodeJs(bytes, inputOffset, byteLength);
	        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.
	        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
	        this.store(slicedCopyOfBytes, str);
	        return str;
	    };
	    return CachedKeyDecoder;
	}());

	var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	};
	var __await = (undefined && undefined.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); };
	var __asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	};
	var isValidMapKeyType = function (key) {
	    var keyType = typeof key;
	    return keyType === "string" || keyType === "number";
	};
	var HEAD_BYTE_REQUIRED = -1;
	var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
	var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
	// IE11: Hack to support IE11.
	// IE11: Drop this hack and just use RangeError when IE11 is obsolete.
	var DataViewIndexOutOfBoundsError = (function () {
	    try {
	        // IE11: The spec says it should throw RangeError,
	        // IE11: but in IE11 it throws TypeError.
	        EMPTY_VIEW.getInt8(0);
	    }
	    catch (e) {
	        return e.constructor;
	    }
	    throw new Error("never reached");
	})();
	var MORE_DATA = new DataViewIndexOutOfBoundsError("Insufficient data");
	var sharedCachedKeyDecoder = new CachedKeyDecoder();
	var Decoder = /** @class */ (function () {
	    function Decoder(extensionCodec, context, maxStrLength, maxBinLength, maxArrayLength, maxMapLength, maxExtLength, keyDecoder) {
	        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }
	        if (context === void 0) { context = undefined; }
	        if (maxStrLength === void 0) { maxStrLength = UINT32_MAX; }
	        if (maxBinLength === void 0) { maxBinLength = UINT32_MAX; }
	        if (maxArrayLength === void 0) { maxArrayLength = UINT32_MAX; }
	        if (maxMapLength === void 0) { maxMapLength = UINT32_MAX; }
	        if (maxExtLength === void 0) { maxExtLength = UINT32_MAX; }
	        if (keyDecoder === void 0) { keyDecoder = sharedCachedKeyDecoder; }
	        this.extensionCodec = extensionCodec;
	        this.context = context;
	        this.maxStrLength = maxStrLength;
	        this.maxBinLength = maxBinLength;
	        this.maxArrayLength = maxArrayLength;
	        this.maxMapLength = maxMapLength;
	        this.maxExtLength = maxExtLength;
	        this.keyDecoder = keyDecoder;
	        this.totalPos = 0;
	        this.pos = 0;
	        this.view = EMPTY_VIEW;
	        this.bytes = EMPTY_BYTES;
	        this.headByte = HEAD_BYTE_REQUIRED;
	        this.stack = [];
	    }
	    Decoder.prototype.reinitializeState = function () {
	        this.totalPos = 0;
	        this.headByte = HEAD_BYTE_REQUIRED;
	        this.stack.length = 0;
	        // view, bytes, and pos will be re-initialized in setBuffer()
	    };
	    Decoder.prototype.setBuffer = function (buffer) {
	        this.bytes = ensureUint8Array(buffer);
	        this.view = createDataView(this.bytes);
	        this.pos = 0;
	    };
	    Decoder.prototype.appendBuffer = function (buffer) {
	        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
	            this.setBuffer(buffer);
	        }
	        else {
	            var remainingData = this.bytes.subarray(this.pos);
	            var newData = ensureUint8Array(buffer);
	            // concat remainingData + newData
	            var newBuffer = new Uint8Array(remainingData.length + newData.length);
	            newBuffer.set(remainingData);
	            newBuffer.set(newData, remainingData.length);
	            this.setBuffer(newBuffer);
	        }
	    };
	    Decoder.prototype.hasRemaining = function (size) {
	        return this.view.byteLength - this.pos >= size;
	    };
	    Decoder.prototype.createExtraByteError = function (posToShow) {
	        var _a = this, view = _a.view, pos = _a.pos;
	        return new RangeError("Extra ".concat(view.byteLength - pos, " of ").concat(view.byteLength, " byte(s) found at buffer[").concat(posToShow, "]"));
	    };
	    /**
	     * @throws {DecodeError}
	     * @throws {RangeError}
	     */
	    Decoder.prototype.decode = function (buffer) {
	        this.reinitializeState();
	        this.setBuffer(buffer);
	        var object = this.doDecodeSync();
	        if (this.hasRemaining(1)) {
	            throw this.createExtraByteError(this.pos);
	        }
	        return object;
	    };
	    Decoder.prototype.decodeMulti = function (buffer) {
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    this.reinitializeState();
	                    this.setBuffer(buffer);
	                    _a.label = 1;
	                case 1:
	                    if (!this.hasRemaining(1)) return [3 /*break*/, 3];
	                    return [4 /*yield*/, this.doDecodeSync()];
	                case 2:
	                    _a.sent();
	                    return [3 /*break*/, 1];
	                case 3: return [2 /*return*/];
	            }
	        });
	    };
	    Decoder.prototype.decodeAsync = function (stream) {
	        var stream_1, stream_1_1;
	        var e_1, _a;
	        return __awaiter(this, void 0, void 0, function () {
	            var decoded, object, buffer, e_1_1, _b, headByte, pos, totalPos;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        decoded = false;
	                        _c.label = 1;
	                    case 1:
	                        _c.trys.push([1, 6, 7, 12]);
	                        stream_1 = __asyncValues(stream);
	                        _c.label = 2;
	                    case 2: return [4 /*yield*/, stream_1.next()];
	                    case 3:
	                        if (!(stream_1_1 = _c.sent(), !stream_1_1.done)) return [3 /*break*/, 5];
	                        buffer = stream_1_1.value;
	                        if (decoded) {
	                            throw this.createExtraByteError(this.totalPos);
	                        }
	                        this.appendBuffer(buffer);
	                        try {
	                            object = this.doDecodeSync();
	                            decoded = true;
	                        }
	                        catch (e) {
	                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {
	                                throw e; // rethrow
	                            }
	                            // fallthrough
	                        }
	                        this.totalPos += this.pos;
	                        _c.label = 4;
	                    case 4: return [3 /*break*/, 2];
	                    case 5: return [3 /*break*/, 12];
	                    case 6:
	                        e_1_1 = _c.sent();
	                        e_1 = { error: e_1_1 };
	                        return [3 /*break*/, 12];
	                    case 7:
	                        _c.trys.push([7, , 10, 11]);
	                        if (!(stream_1_1 && !stream_1_1.done && (_a = stream_1.return))) return [3 /*break*/, 9];
	                        return [4 /*yield*/, _a.call(stream_1)];
	                    case 8:
	                        _c.sent();
	                        _c.label = 9;
	                    case 9: return [3 /*break*/, 11];
	                    case 10:
	                        if (e_1) throw e_1.error;
	                        return [7 /*endfinally*/];
	                    case 11: return [7 /*endfinally*/];
	                    case 12:
	                        if (decoded) {
	                            if (this.hasRemaining(1)) {
	                                throw this.createExtraByteError(this.totalPos);
	                            }
	                            return [2 /*return*/, object];
	                        }
	                        _b = this, headByte = _b.headByte, pos = _b.pos, totalPos = _b.totalPos;
	                        throw new RangeError("Insufficient data in parsing ".concat(prettyByte(headByte), " at ").concat(totalPos, " (").concat(pos, " in the current buffer)"));
	                }
	            });
	        });
	    };
	    Decoder.prototype.decodeArrayStream = function (stream) {
	        return this.decodeMultiAsync(stream, true);
	    };
	    Decoder.prototype.decodeStream = function (stream) {
	        return this.decodeMultiAsync(stream, false);
	    };
	    Decoder.prototype.decodeMultiAsync = function (stream, isArray) {
	        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {
	            var isArrayHeaderRequired, arrayItemsLeft, stream_2, stream_2_1, buffer, e_2, e_3_1;
	            var e_3, _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        isArrayHeaderRequired = isArray;
	                        arrayItemsLeft = -1;
	                        _b.label = 1;
	                    case 1:
	                        _b.trys.push([1, 13, 14, 19]);
	                        stream_2 = __asyncValues(stream);
	                        _b.label = 2;
	                    case 2: return [4 /*yield*/, __await(stream_2.next())];
	                    case 3:
	                        if (!(stream_2_1 = _b.sent(), !stream_2_1.done)) return [3 /*break*/, 12];
	                        buffer = stream_2_1.value;
	                        if (isArray && arrayItemsLeft === 0) {
	                            throw this.createExtraByteError(this.totalPos);
	                        }
	                        this.appendBuffer(buffer);
	                        if (isArrayHeaderRequired) {
	                            arrayItemsLeft = this.readArraySize();
	                            isArrayHeaderRequired = false;
	                            this.complete();
	                        }
	                        _b.label = 4;
	                    case 4:
	                        _b.trys.push([4, 9, , 10]);
	                        _b.label = 5;
	                    case 5:
	                        return [4 /*yield*/, __await(this.doDecodeSync())];
	                    case 6: return [4 /*yield*/, _b.sent()];
	                    case 7:
	                        _b.sent();
	                        if (--arrayItemsLeft === 0) {
	                            return [3 /*break*/, 8];
	                        }
	                        return [3 /*break*/, 5];
	                    case 8: return [3 /*break*/, 10];
	                    case 9:
	                        e_2 = _b.sent();
	                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {
	                            throw e_2; // rethrow
	                        }
	                        return [3 /*break*/, 10];
	                    case 10:
	                        this.totalPos += this.pos;
	                        _b.label = 11;
	                    case 11: return [3 /*break*/, 2];
	                    case 12: return [3 /*break*/, 19];
	                    case 13:
	                        e_3_1 = _b.sent();
	                        e_3 = { error: e_3_1 };
	                        return [3 /*break*/, 19];
	                    case 14:
	                        _b.trys.push([14, , 17, 18]);
	                        if (!(stream_2_1 && !stream_2_1.done && (_a = stream_2.return))) return [3 /*break*/, 16];
	                        return [4 /*yield*/, __await(_a.call(stream_2))];
	                    case 15:
	                        _b.sent();
	                        _b.label = 16;
	                    case 16: return [3 /*break*/, 18];
	                    case 17:
	                        if (e_3) throw e_3.error;
	                        return [7 /*endfinally*/];
	                    case 18: return [7 /*endfinally*/];
	                    case 19: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Decoder.prototype.doDecodeSync = function () {
	        DECODE: while (true) {
	            var headByte = this.readHeadByte();
	            var object = void 0;
	            if (headByte >= 0xe0) {
	                // negative fixint (111x xxxx) 0xe0 - 0xff
	                object = headByte - 0x100;
	            }
	            else if (headByte < 0xc0) {
	                if (headByte < 0x80) {
	                    // positive fixint (0xxx xxxx) 0x00 - 0x7f
	                    object = headByte;
	                }
	                else if (headByte < 0x90) {
	                    // fixmap (1000 xxxx) 0x80 - 0x8f
	                    var size = headByte - 0x80;
	                    if (size !== 0) {
	                        this.pushMapState(size);
	                        this.complete();
	                        continue DECODE;
	                    }
	                    else {
	                        object = {};
	                    }
	                }
	                else if (headByte < 0xa0) {
	                    // fixarray (1001 xxxx) 0x90 - 0x9f
	                    var size = headByte - 0x90;
	                    if (size !== 0) {
	                        this.pushArrayState(size);
	                        this.complete();
	                        continue DECODE;
	                    }
	                    else {
	                        object = [];
	                    }
	                }
	                else {
	                    // fixstr (101x xxxx) 0xa0 - 0xbf
	                    var byteLength = headByte - 0xa0;
	                    object = this.decodeUtf8String(byteLength, 0);
	                }
	            }
	            else if (headByte === 0xc0) {
	                // nil
	                object = null;
	            }
	            else if (headByte === 0xc2) {
	                // false
	                object = false;
	            }
	            else if (headByte === 0xc3) {
	                // true
	                object = true;
	            }
	            else if (headByte === 0xca) {
	                // float 32
	                object = this.readF32();
	            }
	            else if (headByte === 0xcb) {
	                // float 64
	                object = this.readF64();
	            }
	            else if (headByte === 0xcc) {
	                // uint 8
	                object = this.readU8();
	            }
	            else if (headByte === 0xcd) {
	                // uint 16
	                object = this.readU16();
	            }
	            else if (headByte === 0xce) {
	                // uint 32
	                object = this.readU32();
	            }
	            else if (headByte === 0xcf) {
	                // uint 64
	                object = this.readU64();
	            }
	            else if (headByte === 0xd0) {
	                // int 8
	                object = this.readI8();
	            }
	            else if (headByte === 0xd1) {
	                // int 16
	                object = this.readI16();
	            }
	            else if (headByte === 0xd2) {
	                // int 32
	                object = this.readI32();
	            }
	            else if (headByte === 0xd3) {
	                // int 64
	                object = this.readI64();
	            }
	            else if (headByte === 0xd9) {
	                // str 8
	                var byteLength = this.lookU8();
	                object = this.decodeUtf8String(byteLength, 1);
	            }
	            else if (headByte === 0xda) {
	                // str 16
	                var byteLength = this.lookU16();
	                object = this.decodeUtf8String(byteLength, 2);
	            }
	            else if (headByte === 0xdb) {
	                // str 32
	                var byteLength = this.lookU32();
	                object = this.decodeUtf8String(byteLength, 4);
	            }
	            else if (headByte === 0xdc) {
	                // array 16
	                var size = this.readU16();
	                if (size !== 0) {
	                    this.pushArrayState(size);
	                    this.complete();
	                    continue DECODE;
	                }
	                else {
	                    object = [];
	                }
	            }
	            else if (headByte === 0xdd) {
	                // array 32
	                var size = this.readU32();
	                if (size !== 0) {
	                    this.pushArrayState(size);
	                    this.complete();
	                    continue DECODE;
	                }
	                else {
	                    object = [];
	                }
	            }
	            else if (headByte === 0xde) {
	                // map 16
	                var size = this.readU16();
	                if (size !== 0) {
	                    this.pushMapState(size);
	                    this.complete();
	                    continue DECODE;
	                }
	                else {
	                    object = {};
	                }
	            }
	            else if (headByte === 0xdf) {
	                // map 32
	                var size = this.readU32();
	                if (size !== 0) {
	                    this.pushMapState(size);
	                    this.complete();
	                    continue DECODE;
	                }
	                else {
	                    object = {};
	                }
	            }
	            else if (headByte === 0xc4) {
	                // bin 8
	                var size = this.lookU8();
	                object = this.decodeBinary(size, 1);
	            }
	            else if (headByte === 0xc5) {
	                // bin 16
	                var size = this.lookU16();
	                object = this.decodeBinary(size, 2);
	            }
	            else if (headByte === 0xc6) {
	                // bin 32
	                var size = this.lookU32();
	                object = this.decodeBinary(size, 4);
	            }
	            else if (headByte === 0xd4) {
	                // fixext 1
	                object = this.decodeExtension(1, 0);
	            }
	            else if (headByte === 0xd5) {
	                // fixext 2
	                object = this.decodeExtension(2, 0);
	            }
	            else if (headByte === 0xd6) {
	                // fixext 4
	                object = this.decodeExtension(4, 0);
	            }
	            else if (headByte === 0xd7) {
	                // fixext 8
	                object = this.decodeExtension(8, 0);
	            }
	            else if (headByte === 0xd8) {
	                // fixext 16
	                object = this.decodeExtension(16, 0);
	            }
	            else if (headByte === 0xc7) {
	                // ext 8
	                var size = this.lookU8();
	                object = this.decodeExtension(size, 1);
	            }
	            else if (headByte === 0xc8) {
	                // ext 16
	                var size = this.lookU16();
	                object = this.decodeExtension(size, 2);
	            }
	            else if (headByte === 0xc9) {
	                // ext 32
	                var size = this.lookU32();
	                object = this.decodeExtension(size, 4);
	            }
	            else {
	                throw new DecodeError("Unrecognized type byte: ".concat(prettyByte(headByte)));
	            }
	            this.complete();
	            var stack = this.stack;
	            while (stack.length > 0) {
	                // arrays and maps
	                var state = stack[stack.length - 1];
	                if (state.type === 0 /* ARRAY */) {
	                    state.array[state.position] = object;
	                    state.position++;
	                    if (state.position === state.size) {
	                        stack.pop();
	                        object = state.array;
	                    }
	                    else {
	                        continue DECODE;
	                    }
	                }
	                else if (state.type === 1 /* MAP_KEY */) {
	                    if (!isValidMapKeyType(object)) {
	                        throw new DecodeError("The type of key must be string or number but " + typeof object);
	                    }
	                    if (object === "__proto__") {
	                        throw new DecodeError("The key __proto__ is not allowed");
	                    }
	                    state.key = object;
	                    state.type = 2 /* MAP_VALUE */;
	                    continue DECODE;
	                }
	                else {
	                    // it must be `state.type === State.MAP_VALUE` here
	                    state.map[state.key] = object;
	                    state.readCount++;
	                    if (state.readCount === state.size) {
	                        stack.pop();
	                        object = state.map;
	                    }
	                    else {
	                        state.key = null;
	                        state.type = 1 /* MAP_KEY */;
	                        continue DECODE;
	                    }
	                }
	            }
	            return object;
	        }
	    };
	    Decoder.prototype.readHeadByte = function () {
	        if (this.headByte === HEAD_BYTE_REQUIRED) {
	            this.headByte = this.readU8();
	            // console.log("headByte", prettyByte(this.headByte));
	        }
	        return this.headByte;
	    };
	    Decoder.prototype.complete = function () {
	        this.headByte = HEAD_BYTE_REQUIRED;
	    };
	    Decoder.prototype.readArraySize = function () {
	        var headByte = this.readHeadByte();
	        switch (headByte) {
	            case 0xdc:
	                return this.readU16();
	            case 0xdd:
	                return this.readU32();
	            default: {
	                if (headByte < 0xa0) {
	                    return headByte - 0x90;
	                }
	                else {
	                    throw new DecodeError("Unrecognized array type byte: ".concat(prettyByte(headByte)));
	                }
	            }
	        }
	    };
	    Decoder.prototype.pushMapState = function (size) {
	        if (size > this.maxMapLength) {
	            throw new DecodeError("Max length exceeded: map length (".concat(size, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
	        }
	        this.stack.push({
	            type: 1 /* MAP_KEY */,
	            size: size,
	            key: null,
	            readCount: 0,
	            map: {},
	        });
	    };
	    Decoder.prototype.pushArrayState = function (size) {
	        if (size > this.maxArrayLength) {
	            throw new DecodeError("Max length exceeded: array length (".concat(size, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
	        }
	        this.stack.push({
	            type: 0 /* ARRAY */,
	            size: size,
	            array: new Array(size),
	            position: 0,
	        });
	    };
	    Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {
	        var _a;
	        if (byteLength > this.maxStrLength) {
	            throw new DecodeError("Max length exceeded: UTF-8 byte length (".concat(byteLength, ") > maxStrLength (").concat(this.maxStrLength, ")"));
	        }
	        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
	            throw MORE_DATA;
	        }
	        var offset = this.pos + headerOffset;
	        var object;
	        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {
	            object = this.keyDecoder.decode(this.bytes, offset, byteLength);
	        }
	        else if (byteLength > TEXT_DECODER_THRESHOLD) {
	            object = utf8DecodeTD(this.bytes, offset, byteLength);
	        }
	        else {
	            object = utf8DecodeJs(this.bytes, offset, byteLength);
	        }
	        this.pos += headerOffset + byteLength;
	        return object;
	    };
	    Decoder.prototype.stateIsMapKey = function () {
	        if (this.stack.length > 0) {
	            var state = this.stack[this.stack.length - 1];
	            return state.type === 1 /* MAP_KEY */;
	        }
	        return false;
	    };
	    Decoder.prototype.decodeBinary = function (byteLength, headOffset) {
	        if (byteLength > this.maxBinLength) {
	            throw new DecodeError("Max length exceeded: bin length (".concat(byteLength, ") > maxBinLength (").concat(this.maxBinLength, ")"));
	        }
	        if (!this.hasRemaining(byteLength + headOffset)) {
	            throw MORE_DATA;
	        }
	        var offset = this.pos + headOffset;
	        var object = this.bytes.subarray(offset, offset + byteLength);
	        this.pos += headOffset + byteLength;
	        return object;
	    };
	    Decoder.prototype.decodeExtension = function (size, headOffset) {
	        if (size > this.maxExtLength) {
	            throw new DecodeError("Max length exceeded: ext length (".concat(size, ") > maxExtLength (").concat(this.maxExtLength, ")"));
	        }
	        var extType = this.view.getInt8(this.pos + headOffset);
	        var data = this.decodeBinary(size, headOffset + 1 /* extType */);
	        return this.extensionCodec.decode(data, extType, this.context);
	    };
	    Decoder.prototype.lookU8 = function () {
	        return this.view.getUint8(this.pos);
	    };
	    Decoder.prototype.lookU16 = function () {
	        return this.view.getUint16(this.pos);
	    };
	    Decoder.prototype.lookU32 = function () {
	        return this.view.getUint32(this.pos);
	    };
	    Decoder.prototype.readU8 = function () {
	        var value = this.view.getUint8(this.pos);
	        this.pos++;
	        return value;
	    };
	    Decoder.prototype.readI8 = function () {
	        var value = this.view.getInt8(this.pos);
	        this.pos++;
	        return value;
	    };
	    Decoder.prototype.readU16 = function () {
	        var value = this.view.getUint16(this.pos);
	        this.pos += 2;
	        return value;
	    };
	    Decoder.prototype.readI16 = function () {
	        var value = this.view.getInt16(this.pos);
	        this.pos += 2;
	        return value;
	    };
	    Decoder.prototype.readU32 = function () {
	        var value = this.view.getUint32(this.pos);
	        this.pos += 4;
	        return value;
	    };
	    Decoder.prototype.readI32 = function () {
	        var value = this.view.getInt32(this.pos);
	        this.pos += 4;
	        return value;
	    };
	    Decoder.prototype.readU64 = function () {
	        var value = getUint64(this.view, this.pos);
	        this.pos += 8;
	        return value;
	    };
	    Decoder.prototype.readI64 = function () {
	        var value = getInt64(this.view, this.pos);
	        this.pos += 8;
	        return value;
	    };
	    Decoder.prototype.readF32 = function () {
	        var value = this.view.getFloat32(this.pos);
	        this.pos += 4;
	        return value;
	    };
	    Decoder.prototype.readF64 = function () {
	        var value = this.view.getFloat64(this.pos);
	        this.pos += 8;
	        return value;
	    };
	    return Decoder;
	}());

	var defaultDecodeOptions = {};
	/**
	 * It decodes a single MessagePack object in a buffer.
	 *
	 * This is a synchronous decoding function.
	 * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.
	 */
	function decode(buffer, options) {
	    if (options === void 0) { options = defaultDecodeOptions; }
	    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
	    return decoder.decode(buffer);
	}

	// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

	var ws = null;

	if (typeof WebSocket !== 'undefined') {
	  ws = WebSocket;
	} else if (typeof MozWebSocket !== 'undefined') {
	  ws = MozWebSocket;
	} else if (typeof commonjsGlobal !== 'undefined') {
	  ws = commonjsGlobal.WebSocket || commonjsGlobal.MozWebSocket;
	} else if (typeof window !== 'undefined') {
	  ws = window.WebSocket || window.MozWebSocket;
	} else if (typeof self !== 'undefined') {
	  ws = self.WebSocket || self.MozWebSocket;
	}

	var browser = ws;

	/**
	 * A Websocket client which can make requests and receive responses,
	 * as well as send and receive signals
	 *
	 * Uses Holochain's websocket WireMessage for communication.
	 */
	class WsClient {
	    socket;
	    pendingRequests;
	    index;
	    alreadyWarnedNoSignalCb;
	    constructor(socket, signalCb) {
	        this.socket = socket;
	        this.pendingRequests = {};
	        this.index = 0;
	        // TODO: allow adding signal handlers later
	        this.alreadyWarnedNoSignalCb = false;
	        socket.onmessage = async (encodedMsg) => {
	            let data = encodedMsg.data;
	            // If data is not a buffer (nodejs), it will be a blob (browser)
	            if (typeof Buffer === "undefined" || !Buffer.isBuffer(data)) {
	                data = await data.arrayBuffer();
	            }
	            const msg = decode(data);
	            if (msg.type === "Signal") {
	                if (signalCb) {
	                    const decodedMessage = decode(msg.data);
	                    if (!decodedMessage.App) {
	                        // We have received a system signal, do nothing
	                        return;
	                    }
	                    // Note: holochain currently returns signals as an array of two values: cellId and the serialized signal payload
	                    // and this array is nested within the App key within the returned message.
	                    const decodedCellId = decodedMessage.App[0];
	                    // Note:In order to return readible content to the UI, the signal payload must also be decoded.
	                    const decodedPayload = signalTransform(decodedMessage.App[1]);
	                    // Return a uniform format to UI (ie: { type, data } - the same format as with callZome and appInfo...)
	                    const signal = {
	                        type: msg.type,
	                        data: { cellId: decodedCellId, payload: decodedPayload },
	                    };
	                    signalCb(signal);
	                }
	                else {
	                    if (!this.alreadyWarnedNoSignalCb)
	                        console.log("Received signal but no signal callback was set in constructor");
	                    this.alreadyWarnedNoSignalCb = true;
	                }
	            }
	            else if (msg.type === "Response") {
	                this.handleResponse(msg);
	            }
	            else {
	                console.error(`Got unrecognized Websocket message type: ${msg.type}`);
	            }
	        };
	    }
	    emitSignal(data) {
	        const encodedMsg = encode({
	            type: "Signal",
	            data: encode(data),
	        });
	        this.socket.send(encodedMsg);
	    }
	    request(data) {
	        const id = this.index;
	        this.index += 1;
	        const encodedMsg = encode({
	            id,
	            type: "Request",
	            data: encode(data),
	        });
	        const promise = new Promise((fulfill, reject) => {
	            this.pendingRequests[id] = { fulfill, reject };
	        });
	        if (this.socket.readyState === this.socket.OPEN) {
	            this.socket.send(encodedMsg);
	        }
	        else {
	            return Promise.reject(new Error("Socket is not open"));
	        }
	        return promise;
	    }
	    handleResponse(msg) {
	        const id = msg.id;
	        if (this.pendingRequests[id]) {
	            // resolve response
	            if (msg.data === null || msg.data === undefined) {
	                this.pendingRequests[id].reject(new Error("Response canceled by responder"));
	            }
	            else {
	                this.pendingRequests[id].fulfill(decode(msg.data));
	            }
	        }
	        else {
	            console.error(`Got response with no matching request. id=${id}`);
	        }
	    }
	    close() {
	        this.socket.close();
	        return this.awaitClose();
	    }
	    awaitClose() {
	        return new Promise((resolve) => this.socket.on("close", resolve));
	    }
	    static connect(url, signalCb) {
	        return new Promise((resolve, reject) => {
	            const socket = new browser(url);
	            // make sure that there are no uncaught connection
	            // errors because that causes nodejs thread to crash
	            // with uncaught exception
	            socket.onerror = () => {
	                reject(new Error(`could not connect to holochain conductor, please check that a conductor service is running and available at ${url}`));
	            };
	            socket.onopen = () => {
	                resolve(new WsClient(socket, signalCb));
	            };
	        });
	    }
	}
	const signalTransform = (res) => {
	    return decode(res);
	};

	const ERROR_TYPE = "error";
	const DEFAULT_TIMEOUT = 15000;
	/**
	 * Take a Requester function which deals with tagged requests and responses,
	 * and return a Requester which deals only with the inner data types, also
	 * with the optional Transformer applied to further modify the input and output.
	 */
	const requesterTransformer = (requester, tag, transform = identityTransformer) => async (req, timeout) => {
	    const input = { type: tag, data: transform.input(req) };
	    const response = await requester(input, timeout);
	    const output = transform.output(response.data);
	    return output;
	};
	const identity = (x) => x;
	const identityTransformer = {
	    input: identity,
	    output: identity,
	};
	const catchError = (res) => {
	    return res.type === ERROR_TYPE ? Promise.reject(res) : Promise.resolve(res);
	};
	const promiseTimeout = (promise, tag, ms) => {
	    let id;
	    const timeout = new Promise((_, reject) => {
	        id = setTimeout(() => {
	            clearTimeout(id);
	            reject(new Error(`Timed out in ${ms}ms: ${tag}`));
	        }, ms);
	    });
	    return new Promise((res, rej) => {
	        Promise.race([promise, timeout])
	            .then((a) => {
	            clearTimeout(id);
	            return res(a);
	        })
	            .catch((e) => {
	            return rej(e);
	        });
	    });
	};

	var browserPonyfill = {exports: {}};

	(function (module, exports) {
		var global = typeof self !== 'undefined' ? self : commonjsGlobal;
		var __self__ = (function () {
		function F() {
		this.fetch = false;
		this.DOMException = global.DOMException;
		}
		F.prototype = global;
		return new F();
		})();
		(function(self) {

		((function (exports) {

		  var support = {
		    searchParams: 'URLSearchParams' in self,
		    iterable: 'Symbol' in self && 'iterator' in Symbol,
		    blob:
		      'FileReader' in self &&
		      'Blob' in self &&
		      (function() {
		        try {
		          new Blob();
		          return true
		        } catch (e) {
		          return false
		        }
		      })(),
		    formData: 'FormData' in self,
		    arrayBuffer: 'ArrayBuffer' in self
		  };

		  function isDataView(obj) {
		    return obj && DataView.prototype.isPrototypeOf(obj)
		  }

		  if (support.arrayBuffer) {
		    var viewClasses = [
		      '[object Int8Array]',
		      '[object Uint8Array]',
		      '[object Uint8ClampedArray]',
		      '[object Int16Array]',
		      '[object Uint16Array]',
		      '[object Int32Array]',
		      '[object Uint32Array]',
		      '[object Float32Array]',
		      '[object Float64Array]'
		    ];

		    var isArrayBufferView =
		      ArrayBuffer.isView ||
		      function(obj) {
		        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
		      };
		  }

		  function normalizeName(name) {
		    if (typeof name !== 'string') {
		      name = String(name);
		    }
		    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
		      throw new TypeError('Invalid character in header field name')
		    }
		    return name.toLowerCase()
		  }

		  function normalizeValue(value) {
		    if (typeof value !== 'string') {
		      value = String(value);
		    }
		    return value
		  }

		  // Build a destructive iterator for the value list
		  function iteratorFor(items) {
		    var iterator = {
		      next: function() {
		        var value = items.shift();
		        return {done: value === undefined, value: value}
		      }
		    };

		    if (support.iterable) {
		      iterator[Symbol.iterator] = function() {
		        return iterator
		      };
		    }

		    return iterator
		  }

		  function Headers(headers) {
		    this.map = {};

		    if (headers instanceof Headers) {
		      headers.forEach(function(value, name) {
		        this.append(name, value);
		      }, this);
		    } else if (Array.isArray(headers)) {
		      headers.forEach(function(header) {
		        this.append(header[0], header[1]);
		      }, this);
		    } else if (headers) {
		      Object.getOwnPropertyNames(headers).forEach(function(name) {
		        this.append(name, headers[name]);
		      }, this);
		    }
		  }

		  Headers.prototype.append = function(name, value) {
		    name = normalizeName(name);
		    value = normalizeValue(value);
		    var oldValue = this.map[name];
		    this.map[name] = oldValue ? oldValue + ', ' + value : value;
		  };

		  Headers.prototype['delete'] = function(name) {
		    delete this.map[normalizeName(name)];
		  };

		  Headers.prototype.get = function(name) {
		    name = normalizeName(name);
		    return this.has(name) ? this.map[name] : null
		  };

		  Headers.prototype.has = function(name) {
		    return this.map.hasOwnProperty(normalizeName(name))
		  };

		  Headers.prototype.set = function(name, value) {
		    this.map[normalizeName(name)] = normalizeValue(value);
		  };

		  Headers.prototype.forEach = function(callback, thisArg) {
		    for (var name in this.map) {
		      if (this.map.hasOwnProperty(name)) {
		        callback.call(thisArg, this.map[name], name, this);
		      }
		    }
		  };

		  Headers.prototype.keys = function() {
		    var items = [];
		    this.forEach(function(value, name) {
		      items.push(name);
		    });
		    return iteratorFor(items)
		  };

		  Headers.prototype.values = function() {
		    var items = [];
		    this.forEach(function(value) {
		      items.push(value);
		    });
		    return iteratorFor(items)
		  };

		  Headers.prototype.entries = function() {
		    var items = [];
		    this.forEach(function(value, name) {
		      items.push([name, value]);
		    });
		    return iteratorFor(items)
		  };

		  if (support.iterable) {
		    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
		  }

		  function consumed(body) {
		    if (body.bodyUsed) {
		      return Promise.reject(new TypeError('Already read'))
		    }
		    body.bodyUsed = true;
		  }

		  function fileReaderReady(reader) {
		    return new Promise(function(resolve, reject) {
		      reader.onload = function() {
		        resolve(reader.result);
		      };
		      reader.onerror = function() {
		        reject(reader.error);
		      };
		    })
		  }

		  function readBlobAsArrayBuffer(blob) {
		    var reader = new FileReader();
		    var promise = fileReaderReady(reader);
		    reader.readAsArrayBuffer(blob);
		    return promise
		  }

		  function readBlobAsText(blob) {
		    var reader = new FileReader();
		    var promise = fileReaderReady(reader);
		    reader.readAsText(blob);
		    return promise
		  }

		  function readArrayBufferAsText(buf) {
		    var view = new Uint8Array(buf);
		    var chars = new Array(view.length);

		    for (var i = 0; i < view.length; i++) {
		      chars[i] = String.fromCharCode(view[i]);
		    }
		    return chars.join('')
		  }

		  function bufferClone(buf) {
		    if (buf.slice) {
		      return buf.slice(0)
		    } else {
		      var view = new Uint8Array(buf.byteLength);
		      view.set(new Uint8Array(buf));
		      return view.buffer
		    }
		  }

		  function Body() {
		    this.bodyUsed = false;

		    this._initBody = function(body) {
		      this._bodyInit = body;
		      if (!body) {
		        this._bodyText = '';
		      } else if (typeof body === 'string') {
		        this._bodyText = body;
		      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
		        this._bodyBlob = body;
		      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
		        this._bodyFormData = body;
		      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
		        this._bodyText = body.toString();
		      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
		        this._bodyArrayBuffer = bufferClone(body.buffer);
		        // IE 10-11 can't handle a DataView body.
		        this._bodyInit = new Blob([this._bodyArrayBuffer]);
		      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
		        this._bodyArrayBuffer = bufferClone(body);
		      } else {
		        this._bodyText = body = Object.prototype.toString.call(body);
		      }

		      if (!this.headers.get('content-type')) {
		        if (typeof body === 'string') {
		          this.headers.set('content-type', 'text/plain;charset=UTF-8');
		        } else if (this._bodyBlob && this._bodyBlob.type) {
		          this.headers.set('content-type', this._bodyBlob.type);
		        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
		          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
		        }
		      }
		    };

		    if (support.blob) {
		      this.blob = function() {
		        var rejected = consumed(this);
		        if (rejected) {
		          return rejected
		        }

		        if (this._bodyBlob) {
		          return Promise.resolve(this._bodyBlob)
		        } else if (this._bodyArrayBuffer) {
		          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
		        } else if (this._bodyFormData) {
		          throw new Error('could not read FormData body as blob')
		        } else {
		          return Promise.resolve(new Blob([this._bodyText]))
		        }
		      };

		      this.arrayBuffer = function() {
		        if (this._bodyArrayBuffer) {
		          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
		        } else {
		          return this.blob().then(readBlobAsArrayBuffer)
		        }
		      };
		    }

		    this.text = function() {
		      var rejected = consumed(this);
		      if (rejected) {
		        return rejected
		      }

		      if (this._bodyBlob) {
		        return readBlobAsText(this._bodyBlob)
		      } else if (this._bodyArrayBuffer) {
		        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
		      } else if (this._bodyFormData) {
		        throw new Error('could not read FormData body as text')
		      } else {
		        return Promise.resolve(this._bodyText)
		      }
		    };

		    if (support.formData) {
		      this.formData = function() {
		        return this.text().then(decode)
		      };
		    }

		    this.json = function() {
		      return this.text().then(JSON.parse)
		    };

		    return this
		  }

		  // HTTP methods whose capitalization should be normalized
		  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

		  function normalizeMethod(method) {
		    var upcased = method.toUpperCase();
		    return methods.indexOf(upcased) > -1 ? upcased : method
		  }

		  function Request(input, options) {
		    options = options || {};
		    var body = options.body;

		    if (input instanceof Request) {
		      if (input.bodyUsed) {
		        throw new TypeError('Already read')
		      }
		      this.url = input.url;
		      this.credentials = input.credentials;
		      if (!options.headers) {
		        this.headers = new Headers(input.headers);
		      }
		      this.method = input.method;
		      this.mode = input.mode;
		      this.signal = input.signal;
		      if (!body && input._bodyInit != null) {
		        body = input._bodyInit;
		        input.bodyUsed = true;
		      }
		    } else {
		      this.url = String(input);
		    }

		    this.credentials = options.credentials || this.credentials || 'same-origin';
		    if (options.headers || !this.headers) {
		      this.headers = new Headers(options.headers);
		    }
		    this.method = normalizeMethod(options.method || this.method || 'GET');
		    this.mode = options.mode || this.mode || null;
		    this.signal = options.signal || this.signal;
		    this.referrer = null;

		    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
		      throw new TypeError('Body not allowed for GET or HEAD requests')
		    }
		    this._initBody(body);
		  }

		  Request.prototype.clone = function() {
		    return new Request(this, {body: this._bodyInit})
		  };

		  function decode(body) {
		    var form = new FormData();
		    body
		      .trim()
		      .split('&')
		      .forEach(function(bytes) {
		        if (bytes) {
		          var split = bytes.split('=');
		          var name = split.shift().replace(/\+/g, ' ');
		          var value = split.join('=').replace(/\+/g, ' ');
		          form.append(decodeURIComponent(name), decodeURIComponent(value));
		        }
		      });
		    return form
		  }

		  function parseHeaders(rawHeaders) {
		    var headers = new Headers();
		    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
		    // https://tools.ietf.org/html/rfc7230#section-3.2
		    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
		    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
		      var parts = line.split(':');
		      var key = parts.shift().trim();
		      if (key) {
		        var value = parts.join(':').trim();
		        headers.append(key, value);
		      }
		    });
		    return headers
		  }

		  Body.call(Request.prototype);

		  function Response(bodyInit, options) {
		    if (!options) {
		      options = {};
		    }

		    this.type = 'default';
		    this.status = options.status === undefined ? 200 : options.status;
		    this.ok = this.status >= 200 && this.status < 300;
		    this.statusText = 'statusText' in options ? options.statusText : 'OK';
		    this.headers = new Headers(options.headers);
		    this.url = options.url || '';
		    this._initBody(bodyInit);
		  }

		  Body.call(Response.prototype);

		  Response.prototype.clone = function() {
		    return new Response(this._bodyInit, {
		      status: this.status,
		      statusText: this.statusText,
		      headers: new Headers(this.headers),
		      url: this.url
		    })
		  };

		  Response.error = function() {
		    var response = new Response(null, {status: 0, statusText: ''});
		    response.type = 'error';
		    return response
		  };

		  var redirectStatuses = [301, 302, 303, 307, 308];

		  Response.redirect = function(url, status) {
		    if (redirectStatuses.indexOf(status) === -1) {
		      throw new RangeError('Invalid status code')
		    }

		    return new Response(null, {status: status, headers: {location: url}})
		  };

		  exports.DOMException = self.DOMException;
		  try {
		    new exports.DOMException();
		  } catch (err) {
		    exports.DOMException = function(message, name) {
		      this.message = message;
		      this.name = name;
		      var error = Error(message);
		      this.stack = error.stack;
		    };
		    exports.DOMException.prototype = Object.create(Error.prototype);
		    exports.DOMException.prototype.constructor = exports.DOMException;
		  }

		  function fetch(input, init) {
		    return new Promise(function(resolve, reject) {
		      var request = new Request(input, init);

		      if (request.signal && request.signal.aborted) {
		        return reject(new exports.DOMException('Aborted', 'AbortError'))
		      }

		      var xhr = new XMLHttpRequest();

		      function abortXhr() {
		        xhr.abort();
		      }

		      xhr.onload = function() {
		        var options = {
		          status: xhr.status,
		          statusText: xhr.statusText,
		          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
		        };
		        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
		        var body = 'response' in xhr ? xhr.response : xhr.responseText;
		        resolve(new Response(body, options));
		      };

		      xhr.onerror = function() {
		        reject(new TypeError('Network request failed'));
		      };

		      xhr.ontimeout = function() {
		        reject(new TypeError('Network request failed'));
		      };

		      xhr.onabort = function() {
		        reject(new exports.DOMException('Aborted', 'AbortError'));
		      };

		      xhr.open(request.method, request.url, true);

		      if (request.credentials === 'include') {
		        xhr.withCredentials = true;
		      } else if (request.credentials === 'omit') {
		        xhr.withCredentials = false;
		      }

		      if ('responseType' in xhr && support.blob) {
		        xhr.responseType = 'blob';
		      }

		      request.headers.forEach(function(value, name) {
		        xhr.setRequestHeader(name, value);
		      });

		      if (request.signal) {
		        request.signal.addEventListener('abort', abortXhr);

		        xhr.onreadystatechange = function() {
		          // DONE (success or failure)
		          if (xhr.readyState === 4) {
		            request.signal.removeEventListener('abort', abortXhr);
		          }
		        };
		      }

		      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
		    })
		  }

		  fetch.polyfill = true;

		  if (!self.fetch) {
		    self.fetch = fetch;
		    self.Headers = Headers;
		    self.Request = Request;
		    self.Response = Response;
		  }

		  exports.Headers = Headers;
		  exports.Request = Request;
		  exports.Response = Response;
		  exports.fetch = fetch;

		  Object.defineProperty(exports, '__esModule', { value: true });

		  return exports;

		}))({});
		})(__self__);
		__self__.fetch.ponyfill = true;
		// Remove "polyfill" property added by whatwg-fetch
		delete __self__.fetch.polyfill;
		// Choose between native implementation (global) or custom implementation (__self__)
		// var ctx = global.fetch ? global : __self__;
		var ctx = __self__; // this line disable service worker support temporarily
		exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
		exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
		exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
		exports.Headers = ctx.Headers;
		exports.Request = ctx.Request;
		exports.Response = ctx.Response;
		module.exports = exports;
	} (browserPonyfill, browserPonyfill.exports));

	var fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);

	// This is coupled with https://github.com/holochain/launcher/blob/develop/src-tauri/src/uis/caddy.rs#L13
	const LAUNCHER_ENV_URL = "/.launcher-env.json";
	async function fetchLauncherEnvironment() {
	    const env = await fetch(LAUNCHER_ENV_URL);
	    if (env.ok) {
	        const launcherEnvironment = await env.json();
	        return launcherEnvironment;
	    }
	    else {
	        // We are not in the launcher environment
	        if (env.status === 404) {
	            console.warn("[@holochain/conductor-api]: you are in a development environment. When this UI is run in the Holochain Launcher, `AppWebsocket.connect()`, `AdminWebsocket.connect()` and `appWebsocket.appInfo()` will have their parameters ignored and substituted by the ones provided by the Holochain Launcher.");
	            return undefined;
	        }
	        else {
	            throw new Error(`Error trying to fetch the launcher environment: ${env.statusText}`);
	        }
	    }
	}
	const isBrowser = typeof window !== "undefined";
	const isJest = typeof process !== "undefined" &&
	    process.env &&
	    process.env.JEST_WORKER_ID !== undefined;
	let promise;
	if (isBrowser && !isJest) {
	    promise = fetchLauncherEnvironment().catch(console.error);
	}
	async function getLauncherEnvironment() {
	    if (isBrowser) {
	        return promise;
	    }
	    else {
	        return undefined;
	    }
	}

	/**
	 * Defines AdminWebsocket, an easy-to-use websocket implementation of the
	 * Conductor Admin API
	 *
	 *    const client = AdminWebsocket.connect(
	 *      'ws://localhost:9000'
	 *    )
	 *
	 *    client.generateAgentPubKey()
	 *      .then(agentPubKey => {
	 *        console.log('Agent successfully generated:', agentPubKey)
	 *      })
	 *      .catch(err => {
	 *        console.error('problem generating agent:', err)
	 *      })
	 */
	class AdminWebsocket {
	    client;
	    defaultTimeout;
	    constructor(client, defaultTimeout) {
	        this.client = client;
	        this.defaultTimeout =
	            defaultTimeout === undefined ? DEFAULT_TIMEOUT : defaultTimeout;
	    }
	    static async connect(url, defaultTimeout) {
	        // Check if we are in the launcher's environment, and if so, redirect the url to connect to
	        const env = await getLauncherEnvironment();
	        if (env) {
	            url = `ws://localhost:${env.ADMIN_INTERFACE_PORT}`;
	        }
	        const wsClient = await WsClient.connect(url);
	        return new AdminWebsocket(wsClient, defaultTimeout);
	    }
	    _requester = (tag, transformer) => requesterTransformer((req, timeout) => promiseTimeout(this.client.request(req), tag, timeout || this.defaultTimeout).then(catchError), tag, transformer);
	    // the specific request/response types come from the Interface
	    // which this class implements
	    attachAppInterface = this._requester("attach_app_interface");
	    // Deprecated
	    activateApp = this._requester("activate_app");
	    // Deprecated
	    deactivateApp = this._requester("deactivate_app");
	    enableApp = this._requester("enable_app");
	    disableApp = this._requester("disable_app");
	    startApp = this._requester("start_app");
	    dumpState = this._requester("dump_state", dumpStateTransform);
	    dumpFullState = this._requester("dump_full_state");
	    generateAgentPubKey = this._requester("generate_agent_pub_key");
	    registerDna = this._requester("register_dna");
	    installApp = this._requester("install_app");
	    uninstallApp = this._requester("uninstall_app");
	    installAppBundle = this._requester("install_app_bundle");
	    createCloneCell = this._requester("create_clone_cell");
	    listDnas = this._requester("list_dnas");
	    listCellIds = this._requester("list_cell_ids");
	    // Deprecated
	    listActiveApps = this._requester("list_active_apps");
	    listApps = this._requester("list_apps", listAppsTransform);
	    listAppInterfaces = this._requester("list_app_interfaces");
	    requestAgentInfo = this._requester("request_agent_info");
	    addAgentInfo = this._requester("add_agent_info");
	}
	const listAppsTransform = {
	    input: (req) => {
	        const args = {};
	        if (req.status_filter) {
	            args.status_filter = getAppStatusInApiForm(req.status_filter);
	        }
	        return args;
	    },
	    output: (res) => res,
	};
	const dumpStateTransform = {
	    input: (req) => req,
	    output: (res) => {
	        return JSON.parse(res);
	    },
	};
	function getAppStatusInApiForm(status_filter) {
	    switch (status_filter) {
	        case AppStatusFilter.Running:
	            return {
	                Running: null,
	            };
	        case AppStatusFilter.Enabled:
	            return {
	                Enabled: null,
	            };
	        case AppStatusFilter.Paused:
	            return {
	                Paused: null,
	            };
	        case AppStatusFilter.Disabled:
	            return {
	                Disabled: null,
	            };
	        case AppStatusFilter.Stopped:
	            return {
	                Stopped: null,
	            };
	    }
	}

	var ActionType;
	(function (ActionType) {
	    ActionType["Dna"] = "Dna";
	    ActionType["AgentValidationPkg"] = "AgentValidationPkg";
	    ActionType["InitZomesComplete"] = "InitZomesComplete";
	    ActionType["CreateLink"] = "CreateLink";
	    ActionType["DeleteLink"] = "DeleteLink";
	    ActionType["OpenChain"] = "OpenChain";
	    ActionType["CloseChain"] = "CloseChain";
	    ActionType["Create"] = "Create";
	    ActionType["Update"] = "Update";
	    ActionType["Delete"] = "Delete";
	})(ActionType || (ActionType = {}));

	// https://github.com/holochain/holochain/blob/develop/crates/types/src/dht_op.rs
	var DhtOpType;
	(function (DhtOpType) {
	    DhtOpType["StoreRecord"] = "StoreRecord";
	    DhtOpType["StoreEntry"] = "StoreEntry";
	    DhtOpType["RegisterAgentActivity"] = "RegisterAgentActivity";
	    DhtOpType["RegisterUpdatedContent"] = "RegisterUpdatedContent";
	    DhtOpType["RegisterUpdatedRecord"] = "RegisterUpdatedRecord";
	    DhtOpType["RegisterDeletedBy"] = "RegisterDeletedBy";
	    DhtOpType["RegisterDeletedEntryAction"] = "RegisterDeletedEntryAction";
	    DhtOpType["RegisterAddLink"] = "RegisterAddLink";
	    DhtOpType["RegisterRemoveLink"] = "RegisterRemoveLink";
	})(DhtOpType || (DhtOpType = {}));

	const HOLO_SOCKET = 'ws://localhost:58623';
	const TIMEOUT = 3600;
	function SimpleContainer() {
	  const [loading, setLoading] = react.exports.useState(false);
	  const [connected, setConnected] = react.exports.useState(false);

	  const handleClick = () => {
	    setLoading(true); //
	  };

	  const pubKey = 'thisisapubkey';
	  react.exports.useEffect(() => {

	    (async () => {
	      try {
	        const admin = await AdminWebsocket.connect(HOLO_SOCKET, TIMEOUT);
	        await admin.generateAgentPubKey();
	        console.log({
	          admin
	        });
	      } catch (err) {
	        console.error(err);
	      }
	    })();
	  }, []);
	  return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(CssBaseline, null), /*#__PURE__*/react.exports.createElement(Container, {
	    maxWidth: "sm",
	    sx: {
	      textAlign: 'center',
	      minHeight: '300px'
	    }
	  }, /*#__PURE__*/react.exports.createElement(Box, {
	    sx: {
	      padding: '0.5rem'
	    }
	  }, /*#__PURE__*/react.exports.createElement(Typography, {
	    variant: "h5",
	    gutterBottom: true,
	    component: "div"
	  }, "Holochain"), connected && /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Typography, {
	    gutterBottom: true,
	    component: "div"
	  }, "Agent PubKey: ", pubKey)), /*#__PURE__*/react.exports.createElement(Button, {
	    variant: "outlined",
	    onClick: handleClick
	  }, loading ? 'Connecting..' : 'Connect'))));
	}

	ReactDOM.render( /*#__PURE__*/React.createElement(SimpleContainer, null), document.querySelector('#root'));

})();
//# sourceMappingURL=bundle.js.map
